
F411_OpenLogSD_Test_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cefc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800d0a0  0800d0a0  0001d0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d53c  0800d53c  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d53c  0800d53c  0001d53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d544  0800d544  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d544  0800d544  0001d544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d548  0800d548  0001d548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800d54c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d30  200002d0  0800d81c  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002000  0800d81c  00022000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194eb  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c49  00000000  00000000  000397eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0003d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acbb  00000000  00000000  0003fba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a36a  00000000  00000000  0005a85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937d8  00000000  00000000  00074bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010839d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000675c  00000000  00000000  001083f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d084 	.word	0x0800d084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800d084 	.word	0x0800d084

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f000 fd79 	bl	80019da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee8:	2011      	movs	r0, #17
 8000eea:	f000 fd92 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_GPIO_Init+0x9c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <MX_GPIO_Init+0xa0>)
 8000f6e:	f001 faf1 	bl	8002554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_GPIO_Init+0xa0>)
 8000f8c:	f001 f95e 	bl	800224c <HAL_GPIO_Init>

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020800 	.word	0x40020800

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09e      	sub	sp, #120	; 0x78
 8000fa4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f000 fba7 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f869 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f7ff ffa5 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb2:	f7ff ff83 	bl	8000ebc <MX_DMA_Init>
  MX_TIM4_Init();
 8000fb6:	f000 fa53 	bl	8001460 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000fba:	f000 fac7 	bl	800154c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000fbe:	f008 fbc3 	bl	8009748 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000fc2:	4829      	ldr	r0, [pc, #164]	; (8001068 <main+0xc8>)
 8000fc4:	f003 fa1e 	bl	8004404 <HAL_TIM_Base_Start_IT>
  HAL_Delay(5000);
 8000fc8:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fcc:	f000 fc06 	bl	80017dc <HAL_Delay>

  HAL_UART_Receive(&huart2, &recv, 1, 100);
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4925      	ldr	r1, [pc, #148]	; (800106c <main+0xcc>)
 8000fd6:	4826      	ldr	r0, [pc, #152]	; (8001070 <main+0xd0>)
 8000fd8:	f003 fe57 	bl	8004c8a <HAL_UART_Receive>
  HAL_UART_Transmit_DMA(&huart2, tele_header, sizeof(tele_header));
 8000fdc:	2212      	movs	r2, #18
 8000fde:	4925      	ldr	r1, [pc, #148]	; (8001074 <main+0xd4>)
 8000fe0:	4823      	ldr	r0, [pc, #140]	; (8001070 <main+0xd0>)
 8000fe2:	f003 fef5 	bl	8004dd0 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive(&huart2, &recv, 1, 100);
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4920      	ldr	r1, [pc, #128]	; (800106c <main+0xcc>)
 8000fec:	4820      	ldr	r0, [pc, #128]	; (8001070 <main+0xd0>)
 8000fee:	f003 fe4c 	bl	8004c8a <HAL_UART_Receive>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(SD_LOG_RDY){
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <main+0xd8>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0fa      	beq.n	8000ff2 <main+0x52>

			char s[100] = {0};
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2260      	movs	r2, #96	; 0x60
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f009 f8d8 	bl	800a1bc <memset>
			sprintf(s, "%ld,%.2f,%.2f\n", HAL_GetTick(), 12.234f, 32.516f);
 800100c:	f000 fbda 	bl	80017c4 <HAL_GetTick>
 8001010:	4601      	mov	r1, r0
 8001012:	4638      	mov	r0, r7
 8001014:	a310      	add	r3, pc, #64	; (adr r3, 8001058 <main+0xb8>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800101e:	a310      	add	r3, pc, #64	; (adr r3, 8001060 <main+0xc0>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	e9cd 2300 	strd	r2, r3, [sp]
 8001028:	460a      	mov	r2, r1
 800102a:	4914      	ldr	r1, [pc, #80]	; (800107c <main+0xdc>)
 800102c:	f009 fd66 	bl	800aafc <siprintf>
			uint8_t len = strlen(s);
 8001030:	463b      	mov	r3, r7
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f8d4 	bl	80001e0 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			HAL_UART_Transmit_DMA(&huart2, (const uint8_t*) s, len);
 800103e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001042:	b29a      	uxth	r2, r3
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <main+0xd0>)
 800104a:	f003 fec1 	bl	8004dd0 <HAL_UART_Transmit_DMA>

			SD_LOG_RDY = 0;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <main+0xd8>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
		if(SD_LOG_RDY){
 8001054:	e7cd      	b.n	8000ff2 <main+0x52>
 8001056:	bf00      	nop
 8001058:	40000000 	.word	0x40000000
 800105c:	4040420c 	.word	0x4040420c
 8001060:	e0000000 	.word	0xe0000000
 8001064:	402877ce 	.word	0x402877ce
 8001068:	200002f4 	.word	0x200002f4
 800106c:	20000000 	.word	0x20000000
 8001070:	2000033c 	.word	0x2000033c
 8001074:	0800d130 	.word	0x0800d130
 8001078:	200002ec 	.word	0x200002ec
 800107c:	0800d0a0 	.word	0x0800d0a0

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f009 f894 	bl	800a1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <SystemClock_Config+0xc8>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <SystemClock_Config+0xc8>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <SystemClock_Config+0xc8>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <SystemClock_Config+0xcc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a20      	ldr	r2, [pc, #128]	; (800114c <SystemClock_Config+0xcc>)
 80010ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <SystemClock_Config+0xcc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010f0:	2319      	movs	r3, #25
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fcd5 	bl	8003ab4 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001110:	f000 f86a 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2103      	movs	r1, #3
 8001130:	4618      	mov	r0, r3
 8001132:	f002 ff37 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800113c:	f000 f854 	bl	80011e8 <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	; 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS( (uint8_t*) ptr, len);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4619      	mov	r1, r3
 8001162:	68b8      	ldr	r0, [r7, #8]
 8001164:	f008 fbae 	bl	80098c4 <CDC_Transmit_FS>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_write+0x40>)
 800116e:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_write+0x40>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d0f1      	beq.n	800115c <_write+0xc>

    if (USBD_FAIL == rc) {
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <_write+0x40>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d101      	bne.n	8001184 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	e000      	b.n	8001186 <_write+0x36>
    }
    return len;
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200002ed 	.word	0x200002ed

08001194 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]


  if (htim == &htim4 ){
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d114      	bne.n	80011ce <HAL_TIM_PeriodElapsedCallback+0x3a>
	  static uint8_t Counter_10ms = 1;
	  if (Counter_10ms == 50) {
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b32      	cmp	r3, #50	; 0x32
 80011aa:	d10a      	bne.n	80011c2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80011ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80011b2:	f001 f9e8 	bl	8002586 <HAL_GPIO_TogglePin>
		  SD_LOG_RDY = 1;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
		  Counter_10ms = 0;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
	  }


	  Counter_10ms++;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3301      	adds	r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80011cc:	701a      	strb	r2, [r3, #0]

  }
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002f4 	.word	0x200002f4
 80011dc:	20000001 	.word	0x20000001
 80011e0:	40020800 	.word	0x40020800
 80011e4:	200002ec 	.word	0x200002ec

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <Error_Handler+0x8>
	...

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_MspInit+0x4c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 fa84 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <DMA1_Stream6_IRQHandler+0x10>)
 800129e:	f000 fd6b 	bl	8001d78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000380 	.word	0x20000380

080012ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM4_IRQHandler+0x10>)
 80012b2:	f003 f909 	bl	80044c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200002f4 	.word	0x200002f4

080012c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USART2_IRQHandler+0x10>)
 80012c6:	f003 fe01 	bl	8004ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000033c 	.word	0x2000033c

080012d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <OTG_FS_IRQHandler+0x10>)
 80012da:	f001 fabe 	bl	800285a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200018c4 	.word	0x200018c4

080012e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_kill>:

int _kill(int pid, int sig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001302:	f008 ff31 	bl	800a168 <__errno>
 8001306:	4603      	mov	r3, r0
 8001308:	2216      	movs	r2, #22
 800130a:	601a      	str	r2, [r3, #0]
	return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_exit>:

void _exit (int status)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffe7 	bl	80012f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800132a:	e7fe      	b.n	800132a <_exit+0x12>

0800132c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e00a      	b.n	8001354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800133e:	f3af 8000 	nop.w
 8001342:	4601      	mov	r1, r0
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	b2ca      	uxtb	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf0      	blt.n	800133e <_read+0x12>
	}

return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138e:	605a      	str	r2, [r3, #4]
	return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <_isatty>:

int _isatty(int file)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	return 0;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <_sbrk+0x5c>)
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <_sbrk+0x60>)
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <_sbrk+0x64>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <_sbrk+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d207      	bcs.n	8001410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001400:	f008 feb2 	bl	800a168 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	220c      	movs	r2, #12
 8001408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e009      	b.n	8001424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <_sbrk+0x64>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_sbrk+0x64>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x64>)
 8001420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20020000 	.word	0x20020000
 8001430:	00000400 	.word	0x00000400
 8001434:	200002f0 	.word	0x200002f0
 8001438:	20002000 	.word	0x20002000

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_TIM4_Init+0x94>)
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <MX_TIM4_Init+0x98>)
 8001480:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 959;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_TIM4_Init+0x94>)
 8001484:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001488:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM4_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM4_Init+0x94>)
 8001492:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001496:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_TIM4_Init+0x94>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM4_Init+0x94>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_TIM4_Init+0x94>)
 80014a6:	f002 ff5d 	bl	8004364 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80014b0:	f7ff fe9a 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_TIM4_Init+0x94>)
 80014c2:	f003 f909 	bl	80046d8 <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80014cc:	f7ff fe8c 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_TIM4_Init+0x94>)
 80014de:	f003 fb05 	bl	8004aec <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80014e8:	f7ff fe7e 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002f4 	.word	0x200002f4
 80014f8:	40000800 	.word	0x40000800

080014fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <HAL_TIM_Base_MspInit+0x48>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d115      	bne.n	800153a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b0d      	ldr	r3, [pc, #52]	; (8001548 <HAL_TIM_Base_MspInit+0x4c>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <HAL_TIM_Base_MspInit+0x4c>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	201e      	movs	r0, #30
 8001530:	f000 fa53 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001534:	201e      	movs	r0, #30
 8001536:	f000 fa6c 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40000800 	.word	0x40000800
 8001548:	40023800 	.word	0x40023800

0800154c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_USART2_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USART2_UART_Init+0x4c>)
 8001584:	f003 fb34 	bl	8004bf0 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800158e:	f7ff fe2b 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000033c 	.word	0x2000033c
 800159c:	40004400 	.word	0x40004400

080015a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a34      	ldr	r2, [pc, #208]	; (8001690 <HAL_UART_MspInit+0xf0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d161      	bne.n	8001686 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <HAL_UART_MspInit+0xf4>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a32      	ldr	r2, [pc, #200]	; (8001694 <HAL_UART_MspInit+0xf4>)
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b30      	ldr	r3, [pc, #192]	; (8001694 <HAL_UART_MspInit+0xf4>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_UART_MspInit+0xf4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <HAL_UART_MspInit+0xf4>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b29      	ldr	r3, [pc, #164]	; (8001694 <HAL_UART_MspInit+0xf4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015fa:	230c      	movs	r3, #12
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160a:	2307      	movs	r3, #7
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4820      	ldr	r0, [pc, #128]	; (8001698 <HAL_UART_MspInit+0xf8>)
 8001616:	f000 fe19 	bl	800224c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_UART_MspInit+0xfc>)
 800161c:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_UART_MspInit+0x100>)
 800161e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_UART_MspInit+0xfc>)
 8001622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001626:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_UART_MspInit+0xfc>)
 800162a:	2240      	movs	r2, #64	; 0x40
 800162c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_UART_MspInit+0xfc>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_UART_MspInit+0xfc>)
 8001636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_UART_MspInit+0xfc>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_UART_MspInit+0xfc>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_UART_MspInit+0xfc>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_UART_MspInit+0xfc>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_UART_MspInit+0xfc>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800165a:	4810      	ldr	r0, [pc, #64]	; (800169c <HAL_UART_MspInit+0xfc>)
 800165c:	f000 f9f4 	bl	8001a48 <HAL_DMA_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001666:	f7ff fdbf 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_UART_MspInit+0xfc>)
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_UART_MspInit+0xfc>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2026      	movs	r0, #38	; 0x26
 800167c:	f000 f9ad 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001680:	2026      	movs	r0, #38	; 0x26
 8001682:	f000 f9c6 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40004400 	.word	0x40004400
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000
 800169c:	20000380 	.word	0x20000380
 80016a0:	400260a0 	.word	0x400260a0

080016a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a8:	480d      	ldr	r0, [pc, #52]	; (80016e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016aa:	490e      	ldr	r1, [pc, #56]	; (80016e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016ac:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c0:	4c0b      	ldr	r4, [pc, #44]	; (80016f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ce:	f7ff feb5 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016d2:	f008 fd4f 	bl	800a174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016d6:	f7ff fc63 	bl	8000fa0 <main>
  bx  lr    
 80016da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e4:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80016e8:	0800d54c 	.word	0x0800d54c
  ldr r2, =_sbss
 80016ec:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80016f0:	20002000 	.word	0x20002000

080016f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f4:	e7fe      	b.n	80016f4 <ADC_IRQHandler>
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016fc:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <HAL_Init+0x40>)
 8001702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_Init+0x40>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_Init+0x40>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f94f 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	200f      	movs	r0, #15
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fd62 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023c00 	.word	0x40023c00

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f967 	bl	8001a2e <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f92f 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	; (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000004 	.word	0x20000004
 8001794:	2000000c 	.word	0x2000000c
 8001798:	20000008 	.word	0x20000008

0800179c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x20>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_IncTick+0x24>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_IncTick+0x24>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	200003e0 	.word	0x200003e0

080017c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return uwTick;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_GetTick+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200003e0 	.word	0x200003e0

080017dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff ffee 	bl	80017c4 <HAL_GetTick>
 80017e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d005      	beq.n	8001802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_Delay+0x44>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001802:	bf00      	nop
 8001804:	f7ff ffde 	bl	80017c4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d8f7      	bhi.n	8001804 <HAL_Delay+0x28>
  {
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000000c 	.word	0x2000000c

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <__NVIC_EnableIRQ+0x38>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff29 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff3e 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff31 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff feb6 	bl	80017c4 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e099      	b.n	8001b98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a84:	e00f      	b.n	8001aa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a86:	f7ff fe9d 	bl	80017c4 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d908      	bls.n	8001aa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e078      	b.n	8001b98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e8      	bne.n	8001a86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_DMA_Init+0x158>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d107      	bne.n	8001b10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f023 0307 	bic.w	r3, r3, #7
 8001b26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d117      	bne.n	8001b6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00e      	beq.n	8001b6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb01 	bl	8002154 <DMA_CheckFifoParam>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2240      	movs	r2, #64	; 0x40
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b66:	2301      	movs	r3, #1
 8001b68:	e016      	b.n	8001b98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 fab8 	bl	80020e8 <DMA_CalcBaseAndBitshift>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b80:	223f      	movs	r2, #63	; 0x3f
 8001b82:	409a      	lsls	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	f010803f 	.word	0xf010803f

08001ba4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_DMA_Start_IT+0x26>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e040      	b.n	8001c4c <HAL_DMA_Start_IT+0xa8>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d12f      	bne.n	8001c3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fa4a 	bl	800208c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	223f      	movs	r2, #63	; 0x3f
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0216 	orr.w	r2, r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0208 	orr.w	r2, r2, #8
 8001c2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	e005      	b.n	8001c4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
 8001c48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c62:	f7ff fdaf 	bl	80017c4 <HAL_GetTick>
 8001c66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d008      	beq.n	8001c86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e052      	b.n	8001d2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0216 	bic.w	r2, r2, #22
 8001c94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <HAL_DMA_Abort+0x62>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0208 	bic.w	r2, r2, #8
 8001cc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd6:	e013      	b.n	8001d00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd8:	f7ff fd74 	bl	80017c4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b05      	cmp	r3, #5
 8001ce4:	d90c      	bls.n	8001d00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e015      	b.n	8001d2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e4      	bne.n	8001cd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d12:	223f      	movs	r2, #63	; 0x3f
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00c      	b.n	8001d6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2205      	movs	r2, #5
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0201 	bic.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d84:	4b8e      	ldr	r3, [pc, #568]	; (8001fc0 <HAL_DMA_IRQHandler+0x248>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a8e      	ldr	r2, [pc, #568]	; (8001fc4 <HAL_DMA_IRQHandler+0x24c>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2208      	movs	r2, #8
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01a      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0204 	bic.w	r2, r2, #4
 8001dca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	2201      	movs	r2, #1
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d012      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	2201      	movs	r2, #1
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2204      	movs	r2, #4
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00b      	beq.n	8001e50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2210      	movs	r2, #16
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d043      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03c      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2210      	movs	r2, #16
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d018      	beq.n	8001eba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d108      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d024      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
 8001ea6:	e01f      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e016      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d107      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0208 	bic.w	r2, r2, #8
 8001ed6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	2220      	movs	r2, #32
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 808f 	beq.w	8002018 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8087 	beq.w	8002018 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2220      	movs	r2, #32
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d136      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0216 	bic.w	r2, r2, #22
 8001f30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <HAL_DMA_IRQHandler+0x1da>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0208 	bic.w	r2, r2, #8
 8001f60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	223f      	movs	r2, #63	; 0x3f
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d07e      	beq.n	8002084 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
        }
        return;
 8001f8e:	e079      	b.n	8002084 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01d      	beq.n	8001fda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d031      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
 8001fbc:	e02c      	b.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
 8001fbe:	bf00      	nop
 8001fc0:	20000004 	.word	0x20000004
 8001fc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d023      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
 8001fd8:	e01e      	b.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0210 	bic.w	r2, r2, #16
 8001ff6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d022      	beq.n	8002072 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2205      	movs	r2, #5
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3301      	adds	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	d307      	bcc.n	8002060 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f2      	bne.n	8002044 <HAL_DMA_IRQHandler+0x2cc>
 800205e:	e000      	b.n	8002062 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002060:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e000      	b.n	8002086 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002084:	bf00      	nop
    }
  }
}
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d108      	bne.n	80020cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020ca:	e007      	b.n	80020dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3b10      	subs	r3, #16
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <DMA_CalcBaseAndBitshift+0x64>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <DMA_CalcBaseAndBitshift+0x68>)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d909      	bls.n	800212a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800211e:	f023 0303 	bic.w	r3, r3, #3
 8002122:	1d1a      	adds	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	659a      	str	r2, [r3, #88]	; 0x58
 8002128:	e007      	b.n	800213a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	aaaaaaab 	.word	0xaaaaaaab
 8002150:	0800d15c 	.word	0x0800d15c

08002154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d11f      	bne.n	80021ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d856      	bhi.n	8002222 <DMA_CheckFifoParam+0xce>
 8002174:	a201      	add	r2, pc, #4	; (adr r2, 800217c <DMA_CheckFifoParam+0x28>)
 8002176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217a:	bf00      	nop
 800217c:	0800218d 	.word	0x0800218d
 8002180:	0800219f 	.word	0x0800219f
 8002184:	0800218d 	.word	0x0800218d
 8002188:	08002223 	.word	0x08002223
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d046      	beq.n	8002226 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219c:	e043      	b.n	8002226 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021a6:	d140      	bne.n	800222a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ac:	e03d      	b.n	800222a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b6:	d121      	bne.n	80021fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d837      	bhi.n	800222e <DMA_CheckFifoParam+0xda>
 80021be:	a201      	add	r2, pc, #4	; (adr r2, 80021c4 <DMA_CheckFifoParam+0x70>)
 80021c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c4:	080021d5 	.word	0x080021d5
 80021c8:	080021db 	.word	0x080021db
 80021cc:	080021d5 	.word	0x080021d5
 80021d0:	080021ed 	.word	0x080021ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      break;
 80021d8:	e030      	b.n	800223c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d025      	beq.n	8002232 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ea:	e022      	b.n	8002232 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021f4:	d11f      	bne.n	8002236 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021fa:	e01c      	b.n	8002236 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d903      	bls.n	800220a <DMA_CheckFifoParam+0xb6>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d003      	beq.n	8002210 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002208:	e018      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      break;
 800220e:	e015      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00e      	beq.n	800223a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      break;
 8002220:	e00b      	b.n	800223a <DMA_CheckFifoParam+0xe6>
      break;
 8002222:	bf00      	nop
 8002224:	e00a      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e008      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e006      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 800222e:	bf00      	nop
 8002230:	e004      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
 8002234:	e002      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;   
 8002236:	bf00      	nop
 8002238:	e000      	b.n	800223c <DMA_CheckFifoParam+0xe8>
      break;
 800223a:	bf00      	nop
    }
  } 
  
  return status; 
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e159      	b.n	800251c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 8148 	bne.w	8002516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	2b02      	cmp	r3, #2
 800229c:	d130      	bne.n	8002300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0201 	and.w	r2, r3, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d017      	beq.n	800233c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d123      	bne.n	8002390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a2 	beq.w	8002516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ee:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a49      	ldr	r2, [pc, #292]	; (800253c <HAL_GPIO_Init+0x2f0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0x202>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_GPIO_Init+0x2f4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0x1fe>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_GPIO_Init+0x2f8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00d      	beq.n	8002446 <HAL_GPIO_Init+0x1fa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a46      	ldr	r2, [pc, #280]	; (8002548 <HAL_GPIO_Init+0x2fc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x1f6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a45      	ldr	r2, [pc, #276]	; (800254c <HAL_GPIO_Init+0x300>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_Init+0x1f2>
 800243a:	2304      	movs	r3, #4
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800243e:	2307      	movs	r3, #7
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a2f      	ldr	r2, [pc, #188]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_GPIO_Init+0x304>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f aea2 	bls.w	8002268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002586:	b480      	push	{r7}
 8002588:	b085      	sub	sp, #20
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002598:	887a      	ldrh	r2, [r7, #2]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4013      	ands	r3, r2
 800259e:	041a      	lsls	r2, r3, #16
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43d9      	mvns	r1, r3
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	400b      	ands	r3, r1
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025bc:	b08f      	sub	sp, #60	; 0x3c
 80025be:	af0a      	add	r7, sp, #40	; 0x28
 80025c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e10f      	b.n	80027ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f007 fab4 	bl	8009b54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2203      	movs	r2, #3
 80025f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fd7f 	bl	800610e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	687e      	ldr	r6, [r7, #4]
 8002618:	466d      	mov	r5, sp
 800261a:	f106 0410 	add.w	r4, r6, #16
 800261e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800262a:	e885 0003 	stmia.w	r5, {r0, r1}
 800262e:	1d33      	adds	r3, r6, #4
 8002630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002632:	6838      	ldr	r0, [r7, #0]
 8002634:	f003 fc56 	bl	8005ee4 <USB_CoreInit>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0d0      	b.n	80027ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fd6d 	bl	8006130 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e04a      	b.n	80026f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	333d      	adds	r3, #61	; 0x3d
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	333c      	adds	r3, #60	; 0x3c
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	b298      	uxth	r0, r3
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3344      	adds	r3, #68	; 0x44
 8002698:	4602      	mov	r2, r0
 800269a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3340      	adds	r3, #64	; 0x40
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3348      	adds	r3, #72	; 0x48
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	334c      	adds	r3, #76	; 0x4c
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	3354      	adds	r3, #84	; 0x54
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	3301      	adds	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d3af      	bcc.n	800265c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e044      	b.n	800278c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3301      	adds	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	d3b5      	bcc.n	8002702 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	687e      	ldr	r6, [r7, #4]
 800279e:	466d      	mov	r5, sp
 80027a0:	f106 0410 	add.w	r4, r6, #16
 80027a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027b4:	1d33      	adds	r3, r6, #4
 80027b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b8:	6838      	ldr	r0, [r7, #0]
 80027ba:	f003 fd05 	bl	80061c8 <USB_DevInit>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e00d      	b.n	80027ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 fe54 	bl	8007492 <USB_DevDisconnect>

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_PCD_Start+0x1c>
 800280c:	2302      	movs	r3, #2
 800280e:	e020      	b.n	8002852 <HAL_PCD_Start+0x5e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	2b01      	cmp	r3, #1
 800281e:	d109      	bne.n	8002834 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002824:	2b01      	cmp	r3, #1
 8002826:	d005      	beq.n	8002834 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fc57 	bl	80060ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fe04 	bl	8007450 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800285a:	b590      	push	{r4, r7, lr}
 800285c:	b08d      	sub	sp, #52	; 0x34
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fec2 	bl	80075fa <USB_GetMode>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 848a 	bne.w	8003192 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f004 fe26 	bl	80074d4 <USB_ReadInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8480 	beq.w	8003190 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 fe13 	bl	80074d4 <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d107      	bne.n	80028c8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f002 0202 	and.w	r2, r2, #2
 80028c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 fe01 	bl	80074d4 <USB_ReadInterrupts>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d161      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0210 	bic.w	r2, r2, #16
 80028ea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	0c5b      	lsrs	r3, r3, #17
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	2b02      	cmp	r3, #2
 8002916:	d124      	bne.n	8002962 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d035      	beq.n	8002990 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800292e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6a38      	ldr	r0, [r7, #32]
 8002938:	f004 fc38 	bl	80071ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002948:	441a      	add	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800295a:	441a      	add	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	621a      	str	r2, [r3, #32]
 8002960:	e016      	b.n	8002990 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	0c5b      	lsrs	r3, r3, #17
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	2b06      	cmp	r3, #6
 800296c:	d110      	bne.n	8002990 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002974:	2208      	movs	r2, #8
 8002976:	4619      	mov	r1, r3
 8002978:	6a38      	ldr	r0, [r7, #32]
 800297a:	f004 fc17 	bl	80071ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	6a1a      	ldr	r2, [r3, #32]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298a:	441a      	add	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0210 	orr.w	r2, r2, #16
 800299e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 fd95 	bl	80074d4 <USB_ReadInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029b4:	f040 80a7 	bne.w	8002b06 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fd9a 	bl	80074fa <USB_ReadDevAllOutEpInterrupt>
 80029c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80029c8:	e099      	b.n	8002afe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 808e 	beq.w	8002af2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f004 fdbe 	bl	8007562 <USB_ReadDevOutEPInterrupt>
 80029e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fe:	461a      	mov	r2, r3
 8002a00:	2301      	movs	r3, #1
 8002a02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fec2 	bl	8003790 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a22:	461a      	mov	r2, r3
 8002a24:	2308      	movs	r3, #8
 8002a26:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 ff98 	bl	8003960 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	461a      	mov	r2, r3
 8002a48:	2310      	movs	r3, #16
 8002a4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d030      	beq.n	8002ab8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b80      	cmp	r3, #128	; 0x80
 8002a60:	d109      	bne.n	8002a76 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a74:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	3304      	adds	r3, #4
 8002a8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d108      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2200      	movs	r2, #0
 8002a98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f007 f953 	bl	8009d4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d008      	beq.n	8002ad4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	015a      	lsls	r2, r3, #5
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ace:	461a      	mov	r2, r3
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aea:	461a      	mov	r2, r3
 8002aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	3301      	adds	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f47f af62 	bne.w	80029ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 fce2 	bl	80074d4 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b1a:	f040 80db 	bne.w	8002cd4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 fd03 	bl	800752e <USB_ReadDevAllInEpInterrupt>
 8002b28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b2e:	e0cd      	b.n	8002ccc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 80c2 	beq.w	8002cc0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 fd29 	bl	800759e <USB_ReadDevInEPInterrupt>
 8002b4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d057      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	2201      	movs	r2, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69f9      	ldr	r1, [r7, #28]
 8002b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b78:	4013      	ands	r3, r2
 8002b7a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d132      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	334c      	adds	r3, #76	; 0x4c
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4403      	add	r3, r0
 8002bb6:	3348      	adds	r3, #72	; 0x48
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4419      	add	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4403      	add	r3, r0
 8002bca:	334c      	adds	r3, #76	; 0x4c
 8002bcc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d113      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x3a2>
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3354      	adds	r3, #84	; 0x54
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	f004 fd30 	bl	800765c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f007 f827 	bl	8009c56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2308      	movs	r3, #8
 8002c22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c56:	461a      	mov	r2, r3
 8002c58:	2340      	movs	r3, #64	; 0x40
 8002c5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d023      	beq.n	8002cae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c68:	6a38      	ldr	r0, [r7, #32]
 8002c6a:	f003 fc11 	bl	8006490 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3338      	adds	r3, #56	; 0x38
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	78db      	ldrb	r3, [r3, #3]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d108      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f007 f86a 	bl	8009d70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2302      	movs	r3, #2
 8002cac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fcdb 	bl	8003676 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	085b      	lsrs	r3, r3, #1
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f47f af2e 	bne.w	8002b30 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f004 fbfb 	bl	80074d4 <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ce8:	d122      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d108      	bne.n	8002d1a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d10:	2100      	movs	r1, #0
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fec2 	bl	8003a9c <HAL_PCDEx_LPM_Callback>
 8002d18:	e002      	b.n	8002d20 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f007 f808 	bl	8009d30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 fbcd 	bl	80074d4 <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d44:	d112      	bne.n	8002d6c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d102      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f006 ffc4 	bl	8009ce4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d6a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f004 fbaf 	bl	80074d4 <USB_ReadInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	f040 80b7 	bne.w	8002ef2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fb76 	bl	8006490 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002da8:	e046      	b.n	8002e38 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db6:	461a      	mov	r2, r3
 8002db8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002dbc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dce:	0151      	lsls	r1, r2, #5
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	440a      	add	r2, r1
 8002dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ddc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002df0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e22:	0151      	lsls	r1, r2, #5
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	440a      	add	r2, r1
 8002e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	3301      	adds	r3, #1
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d3b3      	bcc.n	8002daa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002e54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6e:	f043 030b 	orr.w	r3, r3, #11
 8002e72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e84:	f043 030b 	orr.w	r3, r3, #11
 8002e88:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8a:	e015      	b.n	8002eb8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ea2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eb2:	f043 030b 	orr.w	r3, r3, #11
 8002eb6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ec6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002eca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002edc:	461a      	mov	r2, r3
 8002ede:	f004 fbbd 	bl	800765c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 faec 	bl	80074d4 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f06:	d124      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f004 fb82 	bl	8007616 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fb37 	bl	800658a <USB_GetDevSpeed>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	f001 f9e8 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8002f2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	4620      	mov	r0, r4
 8002f38:	f003 f836 	bl	8005fa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f006 feb2 	bl	8009ca6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f004 fabc 	bl	80074d4 <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d10a      	bne.n	8002f7c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f006 fe8f 	bl	8009c8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f002 0208 	and.w	r2, r2, #8
 8002f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 faa7 	bl	80074d4 <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d122      	bne.n	8002fd6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa0:	e014      	b.n	8002fcc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d105      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fb27 	bl	8003614 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	3301      	adds	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3e5      	bcc.n	8002fa2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fa7a 	bl	80074d4 <USB_ReadInterrupts>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fea:	d13b      	bne.n	8003064 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fec:	2301      	movs	r3, #1
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	e02b      	b.n	800304a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	3340      	adds	r3, #64	; 0x40
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d115      	bne.n	8003044 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003018:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	da12      	bge.n	8003044 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	333f      	adds	r3, #63	; 0x3f
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800303a:	b2db      	uxtb	r3, r3
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fae8 	bl	8003614 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	3301      	adds	r3, #1
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	429a      	cmp	r2, r3
 8003052:	d3ce      	bcc.n	8002ff2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f004 fa33 	bl	80074d4 <USB_ReadInterrupts>
 800306e:	4603      	mov	r3, r0
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003078:	d155      	bne.n	8003126 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800307a:	2301      	movs	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	e045      	b.n	800310c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d12e      	bne.n	8003106 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	da2b      	bge.n	8003106 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80030ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030be:	429a      	cmp	r2, r3
 80030c0:	d121      	bne.n	8003106 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003102:	6053      	str	r3, [r2, #4]
            break;
 8003104:	e007      	b.n	8003116 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	3301      	adds	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	429a      	cmp	r2, r3
 8003114:	d3b4      	bcc.n	8003080 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f004 f9d2 	bl	80074d4 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d10a      	bne.n	8003152 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f006 fe29 	bl	8009d94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f004 f9bc 	bl	80074d4 <USB_ReadInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b04      	cmp	r3, #4
 8003164:	d115      	bne.n	8003192 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f006 fe19 	bl	8009db0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	e000      	b.n	8003192 <HAL_PCD_IRQHandler+0x938>
      return;
 8003190:	bf00      	nop
    }
  }
}
 8003192:	3734      	adds	r7, #52	; 0x34
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_PCD_SetAddress+0x1a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e013      	b.n	80031da <HAL_PCD_SetAddress+0x42>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f004 f91a 	bl	8007404 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	4608      	mov	r0, r1
 80031ec:	4611      	mov	r1, r2
 80031ee:	461a      	mov	r2, r3
 80031f0:	4603      	mov	r3, r0
 80031f2:	70fb      	strb	r3, [r7, #3]
 80031f4:	460b      	mov	r3, r1
 80031f6:	803b      	strh	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003204:	2b00      	cmp	r3, #0
 8003206:	da0f      	bge.n	8003228 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	3338      	adds	r3, #56	; 0x38
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	3304      	adds	r3, #4
 800321e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	705a      	strb	r2, [r3, #1]
 8003226:	e00f      	b.n	8003248 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003254:	883a      	ldrh	r2, [r7, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	78ba      	ldrb	r2, [r7, #2]
 800325e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003272:	78bb      	ldrb	r3, [r7, #2]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d102      	bne.n	800327e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_PCD_EP_Open+0xaa>
 8003288:	2302      	movs	r3, #2
 800328a:	e00e      	b.n	80032aa <HAL_PCD_EP_Open+0xc8>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	4618      	mov	r0, r3
 800329c:	f003 f99a 	bl	80065d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80032a8:	7afb      	ldrb	r3, [r7, #11]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da0f      	bge.n	80032e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f003 020f 	and.w	r2, r3, #15
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	3338      	adds	r3, #56	; 0x38
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	705a      	strb	r2, [r3, #1]
 80032e4:	e00f      	b.n	8003306 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_PCD_EP_Close+0x6e>
 800331c:	2302      	movs	r3, #2
 800331e:	e00e      	b.n	800333e <HAL_PCD_EP_Close+0x8c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	4618      	mov	r0, r3
 8003330:	f003 f9d8 	bl	80066e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	460b      	mov	r3, r1
 8003354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003356:	7afb      	ldrb	r3, [r7, #11]
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	3304      	adds	r3, #4
 800336e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2200      	movs	r2, #0
 8003380:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	b2da      	uxtb	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d102      	bne.n	80033a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a2:	7afb      	ldrb	r3, [r7, #11]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d109      	bne.n	80033c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	6979      	ldr	r1, [r7, #20]
 80033ba:	f003 fcb7 	bl	8006d2c <USB_EP0StartXfer>
 80033be:	e008      	b.n	80033d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	6979      	ldr	r1, [r7, #20]
 80033ce:	f003 fa65 	bl	800689c <USB_EPStartXfer>
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 020f 	and.w	r2, r3, #15
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	460b      	mov	r3, r1
 800341a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341c:	7afb      	ldrb	r3, [r7, #11]
 800341e:	f003 020f 	and.w	r2, r3, #15
 8003422:	4613      	mov	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	3338      	adds	r3, #56	; 0x38
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	3304      	adds	r3, #4
 8003432:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2201      	movs	r2, #1
 800344a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800344c:	7afb      	ldrb	r3, [r7, #11]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	b2da      	uxtb	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d102      	bne.n	8003466 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	f003 fc55 	bl	8006d2c <USB_EP0StartXfer>
 8003482:	e008      	b.n	8003496 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	f003 fa03 	bl	800689c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d901      	bls.n	80034be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e050      	b.n	8003560 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da0f      	bge.n	80034e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	3338      	adds	r3, #56	; 0x38
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	705a      	strb	r2, [r3, #1]
 80034e4:	e00d      	b.n	8003502 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_PCD_EP_SetStall+0x82>
 800351e:	2302      	movs	r3, #2
 8003520:	e01e      	b.n	8003560 <HAL_PCD_EP_SetStall+0xc0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fe93 	bl	800725c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	b2d9      	uxtb	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003550:	461a      	mov	r2, r3
 8003552:	f004 f883 	bl	800765c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	f003 020f 	and.w	r2, r3, #15
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d901      	bls.n	8003586 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e042      	b.n	800360c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800358a:	2b00      	cmp	r3, #0
 800358c:	da0f      	bge.n	80035ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	f003 020f 	and.w	r2, r3, #15
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	3338      	adds	r3, #56	; 0x38
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	3304      	adds	r3, #4
 80035a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	705a      	strb	r2, [r3, #1]
 80035ac:	e00f      	b.n	80035ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_PCD_EP_ClrStall+0x86>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e00e      	b.n	800360c <HAL_PCD_EP_ClrStall+0xa4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 fe9b 	bl	8007338 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003624:	2b00      	cmp	r3, #0
 8003626:	da0c      	bge.n	8003642 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	3338      	adds	r3, #56	; 0x38
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	e00c      	b.n	800365c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	3304      	adds	r3, #4
 800365a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	4618      	mov	r0, r3
 8003664:	f003 fcba 	bl	8006fdc <USB_EPStopXfer>
 8003668:	4603      	mov	r3, r0
 800366a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800366c:	7afb      	ldrb	r3, [r7, #11]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	; 0x28
 800367a:	af02      	add	r7, sp, #8
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	3338      	adds	r3, #56	; 0x38
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	3304      	adds	r3, #4
 800369c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d901      	bls.n	80036ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e06c      	b.n	8003788 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d902      	bls.n	80036ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3303      	adds	r3, #3
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036d2:	e02b      	b.n	800372c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	69fa      	ldr	r2, [r7, #28]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d902      	bls.n	80036f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3303      	adds	r3, #3
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6919      	ldr	r1, [r3, #16]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003708:	b2db      	uxtb	r3, r3
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4603      	mov	r3, r0
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f003 fd0e 	bl	8007130 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	441a      	add	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	b29b      	uxth	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	429a      	cmp	r2, r3
 8003740:	d809      	bhi.n	8003756 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1a      	ldr	r2, [r3, #32]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800374a:	429a      	cmp	r2, r3
 800374c:	d203      	bcs.n	8003756 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1be      	bne.n	80036d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	429a      	cmp	r2, r3
 8003760:	d811      	bhi.n	8003786 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	2201      	movs	r2, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	43db      	mvns	r3, r3
 800377c:	6939      	ldr	r1, [r7, #16]
 800377e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003782:	4013      	ands	r3, r2
 8003784:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	333c      	adds	r3, #60	; 0x3c
 80037a8:	3304      	adds	r3, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d17b      	bne.n	80038be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	4a61      	ldr	r2, [pc, #388]	; (8003958 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	f240 80b9 	bls.w	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80b3 	beq.w	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	461a      	mov	r2, r3
 80037f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f8:	6093      	str	r3, [r2, #8]
 80037fa:	e0a7      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	461a      	mov	r2, r3
 8003814:	2320      	movs	r3, #32
 8003816:	6093      	str	r3, [r2, #8]
 8003818:	e098      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 8093 	bne.w	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d90f      	bls.n	800384e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003844:	461a      	mov	r2, r3
 8003846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800384a:	6093      	str	r3, [r2, #8]
 800384c:	e07e      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	0159      	lsls	r1, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	440b      	add	r3, r1
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387a:	1ad2      	subs	r2, r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d114      	bne.n	80038b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003898:	461a      	mov	r2, r3
 800389a:	2101      	movs	r1, #1
 800389c:	f003 fede 	bl	800765c <USB_EP0_OutStart>
 80038a0:	e006      	b.n	80038b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	441a      	add	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f006 f9b2 	bl	8009c20 <HAL_PCD_DataOutStageCallback>
 80038bc:	e046      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4a26      	ldr	r2, [pc, #152]	; (800395c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d124      	bne.n	8003910 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038dc:	461a      	mov	r2, r3
 80038de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e2:	6093      	str	r3, [r2, #8]
 80038e4:	e032      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	461a      	mov	r2, r3
 80038fe:	2320      	movs	r3, #32
 8003900:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f006 f989 	bl	8009c20 <HAL_PCD_DataOutStageCallback>
 800390e:	e01d      	b.n	800394c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d114      	bne.n	8003940 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003938:	461a      	mov	r2, r3
 800393a:	2100      	movs	r1, #0
 800393c:	f003 fe8e 	bl	800765c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	4619      	mov	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f006 f96a 	bl	8009c20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3720      	adds	r7, #32
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	4f54300a 	.word	0x4f54300a
 800395c:	4f54310a 	.word	0x4f54310a

08003960 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	333c      	adds	r3, #60	; 0x3c
 8003978:	3304      	adds	r3, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d90e      	bls.n	80039b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	461a      	mov	r2, r3
 80039ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f006 f921 	bl	8009bfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d90c      	bls.n	80039dc <PCD_EP_OutSetupPacket_int+0x7c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d108      	bne.n	80039dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039d4:	461a      	mov	r2, r3
 80039d6:	2101      	movs	r1, #1
 80039d8:	f003 fe40 	bl	800765c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	4f54300a 	.word	0x4f54300a

080039ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
 80039f8:	4613      	mov	r3, r2
 80039fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d107      	bne.n	8003a1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a0a:	883b      	ldrh	r3, [r7, #0]
 8003a0c:	0419      	lsls	r1, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
 8003a18:	e028      	b.n	8003a6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	e00d      	b.n	8003a4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	3340      	adds	r3, #64	; 0x40
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	0c1b      	lsrs	r3, r3, #16
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	4413      	add	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	3301      	adds	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d3ec      	bcc.n	8003a2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a54:	883b      	ldrh	r3, [r7, #0]
 8003a56:	0418      	lsls	r0, r3, #16
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6819      	ldr	r1, [r3, #0]
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4302      	orrs	r2, r0
 8003a64:	3340      	adds	r3, #64	; 0x40
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e267      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d075      	beq.n	8003bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ad2:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d00c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ade:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d112      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aea:	4b82      	ldr	r3, [pc, #520]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	4b7e      	ldr	r3, [pc, #504]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x108>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d157      	bne.n	8003bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e242      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_OscConfig+0x74>
 8003b1a:	4b76      	ldr	r3, [pc, #472]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a75      	ldr	r2, [pc, #468]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e01d      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b70      	ldr	r3, [pc, #448]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6f      	ldr	r2, [pc, #444]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6c      	ldr	r2, [pc, #432]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a68      	ldr	r2, [pc, #416]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fe2a 	bl	80017c4 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd fe26 	bl	80017c4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e207      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b5b      	ldr	r3, [pc, #364]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0xc0>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd fe16 	bl	80017c4 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd fe12 	bl	80017c4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1f3      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0xe8>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bca:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd6:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d11c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1c7      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4937      	ldr	r1, [pc, #220]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e03a      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fdcb 	bl	80017c4 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd fdc7 	bl	80017c4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1a8      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4925      	ldr	r1, [pc, #148]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	e015      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b24      	ldr	r3, [pc, #144]	; (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fdaa 	bl	80017c4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c74:	f7fd fda6 	bl	80017c4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e187      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d036      	beq.n	8003d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fd fd8a 	bl	80017c4 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fd fd86 	bl	80017c4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e167      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x200>
 8003cd2:	e01b      	b.n	8003d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fd fd73 	bl	80017c4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	e00e      	b.n	8003d00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fd fd6f 	bl	80017c4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d907      	bls.n	8003d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e150      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	42470000 	.word	0x42470000
 8003cfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	4b88      	ldr	r3, [pc, #544]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ea      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8097 	beq.w	8003e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1e:	4b81      	ldr	r3, [pc, #516]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	4b7d      	ldr	r3, [pc, #500]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	4a7c      	ldr	r2, [pc, #496]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d38:	6413      	str	r3, [r2, #64]	; 0x40
 8003d3a:	4b7a      	ldr	r3, [pc, #488]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4a:	4b77      	ldr	r3, [pc, #476]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d56:	4b74      	ldr	r3, [pc, #464]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a73      	ldr	r2, [pc, #460]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fd fd2f 	bl	80017c4 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd fd2b 	bl	80017c4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e10c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x2ea>
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a63      	ldr	r2, [pc, #396]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x30c>
 8003da6:	4b5f      	ldr	r3, [pc, #380]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003daa:	4a5e      	ldr	r2, [pc, #376]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	; 0x70
 8003db2:	4b5c      	ldr	r3, [pc, #368]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	4a5b      	ldr	r2, [pc, #364]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003dc0:	4b58      	ldr	r3, [pc, #352]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a57      	ldr	r2, [pc, #348]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
 8003dcc:	4b55      	ldr	r3, [pc, #340]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a54      	ldr	r2, [pc, #336]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f023 0304 	bic.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd fcf0 	bl	80017c4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd fcec 	bl	80017c4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0cb      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ee      	beq.n	8003de8 <HAL_RCC_OscConfig+0x334>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fd fcda 	bl	80017c4 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd fcd6 	bl	80017c4 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0b5      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ee      	bne.n	8003e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b39      	ldr	r3, [pc, #228]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	4a38      	ldr	r2, [pc, #224]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a1 	beq.w	8003f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e52:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d05c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d141      	bne.n	8003eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fcaa 	bl	80017c4 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fd fca6 	bl	80017c4 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e087      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	491b      	ldr	r1, [pc, #108]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fd fc7f 	bl	80017c4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fd fc7b 	bl	80017c4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e05c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x416>
 8003ee8:	e054      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fc68 	bl	80017c4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd fc64 	bl	80017c4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e045      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x444>
 8003f16:	e03d      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e038      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCC_OscConfig+0x4ec>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d028      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d121      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11a      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0cc      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b68      	ldr	r3, [pc, #416]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b65      	ldr	r3, [pc, #404]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a52      	ldr	r2, [pc, #328]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800401a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d044      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d119      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d003      	beq.n	8004062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e067      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b37      	ldr	r3, [pc, #220]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4934      	ldr	r1, [pc, #208]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fd fb96 	bl	80017c4 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fd fb92 	bl	80017c4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e04f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b25      	ldr	r3, [pc, #148]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20c      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b22      	ldr	r3, [pc, #136]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	; (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	; (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	; (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd faf6 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023c00 	.word	0x40023c00
 8004160:	40023800 	.word	0x40023800
 8004164:	0800d144 	.word	0x0800d144
 8004168:	20000004 	.word	0x20000004
 800416c:	20000008 	.word	0x20000008

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b090      	sub	sp, #64	; 0x40
 8004176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
 800417c:	2300      	movs	r3, #0
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004180:	2300      	movs	r3, #0
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004194:	2b08      	cmp	r3, #8
 8004196:	f200 80a1 	bhi.w	80042dc <HAL_RCC_GetSysClockFreq+0x16c>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x34>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x3a>
 80041a2:	e09b      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80041a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80041a8:	e09b      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041ae:	e098      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b4d      	ldr	r3, [pc, #308]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d028      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b4a      	ldr	r3, [pc, #296]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	627a      	str	r2, [r7, #36]	; 0x24
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041d8:	2100      	movs	r1, #0
 80041da:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041dc:	fb03 f201 	mul.w	r2, r3, r1
 80041e0:	2300      	movs	r3, #0
 80041e2:	fb00 f303 	mul.w	r3, r0, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	4a43      	ldr	r2, [pc, #268]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ea:	fba0 1202 	umull	r1, r2, r0, r2
 80041ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f0:	460a      	mov	r2, r1
 80041f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80041f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f6:	4413      	add	r3, r2
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fc:	2200      	movs	r2, #0
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800420a:	f7fc fcd5 	bl	8000bb8 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4613      	mov	r3, r2
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004216:	e053      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004218:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	2200      	movs	r2, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	617a      	str	r2, [r7, #20]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800422a:	f04f 0b00 	mov.w	fp, #0
 800422e:	4652      	mov	r2, sl
 8004230:	465b      	mov	r3, fp
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f04f 0100 	mov.w	r1, #0
 800423a:	0159      	lsls	r1, r3, #5
 800423c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004240:	0150      	lsls	r0, r2, #5
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	ebb2 080a 	subs.w	r8, r2, sl
 800424a:	eb63 090b 	sbc.w	r9, r3, fp
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800425a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800425e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004262:	ebb2 0408 	subs.w	r4, r2, r8
 8004266:	eb63 0509 	sbc.w	r5, r3, r9
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	00eb      	lsls	r3, r5, #3
 8004274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004278:	00e2      	lsls	r2, r4, #3
 800427a:	4614      	mov	r4, r2
 800427c:	461d      	mov	r5, r3
 800427e:	eb14 030a 	adds.w	r3, r4, sl
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	eb45 030b 	adc.w	r3, r5, fp
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004296:	4629      	mov	r1, r5
 8004298:	028b      	lsls	r3, r1, #10
 800429a:	4621      	mov	r1, r4
 800429c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042a0:	4621      	mov	r1, r4
 80042a2:	028a      	lsls	r2, r1, #10
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042aa:	2200      	movs	r2, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	60fa      	str	r2, [r7, #12]
 80042b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042b4:	f7fc fc80 	bl	8000bb8 <__aeabi_uldivmod>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4613      	mov	r3, r2
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	3301      	adds	r3, #1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80042d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042da:	e002      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80042de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3740      	adds	r7, #64	; 0x40
 80042e8:	46bd      	mov	sp, r7
 80042ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	017d7840 	.word	0x017d7840

080042fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000004 	.word	0x20000004

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	0800d154 	.word	0x0800d154

0800433c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004340:	f7ff ffdc 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0b5b      	lsrs	r3, r3, #13
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4903      	ldr	r1, [pc, #12]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	0800d154 	.word	0x0800d154

08004364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e041      	b.n	80043fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fd f8b6 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fa88 	bl	80048b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e044      	b.n	80044a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1e      	ldr	r2, [pc, #120]	; (80044b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d013      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a19      	ldr	r2, [pc, #100]	; (80044bc <HAL_TIM_Base_Start_IT+0xb8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a17      	ldr	r2, [pc, #92]	; (80044c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x6c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d111      	bne.n	8004494 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b06      	cmp	r3, #6
 8004480:	d010      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	e007      	b.n	80044a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800
 80044c0:	40000c00 	.word	0x40000c00
 80044c4:	40014000 	.word	0x40014000

080044c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d122      	bne.n	8004524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d11b      	bne.n	8004524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0202 	mvn.w	r2, #2
 80044f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9b5 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9a7 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f9b8 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d122      	bne.n	8004578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d11b      	bne.n	8004578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f06f 0204 	mvn.w	r2, #4
 8004548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f98b 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 8004564:	e005      	b.n	8004572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f97d 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f98e 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b08      	cmp	r3, #8
 8004584:	d122      	bne.n	80045cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d11b      	bne.n	80045cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0208 	mvn.w	r2, #8
 800459c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2204      	movs	r2, #4
 80045a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f961 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 80045b8:	e005      	b.n	80045c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f953 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f964 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	d122      	bne.n	8004620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d11b      	bne.n	8004620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f937 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f929 	bl	8004866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f93a 	bl	800488e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d10e      	bne.n	800464c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d107      	bne.n	800464c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0201 	mvn.w	r2, #1
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fc fda4 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d107      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fab2 	bl	8004bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d10e      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8ff 	bl	80048a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d10e      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d107      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0220 	mvn.w	r2, #32
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa7c 	bl	8004bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIM_ConfigClockSource+0x1c>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e0b4      	b.n	800485e <HAL_TIM_ConfigClockSource+0x186>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472c:	d03e      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0xd4>
 800472e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004732:	f200 8087 	bhi.w	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473a:	f000 8086 	beq.w	800484a <HAL_TIM_ConfigClockSource+0x172>
 800473e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004742:	d87f      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b70      	cmp	r3, #112	; 0x70
 8004746:	d01a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0xa6>
 8004748:	2b70      	cmp	r3, #112	; 0x70
 800474a:	d87b      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b60      	cmp	r3, #96	; 0x60
 800474e:	d050      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x11a>
 8004750:	2b60      	cmp	r3, #96	; 0x60
 8004752:	d877      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004754:	2b50      	cmp	r3, #80	; 0x50
 8004756:	d03c      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0xfa>
 8004758:	2b50      	cmp	r3, #80	; 0x50
 800475a:	d873      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d058      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0x13a>
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d86f      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004764:	2b30      	cmp	r3, #48	; 0x30
 8004766:	d064      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 8004768:	2b30      	cmp	r3, #48	; 0x30
 800476a:	d86b      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 800476c:	2b20      	cmp	r3, #32
 800476e:	d060      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d867      	bhi.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
 8004774:	2b00      	cmp	r3, #0
 8004776:	d05c      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 8004778:	2b10      	cmp	r3, #16
 800477a:	d05a      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	e062      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6899      	ldr	r1, [r3, #8]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f000 f98d 	bl	8004aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	609a      	str	r2, [r3, #8]
      break;
 80047aa:	e04f      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6899      	ldr	r1, [r3, #8]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f000 f976 	bl	8004aac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047ce:	609a      	str	r2, [r3, #8]
      break;
 80047d0:	e03c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 f8ea 	bl	80049b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2150      	movs	r1, #80	; 0x50
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f943 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 80047f0:	e02c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6859      	ldr	r1, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	461a      	mov	r2, r3
 8004800:	f000 f909 	bl	8004a16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2160      	movs	r1, #96	; 0x60
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f933 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004810:	e01c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 f8ca 	bl	80049b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2140      	movs	r1, #64	; 0x40
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f923 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004830:	e00c      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 f91a 	bl	8004a76 <TIM_ITRx_SetConfig>
      break;
 8004842:	e003      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      break;
 8004848:	e000      	b.n	800484c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800484a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a34      	ldr	r2, [pc, #208]	; (800499c <TIM_Base_SetConfig+0xe4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00f      	beq.n	80048f0 <TIM_Base_SetConfig+0x38>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d6:	d00b      	beq.n	80048f0 <TIM_Base_SetConfig+0x38>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a31      	ldr	r2, [pc, #196]	; (80049a0 <TIM_Base_SetConfig+0xe8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <TIM_Base_SetConfig+0x38>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a30      	ldr	r2, [pc, #192]	; (80049a4 <TIM_Base_SetConfig+0xec>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_Base_SetConfig+0x38>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0xf0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d108      	bne.n	8004902 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a25      	ldr	r2, [pc, #148]	; (800499c <TIM_Base_SetConfig+0xe4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01b      	beq.n	8004942 <TIM_Base_SetConfig+0x8a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004910:	d017      	beq.n	8004942 <TIM_Base_SetConfig+0x8a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a22      	ldr	r2, [pc, #136]	; (80049a0 <TIM_Base_SetConfig+0xe8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <TIM_Base_SetConfig+0x8a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <TIM_Base_SetConfig+0xec>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00f      	beq.n	8004942 <TIM_Base_SetConfig+0x8a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <TIM_Base_SetConfig+0xf0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0x8a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <TIM_Base_SetConfig+0xf4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0x8a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <TIM_Base_SetConfig+0xf8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0x8a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <TIM_Base_SetConfig+0xfc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a08      	ldr	r2, [pc, #32]	; (800499c <TIM_Base_SetConfig+0xe4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	615a      	str	r2, [r3, #20]
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40010000 	.word	0x40010000
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400
 80049b4:	40014800 	.word	0x40014800

080049b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f023 030a 	bic.w	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f043 0307 	orr.w	r3, r3, #7
 8004a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e050      	b.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d018      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d013      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00e      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d009      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10c      	bne.n	8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40000400 	.word	0x40000400
 8004bbc:	40000800 	.word	0x40000800
 8004bc0:	40000c00 	.word	0x40000c00
 8004bc4:	40014000 	.word	0x40014000

08004bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e03f      	b.n	8004c82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc fcc2 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fee1 	bl	80059fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b08a      	sub	sp, #40	; 0x28
 8004c8e:	af02      	add	r7, sp, #8
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	f040 808c 	bne.w	8004dc4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_UART_Receive+0x2e>
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e084      	b.n	8004dc6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Receive+0x40>
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	e07d      	b.n	8004dc6 <HAL_UART_Receive+0x13c>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2222      	movs	r2, #34	; 0x22
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fd6d 	bl	80017c4 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d108      	bne.n	8004d14 <HAL_UART_Receive+0x8a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e003      	b.n	8004d1c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004d24:	e043      	b.n	8004dae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2120      	movs	r1, #32
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fc32 	bl	800559a <UART_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e042      	b.n	8004dc6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10c      	bne.n	8004d60 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e01f      	b.n	8004da0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d68:	d007      	beq.n	8004d7a <HAL_UART_Receive+0xf0>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <HAL_UART_Receive+0xfe>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	701a      	strb	r2, [r3, #0]
 8004d86:	e008      	b.n	8004d9a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1b6      	bne.n	8004d26 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e000      	b.n	8004dc6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
  }
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d165      	bne.n	8004eb6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_UART_Transmit_DMA+0x26>
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e05e      	b.n	8004eb8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_UART_Transmit_DMA+0x38>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e057      	b.n	8004eb8 <HAL_UART_Transmit_DMA+0xe8>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	88fa      	ldrh	r2, [r7, #6]
 8004e20:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2221      	movs	r2, #33	; 0x21
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <HAL_UART_Transmit_DMA+0xf0>)
 8004e36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3c:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <HAL_UART_Transmit_DMA+0xf4>)
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <HAL_UART_Transmit_DMA+0xf8>)
 8004e46:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004e50:	f107 0308 	add.w	r3, r7, #8
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3304      	adds	r3, #4
 8004e64:	461a      	mov	r2, r3
 8004e66:	88fb      	ldrh	r3, [r7, #6]
 8004e68:	f7fc fe9c 	bl	8001ba4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e74:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3314      	adds	r3, #20
 8004e84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3314      	adds	r3, #20
 8004e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8004ea0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6a39      	ldr	r1, [r7, #32]
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3730      	adds	r7, #48	; 0x30
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	08005451 	.word	0x08005451
 8004ec4:	080054eb 	.word	0x080054eb
 8004ec8:	08005507 	.word	0x08005507

08004ecc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b0ba      	sub	sp, #232	; 0xe8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10f      	bne.n	8004f32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_UART_IRQHandler+0x66>
 8004f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fcaa 	bl	8005884 <UART_Receive_IT>
      return;
 8004f30:	e256      	b.n	80053e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80de 	beq.w	80050f8 <HAL_UART_IRQHandler+0x22c>
 8004f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80d1 	beq.w	80050f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_UART_IRQHandler+0xae>
 8004f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_UART_IRQHandler+0xd2>
 8004f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f043 0202 	orr.w	r2, r3, #2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xf6>
 8004faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f043 0204 	orr.w	r2, r3, #4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x126>
 8004fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d005      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	f043 0208 	orr.w	r2, r3, #8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 81ed 	beq.w	80053d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_UART_IRQHandler+0x14e>
 8005008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fc35 	bl	8005884 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	bf0c      	ite	eq
 8005028:	2301      	moveq	r3, #1
 800502a:	2300      	movne	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <HAL_UART_IRQHandler+0x17a>
 800503e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04f      	beq.n	80050e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fb3d 	bl	80056c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d141      	bne.n	80050de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3314      	adds	r3, #20
 8005082:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005086:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800508a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800509e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1d9      	bne.n	800505a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d013      	beq.n	80050d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	4a7d      	ldr	r2, [pc, #500]	; (80052a8 <HAL_UART_IRQHandler+0x3dc>)
 80050b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fc fe3a 	bl	8001d34 <HAL_DMA_Abort_IT>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d016      	beq.n	80050f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d0:	4610      	mov	r0, r2
 80050d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d4:	e00e      	b.n	80050f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9a4 	bl	8005424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050dc:	e00a      	b.n	80050f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9a0 	bl	8005424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e4:	e006      	b.n	80050f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f99c 	bl	8005424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050f2:	e170      	b.n	80053d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	bf00      	nop
    return;
 80050f6:	e16e      	b.n	80053d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f040 814a 	bne.w	8005396 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 8143 	beq.w	8005396 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 813c 	beq.w	8005396 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	f040 80b4 	bne.w	80052ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005150:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8140 	beq.w	80053da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800515e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005162:	429a      	cmp	r2, r3
 8005164:	f080 8139 	bcs.w	80053da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800516e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800517a:	f000 8088 	beq.w	800528e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800519c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1d9      	bne.n	800517e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051dc:	f023 0301 	bic.w	r3, r3, #1
 80051e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e1      	bne.n	80051ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800522a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800522c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005230:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e3      	bne.n	8005206 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2220      	movs	r2, #32
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800525c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525e:	f023 0310 	bic.w	r3, r3, #16
 8005262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	330c      	adds	r3, #12
 800526c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005270:	65ba      	str	r2, [r7, #88]	; 0x58
 8005272:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e3      	bne.n	800524c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	4618      	mov	r0, r3
 800528a:	f7fc fce3 	bl	8001c54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005296:	b29b      	uxth	r3, r3
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8ca 	bl	8005438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052a4:	e099      	b.n	80053da <HAL_UART_IRQHandler+0x50e>
 80052a6:	bf00      	nop
 80052a8:	0800578d 	.word	0x0800578d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 808b 	beq.w	80053de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80052c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8086 	beq.w	80053de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	e853 3f00 	ldrex	r3, [r3]
 80052e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052f6:	647a      	str	r2, [r7, #68]	; 0x44
 80052f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e3      	bne.n	80052d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	623b      	str	r3, [r7, #32]
   return(result);
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	f023 0301 	bic.w	r3, r3, #1
 8005320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800532e:	633a      	str	r2, [r7, #48]	; 0x30
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e3      	bne.n	800530a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	330c      	adds	r3, #12
 8005356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0310 	bic.w	r3, r3, #16
 8005366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005374:	61fa      	str	r2, [r7, #28]
 8005376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	69b9      	ldr	r1, [r7, #24]
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	617b      	str	r3, [r7, #20]
   return(result);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e3      	bne.n	8005350 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f852 	bl	8005438 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005394:	e023      	b.n	80053de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_UART_IRQHandler+0x4ea>
 80053a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa00 	bl	80057b4 <UART_Transmit_IT>
    return;
 80053b4:	e014      	b.n	80053e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00e      	beq.n	80053e0 <HAL_UART_IRQHandler+0x514>
 80053c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa40 	bl	8005854 <UART_EndTransmit_IT>
    return;
 80053d4:	e004      	b.n	80053e0 <HAL_UART_IRQHandler+0x514>
    return;
 80053d6:	bf00      	nop
 80053d8:	e002      	b.n	80053e0 <HAL_UART_IRQHandler+0x514>
      return;
 80053da:	bf00      	nop
 80053dc:	e000      	b.n	80053e0 <HAL_UART_IRQHandler+0x514>
      return;
 80053de:	bf00      	nop
  }
}
 80053e0:	37e8      	adds	r7, #232	; 0xe8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop

080053e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b090      	sub	sp, #64	; 0x40
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d137      	bne.n	80054dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	2200      	movs	r2, #0
 8005470:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	623b      	str	r3, [r7, #32]
   return(result);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005492:	633a      	str	r2, [r7, #48]	; 0x30
 8005494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
 80054be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c6:	61fa      	str	r2, [r7, #28]
 80054c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	e841 2300 	strex	r3, r2, [r1]
 80054d2:	617b      	str	r3, [r7, #20]
   return(result);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1e5      	bne.n	80054a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054da:	e002      	b.n	80054e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80054dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80054de:	f7ff ff83 	bl	80053e8 <HAL_UART_TxCpltCallback>
}
 80054e2:	bf00      	nop
 80054e4:	3740      	adds	r7, #64	; 0x40
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff ff7f 	bl	80053fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	bf0c      	ite	eq
 8005526:	2301      	moveq	r3, #1
 8005528:	2300      	movne	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b21      	cmp	r3, #33	; 0x21
 8005538:	d108      	bne.n	800554c <UART_DMAError+0x46>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005546:	68b8      	ldr	r0, [r7, #8]
 8005548:	f000 f895 	bl	8005676 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	bf0c      	ite	eq
 800555a:	2301      	moveq	r3, #1
 800555c:	2300      	movne	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b22      	cmp	r3, #34	; 0x22
 800556c:	d108      	bne.n	8005580 <UART_DMAError+0x7a>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800557a:	68b8      	ldr	r0, [r7, #8]
 800557c:	f000 f8a3 	bl	80056c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f043 0210 	orr.w	r2, r3, #16
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800558c:	68b8      	ldr	r0, [r7, #8]
 800558e:	f7ff ff49 	bl	8005424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b090      	sub	sp, #64	; 0x40
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055aa:	e050      	b.n	800564e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d04c      	beq.n	800564e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <UART_WaitOnFlagUntilTimeout+0x30>
 80055ba:	f7fc f903 	bl	80017c4 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d241      	bcs.n	800564e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055ea:	637a      	str	r2, [r7, #52]	; 0x34
 80055ec:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1e5      	bne.n	80055ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3314      	adds	r3, #20
 8005604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	613b      	str	r3, [r7, #16]
   return(result);
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3314      	adds	r3, #20
 800561c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561e:	623a      	str	r2, [r7, #32]
 8005620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	69f9      	ldr	r1, [r7, #28]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	61bb      	str	r3, [r7, #24]
   return(result);
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e5      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2220      	movs	r2, #32
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e00f      	b.n	800566e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	429a      	cmp	r2, r3
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	429a      	cmp	r2, r3
 800566a:	d09f      	beq.n	80055ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3740      	adds	r7, #64	; 0x40
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005676:	b480      	push	{r7}
 8005678:	b089      	sub	sp, #36	; 0x24
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	60bb      	str	r3, [r7, #8]
   return(result);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	61ba      	str	r2, [r7, #24]
 80056a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6979      	ldr	r1, [r7, #20]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	613b      	str	r3, [r7, #16]
   return(result);
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80056ba:	bf00      	nop
 80056bc:	3724      	adds	r7, #36	; 0x24
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b095      	sub	sp, #84	; 0x54
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	330c      	adds	r3, #12
 80056ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ee:	643a      	str	r2, [r7, #64]	; 0x40
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3314      	adds	r3, #20
 8005708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	61fb      	str	r3, [r7, #28]
   return(result);
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f023 0301 	bic.w	r3, r3, #1
 8005718:	64bb      	str	r3, [r7, #72]	; 0x48
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3314      	adds	r3, #20
 8005720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e5      	bne.n	8005702 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	2b01      	cmp	r3, #1
 800573c:	d119      	bne.n	8005772 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	60bb      	str	r3, [r7, #8]
   return(result);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f023 0310 	bic.w	r3, r3, #16
 8005754:	647b      	str	r3, [r7, #68]	; 0x44
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800575e:	61ba      	str	r2, [r7, #24]
 8005760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6979      	ldr	r1, [r7, #20]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	613b      	str	r3, [r7, #16]
   return(result);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005780:	bf00      	nop
 8005782:	3754      	adds	r7, #84	; 0x54
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f7ff fe3c 	bl	8005424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ac:	bf00      	nop
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b21      	cmp	r3, #33	; 0x21
 80057c6:	d13e      	bne.n	8005846 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d114      	bne.n	80057fc <UART_Transmit_IT+0x48>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d110      	bne.n	80057fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	1c9a      	adds	r2, r3, #2
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	621a      	str	r2, [r3, #32]
 80057fa:	e008      	b.n	800580e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	1c59      	adds	r1, r3, #1
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6211      	str	r1, [r2, #32]
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29b      	uxth	r3, r3
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4619      	mov	r1, r3
 800581c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005830:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005840:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e000      	b.n	8005848 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005846:	2302      	movs	r3, #2
  }
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff fdb7 	bl	80053e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	; 0x30
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b22      	cmp	r3, #34	; 0x22
 8005896:	f040 80ab 	bne.w	80059f0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	d117      	bne.n	80058d4 <UART_Receive_IT+0x50>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	1c9a      	adds	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	629a      	str	r2, [r3, #40]	; 0x28
 80058d2:	e026      	b.n	8005922 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	d007      	beq.n	80058f8 <UART_Receive_IT+0x74>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <UART_Receive_IT+0x82>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d106      	bne.n	8005906 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	701a      	strb	r2, [r3, #0]
 8005904:	e008      	b.n	8005918 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29b      	uxth	r3, r3
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	4619      	mov	r1, r3
 8005930:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005932:	2b00      	cmp	r3, #0
 8005934:	d15a      	bne.n	80059ec <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0220 	bic.w	r2, r2, #32
 8005944:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005954:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	2b01      	cmp	r3, #1
 8005974:	d135      	bne.n	80059e2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	613b      	str	r3, [r7, #16]
   return(result);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	f023 0310 	bic.w	r3, r3, #16
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	330c      	adds	r3, #12
 800599a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599c:	623a      	str	r2, [r7, #32]
 800599e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	69f9      	ldr	r1, [r7, #28]
 80059a2:	6a3a      	ldr	r2, [r7, #32]
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b10      	cmp	r3, #16
 80059bc:	d10a      	bne.n	80059d4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff fd2c 	bl	8005438 <HAL_UARTEx_RxEventCallback>
 80059e0:	e002      	b.n	80059e8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fd14 	bl	8005410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e002      	b.n	80059f2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3730      	adds	r7, #48	; 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a00:	b0c0      	sub	sp, #256	; 0x100
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	68d9      	ldr	r1, [r3, #12]
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	ea40 0301 	orr.w	r3, r0, r1
 8005a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a54:	f021 010c 	bic.w	r1, r1, #12
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a62:	430b      	orrs	r3, r1
 8005a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a76:	6999      	ldr	r1, [r3, #24]
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	ea40 0301 	orr.w	r3, r0, r1
 8005a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b8f      	ldr	r3, [pc, #572]	; (8005cc8 <UART_SetConfig+0x2cc>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d005      	beq.n	8005a9c <UART_SetConfig+0xa0>
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b8d      	ldr	r3, [pc, #564]	; (8005ccc <UART_SetConfig+0x2d0>)
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d104      	bne.n	8005aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a9c:	f7fe fc4e 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8005aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005aa4:	e003      	b.n	8005aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aa6:	f7fe fc35 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab8:	f040 810c 	bne.w	8005cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	1891      	adds	r1, r2, r2
 8005ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ad6:	415b      	adcs	r3, r3
 8005ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ade:	4621      	mov	r1, r4
 8005ae0:	eb12 0801 	adds.w	r8, r2, r1
 8005ae4:	4629      	mov	r1, r5
 8005ae6:	eb43 0901 	adc.w	r9, r3, r1
 8005aea:	f04f 0200 	mov.w	r2, #0
 8005aee:	f04f 0300 	mov.w	r3, #0
 8005af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005afe:	4690      	mov	r8, r2
 8005b00:	4699      	mov	r9, r3
 8005b02:	4623      	mov	r3, r4
 8005b04:	eb18 0303 	adds.w	r3, r8, r3
 8005b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	eb49 0303 	adc.w	r3, r9, r3
 8005b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	18db      	adds	r3, r3, r3
 8005b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b30:	4613      	mov	r3, r2
 8005b32:	eb42 0303 	adc.w	r3, r2, r3
 8005b36:	657b      	str	r3, [r7, #84]	; 0x54
 8005b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b40:	f7fb f83a 	bl	8000bb8 <__aeabi_uldivmod>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4b61      	ldr	r3, [pc, #388]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	011c      	lsls	r4, r3, #4
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b74:	4641      	mov	r1, r8
 8005b76:	eb12 0a01 	adds.w	sl, r2, r1
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b94:	4692      	mov	sl, r2
 8005b96:	469b      	mov	fp, r3
 8005b98:	4643      	mov	r3, r8
 8005b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	18db      	adds	r3, r3, r3
 8005bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	eb42 0303 	adc.w	r3, r2, r3
 8005bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8005bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bd6:	f7fa ffef 	bl	8000bb8 <__aeabi_uldivmod>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4611      	mov	r1, r2
 8005be0:	4b3b      	ldr	r3, [pc, #236]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005be2:	fba3 2301 	umull	r2, r3, r3, r1
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	2264      	movs	r2, #100	; 0x64
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
 8005bee:	1acb      	subs	r3, r1, r3
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bf6:	4b36      	ldr	r3, [pc, #216]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c04:	441c      	add	r4, r3
 8005c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c18:	4642      	mov	r2, r8
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	1891      	adds	r1, r2, r2
 8005c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c20:	415b      	adcs	r3, r3
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c28:	4641      	mov	r1, r8
 8005c2a:	1851      	adds	r1, r2, r1
 8005c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c2e:	4649      	mov	r1, r9
 8005c30:	414b      	adcs	r3, r1
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c40:	4659      	mov	r1, fp
 8005c42:	00cb      	lsls	r3, r1, #3
 8005c44:	4651      	mov	r1, sl
 8005c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c4a:	4651      	mov	r1, sl
 8005c4c:	00ca      	lsls	r2, r1, #3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	4642      	mov	r2, r8
 8005c56:	189b      	adds	r3, r3, r2
 8005c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	460a      	mov	r2, r1
 8005c60:	eb42 0303 	adc.w	r3, r2, r3
 8005c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	18db      	adds	r3, r3, r3
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c82:	4613      	mov	r3, r2
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c92:	f7fa ff91 	bl	8000bb8 <__aeabi_uldivmod>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	2164      	movs	r1, #100	; 0x64
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	3332      	adds	r3, #50	; 0x32
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <UART_SetConfig+0x2d4>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	f003 0207 	and.w	r2, r3, #7
 8005cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4422      	add	r2, r4
 8005cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cc4:	e105      	b.n	8005ed2 <UART_SetConfig+0x4d6>
 8005cc6:	bf00      	nop
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	40011400 	.word	0x40011400
 8005cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ce6:	4642      	mov	r2, r8
 8005ce8:	464b      	mov	r3, r9
 8005cea:	1891      	adds	r1, r2, r2
 8005cec:	6239      	str	r1, [r7, #32]
 8005cee:	415b      	adcs	r3, r3
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cf6:	4641      	mov	r1, r8
 8005cf8:	1854      	adds	r4, r2, r1
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	eb43 0501 	adc.w	r5, r3, r1
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	00eb      	lsls	r3, r5, #3
 8005d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0e:	00e2      	lsls	r2, r4, #3
 8005d10:	4614      	mov	r4, r2
 8005d12:	461d      	mov	r5, r3
 8005d14:	4643      	mov	r3, r8
 8005d16:	18e3      	adds	r3, r4, r3
 8005d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	eb45 0303 	adc.w	r3, r5, r3
 8005d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d42:	4629      	mov	r1, r5
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	4621      	mov	r1, r4
 8005d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	008a      	lsls	r2, r1, #2
 8005d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d54:	f7fa ff30 	bl	8000bb8 <__aeabi_uldivmod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4b60      	ldr	r3, [pc, #384]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	011c      	lsls	r4, r3, #4
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	61b9      	str	r1, [r7, #24]
 8005d80:	415b      	adcs	r3, r3
 8005d82:	61fb      	str	r3, [r7, #28]
 8005d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d88:	4641      	mov	r1, r8
 8005d8a:	1851      	adds	r1, r2, r1
 8005d8c:	6139      	str	r1, [r7, #16]
 8005d8e:	4649      	mov	r1, r9
 8005d90:	414b      	adcs	r3, r1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005da0:	4659      	mov	r1, fp
 8005da2:	00cb      	lsls	r3, r1, #3
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005daa:	4651      	mov	r1, sl
 8005dac:	00ca      	lsls	r2, r1, #3
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	4642      	mov	r2, r8
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005de0:	4649      	mov	r1, r9
 8005de2:	008b      	lsls	r3, r1, #2
 8005de4:	4641      	mov	r1, r8
 8005de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dea:	4641      	mov	r1, r8
 8005dec:	008a      	lsls	r2, r1, #2
 8005dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005df2:	f7fa fee1 	bl	8000bb8 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	2164      	movs	r1, #100	; 0x64
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	3332      	adds	r3, #50	; 0x32
 8005e0e:	4a34      	ldr	r2, [pc, #208]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e1a:	441c      	add	r4, r3
 8005e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e20:	2200      	movs	r2, #0
 8005e22:	673b      	str	r3, [r7, #112]	; 0x70
 8005e24:	677a      	str	r2, [r7, #116]	; 0x74
 8005e26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e2a:	4642      	mov	r2, r8
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	1891      	adds	r1, r2, r2
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	415b      	adcs	r3, r3
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	1851      	adds	r1, r2, r1
 8005e3e:	6039      	str	r1, [r7, #0]
 8005e40:	4649      	mov	r1, r9
 8005e42:	414b      	adcs	r3, r1
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e52:	4659      	mov	r1, fp
 8005e54:	00cb      	lsls	r3, r1, #3
 8005e56:	4651      	mov	r1, sl
 8005e58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	00ca      	lsls	r2, r1, #3
 8005e60:	4610      	mov	r0, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	4603      	mov	r3, r0
 8005e66:	4642      	mov	r2, r8
 8005e68:	189b      	adds	r3, r3, r2
 8005e6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	460a      	mov	r2, r1
 8005e70:	eb42 0303 	adc.w	r3, r2, r3
 8005e74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e80:	667a      	str	r2, [r7, #100]	; 0x64
 8005e82:	f04f 0200 	mov.w	r2, #0
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e8e:	4649      	mov	r1, r9
 8005e90:	008b      	lsls	r3, r1, #2
 8005e92:	4641      	mov	r1, r8
 8005e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e98:	4641      	mov	r1, r8
 8005e9a:	008a      	lsls	r2, r1, #2
 8005e9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ea0:	f7fa fe8a 	bl	8000bb8 <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	2164      	movs	r1, #100	; 0x64
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	3332      	adds	r3, #50	; 0x32
 8005ebc:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <UART_SetConfig+0x4e4>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	f003 020f 	and.w	r2, r3, #15
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4422      	add	r2, r4
 8005ed0:	609a      	str	r2, [r3, #8]
}
 8005ed2:	bf00      	nop
 8005ed4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ede:	bf00      	nop
 8005ee0:	51eb851f 	.word	0x51eb851f

08005ee4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	f107 001c 	add.w	r0, r7, #28
 8005ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d122      	bne.n	8005f42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d105      	bne.n	8005f36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fbee 	bl	8007718 <USB_CoreReset>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
 8005f40:	e01a      	b.n	8005f78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f001 fbe2 	bl	8007718 <USB_CoreReset>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
 8005f6a:	e005      	b.n	8005f78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d10b      	bne.n	8005f96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f043 0206 	orr.w	r2, r3, #6
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f043 0220 	orr.w	r2, r3, #32
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fa2:	b004      	add	sp, #16
 8005fa4:	4770      	bx	lr
	...

08005fa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d165      	bne.n	8006088 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a41      	ldr	r2, [pc, #260]	; (80060c4 <USB_SetTurnaroundTime+0x11c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d906      	bls.n	8005fd2 <USB_SetTurnaroundTime+0x2a>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a40      	ldr	r2, [pc, #256]	; (80060c8 <USB_SetTurnaroundTime+0x120>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d202      	bcs.n	8005fd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fcc:	230f      	movs	r3, #15
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e062      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <USB_SetTurnaroundTime+0x120>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d306      	bcc.n	8005fe8 <USB_SetTurnaroundTime+0x40>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a3b      	ldr	r2, [pc, #236]	; (80060cc <USB_SetTurnaroundTime+0x124>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d202      	bcs.n	8005fe8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fe2:	230e      	movs	r3, #14
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e057      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a38      	ldr	r2, [pc, #224]	; (80060cc <USB_SetTurnaroundTime+0x124>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d306      	bcc.n	8005ffe <USB_SetTurnaroundTime+0x56>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <USB_SetTurnaroundTime+0x128>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d202      	bcs.n	8005ffe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ff8:	230d      	movs	r3, #13
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e04c      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a33      	ldr	r2, [pc, #204]	; (80060d0 <USB_SetTurnaroundTime+0x128>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d306      	bcc.n	8006014 <USB_SetTurnaroundTime+0x6c>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a32      	ldr	r2, [pc, #200]	; (80060d4 <USB_SetTurnaroundTime+0x12c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d802      	bhi.n	8006014 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800600e:	230c      	movs	r3, #12
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e041      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a2f      	ldr	r2, [pc, #188]	; (80060d4 <USB_SetTurnaroundTime+0x12c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d906      	bls.n	800602a <USB_SetTurnaroundTime+0x82>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a2e      	ldr	r2, [pc, #184]	; (80060d8 <USB_SetTurnaroundTime+0x130>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d802      	bhi.n	800602a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006024:	230b      	movs	r3, #11
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e036      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <USB_SetTurnaroundTime+0x130>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d906      	bls.n	8006040 <USB_SetTurnaroundTime+0x98>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4a29      	ldr	r2, [pc, #164]	; (80060dc <USB_SetTurnaroundTime+0x134>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d802      	bhi.n	8006040 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800603a:	230a      	movs	r3, #10
 800603c:	617b      	str	r3, [r7, #20]
 800603e:	e02b      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	4a26      	ldr	r2, [pc, #152]	; (80060dc <USB_SetTurnaroundTime+0x134>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d906      	bls.n	8006056 <USB_SetTurnaroundTime+0xae>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4a25      	ldr	r2, [pc, #148]	; (80060e0 <USB_SetTurnaroundTime+0x138>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d202      	bcs.n	8006056 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006050:	2309      	movs	r3, #9
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e020      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <USB_SetTurnaroundTime+0x138>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d306      	bcc.n	800606c <USB_SetTurnaroundTime+0xc4>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4a20      	ldr	r2, [pc, #128]	; (80060e4 <USB_SetTurnaroundTime+0x13c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d802      	bhi.n	800606c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006066:	2308      	movs	r3, #8
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e015      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <USB_SetTurnaroundTime+0x13c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d906      	bls.n	8006082 <USB_SetTurnaroundTime+0xda>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4a1c      	ldr	r2, [pc, #112]	; (80060e8 <USB_SetTurnaroundTime+0x140>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d202      	bcs.n	8006082 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800607c:	2307      	movs	r3, #7
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	e00a      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006082:	2306      	movs	r3, #6
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e007      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006088:	79fb      	ldrb	r3, [r7, #7]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800608e:	2309      	movs	r3, #9
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e001      	b.n	8006098 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006094:	2309      	movs	r3, #9
 8006096:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	029b      	lsls	r3, r3, #10
 80060ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80060b0:	431a      	orrs	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	00d8acbf 	.word	0x00d8acbf
 80060c8:	00e4e1c0 	.word	0x00e4e1c0
 80060cc:	00f42400 	.word	0x00f42400
 80060d0:	01067380 	.word	0x01067380
 80060d4:	011a499f 	.word	0x011a499f
 80060d8:	01312cff 	.word	0x01312cff
 80060dc:	014ca43f 	.word	0x014ca43f
 80060e0:	016e3600 	.word	0x016e3600
 80060e4:	01a6ab1f 	.word	0x01a6ab1f
 80060e8:	01e84800 	.word	0x01e84800

080060ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f043 0201 	orr.w	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f023 0201 	bic.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d115      	bne.n	800617e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800615e:	2001      	movs	r0, #1
 8006160:	f7fb fb3c 	bl	80017dc <HAL_Delay>
      ms++;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 fa45 	bl	80075fa <USB_GetMode>
 8006170:	4603      	mov	r3, r0
 8006172:	2b01      	cmp	r3, #1
 8006174:	d01e      	beq.n	80061b4 <USB_SetCurrentMode+0x84>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b31      	cmp	r3, #49	; 0x31
 800617a:	d9f0      	bls.n	800615e <USB_SetCurrentMode+0x2e>
 800617c:	e01a      	b.n	80061b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d115      	bne.n	80061b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006190:	2001      	movs	r0, #1
 8006192:	f7fb fb23 	bl	80017dc <HAL_Delay>
      ms++;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3301      	adds	r3, #1
 800619a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 fa2c 	bl	80075fa <USB_GetMode>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <USB_SetCurrentMode+0x84>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b31      	cmp	r3, #49	; 0x31
 80061ac:	d9f0      	bls.n	8006190 <USB_SetCurrentMode+0x60>
 80061ae:	e001      	b.n	80061b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e005      	b.n	80061c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b32      	cmp	r3, #50	; 0x32
 80061b8:	d101      	bne.n	80061be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c8:	b084      	sub	sp, #16
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061e2:	2300      	movs	r3, #0
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e009      	b.n	80061fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3340      	adds	r3, #64	; 0x40
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	2200      	movs	r2, #0
 80061f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3301      	adds	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2b0e      	cmp	r3, #14
 8006200:	d9f2      	bls.n	80061e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11c      	bne.n	8006242 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006216:	f043 0302 	orr.w	r3, r3, #2
 800621a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
 8006240:	e00b      	b.n	800625a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006260:	461a      	mov	r2, r3
 8006262:	2300      	movs	r3, #0
 8006264:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626c:	4619      	mov	r1, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	461a      	mov	r2, r3
 8006276:	680b      	ldr	r3, [r1, #0]
 8006278:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800627a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10c      	bne.n	800629a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d104      	bne.n	8006290 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006286:	2100      	movs	r1, #0
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f965 	bl	8006558 <USB_SetDevSpeed>
 800628e:	e008      	b.n	80062a2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006290:	2101      	movs	r1, #1
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f960 	bl	8006558 <USB_SetDevSpeed>
 8006298:	e003      	b.n	80062a2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800629a:	2103      	movs	r1, #3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f95b 	bl	8006558 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062a2:	2110      	movs	r1, #16
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f8f3 	bl	8006490 <USB_FlushTxFifo>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f91f 	bl	80064f8 <USB_FlushRxFifo>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	461a      	mov	r2, r3
 80062cc:	2300      	movs	r3, #0
 80062ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	461a      	mov	r2, r3
 80062d8:	2300      	movs	r3, #0
 80062da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e2:	461a      	mov	r2, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	e043      	b.n	8006376 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006304:	d118      	bne.n	8006338 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	461a      	mov	r2, r3
 800631a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	e013      	b.n	800634a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632e:	461a      	mov	r2, r3
 8006330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e008      	b.n	800634a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	461a      	mov	r2, r3
 8006346:	2300      	movs	r3, #0
 8006348:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	461a      	mov	r2, r3
 8006358:	2300      	movs	r3, #0
 800635a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006368:	461a      	mov	r2, r3
 800636a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800636e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	3301      	adds	r3, #1
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3b7      	bcc.n	80062ee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	e043      	b.n	800640c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800639a:	d118      	bne.n	80063ce <USB_DevInit+0x206>
    {
      if (i == 0U)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	461a      	mov	r2, r3
 80063b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e013      	b.n	80063e0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c4:	461a      	mov	r2, r3
 80063c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	e008      	b.n	80063e0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063da:	461a      	mov	r2, r3
 80063dc:	2300      	movs	r3, #0
 80063de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ec:	461a      	mov	r2, r3
 80063ee:	2300      	movs	r3, #0
 80063f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fe:	461a      	mov	r2, r3
 8006400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006404:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	3301      	adds	r3, #1
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	429a      	cmp	r2, r3
 8006412:	d3b7      	bcc.n	8006384 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006426:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006434:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	2b00      	cmp	r3, #0
 800643a:	d105      	bne.n	8006448 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	f043 0210 	orr.w	r2, r3, #16
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699a      	ldr	r2, [r3, #24]
 800644c:	4b0f      	ldr	r3, [pc, #60]	; (800648c <USB_DevInit+0x2c4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f043 0208 	orr.w	r2, r3, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d107      	bne.n	800647c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006488:	b004      	add	sp, #16
 800648a:	4770      	bx	lr
 800648c:	803c3800 	.word	0x803c3800

08006490 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	3301      	adds	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <USB_FlushTxFifo+0x64>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d901      	bls.n	80064b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e01b      	b.n	80064e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	daf2      	bge.n	800649e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	019b      	lsls	r3, r3, #6
 80064c0:	f043 0220 	orr.w	r2, r3, #32
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3301      	adds	r3, #1
 80064cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <USB_FlushTxFifo+0x64>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d901      	bls.n	80064da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e006      	b.n	80064e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d0f0      	beq.n	80064c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	00030d40 	.word	0x00030d40

080064f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	4a11      	ldr	r2, [pc, #68]	; (8006554 <USB_FlushRxFifo+0x5c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e018      	b.n	8006548 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	daf2      	bge.n	8006504 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2210      	movs	r2, #16
 8006526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3301      	adds	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a08      	ldr	r2, [pc, #32]	; (8006554 <USB_FlushRxFifo+0x5c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d901      	bls.n	800653a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e006      	b.n	8006548 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b10      	cmp	r3, #16
 8006544:	d0f0      	beq.n	8006528 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	00030d40 	.word	0x00030d40

08006558 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800658a:	b480      	push	{r7}
 800658c:	b087      	sub	sp, #28
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0306 	and.w	r3, r3, #6
 80065a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80065aa:	2300      	movs	r3, #0
 80065ac:	75fb      	strb	r3, [r7, #23]
 80065ae:	e00a      	b.n	80065c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d002      	beq.n	80065bc <USB_GetDevSpeed+0x32>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b06      	cmp	r3, #6
 80065ba:	d102      	bne.n	80065c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80065bc:	2302      	movs	r3, #2
 80065be:	75fb      	strb	r3, [r7, #23]
 80065c0:	e001      	b.n	80065c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80065c2:	230f      	movs	r3, #15
 80065c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d13a      	bne.n	8006666 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	f003 030f 	and.w	r3, r3, #15
 8006600:	2101      	movs	r1, #1
 8006602:	fa01 f303 	lsl.w	r3, r1, r3
 8006606:	b29b      	uxth	r3, r3
 8006608:	68f9      	ldr	r1, [r7, #12]
 800660a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660e:	4313      	orrs	r3, r2
 8006610:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	015a      	lsls	r2, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4413      	add	r3, r2
 800661a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d155      	bne.n	80066d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	791b      	ldrb	r3, [r3, #4]
 8006642:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006644:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	059b      	lsls	r3, r3, #22
 800664a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800664c:	4313      	orrs	r3, r2
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e036      	b.n	80066d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	2101      	movs	r1, #1
 8006678:	fa01 f303 	lsl.w	r3, r1, r3
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006684:	4313      	orrs	r3, r2
 8006686:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d11a      	bne.n	80066d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	791b      	ldrb	r3, [r3, #4]
 80066b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80066ba:	430b      	orrs	r3, r1
 80066bc:	4313      	orrs	r3, r2
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
	...

080066e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	785b      	ldrb	r3, [r3, #1]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d161      	bne.n	80067c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006716:	d11f      	bne.n	8006758 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	440a      	add	r2, r1
 800672e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006732:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006736:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	0151      	lsls	r1, r2, #5
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	440a      	add	r2, r1
 800674e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006756:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	2101      	movs	r1, #1
 800676a:	fa01 f303 	lsl.w	r3, r1, r3
 800676e:	b29b      	uxth	r3, r3
 8006770:	43db      	mvns	r3, r3
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006778:	4013      	ands	r3, r2
 800677a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	2101      	movs	r1, #1
 800678e:	fa01 f303 	lsl.w	r3, r1, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	43db      	mvns	r3, r3
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800679c:	4013      	ands	r3, r2
 800679e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	0159      	lsls	r1, r3, #5
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	440b      	add	r3, r1
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	4619      	mov	r1, r3
 80067bc:	4b35      	ldr	r3, [pc, #212]	; (8006894 <USB_DeactivateEndpoint+0x1b0>)
 80067be:	4013      	ands	r3, r2
 80067c0:	600b      	str	r3, [r1, #0]
 80067c2:	e060      	b.n	8006886 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067da:	d11f      	bne.n	800681c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006816:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800681a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	2101      	movs	r1, #1
 800682e:	fa01 f303 	lsl.w	r3, r1, r3
 8006832:	041b      	lsls	r3, r3, #16
 8006834:	43db      	mvns	r3, r3
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800683c:	4013      	ands	r3, r2
 800683e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	2101      	movs	r1, #1
 8006852:	fa01 f303 	lsl.w	r3, r1, r3
 8006856:	041b      	lsls	r3, r3, #16
 8006858:	43db      	mvns	r3, r3
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006860:	4013      	ands	r3, r2
 8006862:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	0159      	lsls	r1, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	440b      	add	r3, r1
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	4619      	mov	r1, r3
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <USB_DeactivateEndpoint+0x1b4>)
 8006882:	4013      	ands	r3, r2
 8006884:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	ec337800 	.word	0xec337800
 8006898:	eff37800 	.word	0xeff37800

0800689c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	4613      	mov	r3, r2
 80068a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	785b      	ldrb	r3, [r3, #1]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	f040 815c 	bne.w	8006b76 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d132      	bne.n	800692c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	0151      	lsls	r1, r2, #5
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	440a      	add	r2, r1
 8006900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006908:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006924:	0cdb      	lsrs	r3, r3, #19
 8006926:	04db      	lsls	r3, r3, #19
 8006928:	6113      	str	r3, [r2, #16]
 800692a:	e074      	b.n	8006a16 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006946:	0cdb      	lsrs	r3, r3, #19
 8006948:	04db      	lsls	r3, r3, #19
 800694a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	440a      	add	r2, r1
 8006962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006966:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800696a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800696e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6999      	ldr	r1, [r3, #24]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	440b      	add	r3, r1
 8006988:	1e59      	subs	r1, r3, #1
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006992:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006994:	4b9d      	ldr	r3, [pc, #628]	; (8006c0c <USB_EPStartXfer+0x370>)
 8006996:	400b      	ands	r3, r1
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	0148      	lsls	r0, r1, #5
 800699c:	69f9      	ldr	r1, [r7, #28]
 800699e:	4401      	add	r1, r0
 80069a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069a4:	4313      	orrs	r3, r2
 80069a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	0148      	lsls	r0, r1, #5
 80069c2:	69f9      	ldr	r1, [r7, #28]
 80069c4:	4401      	add	r1, r0
 80069c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80069ca:	4313      	orrs	r3, r2
 80069cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d11f      	bne.n	8006a16 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	0151      	lsls	r1, r2, #5
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	440a      	add	r2, r1
 80069ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80069f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a14:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d14b      	bne.n	8006ab4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a30:	461a      	mov	r2, r3
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	791b      	ldrb	r3, [r3, #4]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d128      	bne.n	8006a92 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e00f      	b.n	8006a92 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a90:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	0151      	lsls	r1, r2, #5
 8006aa4:	69fa      	ldr	r2, [r7, #28]
 8006aa6:	440a      	add	r2, r1
 8006aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	e133      	b.n	8006d1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	791b      	ldrb	r3, [r3, #4]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d015      	beq.n	8006b08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 811b 	beq.w	8006d1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	2101      	movs	r1, #1
 8006af8:	fa01 f303 	lsl.w	r3, r1, r3
 8006afc:	69f9      	ldr	r1, [r7, #28]
 8006afe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b02:	4313      	orrs	r3, r2
 8006b04:	634b      	str	r3, [r1, #52]	; 0x34
 8006b06:	e109      	b.n	8006d1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d110      	bne.n	8006b3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	e00f      	b.n	8006b5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	6919      	ldr	r1, [r3, #16]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	b298      	uxth	r0, r3
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 fade 	bl	8007130 <USB_WritePacket>
 8006b74:	e0d2      	b.n	8006d1c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b90:	0cdb      	lsrs	r3, r3, #19
 8006b92:	04db      	lsls	r3, r3, #19
 8006b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d126      	bne.n	8006c10 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd8:	69b9      	ldr	r1, [r7, #24]
 8006bda:	0148      	lsls	r0, r1, #5
 8006bdc:	69f9      	ldr	r1, [r7, #28]
 8006bde:	4401      	add	r1, r0
 8006be0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006be4:	4313      	orrs	r3, r2
 8006be6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c06:	6113      	str	r3, [r2, #16]
 8006c08:	e03a      	b.n	8006c80 <USB_EPStartXfer+0x3e4>
 8006c0a:	bf00      	nop
 8006c0c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	1e5a      	subs	r2, r3, #1
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	8afa      	ldrh	r2, [r7, #22]
 8006c2c:	fb03 f202 	mul.w	r2, r3, r2
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	8afb      	ldrh	r3, [r7, #22]
 8006c44:	04d9      	lsls	r1, r3, #19
 8006c46:	4b38      	ldr	r3, [pc, #224]	; (8006d28 <USB_EPStartXfer+0x48c>)
 8006c48:	400b      	ands	r3, r1
 8006c4a:	69b9      	ldr	r1, [r7, #24]
 8006c4c:	0148      	lsls	r0, r1, #5
 8006c4e:	69f9      	ldr	r1, [r7, #28]
 8006c50:	4401      	add	r1, r0
 8006c52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c56:	4313      	orrs	r3, r2
 8006c58:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c70:	69b9      	ldr	r1, [r7, #24]
 8006c72:	0148      	lsls	r0, r1, #5
 8006c74:	69f9      	ldr	r1, [r7, #28]
 8006c76:	4401      	add	r1, r0
 8006c78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10d      	bne.n	8006ca2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d009      	beq.n	8006ca2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6919      	ldr	r1, [r3, #16]
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	460a      	mov	r2, r1
 8006ca0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d128      	bne.n	8006cfc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d110      	bne.n	8006cdc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e00f      	b.n	8006cfc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	0151      	lsls	r1, r2, #5
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	440a      	add	r2, r1
 8006d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	1ff80000 	.word	0x1ff80000

08006d2c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	785b      	ldrb	r3, [r3, #1]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	f040 80ce 	bne.w	8006eea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d132      	bne.n	8006dbc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	0cdb      	lsrs	r3, r3, #19
 8006db6:	04db      	lsls	r3, r3, #19
 8006db8:	6113      	str	r3, [r2, #16]
 8006dba:	e04e      	b.n	8006e5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd6:	0cdb      	lsrs	r3, r3, #19
 8006dd8:	04db      	lsls	r3, r3, #19
 8006dda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	0151      	lsls	r1, r2, #5
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	440a      	add	r2, r1
 8006df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dfa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006dfe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	699a      	ldr	r2, [r3, #24]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d903      	bls.n	8006e14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e4a:	6939      	ldr	r1, [r7, #16]
 8006e4c:	0148      	lsls	r0, r1, #5
 8006e4e:	6979      	ldr	r1, [r7, #20]
 8006e50:	4401      	add	r1, r0
 8006e52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006e56:	4313      	orrs	r3, r2
 8006e58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d11e      	bne.n	8006e9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e74:	461a      	mov	r2, r3
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e097      	b.n	8006fce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ebc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f000 8083 	beq.w	8006fce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f003 030f 	and.w	r3, r3, #15
 8006ed8:	2101      	movs	r1, #1
 8006eda:	fa01 f303 	lsl.w	r3, r1, r3
 8006ede:	6979      	ldr	r1, [r7, #20]
 8006ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	634b      	str	r3, [r1, #52]	; 0x34
 8006ee8:	e071      	b.n	8006fce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f04:	0cdb      	lsrs	r3, r3, #19
 8006f06:	04db      	lsls	r3, r3, #19
 8006f08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	691a      	ldr	r2, [r3, #16]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7c:	6939      	ldr	r1, [r7, #16]
 8006f7e:	0148      	lsls	r0, r1, #5
 8006f80:	6979      	ldr	r1, [r7, #20]
 8006f82:	4401      	add	r1, r0
 8006f84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d10d      	bne.n	8006fae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	6919      	ldr	r1, [r3, #16]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	460a      	mov	r2, r1
 8006fac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d14a      	bne.n	8007090 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	015a      	lsls	r2, r3, #5
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	4413      	add	r3, r2
 8007004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800700e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007012:	f040 8086 	bne.w	8007122 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	7812      	ldrb	r2, [r2, #0]
 800702a:	0151      	lsls	r1, r2, #5
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	440a      	add	r2, r1
 8007030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007034:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007038:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800705c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f242 7210 	movw	r2, #10000	; 0x2710
 800706a:	4293      	cmp	r3, r2
 800706c:	d902      	bls.n	8007074 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	75fb      	strb	r3, [r7, #23]
          break;
 8007072:	e056      	b.n	8007122 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800708c:	d0e7      	beq.n	800705e <USB_EPStopXfer+0x82>
 800708e:	e048      	b.n	8007122 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a8:	d13b      	bne.n	8007122 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	7812      	ldrb	r2, [r2, #0]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
 80070f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80070fe:	4293      	cmp	r3, r2
 8007100:	d902      	bls.n	8007108 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	75fb      	strb	r3, [r7, #23]
          break;
 8007106:	e00c      	b.n	8007122 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800711c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007120:	d0e7      	beq.n	80070f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007122:	7dfb      	ldrb	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007130:	b480      	push	{r7}
 8007132:	b089      	sub	sp, #36	; 0x24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4611      	mov	r1, r2
 800713c:	461a      	mov	r2, r3
 800713e:	460b      	mov	r3, r1
 8007140:	71fb      	strb	r3, [r7, #7]
 8007142:	4613      	mov	r3, r2
 8007144:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800714e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	d123      	bne.n	800719e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007156:	88bb      	ldrh	r3, [r7, #4]
 8007158:	3303      	adds	r3, #3
 800715a:	089b      	lsrs	r3, r3, #2
 800715c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800715e:	2300      	movs	r3, #0
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	e018      	b.n	8007196 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	031a      	lsls	r2, r3, #12
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007170:	461a      	mov	r2, r3
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	3301      	adds	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	3301      	adds	r3, #1
 8007182:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	3301      	adds	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	3301      	adds	r3, #1
 800718e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	3301      	adds	r3, #1
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	69ba      	ldr	r2, [r7, #24]
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	429a      	cmp	r2, r3
 800719c:	d3e2      	bcc.n	8007164 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3724      	adds	r7, #36	; 0x24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b08b      	sub	sp, #44	; 0x2c
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071c2:	88fb      	ldrh	r3, [r7, #6]
 80071c4:	089b      	lsrs	r3, r3, #2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071d2:	2300      	movs	r3, #0
 80071d4:	623b      	str	r3, [r7, #32]
 80071d6:	e014      	b.n	8007202 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	3301      	adds	r3, #1
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	3301      	adds	r3, #1
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	3301      	adds	r3, #1
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	3301      	adds	r3, #1
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	3301      	adds	r3, #1
 8007200:	623b      	str	r3, [r7, #32]
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	429a      	cmp	r2, r3
 8007208:	d3e6      	bcc.n	80071d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800720a:	8bfb      	ldrh	r3, [r7, #30]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01e      	beq.n	800724e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800721a:	461a      	mov	r2, r3
 800721c:	f107 0310 	add.w	r3, r7, #16
 8007220:	6812      	ldr	r2, [r2, #0]
 8007222:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
 8007230:	b2da      	uxtb	r2, r3
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	701a      	strb	r2, [r3, #0]
      i++;
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	3301      	adds	r3, #1
 800723a:	623b      	str	r3, [r7, #32]
      pDest++;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	3301      	adds	r3, #1
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007242:	8bfb      	ldrh	r3, [r7, #30]
 8007244:	3b01      	subs	r3, #1
 8007246:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007248:	8bfb      	ldrh	r3, [r7, #30]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1ea      	bne.n	8007224 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007250:	4618      	mov	r0, r3
 8007252:	372c      	adds	r7, #44	; 0x2c
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d12c      	bne.n	80072d2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	db12      	blt.n	80072b0 <USB_EPSetStall+0x54>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00f      	beq.n	80072b0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072ae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	e02b      	b.n	800732a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db12      	blt.n	800730a <USB_EPSetStall+0xae>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00f      	beq.n	800730a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	0151      	lsls	r1, r2, #5
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	440a      	add	r2, r1
 8007300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007304:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007308:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007328:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d128      	bne.n	80073a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007372:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	791b      	ldrb	r3, [r3, #4]
 8007378:	2b03      	cmp	r3, #3
 800737a:	d003      	beq.n	8007384 <USB_EPClearStall+0x4c>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	791b      	ldrb	r3, [r3, #4]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d138      	bne.n	80073f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	0151      	lsls	r1, r2, #5
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	440a      	add	r2, r1
 800739a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800739e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	e027      	b.n	80073f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	0151      	lsls	r1, r2, #5
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	440a      	add	r2, r1
 80073bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	791b      	ldrb	r3, [r3, #4]
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d003      	beq.n	80073d6 <USB_EPClearStall+0x9e>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	791b      	ldrb	r3, [r3, #4]
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d10f      	bne.n	80073f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007422:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007426:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743e:	4313      	orrs	r3, r2
 8007440:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800747e:	f023 0302 	bic.w	r3, r3, #2
 8007482:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074c0:	f043 0302 	orr.w	r3, r3, #2
 80074c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4013      	ands	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	4013      	ands	r3, r2
 800751c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	0c1b      	lsrs	r3, r3, #16
}
 8007522:	4618      	mov	r0, r3
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	4013      	ands	r3, r2
 8007550:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	b29b      	uxth	r3, r3
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4013      	ands	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007590:	68bb      	ldr	r3, [r7, #8]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800759e:	b480      	push	{r7}
 80075a0:	b087      	sub	sp, #28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	fa22 f303 	lsr.w	r3, r2, r3
 80075ce:	01db      	lsls	r3, r3, #7
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	4013      	ands	r3, r2
 80075ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075ec:	68bb      	ldr	r3, [r7, #8]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0301 	and.w	r3, r3, #1
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007630:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007634:	f023 0307 	bic.w	r3, r3, #7
 8007638:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	460b      	mov	r3, r1
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	333c      	adds	r3, #60	; 0x3c
 8007672:	3304      	adds	r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	4a26      	ldr	r2, [pc, #152]	; (8007714 <USB_EP0_OutStart+0xb8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d90a      	bls.n	8007696 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800768c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007690:	d101      	bne.n	8007696 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	e037      	b.n	8007706 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769c:	461a      	mov	r2, r3
 800769e:	2300      	movs	r3, #0
 80076a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c4:	f043 0318 	orr.w	r3, r3, #24
 80076c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80076dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d10f      	bne.n	8007704 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007702:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	4f54300a 	.word	0x4f54300a

08007718 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	3301      	adds	r3, #1
 8007728:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4a13      	ldr	r2, [pc, #76]	; (800777c <USB_CoreReset+0x64>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d901      	bls.n	8007736 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e01b      	b.n	800776e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	daf2      	bge.n	8007724 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f043 0201 	orr.w	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4a09      	ldr	r2, [pc, #36]	; (800777c <USB_CoreReset+0x64>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e006      	b.n	800776e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d0f0      	beq.n	800774e <USB_CoreReset+0x36>

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	00030d40 	.word	0x00030d40

08007780 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800778c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007790:	f002 fca6 	bl	800a0e0 <USBD_static_malloc>
 8007794:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	32b0      	adds	r2, #176	; 0xb0
 80077a6:	2100      	movs	r1, #0
 80077a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e0d4      	b.n	800795a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80077b0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80077b4:	2100      	movs	r1, #0
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f002 fd00 	bl	800a1bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32b0      	adds	r2, #176	; 0xb0
 80077c6:	68f9      	ldr	r1, [r7, #12]
 80077c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	32b0      	adds	r2, #176	; 0xb0
 80077d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7c1b      	ldrb	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d138      	bne.n	800785a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077e8:	4b5e      	ldr	r3, [pc, #376]	; (8007964 <USBD_CDC_Init+0x1e4>)
 80077ea:	7819      	ldrb	r1, [r3, #0]
 80077ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f0:	2202      	movs	r2, #2
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f002 fb51 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077f8:	4b5a      	ldr	r3, [pc, #360]	; (8007964 <USBD_CDC_Init+0x1e4>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	f003 020f 	and.w	r2, r3, #15
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	440b      	add	r3, r1
 800780c:	3324      	adds	r3, #36	; 0x24
 800780e:	2201      	movs	r2, #1
 8007810:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007812:	4b55      	ldr	r3, [pc, #340]	; (8007968 <USBD_CDC_Init+0x1e8>)
 8007814:	7819      	ldrb	r1, [r3, #0]
 8007816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800781a:	2202      	movs	r2, #2
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f002 fb3c 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007822:	4b51      	ldr	r3, [pc, #324]	; (8007968 <USBD_CDC_Init+0x1e8>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800783a:	2201      	movs	r2, #1
 800783c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800783e:	4b4b      	ldr	r3, [pc, #300]	; (800796c <USBD_CDC_Init+0x1ec>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	f003 020f 	and.w	r2, r3, #15
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	3326      	adds	r3, #38	; 0x26
 8007854:	2210      	movs	r2, #16
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	e035      	b.n	80078c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800785a:	4b42      	ldr	r3, [pc, #264]	; (8007964 <USBD_CDC_Init+0x1e4>)
 800785c:	7819      	ldrb	r1, [r3, #0]
 800785e:	2340      	movs	r3, #64	; 0x40
 8007860:	2202      	movs	r2, #2
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f002 fb19 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007868:	4b3e      	ldr	r3, [pc, #248]	; (8007964 <USBD_CDC_Init+0x1e4>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 020f 	and.w	r2, r3, #15
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3324      	adds	r3, #36	; 0x24
 800787e:	2201      	movs	r2, #1
 8007880:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007882:	4b39      	ldr	r3, [pc, #228]	; (8007968 <USBD_CDC_Init+0x1e8>)
 8007884:	7819      	ldrb	r1, [r3, #0]
 8007886:	2340      	movs	r3, #64	; 0x40
 8007888:	2202      	movs	r2, #2
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f002 fb05 	bl	8009e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007890:	4b35      	ldr	r3, [pc, #212]	; (8007968 <USBD_CDC_Init+0x1e8>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078a8:	2201      	movs	r2, #1
 80078aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078ac:	4b2f      	ldr	r3, [pc, #188]	; (800796c <USBD_CDC_Init+0x1ec>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	f003 020f 	and.w	r2, r3, #15
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	440b      	add	r3, r1
 80078c0:	3326      	adds	r3, #38	; 0x26
 80078c2:	2210      	movs	r2, #16
 80078c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078c6:	4b29      	ldr	r3, [pc, #164]	; (800796c <USBD_CDC_Init+0x1ec>)
 80078c8:	7819      	ldrb	r1, [r3, #0]
 80078ca:	2308      	movs	r3, #8
 80078cc:	2203      	movs	r2, #3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f002 fae3 	bl	8009e9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80078d4:	4b25      	ldr	r3, [pc, #148]	; (800796c <USBD_CDC_Init+0x1ec>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	f003 020f 	and.w	r2, r3, #15
 80078dc:	6879      	ldr	r1, [r7, #4]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	440b      	add	r3, r1
 80078e8:	3324      	adds	r3, #36	; 0x24
 80078ea:	2201      	movs	r2, #1
 80078ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	33b0      	adds	r3, #176	; 0xb0
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007920:	2b00      	cmp	r3, #0
 8007922:	d101      	bne.n	8007928 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007924:	2302      	movs	r3, #2
 8007926:	e018      	b.n	800795a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	7c1b      	ldrb	r3, [r3, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007930:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <USBD_CDC_Init+0x1e8>)
 8007932:	7819      	ldrb	r1, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800793a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f002 fb9a 	bl	800a078 <USBD_LL_PrepareReceive>
 8007944:	e008      	b.n	8007958 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007946:	4b08      	ldr	r3, [pc, #32]	; (8007968 <USBD_CDC_Init+0x1e8>)
 8007948:	7819      	ldrb	r1, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f002 fb90 	bl	800a078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000097 	.word	0x20000097
 8007968:	20000098 	.word	0x20000098
 800796c:	20000099 	.word	0x20000099

08007970 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800797c:	4b3a      	ldr	r3, [pc, #232]	; (8007a68 <USBD_CDC_DeInit+0xf8>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f002 faaf 	bl	8009ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007988:	4b37      	ldr	r3, [pc, #220]	; (8007a68 <USBD_CDC_DeInit+0xf8>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	3324      	adds	r3, #36	; 0x24
 800799e:	2200      	movs	r2, #0
 80079a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80079a2:	4b32      	ldr	r3, [pc, #200]	; (8007a6c <USBD_CDC_DeInit+0xfc>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f002 fa9c 	bl	8009ee6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80079ae:	4b2f      	ldr	r3, [pc, #188]	; (8007a6c <USBD_CDC_DeInit+0xfc>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	f003 020f 	and.w	r2, r3, #15
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079c6:	2200      	movs	r2, #0
 80079c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80079ca:	4b29      	ldr	r3, [pc, #164]	; (8007a70 <USBD_CDC_DeInit+0x100>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f002 fa88 	bl	8009ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80079d6:	4b26      	ldr	r3, [pc, #152]	; (8007a70 <USBD_CDC_DeInit+0x100>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 020f 	and.w	r2, r3, #15
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	2200      	movs	r2, #0
 80079ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079f0:	4b1f      	ldr	r3, [pc, #124]	; (8007a70 <USBD_CDC_DeInit+0x100>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 020f 	and.w	r2, r3, #15
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	440b      	add	r3, r1
 8007a04:	3326      	adds	r3, #38	; 0x26
 8007a06:	2200      	movs	r2, #0
 8007a08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	32b0      	adds	r2, #176	; 0xb0
 8007a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01f      	beq.n	8007a5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	33b0      	adds	r3, #176	; 0xb0
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	32b0      	adds	r2, #176	; 0xb0
 8007a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f002 fb5c 	bl	800a0fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	32b0      	adds	r2, #176	; 0xb0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000097 	.word	0x20000097
 8007a6c:	20000098 	.word	0x20000098
 8007a70:	20000099 	.word	0x20000099

08007a74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	32b0      	adds	r2, #176	; 0xb0
 8007a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e0bf      	b.n	8007c24 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d050      	beq.n	8007b52 <USBD_CDC_Setup+0xde>
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	f040 80af 	bne.w	8007c14 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	88db      	ldrh	r3, [r3, #6]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d03a      	beq.n	8007b34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	b25b      	sxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	da1b      	bge.n	8007b00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	33b0      	adds	r3, #176	; 0xb0
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ade:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	88d2      	ldrh	r2, [r2, #6]
 8007ae4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	88db      	ldrh	r3, [r3, #6]
 8007aea:	2b07      	cmp	r3, #7
 8007aec:	bf28      	it	cs
 8007aee:	2307      	movcs	r3, #7
 8007af0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	89fa      	ldrh	r2, [r7, #14]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fda5 	bl	8009648 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007afe:	e090      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	785a      	ldrb	r2, [r3, #1]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	88db      	ldrh	r3, [r3, #6]
 8007b0e:	2b3f      	cmp	r3, #63	; 0x3f
 8007b10:	d803      	bhi.n	8007b1a <USBD_CDC_Setup+0xa6>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	88db      	ldrh	r3, [r3, #6]
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	e000      	b.n	8007b1c <USBD_CDC_Setup+0xa8>
 8007b1a:	2240      	movs	r2, #64	; 0x40
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b22:	6939      	ldr	r1, [r7, #16]
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 fdb7 	bl	80096a0 <USBD_CtlPrepareRx>
      break;
 8007b32:	e076      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	33b0      	adds	r3, #176	; 0xb0
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	7850      	ldrb	r0, [r2, #1]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	4798      	blx	r3
      break;
 8007b50:	e067      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	2b0b      	cmp	r3, #11
 8007b58:	d851      	bhi.n	8007bfe <USBD_CDC_Setup+0x18a>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <USBD_CDC_Setup+0xec>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b91 	.word	0x08007b91
 8007b64:	08007c0d 	.word	0x08007c0d
 8007b68:	08007bff 	.word	0x08007bff
 8007b6c:	08007bff 	.word	0x08007bff
 8007b70:	08007bff 	.word	0x08007bff
 8007b74:	08007bff 	.word	0x08007bff
 8007b78:	08007bff 	.word	0x08007bff
 8007b7c:	08007bff 	.word	0x08007bff
 8007b80:	08007bff 	.word	0x08007bff
 8007b84:	08007bff 	.word	0x08007bff
 8007b88:	08007bbb 	.word	0x08007bbb
 8007b8c:	08007be5 	.word	0x08007be5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b03      	cmp	r3, #3
 8007b9a:	d107      	bne.n	8007bac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b9c:	f107 030a 	add.w	r3, r7, #10
 8007ba0:	2202      	movs	r2, #2
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fd4f 	bl	8009648 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007baa:	e032      	b.n	8007c12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f001 fcd9 	bl	8009566 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb8:	e02b      	b.n	8007c12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d107      	bne.n	8007bd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bc6:	f107 030d 	add.w	r3, r7, #13
 8007bca:	2201      	movs	r2, #1
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fd3a 	bl	8009648 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bd4:	e01d      	b.n	8007c12 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bd6:	6839      	ldr	r1, [r7, #0]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fcc4 	bl	8009566 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	75fb      	strb	r3, [r7, #23]
          break;
 8007be2:	e016      	b.n	8007c12 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d00f      	beq.n	8007c10 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fcb7 	bl	8009566 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bfc:	e008      	b.n	8007c10 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 fcb0 	bl	8009566 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c06:	2303      	movs	r3, #3
 8007c08:	75fb      	strb	r3, [r7, #23]
          break;
 8007c0a:	e002      	b.n	8007c12 <USBD_CDC_Setup+0x19e>
          break;
 8007c0c:	bf00      	nop
 8007c0e:	e008      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>
          break;
 8007c10:	bf00      	nop
      }
      break;
 8007c12:	e006      	b.n	8007c22 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fca5 	bl	8009566 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	32b0      	adds	r2, #176	; 0xb0
 8007c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e065      	b.n	8007d22 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	32b0      	adds	r2, #176	; 0xb0
 8007c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c66:	78fb      	ldrb	r3, [r7, #3]
 8007c68:	f003 020f 	and.w	r2, r3, #15
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	440b      	add	r3, r1
 8007c78:	3318      	adds	r3, #24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d02f      	beq.n	8007ce0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	f003 020f 	and.w	r2, r3, #15
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	3318      	adds	r3, #24
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	f003 010f 	and.w	r1, r3, #15
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	440b      	add	r3, r1
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4403      	add	r3, r0
 8007ca8:	3348      	adds	r3, #72	; 0x48
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d112      	bne.n	8007ce0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	f003 020f 	and.w	r2, r3, #15
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	3318      	adds	r3, #24
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cd2:	78f9      	ldrb	r1, [r7, #3]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f002 f9ac 	bl	800a036 <USBD_LL_Transmit>
 8007cde:	e01f      	b.n	8007d20 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	33b0      	adds	r3, #176	; 0xb0
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d010      	beq.n	8007d20 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	33b0      	adds	r3, #176	; 0xb0
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	32b0      	adds	r2, #176	; 0xb0
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	32b0      	adds	r2, #176	; 0xb0
 8007d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e01a      	b.n	8007d92 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f002 f9aa 	bl	800a0ba <USBD_LL_GetRxDataSize>
 8007d66:	4602      	mov	r2, r0
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	33b0      	adds	r3, #176	; 0xb0
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	32b0      	adds	r2, #176	; 0xb0
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e025      	b.n	8007e08 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	33b0      	adds	r3, #176	; 0xb0
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d01a      	beq.n	8007e06 <USBD_CDC_EP0_RxReady+0x6c>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007dd6:	2bff      	cmp	r3, #255	; 0xff
 8007dd8:	d015      	beq.n	8007e06 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	33b0      	adds	r3, #176	; 0xb0
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007df2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dfa:	b292      	uxth	r2, r2
 8007dfc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	22ff      	movs	r2, #255	; 0xff
 8007e02:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e18:	2182      	movs	r1, #130	; 0x82
 8007e1a:	4818      	ldr	r0, [pc, #96]	; (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e1c:	f000 fd6b 	bl	80088f6 <USBD_GetEpDesc>
 8007e20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e22:	2101      	movs	r1, #1
 8007e24:	4815      	ldr	r0, [pc, #84]	; (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e26:	f000 fd66 	bl	80088f6 <USBD_GetEpDesc>
 8007e2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e2c:	2181      	movs	r1, #129	; 0x81
 8007e2e:	4813      	ldr	r0, [pc, #76]	; (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e30:	f000 fd61 	bl	80088f6 <USBD_GetEpDesc>
 8007e34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2210      	movs	r2, #16
 8007e40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d006      	beq.n	8007e56 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e50:	711a      	strb	r2, [r3, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d006      	beq.n	8007e6a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e64:	711a      	strb	r2, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2243      	movs	r2, #67	; 0x43
 8007e6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000054 	.word	0x20000054

08007e80 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e88:	2182      	movs	r1, #130	; 0x82
 8007e8a:	4818      	ldr	r0, [pc, #96]	; (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e8c:	f000 fd33 	bl	80088f6 <USBD_GetEpDesc>
 8007e90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e92:	2101      	movs	r1, #1
 8007e94:	4815      	ldr	r0, [pc, #84]	; (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e96:	f000 fd2e 	bl	80088f6 <USBD_GetEpDesc>
 8007e9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e9c:	2181      	movs	r1, #129	; 0x81
 8007e9e:	4813      	ldr	r0, [pc, #76]	; (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ea0:	f000 fd29 	bl	80088f6 <USBD_GetEpDesc>
 8007ea4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	711a      	strb	r2, [r3, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f042 0202 	orr.w	r2, r2, #2
 8007ec4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d006      	beq.n	8007eda <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	711a      	strb	r2, [r3, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f042 0202 	orr.w	r2, r2, #2
 8007ed8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2243      	movs	r2, #67	; 0x43
 8007ede:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000054 	.word	0x20000054

08007ef0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ef8:	2182      	movs	r1, #130	; 0x82
 8007efa:	4818      	ldr	r0, [pc, #96]	; (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007efc:	f000 fcfb 	bl	80088f6 <USBD_GetEpDesc>
 8007f00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f02:	2101      	movs	r1, #1
 8007f04:	4815      	ldr	r0, [pc, #84]	; (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f06:	f000 fcf6 	bl	80088f6 <USBD_GetEpDesc>
 8007f0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f0c:	2181      	movs	r1, #129	; 0x81
 8007f0e:	4813      	ldr	r0, [pc, #76]	; (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f10:	f000 fcf1 	bl	80088f6 <USBD_GetEpDesc>
 8007f14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2210      	movs	r2, #16
 8007f20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f30:	711a      	strb	r2, [r3, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d006      	beq.n	8007f4a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f44:	711a      	strb	r2, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2243      	movs	r2, #67	; 0x43
 8007f4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f50:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000054 	.word	0x20000054

08007f60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	220a      	movs	r2, #10
 8007f6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f6e:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20000010 	.word	0x20000010

08007f80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e009      	b.n	8007fa8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	33b0      	adds	r3, #176	; 0xb0
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	32b0      	adds	r2, #176	; 0xb0
 8007fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fce:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e008      	b.n	8007fec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	32b0      	adds	r2, #176	; 0xb0
 800800c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008010:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008018:	2303      	movs	r3, #3
 800801a:	e004      	b.n	8008026 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
	...

08008034 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	32b0      	adds	r2, #176	; 0xb0
 8008046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	32b0      	adds	r2, #176	; 0xb0
 800805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	e025      	b.n	80080b2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800806c:	2b00      	cmp	r3, #0
 800806e:	d11f      	bne.n	80080b0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2201      	movs	r2, #1
 8008074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008078:	4b10      	ldr	r3, [pc, #64]	; (80080bc <USBD_CDC_TransmitPacket+0x88>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	4613      	mov	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4403      	add	r3, r0
 8008092:	3318      	adds	r3, #24
 8008094:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <USBD_CDC_TransmitPacket+0x88>)
 8008098:	7819      	ldrb	r1, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 ffc5 	bl	800a036 <USBD_LL_Transmit>

    ret = USBD_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000097 	.word	0x20000097

080080c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	32b0      	adds	r2, #176	; 0xb0
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32b0      	adds	r2, #176	; 0xb0
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e018      	b.n	8008120 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	7c1b      	ldrb	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10a      	bne.n	800810c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <USBD_CDC_ReceivePacket+0x68>)
 80080f8:	7819      	ldrb	r1, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 ffb7 	bl	800a078 <USBD_LL_PrepareReceive>
 800810a:	e008      	b.n	800811e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <USBD_CDC_ReceivePacket+0x68>)
 800810e:	7819      	ldrb	r1, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008116:	2340      	movs	r3, #64	; 0x40
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 ffad 	bl	800a078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000098 	.word	0x20000098

0800812c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8008140:	4817      	ldr	r0, [pc, #92]	; (80081a0 <USBD_Init+0x74>)
 8008142:	f002 fcad 	bl	800aaa0 <iprintf>
 8008146:	4817      	ldr	r0, [pc, #92]	; (80081a4 <USBD_Init+0x78>)
 8008148:	f002 fcaa 	bl	800aaa0 <iprintf>
 800814c:	200a      	movs	r0, #10
 800814e:	f002 fcbf 	bl	800aad0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	e01f      	b.n	8008196 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	79fa      	ldrb	r2, [r7, #7]
 8008188:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f001 fe1e 	bl	8009dcc <USBD_LL_Init>
 8008190:	4603      	mov	r3, r0
 8008192:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008194:	7dfb      	ldrb	r3, [r7, #23]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	0800d0b0 	.word	0x0800d0b0
 80081a4:	0800d0b8 	.word	0x0800d0b8

080081a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80081bc:	481a      	ldr	r0, [pc, #104]	; (8008228 <USBD_RegisterClass+0x80>)
 80081be:	f002 fc6f 	bl	800aaa0 <iprintf>
 80081c2:	481a      	ldr	r0, [pc, #104]	; (800822c <USBD_RegisterClass+0x84>)
 80081c4:	f002 fc6c 	bl	800aaa0 <iprintf>
 80081c8:	200a      	movs	r0, #10
 80081ca:	f002 fc81 	bl	800aad0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e025      	b.n	800821e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	32ae      	adds	r2, #174	; 0xae
 80081e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00f      	beq.n	800820e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	32ae      	adds	r2, #174	; 0xae
 80081f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fe:	f107 020e 	add.w	r2, r7, #14
 8008202:	4610      	mov	r0, r2
 8008204:	4798      	blx	r3
 8008206:	4602      	mov	r2, r0
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	0800d0b0 	.word	0x0800d0b0
 800822c:	0800d0d0 	.word	0x0800d0d0

08008230 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 fe13 	bl	8009e64 <USBD_LL_Start>
 800823e:	4603      	mov	r3, r0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	4611      	mov	r1, r2
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	4798      	blx	r3
 8008288:	4603      	mov	r3, r0
 800828a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800828c:	7bfb      	ldrb	r3, [r7, #15]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	78fa      	ldrb	r2, [r7, #3]
 80082b0:	4611      	mov	r1, r2
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80082bc:	2303      	movs	r3, #3
 80082be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 f908 	bl	80094f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80082f0:	461a      	mov	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	2b02      	cmp	r3, #2
 8008304:	d01a      	beq.n	800833c <USBD_LL_SetupStage+0x72>
 8008306:	2b02      	cmp	r3, #2
 8008308:	d822      	bhi.n	8008350 <USBD_LL_SetupStage+0x86>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <USBD_LL_SetupStage+0x4a>
 800830e:	2b01      	cmp	r3, #1
 8008310:	d00a      	beq.n	8008328 <USBD_LL_SetupStage+0x5e>
 8008312:	e01d      	b.n	8008350 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fb5f 	bl	80089e0 <USBD_StdDevReq>
 8008322:	4603      	mov	r3, r0
 8008324:	73fb      	strb	r3, [r7, #15]
      break;
 8008326:	e020      	b.n	800836a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fbc7 	bl	8008ac4 <USBD_StdItfReq>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
      break;
 800833a:	e016      	b.n	800836a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fc29 	bl	8008b9c <USBD_StdEPReq>
 800834a:	4603      	mov	r3, r0
 800834c:	73fb      	strb	r3, [r7, #15]
      break;
 800834e:	e00c      	b.n	800836a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008356:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800835a:	b2db      	uxtb	r3, r3
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fde0 	bl	8009f24 <USBD_LL_StallEP>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]
      break;
 8008368:	bf00      	nop
  }

  return ret;
 800836a:	7bfb      	ldrb	r3, [r7, #15]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	460b      	mov	r3, r1
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d16e      	bne.n	800846a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008392:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800839a:	2b03      	cmp	r3, #3
 800839c:	f040 8098 	bne.w	80084d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d913      	bls.n	80083d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	4293      	cmp	r3, r2
 80083c4:	bf28      	it	cs
 80083c6:	4613      	movcs	r3, r2
 80083c8:	461a      	mov	r2, r3
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f001 f984 	bl	80096da <USBD_CtlContinueRx>
 80083d2:	e07d      	b.n	80084d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d014      	beq.n	800840c <USBD_LL_DataOutStage+0x98>
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d81d      	bhi.n	8008422 <USBD_LL_DataOutStage+0xae>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <USBD_LL_DataOutStage+0x7c>
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d003      	beq.n	80083f6 <USBD_LL_DataOutStage+0x82>
 80083ee:	e018      	b.n	8008422 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	75bb      	strb	r3, [r7, #22]
            break;
 80083f4:	e018      	b.n	8008428 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 fa5e 	bl	80088c2 <USBD_CoreFindIF>
 8008406:	4603      	mov	r3, r0
 8008408:	75bb      	strb	r3, [r7, #22]
            break;
 800840a:	e00d      	b.n	8008428 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008412:	b2db      	uxtb	r3, r3
 8008414:	4619      	mov	r1, r3
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fa60 	bl	80088dc <USBD_CoreFindEP>
 800841c:	4603      	mov	r3, r0
 800841e:	75bb      	strb	r3, [r7, #22]
            break;
 8008420:	e002      	b.n	8008428 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	75bb      	strb	r3, [r7, #22]
            break;
 8008426:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008428:	7dbb      	ldrb	r3, [r7, #22]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d119      	bne.n	8008462 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b03      	cmp	r3, #3
 8008438:	d113      	bne.n	8008462 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800843a:	7dba      	ldrb	r2, [r7, #22]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	32ae      	adds	r2, #174	; 0xae
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800844a:	7dba      	ldrb	r2, [r7, #22]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008452:	7dba      	ldrb	r2, [r7, #22]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	32ae      	adds	r2, #174	; 0xae
 8008458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f001 f94a 	bl	80096fc <USBD_CtlSendStatus>
 8008468:	e032      	b.n	80084d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fa31 	bl	80088dc <USBD_CoreFindEP>
 800847a:	4603      	mov	r3, r0
 800847c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800847e:	7dbb      	ldrb	r3, [r7, #22]
 8008480:	2bff      	cmp	r3, #255	; 0xff
 8008482:	d025      	beq.n	80084d0 <USBD_LL_DataOutStage+0x15c>
 8008484:	7dbb      	ldrb	r3, [r7, #22]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d122      	bne.n	80084d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b03      	cmp	r3, #3
 8008494:	d117      	bne.n	80084c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008496:	7dba      	ldrb	r2, [r7, #22]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	32ae      	adds	r2, #174	; 0xae
 800849c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80084a6:	7dba      	ldrb	r2, [r7, #22]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80084ae:	7dba      	ldrb	r2, [r7, #22]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	32ae      	adds	r2, #174	; 0xae
 80084b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	7afa      	ldrb	r2, [r7, #11]
 80084bc:	4611      	mov	r1, r2
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	4798      	blx	r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084cc:	7dfb      	ldrb	r3, [r7, #23]
 80084ce:	e000      	b.n	80084d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	460b      	mov	r3, r1
 80084e4:	607a      	str	r2, [r7, #4]
 80084e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d16f      	bne.n	80085ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3314      	adds	r3, #20
 80084f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d15a      	bne.n	80085b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	429a      	cmp	r2, r3
 8008508:	d914      	bls.n	8008534 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	461a      	mov	r2, r3
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f001 f8ac 	bl	800967e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008526:	2300      	movs	r3, #0
 8008528:	2200      	movs	r2, #0
 800852a:	2100      	movs	r1, #0
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f001 fda3 	bl	800a078 <USBD_LL_PrepareReceive>
 8008532:	e03f      	b.n	80085b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	68da      	ldr	r2, [r3, #12]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	429a      	cmp	r2, r3
 800853e:	d11c      	bne.n	800857a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008548:	429a      	cmp	r2, r3
 800854a:	d316      	bcc.n	800857a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008556:	429a      	cmp	r2, r3
 8008558:	d20f      	bcs.n	800857a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800855a:	2200      	movs	r2, #0
 800855c:	2100      	movs	r1, #0
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f001 f88d 	bl	800967e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800856c:	2300      	movs	r3, #0
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f001 fd80 	bl	800a078 <USBD_LL_PrepareReceive>
 8008578:	e01c      	b.n	80085b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b03      	cmp	r3, #3
 8008584:	d10f      	bne.n	80085a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d009      	beq.n	80085a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085a6:	2180      	movs	r1, #128	; 0x80
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f001 fcbb 	bl	8009f24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f001 f8b7 	bl	8009722 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d03a      	beq.n	8008634 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fe42 	bl	8008248 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80085cc:	e032      	b.n	8008634 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	4619      	mov	r1, r3
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f97f 	bl	80088dc <USBD_CoreFindEP>
 80085de:	4603      	mov	r3, r0
 80085e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2bff      	cmp	r3, #255	; 0xff
 80085e6:	d025      	beq.n	8008634 <USBD_LL_DataInStage+0x15a>
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d122      	bne.n	8008634 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d11c      	bne.n	8008634 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085fa:	7dfa      	ldrb	r2, [r7, #23]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	32ae      	adds	r2, #174	; 0xae
 8008600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d014      	beq.n	8008634 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800860a:	7dfa      	ldrb	r2, [r7, #23]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008612:	7dfa      	ldrb	r2, [r7, #23]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	32ae      	adds	r2, #174	; 0xae
 8008618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	7afa      	ldrb	r2, [r7, #11]
 8008620:	4611      	mov	r1, r2
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	4798      	blx	r3
 8008626:	4603      	mov	r3, r0
 8008628:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800862a:	7dbb      	ldrb	r3, [r7, #22]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008630:	7dbb      	ldrb	r3, [r7, #22]
 8008632:	e000      	b.n	8008636 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3718      	adds	r7, #24
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d014      	beq.n	80086a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00e      	beq.n	80086a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6852      	ldr	r2, [r2, #4]
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	4611      	mov	r1, r2
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	4798      	blx	r3
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80086a0:	2303      	movs	r3, #3
 80086a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	2200      	movs	r2, #0
 80086a8:	2100      	movs	r1, #0
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fbf5 	bl	8009e9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2240      	movs	r2, #64	; 0x40
 80086bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086c0:	2340      	movs	r3, #64	; 0x40
 80086c2:	2200      	movs	r2, #0
 80086c4:	2180      	movs	r1, #128	; 0x80
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f001 fbe7 	bl	8009e9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2240      	movs	r2, #64	; 0x40
 80086d6:	621a      	str	r2, [r3, #32]

  return ret;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	78fa      	ldrb	r2, [r7, #3]
 80086f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008710:	b2da      	uxtb	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2204      	movs	r2, #4
 800871c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b04      	cmp	r3, #4
 8008740:	d106      	bne.n	8008750 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008748:	b2da      	uxtb	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b03      	cmp	r3, #3
 8008770:	d110      	bne.n	8008794 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008782:	69db      	ldr	r3, [r3, #28]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	32ae      	adds	r2, #174	; 0xae
 80087b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e01c      	b.n	80087fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d115      	bne.n	80087f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	32ae      	adds	r2, #174	; 0xae
 80087d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00b      	beq.n	80087f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	32ae      	adds	r2, #174	; 0xae
 80087ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	78fa      	ldrb	r2, [r7, #3]
 80087f2:	4611      	mov	r1, r2
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	460b      	mov	r3, r1
 800880c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	32ae      	adds	r2, #174	; 0xae
 8008818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	e01c      	b.n	800885e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b03      	cmp	r3, #3
 800882e:	d115      	bne.n	800885c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	32ae      	adds	r2, #174	; 0xae
 800883a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	32ae      	adds	r2, #174	; 0xae
 800884e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	4611      	mov	r1, r2
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00e      	beq.n	80088b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6852      	ldr	r2, [r2, #4]
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	4611      	mov	r1, r2
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	b29a      	uxth	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	429a      	cmp	r2, r3
 800891c:	d920      	bls.n	8008960 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008926:	e013      	b.n	8008950 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008928:	f107 030a 	add.w	r3, r7, #10
 800892c:	4619      	mov	r1, r3
 800892e:	6978      	ldr	r0, [r7, #20]
 8008930:	f000 f81b 	bl	800896a <USBD_GetNextDesc>
 8008934:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	2b05      	cmp	r3, #5
 800893c:	d108      	bne.n	8008950 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	789b      	ldrb	r3, [r3, #2]
 8008946:	78fa      	ldrb	r2, [r7, #3]
 8008948:	429a      	cmp	r2, r3
 800894a:	d008      	beq.n	800895e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	885b      	ldrh	r3, [r3, #2]
 8008954:	b29a      	uxth	r2, r3
 8008956:	897b      	ldrh	r3, [r7, #10]
 8008958:	429a      	cmp	r2, r3
 800895a:	d8e5      	bhi.n	8008928 <USBD_GetEpDesc+0x32>
 800895c:	e000      	b.n	8008960 <USBD_GetEpDesc+0x6a>
          break;
 800895e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008960:	693b      	ldr	r3, [r7, #16]
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	881a      	ldrh	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b29b      	uxth	r3, r3
 8008982:	4413      	add	r3, r2
 8008984:	b29a      	uxth	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4413      	add	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008996:	68fb      	ldr	r3, [r7, #12]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	3301      	adds	r3, #1
 80089ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089c2:	8a3b      	ldrh	r3, [r7, #16]
 80089c4:	021b      	lsls	r3, r3, #8
 80089c6:	b21a      	sxth	r2, r3
 80089c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b21b      	sxth	r3, r3
 80089d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089d2:	89fb      	ldrh	r3, [r7, #14]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089f6:	2b40      	cmp	r3, #64	; 0x40
 80089f8:	d005      	beq.n	8008a06 <USBD_StdDevReq+0x26>
 80089fa:	2b40      	cmp	r3, #64	; 0x40
 80089fc:	d857      	bhi.n	8008aae <USBD_StdDevReq+0xce>
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00f      	beq.n	8008a22 <USBD_StdDevReq+0x42>
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	d153      	bne.n	8008aae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	32ae      	adds	r2, #174	; 0xae
 8008a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	4798      	blx	r3
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a20:	e04a      	b.n	8008ab8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b09      	cmp	r3, #9
 8008a28:	d83b      	bhi.n	8008aa2 <USBD_StdDevReq+0xc2>
 8008a2a:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <USBD_StdDevReq+0x50>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a85 	.word	0x08008a85
 8008a34:	08008a99 	.word	0x08008a99
 8008a38:	08008aa3 	.word	0x08008aa3
 8008a3c:	08008a8f 	.word	0x08008a8f
 8008a40:	08008aa3 	.word	0x08008aa3
 8008a44:	08008a63 	.word	0x08008a63
 8008a48:	08008a59 	.word	0x08008a59
 8008a4c:	08008aa3 	.word	0x08008aa3
 8008a50:	08008a7b 	.word	0x08008a7b
 8008a54:	08008a6d 	.word	0x08008a6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 fa3c 	bl	8008ed8 <USBD_GetDescriptor>
          break;
 8008a60:	e024      	b.n	8008aac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fba1 	bl	80091ac <USBD_SetAddress>
          break;
 8008a6a:	e01f      	b.n	8008aac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fbe0 	bl	8009234 <USBD_SetConfig>
 8008a74:	4603      	mov	r3, r0
 8008a76:	73fb      	strb	r3, [r7, #15]
          break;
 8008a78:	e018      	b.n	8008aac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fc83 	bl	8009388 <USBD_GetConfig>
          break;
 8008a82:	e013      	b.n	8008aac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fcb4 	bl	80093f4 <USBD_GetStatus>
          break;
 8008a8c:	e00e      	b.n	8008aac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fce3 	bl	800945c <USBD_SetFeature>
          break;
 8008a96:	e009      	b.n	8008aac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fd07 	bl	80094ae <USBD_ClrFeature>
          break;
 8008aa0:	e004      	b.n	8008aac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fd5e 	bl	8009566 <USBD_CtlError>
          break;
 8008aaa:	bf00      	nop
      }
      break;
 8008aac:	e004      	b.n	8008ab8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fd58 	bl	8009566 <USBD_CtlError>
      break;
 8008ab6:	bf00      	nop
  }

  return ret;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop

08008ac4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ada:	2b40      	cmp	r3, #64	; 0x40
 8008adc:	d005      	beq.n	8008aea <USBD_StdItfReq+0x26>
 8008ade:	2b40      	cmp	r3, #64	; 0x40
 8008ae0:	d852      	bhi.n	8008b88 <USBD_StdItfReq+0xc4>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <USBD_StdItfReq+0x26>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d14e      	bne.n	8008b88 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	3b01      	subs	r3, #1
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d840      	bhi.n	8008b7a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	889b      	ldrh	r3, [r3, #4]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d836      	bhi.n	8008b70 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	889b      	ldrh	r3, [r3, #4]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff fed9 	bl	80088c2 <USBD_CoreFindIF>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2bff      	cmp	r3, #255	; 0xff
 8008b18:	d01d      	beq.n	8008b56 <USBD_StdItfReq+0x92>
 8008b1a:	7bbb      	ldrb	r3, [r7, #14]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d11a      	bne.n	8008b56 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b20:	7bba      	ldrb	r2, [r7, #14]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	32ae      	adds	r2, #174	; 0xae
 8008b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00f      	beq.n	8008b50 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b30:	7bba      	ldrb	r2, [r7, #14]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b38:	7bba      	ldrb	r2, [r7, #14]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	32ae      	adds	r2, #174	; 0xae
 8008b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b4e:	e004      	b.n	8008b5a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b50:	2303      	movs	r3, #3
 8008b52:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b54:	e001      	b.n	8008b5a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b56:	2303      	movs	r3, #3
 8008b58:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88db      	ldrh	r3, [r3, #6]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d110      	bne.n	8008b84 <USBD_StdItfReq+0xc0>
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10d      	bne.n	8008b84 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 fdc7 	bl	80096fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b6e:	e009      	b.n	8008b84 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b70:	6839      	ldr	r1, [r7, #0]
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fcf7 	bl	8009566 <USBD_CtlError>
          break;
 8008b78:	e004      	b.n	8008b84 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fcf2 	bl	8009566 <USBD_CtlError>
          break;
 8008b82:	e000      	b.n	8008b86 <USBD_StdItfReq+0xc2>
          break;
 8008b84:	bf00      	nop
      }
      break;
 8008b86:	e004      	b.n	8008b92 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fceb 	bl	8009566 <USBD_CtlError>
      break;
 8008b90:	bf00      	nop
  }

  return ret;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	889b      	ldrh	r3, [r3, #4]
 8008bae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d007      	beq.n	8008bcc <USBD_StdEPReq+0x30>
 8008bbc:	2b40      	cmp	r3, #64	; 0x40
 8008bbe:	f200 817f 	bhi.w	8008ec0 <USBD_StdEPReq+0x324>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d02a      	beq.n	8008c1c <USBD_StdEPReq+0x80>
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	f040 817a 	bne.w	8008ec0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7ff fe83 	bl	80088dc <USBD_CoreFindEP>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bda:	7b7b      	ldrb	r3, [r7, #13]
 8008bdc:	2bff      	cmp	r3, #255	; 0xff
 8008bde:	f000 8174 	beq.w	8008eca <USBD_StdEPReq+0x32e>
 8008be2:	7b7b      	ldrb	r3, [r7, #13]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f040 8170 	bne.w	8008eca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008bea:	7b7a      	ldrb	r2, [r7, #13]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bf2:	7b7a      	ldrb	r2, [r7, #13]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	32ae      	adds	r2, #174	; 0xae
 8008bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8163 	beq.w	8008eca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c04:	7b7a      	ldrb	r2, [r7, #13]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	32ae      	adds	r2, #174	; 0xae
 8008c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c1a:	e156      	b.n	8008eca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d008      	beq.n	8008c36 <USBD_StdEPReq+0x9a>
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	f300 8145 	bgt.w	8008eb4 <USBD_StdEPReq+0x318>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 809b 	beq.w	8008d66 <USBD_StdEPReq+0x1ca>
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d03c      	beq.n	8008cae <USBD_StdEPReq+0x112>
 8008c34:	e13e      	b.n	8008eb4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d002      	beq.n	8008c48 <USBD_StdEPReq+0xac>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d016      	beq.n	8008c74 <USBD_StdEPReq+0xd8>
 8008c46:	e02c      	b.n	8008ca2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00d      	beq.n	8008c6a <USBD_StdEPReq+0xce>
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b80      	cmp	r3, #128	; 0x80
 8008c52:	d00a      	beq.n	8008c6a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 f963 	bl	8009f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c5e:	2180      	movs	r1, #128	; 0x80
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 f95f 	bl	8009f24 <USBD_LL_StallEP>
 8008c66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c68:	e020      	b.n	8008cac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fc7a 	bl	8009566 <USBD_CtlError>
              break;
 8008c72:	e01b      	b.n	8008cac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	885b      	ldrh	r3, [r3, #2]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10e      	bne.n	8008c9a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <USBD_StdEPReq+0xfe>
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	2b80      	cmp	r3, #128	; 0x80
 8008c86:	d008      	beq.n	8008c9a <USBD_StdEPReq+0xfe>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	88db      	ldrh	r3, [r3, #6]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 f945 	bl	8009f24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fd2e 	bl	80096fc <USBD_CtlSendStatus>

              break;
 8008ca0:	e004      	b.n	8008cac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fc5e 	bl	8009566 <USBD_CtlError>
              break;
 8008caa:	bf00      	nop
          }
          break;
 8008cac:	e107      	b.n	8008ebe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d002      	beq.n	8008cc0 <USBD_StdEPReq+0x124>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d016      	beq.n	8008cec <USBD_StdEPReq+0x150>
 8008cbe:	e04b      	b.n	8008d58 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00d      	beq.n	8008ce2 <USBD_StdEPReq+0x146>
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	2b80      	cmp	r3, #128	; 0x80
 8008cca:	d00a      	beq.n	8008ce2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ccc:	7bbb      	ldrb	r3, [r7, #14]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 f927 	bl	8009f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cd6:	2180      	movs	r1, #128	; 0x80
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f923 	bl	8009f24 <USBD_LL_StallEP>
 8008cde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce0:	e040      	b.n	8008d64 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fc3e 	bl	8009566 <USBD_CtlError>
              break;
 8008cea:	e03b      	b.n	8008d64 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d136      	bne.n	8008d62 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d004      	beq.n	8008d08 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 f92d 	bl	8009f62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fcf7 	bl	80096fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff fde2 	bl	80088dc <USBD_CoreFindEP>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d1c:	7b7b      	ldrb	r3, [r7, #13]
 8008d1e:	2bff      	cmp	r3, #255	; 0xff
 8008d20:	d01f      	beq.n	8008d62 <USBD_StdEPReq+0x1c6>
 8008d22:	7b7b      	ldrb	r3, [r7, #13]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d11c      	bne.n	8008d62 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d28:	7b7a      	ldrb	r2, [r7, #13]
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d30:	7b7a      	ldrb	r2, [r7, #13]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	32ae      	adds	r2, #174	; 0xae
 8008d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d010      	beq.n	8008d62 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d40:	7b7a      	ldrb	r2, [r7, #13]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	32ae      	adds	r2, #174	; 0xae
 8008d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d56:	e004      	b.n	8008d62 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fc03 	bl	8009566 <USBD_CtlError>
              break;
 8008d60:	e000      	b.n	8008d64 <USBD_StdEPReq+0x1c8>
              break;
 8008d62:	bf00      	nop
          }
          break;
 8008d64:	e0ab      	b.n	8008ebe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d002      	beq.n	8008d78 <USBD_StdEPReq+0x1dc>
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d032      	beq.n	8008ddc <USBD_StdEPReq+0x240>
 8008d76:	e097      	b.n	8008ea8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <USBD_StdEPReq+0x1f2>
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b80      	cmp	r3, #128	; 0x80
 8008d82:	d004      	beq.n	8008d8e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fbed 	bl	8009566 <USBD_CtlError>
                break;
 8008d8c:	e091      	b.n	8008eb2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	da0b      	bge.n	8008dae <USBD_StdEPReq+0x212>
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	3310      	adds	r3, #16
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	4413      	add	r3, r2
 8008daa:	3304      	adds	r3, #4
 8008dac:	e00b      	b.n	8008dc6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fc37 	bl	8009648 <USBD_CtlSendData>
              break;
 8008dda:	e06a      	b.n	8008eb2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da11      	bge.n	8008e08 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	f003 020f 	and.w	r2, r3, #15
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	4613      	mov	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	3324      	adds	r3, #36	; 0x24
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d117      	bne.n	8008e2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fbb0 	bl	8009566 <USBD_CtlError>
                  break;
 8008e06:	e054      	b.n	8008eb2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	f003 020f 	and.w	r2, r3, #15
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d104      	bne.n	8008e2e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fb9d 	bl	8009566 <USBD_CtlError>
                  break;
 8008e2c:	e041      	b.n	8008eb2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	da0b      	bge.n	8008e4e <USBD_StdEPReq+0x2b2>
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	3310      	adds	r3, #16
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	4413      	add	r3, r2
 8008e4a:	3304      	adds	r3, #4
 8008e4c:	e00b      	b.n	8008e66 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	3304      	adds	r3, #4
 8008e66:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e68:	7bbb      	ldrb	r3, [r7, #14]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <USBD_StdEPReq+0x2d8>
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b80      	cmp	r3, #128	; 0x80
 8008e72:	d103      	bne.n	8008e7c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	e00e      	b.n	8008e9a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f88d 	bl	8009fa0 <USBD_LL_IsStallEP>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	e002      	b.n	8008e9a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fbd1 	bl	8009648 <USBD_CtlSendData>
              break;
 8008ea6:	e004      	b.n	8008eb2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fb5b 	bl	8009566 <USBD_CtlError>
              break;
 8008eb0:	bf00      	nop
          }
          break;
 8008eb2:	e004      	b.n	8008ebe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fb55 	bl	8009566 <USBD_CtlError>
          break;
 8008ebc:	bf00      	nop
      }
      break;
 8008ebe:	e005      	b.n	8008ecc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fb4f 	bl	8009566 <USBD_CtlError>
      break;
 8008ec8:	e000      	b.n	8008ecc <USBD_StdEPReq+0x330>
      break;
 8008eca:	bf00      	nop
  }

  return ret;
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	885b      	ldrh	r3, [r3, #2]
 8008ef2:	0a1b      	lsrs	r3, r3, #8
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	2b06      	cmp	r3, #6
 8008efa:	f200 8128 	bhi.w	800914e <USBD_GetDescriptor+0x276>
 8008efe:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <USBD_GetDescriptor+0x2c>)
 8008f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f04:	08008f21 	.word	0x08008f21
 8008f08:	08008f39 	.word	0x08008f39
 8008f0c:	08008f79 	.word	0x08008f79
 8008f10:	0800914f 	.word	0x0800914f
 8008f14:	0800914f 	.word	0x0800914f
 8008f18:	080090ef 	.word	0x080090ef
 8008f1c:	0800911b 	.word	0x0800911b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	7c12      	ldrb	r2, [r2, #16]
 8008f2c:	f107 0108 	add.w	r1, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
      break;
 8008f36:	e112      	b.n	800915e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	7c1b      	ldrb	r3, [r3, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10d      	bne.n	8008f5c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f48:	f107 0208 	add.w	r2, r7, #8
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	4798      	blx	r3
 8008f50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3301      	adds	r3, #1
 8008f56:	2202      	movs	r2, #2
 8008f58:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f5a:	e100      	b.n	800915e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	f107 0208 	add.w	r2, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3301      	adds	r3, #1
 8008f72:	2202      	movs	r2, #2
 8008f74:	701a      	strb	r2, [r3, #0]
      break;
 8008f76:	e0f2      	b.n	800915e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	885b      	ldrh	r3, [r3, #2]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	f200 80ac 	bhi.w	80090dc <USBD_GetDescriptor+0x204>
 8008f84:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <USBD_GetDescriptor+0xb4>)
 8008f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8a:	bf00      	nop
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08008fd9 	.word	0x08008fd9
 8008f94:	0800900d 	.word	0x0800900d
 8008f98:	08009041 	.word	0x08009041
 8008f9c:	08009075 	.word	0x08009075
 8008fa0:	080090a9 	.word	0x080090a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00b      	beq.n	8008fc8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	7c12      	ldrb	r2, [r2, #16]
 8008fbc:	f107 0108 	add.w	r1, r7, #8
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc6:	e091      	b.n	80090ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 facb 	bl	8009566 <USBD_CtlError>
            err++;
 8008fd0:	7afb      	ldrb	r3, [r7, #11]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd6:	e089      	b.n	80090ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00b      	beq.n	8008ffc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	7c12      	ldrb	r2, [r2, #16]
 8008ff0:	f107 0108 	add.w	r1, r7, #8
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
 8008ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ffa:	e077      	b.n	80090ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fab1 	bl	8009566 <USBD_CtlError>
            err++;
 8009004:	7afb      	ldrb	r3, [r7, #11]
 8009006:	3301      	adds	r3, #1
 8009008:	72fb      	strb	r3, [r7, #11]
          break;
 800900a:	e06f      	b.n	80090ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7c12      	ldrb	r2, [r2, #16]
 8009024:	f107 0108 	add.w	r1, r7, #8
 8009028:	4610      	mov	r0, r2
 800902a:	4798      	blx	r3
 800902c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902e:	e05d      	b.n	80090ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa97 	bl	8009566 <USBD_CtlError>
            err++;
 8009038:	7afb      	ldrb	r3, [r7, #11]
 800903a:	3301      	adds	r3, #1
 800903c:	72fb      	strb	r3, [r7, #11]
          break;
 800903e:	e055      	b.n	80090ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009062:	e043      	b.n	80090ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fa7d 	bl	8009566 <USBD_CtlError>
            err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
          break;
 8009072:	e03b      	b.n	80090ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	7c12      	ldrb	r2, [r2, #16]
 800908c:	f107 0108 	add.w	r1, r7, #8
 8009090:	4610      	mov	r0, r2
 8009092:	4798      	blx	r3
 8009094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009096:	e029      	b.n	80090ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa63 	bl	8009566 <USBD_CtlError>
            err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
          break;
 80090a6:	e021      	b.n	80090ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	7c12      	ldrb	r2, [r2, #16]
 80090c0:	f107 0108 	add.w	r1, r7, #8
 80090c4:	4610      	mov	r0, r2
 80090c6:	4798      	blx	r3
 80090c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ca:	e00f      	b.n	80090ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa49 	bl	8009566 <USBD_CtlError>
            err++;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	3301      	adds	r3, #1
 80090d8:	72fb      	strb	r3, [r7, #11]
          break;
 80090da:	e007      	b.n	80090ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa41 	bl	8009566 <USBD_CtlError>
          err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090ea:	bf00      	nop
      }
      break;
 80090ec:	e037      	b.n	800915e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7c1b      	ldrb	r3, [r3, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fe:	f107 0208 	add.w	r2, r7, #8
 8009102:	4610      	mov	r0, r2
 8009104:	4798      	blx	r3
 8009106:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009108:	e029      	b.n	800915e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fa2a 	bl	8009566 <USBD_CtlError>
        err++;
 8009112:	7afb      	ldrb	r3, [r7, #11]
 8009114:	3301      	adds	r3, #1
 8009116:	72fb      	strb	r3, [r7, #11]
      break;
 8009118:	e021      	b.n	800915e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7c1b      	ldrb	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10d      	bne.n	800913e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800912a:	f107 0208 	add.w	r2, r7, #8
 800912e:	4610      	mov	r0, r2
 8009130:	4798      	blx	r3
 8009132:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	3301      	adds	r3, #1
 8009138:	2207      	movs	r2, #7
 800913a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800913c:	e00f      	b.n	800915e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fa10 	bl	8009566 <USBD_CtlError>
        err++;
 8009146:	7afb      	ldrb	r3, [r7, #11]
 8009148:	3301      	adds	r3, #1
 800914a:	72fb      	strb	r3, [r7, #11]
      break;
 800914c:	e007      	b.n	800915e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fa08 	bl	8009566 <USBD_CtlError>
      err++;
 8009156:	7afb      	ldrb	r3, [r7, #11]
 8009158:	3301      	adds	r3, #1
 800915a:	72fb      	strb	r3, [r7, #11]
      break;
 800915c:	bf00      	nop
  }

  if (err != 0U)
 800915e:	7afb      	ldrb	r3, [r7, #11]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d11e      	bne.n	80091a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	88db      	ldrh	r3, [r3, #6]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d016      	beq.n	800919a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800916c:	893b      	ldrh	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00e      	beq.n	8009190 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	88da      	ldrh	r2, [r3, #6]
 8009176:	893b      	ldrh	r3, [r7, #8]
 8009178:	4293      	cmp	r3, r2
 800917a:	bf28      	it	cs
 800917c:	4613      	movcs	r3, r2
 800917e:	b29b      	uxth	r3, r3
 8009180:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009182:	893b      	ldrh	r3, [r7, #8]
 8009184:	461a      	mov	r2, r3
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fa5d 	bl	8009648 <USBD_CtlSendData>
 800918e:	e009      	b.n	80091a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f9e7 	bl	8009566 <USBD_CtlError>
 8009198:	e004      	b.n	80091a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 faae 	bl	80096fc <USBD_CtlSendStatus>
 80091a0:	e000      	b.n	80091a4 <USBD_GetDescriptor+0x2cc>
    return;
 80091a2:	bf00      	nop
  }
}
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop

080091ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	889b      	ldrh	r3, [r3, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d131      	bne.n	8009222 <USBD_SetAddress+0x76>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	88db      	ldrh	r3, [r3, #6]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d12d      	bne.n	8009222 <USBD_SetAddress+0x76>
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	885b      	ldrh	r3, [r3, #2]
 80091ca:	2b7f      	cmp	r3, #127	; 0x7f
 80091cc:	d829      	bhi.n	8009222 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	885b      	ldrh	r3, [r3, #2]
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d104      	bne.n	80091f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f9bc 	bl	8009566 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	e01d      	b.n	800922c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	7bfa      	ldrb	r2, [r7, #15]
 80091f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fefb 	bl	8009ff8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa7a 	bl	80096fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2202      	movs	r2, #2
 8009212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009216:	e009      	b.n	800922c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009220:	e004      	b.n	800922c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f99e 	bl	8009566 <USBD_CtlError>
  }
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	4b4e      	ldr	r3, [pc, #312]	; (8009384 <USBD_SetConfig+0x150>)
 800924a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800924c:	4b4d      	ldr	r3, [pc, #308]	; (8009384 <USBD_SetConfig+0x150>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d905      	bls.n	8009260 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f985 	bl	8009566 <USBD_CtlError>
    return USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	e08c      	b.n	800937a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d002      	beq.n	8009272 <USBD_SetConfig+0x3e>
 800926c:	2b03      	cmp	r3, #3
 800926e:	d029      	beq.n	80092c4 <USBD_SetConfig+0x90>
 8009270:	e075      	b.n	800935e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009272:	4b44      	ldr	r3, [pc, #272]	; (8009384 <USBD_SetConfig+0x150>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d020      	beq.n	80092bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800927a:	4b42      	ldr	r3, [pc, #264]	; (8009384 <USBD_SetConfig+0x150>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009284:	4b3f      	ldr	r3, [pc, #252]	; (8009384 <USBD_SetConfig+0x150>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fe ffe7 	bl	800825e <USBD_SetClassConfig>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f962 	bl	8009566 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2202      	movs	r2, #2
 80092a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092aa:	e065      	b.n	8009378 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fa25 	bl	80096fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2203      	movs	r2, #3
 80092b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092ba:	e05d      	b.n	8009378 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 fa1d 	bl	80096fc <USBD_CtlSendStatus>
      break;
 80092c2:	e059      	b.n	8009378 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092c4:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <USBD_SetConfig+0x150>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d112      	bne.n	80092f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80092d4:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <USBD_SetConfig+0x150>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	461a      	mov	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092de:	4b29      	ldr	r3, [pc, #164]	; (8009384 <USBD_SetConfig+0x150>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7fe ffd6 	bl	8008296 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fa06 	bl	80096fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092f0:	e042      	b.n	8009378 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80092f2:	4b24      	ldr	r3, [pc, #144]	; (8009384 <USBD_SetConfig+0x150>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d02a      	beq.n	8009356 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fe ffc4 	bl	8008296 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800930e:	4b1d      	ldr	r3, [pc, #116]	; (8009384 <USBD_SetConfig+0x150>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	461a      	mov	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009318:	4b1a      	ldr	r3, [pc, #104]	; (8009384 <USBD_SetConfig+0x150>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f7fe ff9d 	bl	800825e <USBD_SetClassConfig>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00f      	beq.n	800934e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f918 	bl	8009566 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	b2db      	uxtb	r3, r3
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7fe ffa9 	bl	8008296 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2202      	movs	r2, #2
 8009348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800934c:	e014      	b.n	8009378 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f9d4 	bl	80096fc <USBD_CtlSendStatus>
      break;
 8009354:	e010      	b.n	8009378 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f9d0 	bl	80096fc <USBD_CtlSendStatus>
      break;
 800935c:	e00c      	b.n	8009378 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800935e:	6839      	ldr	r1, [r7, #0]
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f900 	bl	8009566 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009366:	4b07      	ldr	r3, [pc, #28]	; (8009384 <USBD_SetConfig+0x150>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7fe ff92 	bl	8008296 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009372:	2303      	movs	r3, #3
 8009374:	73fb      	strb	r3, [r7, #15]
      break;
 8009376:	bf00      	nop
  }

  return ret;
 8009378:	7bfb      	ldrb	r3, [r7, #15]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	200003e4 	.word	0x200003e4

08009388 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	88db      	ldrh	r3, [r3, #6]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d004      	beq.n	80093a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f8e2 	bl	8009566 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093a2:	e023      	b.n	80093ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	dc02      	bgt.n	80093b6 <USBD_GetConfig+0x2e>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc03      	bgt.n	80093bc <USBD_GetConfig+0x34>
 80093b4:	e015      	b.n	80093e2 <USBD_GetConfig+0x5a>
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d00b      	beq.n	80093d2 <USBD_GetConfig+0x4a>
 80093ba:	e012      	b.n	80093e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3308      	adds	r3, #8
 80093c6:	2201      	movs	r2, #1
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f93c 	bl	8009648 <USBD_CtlSendData>
        break;
 80093d0:	e00c      	b.n	80093ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3304      	adds	r3, #4
 80093d6:	2201      	movs	r2, #1
 80093d8:	4619      	mov	r1, r3
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f934 	bl	8009648 <USBD_CtlSendData>
        break;
 80093e0:	e004      	b.n	80093ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f8be 	bl	8009566 <USBD_CtlError>
        break;
 80093ea:	bf00      	nop
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009404:	b2db      	uxtb	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	2b02      	cmp	r3, #2
 800940a:	d81e      	bhi.n	800944a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	88db      	ldrh	r3, [r3, #6]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d004      	beq.n	800941e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f8a5 	bl	8009566 <USBD_CtlError>
        break;
 800941c:	e01a      	b.n	8009454 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f043 0202 	orr.w	r2, r3, #2
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	330c      	adds	r3, #12
 800943e:	2202      	movs	r2, #2
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f900 	bl	8009648 <USBD_CtlSendData>
      break;
 8009448:	e004      	b.n	8009454 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f88a 	bl	8009566 <USBD_CtlError>
      break;
 8009452:	bf00      	nop
  }
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	885b      	ldrh	r3, [r3, #2]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d107      	bne.n	800947e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f940 	bl	80096fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800947c:	e013      	b.n	80094a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	885b      	ldrh	r3, [r3, #2]
 8009482:	2b02      	cmp	r3, #2
 8009484:	d10b      	bne.n	800949e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	889b      	ldrh	r3, [r3, #4]
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	b29b      	uxth	r3, r3
 800948e:	b2da      	uxtb	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f930 	bl	80096fc <USBD_CtlSendStatus>
}
 800949c:	e003      	b.n	80094a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f860 	bl	8009566 <USBD_CtlError>
}
 80094a6:	bf00      	nop
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d80b      	bhi.n	80094de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	885b      	ldrh	r3, [r3, #2]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d10c      	bne.n	80094e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f910 	bl	80096fc <USBD_CtlSendStatus>
      }
      break;
 80094dc:	e004      	b.n	80094e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f840 	bl	8009566 <USBD_CtlError>
      break;
 80094e6:	e000      	b.n	80094ea <USBD_ClrFeature+0x3c>
      break;
 80094e8:	bf00      	nop
  }
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b084      	sub	sp, #16
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	781a      	ldrb	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	3301      	adds	r3, #1
 800950c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	781a      	ldrb	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f7ff fa41 	bl	80089a4 <SWAPBYTE>
 8009522:	4603      	mov	r3, r0
 8009524:	461a      	mov	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3301      	adds	r3, #1
 8009534:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fa34 	bl	80089a4 <SWAPBYTE>
 800953c:	4603      	mov	r3, r0
 800953e:	461a      	mov	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3301      	adds	r3, #1
 800954e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7ff fa27 	bl	80089a4 <SWAPBYTE>
 8009556:	4603      	mov	r3, r0
 8009558:	461a      	mov	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	80da      	strh	r2, [r3, #6]
}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009570:	2180      	movs	r1, #128	; 0x80
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fcd6 	bl	8009f24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fcd2 	bl	8009f24 <USBD_LL_StallEP>
}
 8009580:	bf00      	nop
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d036      	beq.n	800960c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80095a2:	6938      	ldr	r0, [r7, #16]
 80095a4:	f000 f836 	bl	8009614 <USBD_GetLen>
 80095a8:	4603      	mov	r3, r0
 80095aa:	3301      	adds	r3, #1
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	4413      	add	r3, r2
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	7812      	ldrb	r2, [r2, #0]
 80095c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	3301      	adds	r3, #1
 80095c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	4413      	add	r3, r2
 80095ce:	2203      	movs	r2, #3
 80095d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	3301      	adds	r3, #1
 80095d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095d8:	e013      	b.n	8009602 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095da:	7dfb      	ldrb	r3, [r7, #23]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	4413      	add	r3, r2
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	7812      	ldrb	r2, [r2, #0]
 80095e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	3301      	adds	r3, #1
 80095ea:	613b      	str	r3, [r7, #16]
    idx++;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	3301      	adds	r3, #1
 80095f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	4413      	add	r3, r2
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	3301      	adds	r3, #1
 8009600:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e7      	bne.n	80095da <USBD_GetString+0x52>
 800960a:	e000      	b.n	800960e <USBD_GetString+0x86>
    return;
 800960c:	bf00      	nop
  }
}
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009624:	e005      	b.n	8009632 <USBD_GetLen+0x1e>
  {
    len++;
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	3301      	adds	r3, #1
 800962a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	3301      	adds	r3, #1
 8009630:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1f5      	bne.n	8009626 <USBD_GetLen+0x12>
  }

  return len;
 800963a:	7bfb      	ldrb	r3, [r7, #15]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2202      	movs	r2, #2
 8009658:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fce1 	bl	800a036 <USBD_LL_Transmit>

  return USBD_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	60b9      	str	r1, [r7, #8]
 8009688:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	2100      	movs	r1, #0
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 fcd0 	bl	800a036 <USBD_LL_Transmit>

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2203      	movs	r2, #3
 80096b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	2100      	movs	r1, #0
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 fcd4 	bl	800a078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	2100      	movs	r1, #0
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fcc3 	bl	800a078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2204      	movs	r2, #4
 8009708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800970c:	2300      	movs	r3, #0
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fc8f 	bl	800a036 <USBD_LL_Transmit>

  return USBD_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2205      	movs	r2, #5
 800972e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009732:	2300      	movs	r3, #0
 8009734:	2200      	movs	r2, #0
 8009736:	2100      	movs	r1, #0
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fc9d 	bl	800a078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800974c:	2200      	movs	r2, #0
 800974e:	4912      	ldr	r1, [pc, #72]	; (8009798 <MX_USB_DEVICE_Init+0x50>)
 8009750:	4812      	ldr	r0, [pc, #72]	; (800979c <MX_USB_DEVICE_Init+0x54>)
 8009752:	f7fe fceb 	bl	800812c <USBD_Init>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800975c:	f7f7 fd44 	bl	80011e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009760:	490f      	ldr	r1, [pc, #60]	; (80097a0 <MX_USB_DEVICE_Init+0x58>)
 8009762:	480e      	ldr	r0, [pc, #56]	; (800979c <MX_USB_DEVICE_Init+0x54>)
 8009764:	f7fe fd20 	bl	80081a8 <USBD_RegisterClass>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800976e:	f7f7 fd3b 	bl	80011e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009772:	490c      	ldr	r1, [pc, #48]	; (80097a4 <MX_USB_DEVICE_Init+0x5c>)
 8009774:	4809      	ldr	r0, [pc, #36]	; (800979c <MX_USB_DEVICE_Init+0x54>)
 8009776:	f7fe fc03 	bl	8007f80 <USBD_CDC_RegisterInterface>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d001      	beq.n	8009784 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009780:	f7f7 fd32 	bl	80011e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009784:	4805      	ldr	r0, [pc, #20]	; (800979c <MX_USB_DEVICE_Init+0x54>)
 8009786:	f7fe fd53 	bl	8008230 <USBD_Start>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009790:	f7f7 fd2a 	bl	80011e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009794:	bf00      	nop
 8009796:	bd80      	pop	{r7, pc}
 8009798:	200000b0 	.word	0x200000b0
 800979c:	200003e8 	.word	0x200003e8
 80097a0:	2000001c 	.word	0x2000001c
 80097a4:	2000009c 	.word	0x2000009c

080097a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097ac:	2200      	movs	r2, #0
 80097ae:	4905      	ldr	r1, [pc, #20]	; (80097c4 <CDC_Init_FS+0x1c>)
 80097b0:	4805      	ldr	r0, [pc, #20]	; (80097c8 <CDC_Init_FS+0x20>)
 80097b2:	f7fe fbff 	bl	8007fb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097b6:	4905      	ldr	r1, [pc, #20]	; (80097cc <CDC_Init_FS+0x24>)
 80097b8:	4803      	ldr	r0, [pc, #12]	; (80097c8 <CDC_Init_FS+0x20>)
 80097ba:	f7fe fc1d 	bl	8007ff8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000ec4 	.word	0x20000ec4
 80097c8:	200003e8 	.word	0x200003e8
 80097cc:	200006c4 	.word	0x200006c4

080097d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097d0:	b480      	push	{r7}
 80097d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	4603      	mov	r3, r0
 80097e8:	6039      	str	r1, [r7, #0]
 80097ea:	71fb      	strb	r3, [r7, #7]
 80097ec:	4613      	mov	r3, r2
 80097ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b23      	cmp	r3, #35	; 0x23
 80097f4:	d84a      	bhi.n	800988c <CDC_Control_FS+0xac>
 80097f6:	a201      	add	r2, pc, #4	; (adr r2, 80097fc <CDC_Control_FS+0x1c>)
 80097f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fc:	0800988d 	.word	0x0800988d
 8009800:	0800988d 	.word	0x0800988d
 8009804:	0800988d 	.word	0x0800988d
 8009808:	0800988d 	.word	0x0800988d
 800980c:	0800988d 	.word	0x0800988d
 8009810:	0800988d 	.word	0x0800988d
 8009814:	0800988d 	.word	0x0800988d
 8009818:	0800988d 	.word	0x0800988d
 800981c:	0800988d 	.word	0x0800988d
 8009820:	0800988d 	.word	0x0800988d
 8009824:	0800988d 	.word	0x0800988d
 8009828:	0800988d 	.word	0x0800988d
 800982c:	0800988d 	.word	0x0800988d
 8009830:	0800988d 	.word	0x0800988d
 8009834:	0800988d 	.word	0x0800988d
 8009838:	0800988d 	.word	0x0800988d
 800983c:	0800988d 	.word	0x0800988d
 8009840:	0800988d 	.word	0x0800988d
 8009844:	0800988d 	.word	0x0800988d
 8009848:	0800988d 	.word	0x0800988d
 800984c:	0800988d 	.word	0x0800988d
 8009850:	0800988d 	.word	0x0800988d
 8009854:	0800988d 	.word	0x0800988d
 8009858:	0800988d 	.word	0x0800988d
 800985c:	0800988d 	.word	0x0800988d
 8009860:	0800988d 	.word	0x0800988d
 8009864:	0800988d 	.word	0x0800988d
 8009868:	0800988d 	.word	0x0800988d
 800986c:	0800988d 	.word	0x0800988d
 8009870:	0800988d 	.word	0x0800988d
 8009874:	0800988d 	.word	0x0800988d
 8009878:	0800988d 	.word	0x0800988d
 800987c:	0800988d 	.word	0x0800988d
 8009880:	0800988d 	.word	0x0800988d
 8009884:	0800988d 	.word	0x0800988d
 8009888:	0800988d 	.word	0x0800988d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800988c:	bf00      	nop
  }

  return (USBD_OK);
 800988e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4805      	ldr	r0, [pc, #20]	; (80098c0 <CDC_Receive_FS+0x24>)
 80098aa:	f7fe fba5 	bl	8007ff8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098ae:	4804      	ldr	r0, [pc, #16]	; (80098c0 <CDC_Receive_FS+0x24>)
 80098b0:	f7fe fc06 	bl	80080c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	200003e8 	.word	0x200003e8

080098c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098d4:	4b0d      	ldr	r3, [pc, #52]	; (800990c <CDC_Transmit_FS+0x48>)
 80098d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e00b      	b.n	8009902 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098ea:	887b      	ldrh	r3, [r7, #2]
 80098ec:	461a      	mov	r2, r3
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	4806      	ldr	r0, [pc, #24]	; (800990c <CDC_Transmit_FS+0x48>)
 80098f2:	f7fe fb5f 	bl	8007fb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098f6:	4805      	ldr	r0, [pc, #20]	; (800990c <CDC_Transmit_FS+0x48>)
 80098f8:	f7fe fb9c 	bl	8008034 <USBD_CDC_TransmitPacket>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	200003e8 	.word	0x200003e8

08009910 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	4613      	mov	r3, r2
 800991c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009926:	4618      	mov	r0, r3
 8009928:	371c      	adds	r7, #28
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
	...

08009934 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2212      	movs	r2, #18
 8009944:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009946:	4b03      	ldr	r3, [pc, #12]	; (8009954 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	200000cc 	.word	0x200000cc

08009958 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	2204      	movs	r2, #4
 8009968:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800996a:	4b03      	ldr	r3, [pc, #12]	; (8009978 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800996c:	4618      	mov	r0, r3
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	200000e0 	.word	0x200000e0

0800997c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	6039      	str	r1, [r7, #0]
 8009986:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d105      	bne.n	800999a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	4907      	ldr	r1, [pc, #28]	; (80099b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009992:	4808      	ldr	r0, [pc, #32]	; (80099b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009994:	f7ff fdf8 	bl	8009588 <USBD_GetString>
 8009998:	e004      	b.n	80099a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	4904      	ldr	r1, [pc, #16]	; (80099b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800999e:	4805      	ldr	r0, [pc, #20]	; (80099b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80099a0:	f7ff fdf2 	bl	8009588 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099a4:	4b02      	ldr	r3, [pc, #8]	; (80099b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	200016c4 	.word	0x200016c4
 80099b4:	0800d0e8 	.word	0x0800d0e8

080099b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	6039      	str	r1, [r7, #0]
 80099c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	4904      	ldr	r1, [pc, #16]	; (80099d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099c8:	4804      	ldr	r0, [pc, #16]	; (80099dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099ca:	f7ff fddd 	bl	8009588 <USBD_GetString>
  return USBD_StrDesc;
 80099ce:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	200016c4 	.word	0x200016c4
 80099dc:	0800d100 	.word	0x0800d100

080099e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	221a      	movs	r2, #26
 80099f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099f2:	f000 f843 	bl	8009a7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80099f6:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200000e4 	.word	0x200000e4

08009a04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	6039      	str	r1, [r7, #0]
 8009a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d105      	bne.n	8009a22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	4907      	ldr	r1, [pc, #28]	; (8009a38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a1a:	4808      	ldr	r0, [pc, #32]	; (8009a3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a1c:	f7ff fdb4 	bl	8009588 <USBD_GetString>
 8009a20:	e004      	b.n	8009a2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	4904      	ldr	r1, [pc, #16]	; (8009a38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a26:	4805      	ldr	r0, [pc, #20]	; (8009a3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a28:	f7ff fdae 	bl	8009588 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a2c:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3708      	adds	r7, #8
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	200016c4 	.word	0x200016c4
 8009a3c:	0800d114 	.word	0x0800d114

08009a40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	6039      	str	r1, [r7, #0]
 8009a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d105      	bne.n	8009a5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4907      	ldr	r1, [pc, #28]	; (8009a74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a56:	4808      	ldr	r0, [pc, #32]	; (8009a78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a58:	f7ff fd96 	bl	8009588 <USBD_GetString>
 8009a5c:	e004      	b.n	8009a68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	4904      	ldr	r1, [pc, #16]	; (8009a74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a62:	4805      	ldr	r0, [pc, #20]	; (8009a78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a64:	f7ff fd90 	bl	8009588 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a68:	4b02      	ldr	r3, [pc, #8]	; (8009a74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	200016c4 	.word	0x200016c4
 8009a78:	0800d120 	.word	0x0800d120

08009a7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a82:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <Get_SerialNum+0x44>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a88:	4b0e      	ldr	r3, [pc, #56]	; (8009ac4 <Get_SerialNum+0x48>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ac8 <Get_SerialNum+0x4c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4413      	add	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d009      	beq.n	8009ab6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009aa2:	2208      	movs	r2, #8
 8009aa4:	4909      	ldr	r1, [pc, #36]	; (8009acc <Get_SerialNum+0x50>)
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 f814 	bl	8009ad4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009aac:	2204      	movs	r2, #4
 8009aae:	4908      	ldr	r1, [pc, #32]	; (8009ad0 <Get_SerialNum+0x54>)
 8009ab0:	68b8      	ldr	r0, [r7, #8]
 8009ab2:	f000 f80f 	bl	8009ad4 <IntToUnicode>
  }
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	1fff7a10 	.word	0x1fff7a10
 8009ac4:	1fff7a14 	.word	0x1fff7a14
 8009ac8:	1fff7a18 	.word	0x1fff7a18
 8009acc:	200000e6 	.word	0x200000e6
 8009ad0:	200000f6 	.word	0x200000f6

08009ad4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75fb      	strb	r3, [r7, #23]
 8009aea:	e027      	b.n	8009b3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	0f1b      	lsrs	r3, r3, #28
 8009af0:	2b09      	cmp	r3, #9
 8009af2:	d80b      	bhi.n	8009b0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	0f1b      	lsrs	r3, r3, #28
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4619      	mov	r1, r3
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	440b      	add	r3, r1
 8009b04:	3230      	adds	r2, #48	; 0x30
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	701a      	strb	r2, [r3, #0]
 8009b0a:	e00a      	b.n	8009b22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	0f1b      	lsrs	r3, r3, #28
 8009b10:	b2da      	uxtb	r2, r3
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	4619      	mov	r1, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	440b      	add	r3, r1
 8009b1c:	3237      	adds	r2, #55	; 0x37
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	4413      	add	r3, r2
 8009b32:	2200      	movs	r2, #0
 8009b34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b36:	7dfb      	ldrb	r3, [r7, #23]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	75fb      	strb	r3, [r7, #23]
 8009b3c:	7dfa      	ldrb	r2, [r7, #23]
 8009b3e:	79fb      	ldrb	r3, [r7, #7]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d3d3      	bcc.n	8009aec <IntToUnicode+0x18>
  }
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	371c      	adds	r7, #28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
	...

08009b54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b08a      	sub	sp, #40	; 0x28
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b5c:	f107 0314 	add.w	r3, r7, #20
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	609a      	str	r2, [r3, #8]
 8009b68:	60da      	str	r2, [r3, #12]
 8009b6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b74:	d13a      	bne.n	8009bec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b76:	2300      	movs	r3, #0
 8009b78:	613b      	str	r3, [r7, #16]
 8009b7a:	4b1e      	ldr	r3, [pc, #120]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7e:	4a1d      	ldr	r2, [pc, #116]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009b80:	f043 0301 	orr.w	r3, r3, #1
 8009b84:	6313      	str	r3, [r2, #48]	; 0x30
 8009b86:	4b1b      	ldr	r3, [pc, #108]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	613b      	str	r3, [r7, #16]
 8009b90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ba4:	230a      	movs	r3, #10
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ba8:	f107 0314 	add.w	r3, r7, #20
 8009bac:	4619      	mov	r1, r3
 8009bae:	4812      	ldr	r0, [pc, #72]	; (8009bf8 <HAL_PCD_MspInit+0xa4>)
 8009bb0:	f7f8 fb4c 	bl	800224c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009bb4:	4b0f      	ldr	r3, [pc, #60]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb8:	4a0e      	ldr	r2, [pc, #56]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbe:	6353      	str	r3, [r2, #52]	; 0x34
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc8:	4a0a      	ldr	r2, [pc, #40]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bce:	6453      	str	r3, [r2, #68]	; 0x44
 8009bd0:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <HAL_PCD_MspInit+0xa0>)
 8009bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	2043      	movs	r0, #67	; 0x43
 8009be2:	f7f7 fefa 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009be6:	2043      	movs	r0, #67	; 0x43
 8009be8:	f7f7 ff13 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009bec:	bf00      	nop
 8009bee:	3728      	adds	r7, #40	; 0x28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	40023800 	.word	0x40023800
 8009bf8:	40020000 	.word	0x40020000

08009bfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f7fe fb59 	bl	80082ca <USBD_LL_SetupStage>
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	6879      	ldr	r1, [r7, #4]
 8009c36:	4613      	mov	r3, r2
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	78fb      	ldrb	r3, [r7, #3]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f7fe fb93 	bl	8008374 <USBD_LL_DataOutStage>
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	440b      	add	r3, r1
 8009c76:	334c      	adds	r3, #76	; 0x4c
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	78fb      	ldrb	r3, [r7, #3]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	f7fe fc2c 	bl	80084da <USBD_LL_DataInStage>
}
 8009c82:	bf00      	nop
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe fd60 	bl	800875e <USBD_LL_SOF>
}
 8009c9e:	bf00      	nop
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d001      	beq.n	8009cbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cba:	f7f7 fa95 	bl	80011e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cc4:	7bfa      	ldrb	r2, [r7, #15]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe fd0a 	bl	80086e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fe fcb2 	bl	800863e <USBD_LL_Reset>
}
 8009cda:	bf00      	nop
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fe fd05 	bl	8008702 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d005      	beq.n	8009d24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d18:	4b04      	ldr	r3, [pc, #16]	; (8009d2c <HAL_PCD_SuspendCallback+0x48>)
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	4a03      	ldr	r2, [pc, #12]	; (8009d2c <HAL_PCD_SuspendCallback+0x48>)
 8009d1e:	f043 0306 	orr.w	r3, r3, #6
 8009d22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	e000ed00 	.word	0xe000ed00

08009d30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fe fcf5 	bl	800872e <USBD_LL_Resume>
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	4611      	mov	r1, r2
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fd4d 	bl	8008802 <USBD_LL_IsoOUTIncomplete>
}
 8009d68:	bf00      	nop
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009d82:	78fa      	ldrb	r2, [r7, #3]
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fd09 	bl	800879e <USBD_LL_IsoINIncomplete>
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fd5f 	bl	8008866 <USBD_LL_DevConnected>
}
 8009da8:	bf00      	nop
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fe fd5c 	bl	800887c <USBD_LL_DevDisconnected>
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d13c      	bne.n	8009e56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ddc:	4a20      	ldr	r2, [pc, #128]	; (8009e60 <USBD_LL_Init+0x94>)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a1e      	ldr	r2, [pc, #120]	; (8009e60 <USBD_LL_Init+0x94>)
 8009de8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dec:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <USBD_LL_Init+0x94>)
 8009dee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009df2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009df4:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <USBD_LL_Init+0x94>)
 8009df6:	2204      	movs	r2, #4
 8009df8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009dfa:	4b19      	ldr	r3, [pc, #100]	; (8009e60 <USBD_LL_Init+0x94>)
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009e00:	4b17      	ldr	r3, [pc, #92]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009e06:	4b16      	ldr	r3, [pc, #88]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e08:	2202      	movs	r2, #2
 8009e0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009e0c:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009e18:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009e1e:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e24:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e2a:	480d      	ldr	r0, [pc, #52]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e2c:	f7f8 fbc5 	bl	80025ba <HAL_PCD_Init>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009e36:	f7f7 f9d7 	bl	80011e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009e3a:	2180      	movs	r1, #128	; 0x80
 8009e3c:	4808      	ldr	r0, [pc, #32]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e3e:	f7f9 fe1c 	bl	8003a7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009e42:	2240      	movs	r2, #64	; 0x40
 8009e44:	2100      	movs	r1, #0
 8009e46:	4806      	ldr	r0, [pc, #24]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e48:	f7f9 fdd0 	bl	80039ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009e4c:	2280      	movs	r2, #128	; 0x80
 8009e4e:	2101      	movs	r1, #1
 8009e50:	4803      	ldr	r0, [pc, #12]	; (8009e60 <USBD_LL_Init+0x94>)
 8009e52:	f7f9 fdcb 	bl	80039ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	200018c4 	.word	0x200018c4

08009e64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f8 fcba 	bl	80027f4 <HAL_PCD_Start>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 f942 	bl	800a110 <USBD_Get_USB_Status>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	70fb      	strb	r3, [r7, #3]
 8009eac:	460b      	mov	r3, r1
 8009eae:	70bb      	strb	r3, [r7, #2]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ec2:	78bb      	ldrb	r3, [r7, #2]
 8009ec4:	883a      	ldrh	r2, [r7, #0]
 8009ec6:	78f9      	ldrb	r1, [r7, #3]
 8009ec8:	f7f9 f98b 	bl	80031e2 <HAL_PCD_EP_Open>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 f91c 	bl	800a110 <USBD_Get_USB_Status>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b084      	sub	sp, #16
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	460b      	mov	r3, r1
 8009ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f00:	78fa      	ldrb	r2, [r7, #3]
 8009f02:	4611      	mov	r1, r2
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7f9 f9d4 	bl	80032b2 <HAL_PCD_EP_Close>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f000 f8fd 	bl	800a110 <USBD_Get_USB_Status>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f9 faac 	bl	80034a0 <HAL_PCD_EP_SetStall>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f8de 	bl	800a110 <USBD_Get_USB_Status>
 8009f54:	4603      	mov	r3, r0
 8009f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f72:	2300      	movs	r3, #0
 8009f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009f7c:	78fa      	ldrb	r2, [r7, #3]
 8009f7e:	4611      	mov	r1, r2
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7f9 faf1 	bl	8003568 <HAL_PCD_EP_ClrStall>
 8009f86:	4603      	mov	r3, r0
 8009f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 f8bf 	bl	800a110 <USBD_Get_USB_Status>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da0b      	bge.n	8009fd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fbc:	78fb      	ldrb	r3, [r7, #3]
 8009fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fc2:	68f9      	ldr	r1, [r7, #12]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	333e      	adds	r3, #62	; 0x3e
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	e00b      	b.n	8009fec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fda:	68f9      	ldr	r1, [r7, #12]
 8009fdc:	4613      	mov	r3, r2
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009fea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f7f9 f8be 	bl	8003198 <HAL_PCD_SetAddress>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f874 	bl	800a110 <USBD_Get_USB_Status>
 800a028:	4603      	mov	r3, r0
 800a02a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
 800a042:	460b      	mov	r3, r1
 800a044:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a054:	7af9      	ldrb	r1, [r7, #11]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	f7f9 f9d7 	bl	800340c <HAL_PCD_EP_Transmit>
 800a05e:	4603      	mov	r3, r0
 800a060:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f853 	bl	800a110 <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a06e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3718      	adds	r7, #24
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	460b      	mov	r3, r1
 800a086:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a096:	7af9      	ldrb	r1, [r7, #11]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	f7f9 f953 	bl	8003346 <HAL_PCD_EP_Receive>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f832 	bl	800a110 <USBD_Get_USB_Status>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a0b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3718      	adds	r7, #24
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f9 f983 	bl	80033dc <HAL_PCD_EP_GetRxCount>
 800a0d6:	4603      	mov	r3, r0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0e8:	4b03      	ldr	r3, [pc, #12]	; (800a0f8 <USBD_static_malloc+0x18>)
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	20001dd0 	.word	0x20001dd0

0800a0fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	2b03      	cmp	r3, #3
 800a122:	d817      	bhi.n	800a154 <USBD_Get_USB_Status+0x44>
 800a124:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <USBD_Get_USB_Status+0x1c>)
 800a126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12a:	bf00      	nop
 800a12c:	0800a13d 	.word	0x0800a13d
 800a130:	0800a143 	.word	0x0800a143
 800a134:	0800a149 	.word	0x0800a149
 800a138:	0800a14f 	.word	0x0800a14f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
    break;
 800a140:	e00b      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	73fb      	strb	r3, [r7, #15]
    break;
 800a146:	e008      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a148:	2301      	movs	r3, #1
 800a14a:	73fb      	strb	r3, [r7, #15]
    break;
 800a14c:	e005      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a14e:	2303      	movs	r3, #3
 800a150:	73fb      	strb	r3, [r7, #15]
    break;
 800a152:	e002      	b.n	800a15a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a154:	2303      	movs	r3, #3
 800a156:	73fb      	strb	r3, [r7, #15]
    break;
 800a158:	bf00      	nop
  }
  return usb_status;
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <__errno>:
 800a168:	4b01      	ldr	r3, [pc, #4]	; (800a170 <__errno+0x8>)
 800a16a:	6818      	ldr	r0, [r3, #0]
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	20000100 	.word	0x20000100

0800a174 <__libc_init_array>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	4d0d      	ldr	r5, [pc, #52]	; (800a1ac <__libc_init_array+0x38>)
 800a178:	4c0d      	ldr	r4, [pc, #52]	; (800a1b0 <__libc_init_array+0x3c>)
 800a17a:	1b64      	subs	r4, r4, r5
 800a17c:	10a4      	asrs	r4, r4, #2
 800a17e:	2600      	movs	r6, #0
 800a180:	42a6      	cmp	r6, r4
 800a182:	d109      	bne.n	800a198 <__libc_init_array+0x24>
 800a184:	4d0b      	ldr	r5, [pc, #44]	; (800a1b4 <__libc_init_array+0x40>)
 800a186:	4c0c      	ldr	r4, [pc, #48]	; (800a1b8 <__libc_init_array+0x44>)
 800a188:	f002 ff7c 	bl	800d084 <_init>
 800a18c:	1b64      	subs	r4, r4, r5
 800a18e:	10a4      	asrs	r4, r4, #2
 800a190:	2600      	movs	r6, #0
 800a192:	42a6      	cmp	r6, r4
 800a194:	d105      	bne.n	800a1a2 <__libc_init_array+0x2e>
 800a196:	bd70      	pop	{r4, r5, r6, pc}
 800a198:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19c:	4798      	blx	r3
 800a19e:	3601      	adds	r6, #1
 800a1a0:	e7ee      	b.n	800a180 <__libc_init_array+0xc>
 800a1a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1a6:	4798      	blx	r3
 800a1a8:	3601      	adds	r6, #1
 800a1aa:	e7f2      	b.n	800a192 <__libc_init_array+0x1e>
 800a1ac:	0800d544 	.word	0x0800d544
 800a1b0:	0800d544 	.word	0x0800d544
 800a1b4:	0800d544 	.word	0x0800d544
 800a1b8:	0800d548 	.word	0x0800d548

0800a1bc <memset>:
 800a1bc:	4402      	add	r2, r0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d100      	bne.n	800a1c6 <memset+0xa>
 800a1c4:	4770      	bx	lr
 800a1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ca:	e7f9      	b.n	800a1c0 <memset+0x4>

0800a1cc <__cvt>:
 800a1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d0:	ec55 4b10 	vmov	r4, r5, d0
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	460e      	mov	r6, r1
 800a1d8:	4619      	mov	r1, r3
 800a1da:	462b      	mov	r3, r5
 800a1dc:	bfbb      	ittet	lt
 800a1de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1e2:	461d      	movlt	r5, r3
 800a1e4:	2300      	movge	r3, #0
 800a1e6:	232d      	movlt	r3, #45	; 0x2d
 800a1e8:	700b      	strb	r3, [r1, #0]
 800a1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1f0:	4691      	mov	r9, r2
 800a1f2:	f023 0820 	bic.w	r8, r3, #32
 800a1f6:	bfbc      	itt	lt
 800a1f8:	4622      	movlt	r2, r4
 800a1fa:	4614      	movlt	r4, r2
 800a1fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a200:	d005      	beq.n	800a20e <__cvt+0x42>
 800a202:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a206:	d100      	bne.n	800a20a <__cvt+0x3e>
 800a208:	3601      	adds	r6, #1
 800a20a:	2102      	movs	r1, #2
 800a20c:	e000      	b.n	800a210 <__cvt+0x44>
 800a20e:	2103      	movs	r1, #3
 800a210:	ab03      	add	r3, sp, #12
 800a212:	9301      	str	r3, [sp, #4]
 800a214:	ab02      	add	r3, sp, #8
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	ec45 4b10 	vmov	d0, r4, r5
 800a21c:	4653      	mov	r3, sl
 800a21e:	4632      	mov	r2, r6
 800a220:	f000 fd1a 	bl	800ac58 <_dtoa_r>
 800a224:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a228:	4607      	mov	r7, r0
 800a22a:	d102      	bne.n	800a232 <__cvt+0x66>
 800a22c:	f019 0f01 	tst.w	r9, #1
 800a230:	d022      	beq.n	800a278 <__cvt+0xac>
 800a232:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a236:	eb07 0906 	add.w	r9, r7, r6
 800a23a:	d110      	bne.n	800a25e <__cvt+0x92>
 800a23c:	783b      	ldrb	r3, [r7, #0]
 800a23e:	2b30      	cmp	r3, #48	; 0x30
 800a240:	d10a      	bne.n	800a258 <__cvt+0x8c>
 800a242:	2200      	movs	r2, #0
 800a244:	2300      	movs	r3, #0
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 fc45 	bl	8000ad8 <__aeabi_dcmpeq>
 800a24e:	b918      	cbnz	r0, 800a258 <__cvt+0x8c>
 800a250:	f1c6 0601 	rsb	r6, r6, #1
 800a254:	f8ca 6000 	str.w	r6, [sl]
 800a258:	f8da 3000 	ldr.w	r3, [sl]
 800a25c:	4499      	add	r9, r3
 800a25e:	2200      	movs	r2, #0
 800a260:	2300      	movs	r3, #0
 800a262:	4620      	mov	r0, r4
 800a264:	4629      	mov	r1, r5
 800a266:	f7f6 fc37 	bl	8000ad8 <__aeabi_dcmpeq>
 800a26a:	b108      	cbz	r0, 800a270 <__cvt+0xa4>
 800a26c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a270:	2230      	movs	r2, #48	; 0x30
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	454b      	cmp	r3, r9
 800a276:	d307      	bcc.n	800a288 <__cvt+0xbc>
 800a278:	9b03      	ldr	r3, [sp, #12]
 800a27a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a27c:	1bdb      	subs	r3, r3, r7
 800a27e:	4638      	mov	r0, r7
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	b004      	add	sp, #16
 800a284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a288:	1c59      	adds	r1, r3, #1
 800a28a:	9103      	str	r1, [sp, #12]
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	e7f0      	b.n	800a272 <__cvt+0xa6>

0800a290 <__exponent>:
 800a290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a292:	4603      	mov	r3, r0
 800a294:	2900      	cmp	r1, #0
 800a296:	bfb8      	it	lt
 800a298:	4249      	neglt	r1, r1
 800a29a:	f803 2b02 	strb.w	r2, [r3], #2
 800a29e:	bfb4      	ite	lt
 800a2a0:	222d      	movlt	r2, #45	; 0x2d
 800a2a2:	222b      	movge	r2, #43	; 0x2b
 800a2a4:	2909      	cmp	r1, #9
 800a2a6:	7042      	strb	r2, [r0, #1]
 800a2a8:	dd2a      	ble.n	800a300 <__exponent+0x70>
 800a2aa:	f10d 0407 	add.w	r4, sp, #7
 800a2ae:	46a4      	mov	ip, r4
 800a2b0:	270a      	movs	r7, #10
 800a2b2:	46a6      	mov	lr, r4
 800a2b4:	460a      	mov	r2, r1
 800a2b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2ba:	fb07 1516 	mls	r5, r7, r6, r1
 800a2be:	3530      	adds	r5, #48	; 0x30
 800a2c0:	2a63      	cmp	r2, #99	; 0x63
 800a2c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	dcf1      	bgt.n	800a2b2 <__exponent+0x22>
 800a2ce:	3130      	adds	r1, #48	; 0x30
 800a2d0:	f1ae 0502 	sub.w	r5, lr, #2
 800a2d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2d8:	1c44      	adds	r4, r0, #1
 800a2da:	4629      	mov	r1, r5
 800a2dc:	4561      	cmp	r1, ip
 800a2de:	d30a      	bcc.n	800a2f6 <__exponent+0x66>
 800a2e0:	f10d 0209 	add.w	r2, sp, #9
 800a2e4:	eba2 020e 	sub.w	r2, r2, lr
 800a2e8:	4565      	cmp	r5, ip
 800a2ea:	bf88      	it	hi
 800a2ec:	2200      	movhi	r2, #0
 800a2ee:	4413      	add	r3, r2
 800a2f0:	1a18      	subs	r0, r3, r0
 800a2f2:	b003      	add	sp, #12
 800a2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a2fe:	e7ed      	b.n	800a2dc <__exponent+0x4c>
 800a300:	2330      	movs	r3, #48	; 0x30
 800a302:	3130      	adds	r1, #48	; 0x30
 800a304:	7083      	strb	r3, [r0, #2]
 800a306:	70c1      	strb	r1, [r0, #3]
 800a308:	1d03      	adds	r3, r0, #4
 800a30a:	e7f1      	b.n	800a2f0 <__exponent+0x60>

0800a30c <_printf_float>:
 800a30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a310:	ed2d 8b02 	vpush	{d8}
 800a314:	b08d      	sub	sp, #52	; 0x34
 800a316:	460c      	mov	r4, r1
 800a318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a31c:	4616      	mov	r6, r2
 800a31e:	461f      	mov	r7, r3
 800a320:	4605      	mov	r5, r0
 800a322:	f001 fb7d 	bl	800ba20 <_localeconv_r>
 800a326:	f8d0 a000 	ldr.w	sl, [r0]
 800a32a:	4650      	mov	r0, sl
 800a32c:	f7f5 ff58 	bl	80001e0 <strlen>
 800a330:	2300      	movs	r3, #0
 800a332:	930a      	str	r3, [sp, #40]	; 0x28
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	9305      	str	r3, [sp, #20]
 800a338:	f8d8 3000 	ldr.w	r3, [r8]
 800a33c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a340:	3307      	adds	r3, #7
 800a342:	f023 0307 	bic.w	r3, r3, #7
 800a346:	f103 0208 	add.w	r2, r3, #8
 800a34a:	f8c8 2000 	str.w	r2, [r8]
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a356:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a35a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a35e:	9307      	str	r3, [sp, #28]
 800a360:	f8cd 8018 	str.w	r8, [sp, #24]
 800a364:	ee08 0a10 	vmov	s16, r0
 800a368:	4b9f      	ldr	r3, [pc, #636]	; (800a5e8 <_printf_float+0x2dc>)
 800a36a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a36e:	f04f 32ff 	mov.w	r2, #4294967295
 800a372:	f7f6 fbe3 	bl	8000b3c <__aeabi_dcmpun>
 800a376:	bb88      	cbnz	r0, 800a3dc <_printf_float+0xd0>
 800a378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a37c:	4b9a      	ldr	r3, [pc, #616]	; (800a5e8 <_printf_float+0x2dc>)
 800a37e:	f04f 32ff 	mov.w	r2, #4294967295
 800a382:	f7f6 fbbd 	bl	8000b00 <__aeabi_dcmple>
 800a386:	bb48      	cbnz	r0, 800a3dc <_printf_float+0xd0>
 800a388:	2200      	movs	r2, #0
 800a38a:	2300      	movs	r3, #0
 800a38c:	4640      	mov	r0, r8
 800a38e:	4649      	mov	r1, r9
 800a390:	f7f6 fbac 	bl	8000aec <__aeabi_dcmplt>
 800a394:	b110      	cbz	r0, 800a39c <_printf_float+0x90>
 800a396:	232d      	movs	r3, #45	; 0x2d
 800a398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a39c:	4b93      	ldr	r3, [pc, #588]	; (800a5ec <_printf_float+0x2e0>)
 800a39e:	4894      	ldr	r0, [pc, #592]	; (800a5f0 <_printf_float+0x2e4>)
 800a3a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3a4:	bf94      	ite	ls
 800a3a6:	4698      	movls	r8, r3
 800a3a8:	4680      	movhi	r8, r0
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	9b05      	ldr	r3, [sp, #20]
 800a3b0:	f023 0204 	bic.w	r2, r3, #4
 800a3b4:	6022      	str	r2, [r4, #0]
 800a3b6:	f04f 0900 	mov.w	r9, #0
 800a3ba:	9700      	str	r7, [sp, #0]
 800a3bc:	4633      	mov	r3, r6
 800a3be:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	f000 f9d8 	bl	800a778 <_printf_common>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	f040 8090 	bne.w	800a4ee <_printf_float+0x1e2>
 800a3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d2:	b00d      	add	sp, #52	; 0x34
 800a3d4:	ecbd 8b02 	vpop	{d8}
 800a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3dc:	4642      	mov	r2, r8
 800a3de:	464b      	mov	r3, r9
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7f6 fbaa 	bl	8000b3c <__aeabi_dcmpun>
 800a3e8:	b140      	cbz	r0, 800a3fc <_printf_float+0xf0>
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bfbc      	itt	lt
 800a3f0:	232d      	movlt	r3, #45	; 0x2d
 800a3f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a3f6:	487f      	ldr	r0, [pc, #508]	; (800a5f4 <_printf_float+0x2e8>)
 800a3f8:	4b7f      	ldr	r3, [pc, #508]	; (800a5f8 <_printf_float+0x2ec>)
 800a3fa:	e7d1      	b.n	800a3a0 <_printf_float+0x94>
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a402:	9206      	str	r2, [sp, #24]
 800a404:	1c5a      	adds	r2, r3, #1
 800a406:	d13f      	bne.n	800a488 <_printf_float+0x17c>
 800a408:	2306      	movs	r3, #6
 800a40a:	6063      	str	r3, [r4, #4]
 800a40c:	9b05      	ldr	r3, [sp, #20]
 800a40e:	6861      	ldr	r1, [r4, #4]
 800a410:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a414:	2300      	movs	r3, #0
 800a416:	9303      	str	r3, [sp, #12]
 800a418:	ab0a      	add	r3, sp, #40	; 0x28
 800a41a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a41e:	ab09      	add	r3, sp, #36	; 0x24
 800a420:	ec49 8b10 	vmov	d0, r8, r9
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	6022      	str	r2, [r4, #0]
 800a428:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a42c:	4628      	mov	r0, r5
 800a42e:	f7ff fecd 	bl	800a1cc <__cvt>
 800a432:	9b06      	ldr	r3, [sp, #24]
 800a434:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a436:	2b47      	cmp	r3, #71	; 0x47
 800a438:	4680      	mov	r8, r0
 800a43a:	d108      	bne.n	800a44e <_printf_float+0x142>
 800a43c:	1cc8      	adds	r0, r1, #3
 800a43e:	db02      	blt.n	800a446 <_printf_float+0x13a>
 800a440:	6863      	ldr	r3, [r4, #4]
 800a442:	4299      	cmp	r1, r3
 800a444:	dd41      	ble.n	800a4ca <_printf_float+0x1be>
 800a446:	f1ab 0b02 	sub.w	fp, fp, #2
 800a44a:	fa5f fb8b 	uxtb.w	fp, fp
 800a44e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a452:	d820      	bhi.n	800a496 <_printf_float+0x18a>
 800a454:	3901      	subs	r1, #1
 800a456:	465a      	mov	r2, fp
 800a458:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a45c:	9109      	str	r1, [sp, #36]	; 0x24
 800a45e:	f7ff ff17 	bl	800a290 <__exponent>
 800a462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a464:	1813      	adds	r3, r2, r0
 800a466:	2a01      	cmp	r2, #1
 800a468:	4681      	mov	r9, r0
 800a46a:	6123      	str	r3, [r4, #16]
 800a46c:	dc02      	bgt.n	800a474 <_printf_float+0x168>
 800a46e:	6822      	ldr	r2, [r4, #0]
 800a470:	07d2      	lsls	r2, r2, #31
 800a472:	d501      	bpl.n	800a478 <_printf_float+0x16c>
 800a474:	3301      	adds	r3, #1
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d09c      	beq.n	800a3ba <_printf_float+0xae>
 800a480:	232d      	movs	r3, #45	; 0x2d
 800a482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a486:	e798      	b.n	800a3ba <_printf_float+0xae>
 800a488:	9a06      	ldr	r2, [sp, #24]
 800a48a:	2a47      	cmp	r2, #71	; 0x47
 800a48c:	d1be      	bne.n	800a40c <_printf_float+0x100>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1bc      	bne.n	800a40c <_printf_float+0x100>
 800a492:	2301      	movs	r3, #1
 800a494:	e7b9      	b.n	800a40a <_printf_float+0xfe>
 800a496:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a49a:	d118      	bne.n	800a4ce <_printf_float+0x1c2>
 800a49c:	2900      	cmp	r1, #0
 800a49e:	6863      	ldr	r3, [r4, #4]
 800a4a0:	dd0b      	ble.n	800a4ba <_printf_float+0x1ae>
 800a4a2:	6121      	str	r1, [r4, #16]
 800a4a4:	b913      	cbnz	r3, 800a4ac <_printf_float+0x1a0>
 800a4a6:	6822      	ldr	r2, [r4, #0]
 800a4a8:	07d0      	lsls	r0, r2, #31
 800a4aa:	d502      	bpl.n	800a4b2 <_printf_float+0x1a6>
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	440b      	add	r3, r1
 800a4b0:	6123      	str	r3, [r4, #16]
 800a4b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4b4:	f04f 0900 	mov.w	r9, #0
 800a4b8:	e7de      	b.n	800a478 <_printf_float+0x16c>
 800a4ba:	b913      	cbnz	r3, 800a4c2 <_printf_float+0x1b6>
 800a4bc:	6822      	ldr	r2, [r4, #0]
 800a4be:	07d2      	lsls	r2, r2, #31
 800a4c0:	d501      	bpl.n	800a4c6 <_printf_float+0x1ba>
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	e7f4      	b.n	800a4b0 <_printf_float+0x1a4>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e7f2      	b.n	800a4b0 <_printf_float+0x1a4>
 800a4ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d0:	4299      	cmp	r1, r3
 800a4d2:	db05      	blt.n	800a4e0 <_printf_float+0x1d4>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	6121      	str	r1, [r4, #16]
 800a4d8:	07d8      	lsls	r0, r3, #31
 800a4da:	d5ea      	bpl.n	800a4b2 <_printf_float+0x1a6>
 800a4dc:	1c4b      	adds	r3, r1, #1
 800a4de:	e7e7      	b.n	800a4b0 <_printf_float+0x1a4>
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	bfd4      	ite	le
 800a4e4:	f1c1 0202 	rsble	r2, r1, #2
 800a4e8:	2201      	movgt	r2, #1
 800a4ea:	4413      	add	r3, r2
 800a4ec:	e7e0      	b.n	800a4b0 <_printf_float+0x1a4>
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	055a      	lsls	r2, r3, #21
 800a4f2:	d407      	bmi.n	800a504 <_printf_float+0x1f8>
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	4642      	mov	r2, r8
 800a4f8:	4631      	mov	r1, r6
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	47b8      	blx	r7
 800a4fe:	3001      	adds	r0, #1
 800a500:	d12c      	bne.n	800a55c <_printf_float+0x250>
 800a502:	e764      	b.n	800a3ce <_printf_float+0xc2>
 800a504:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a508:	f240 80e0 	bls.w	800a6cc <_printf_float+0x3c0>
 800a50c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a510:	2200      	movs	r2, #0
 800a512:	2300      	movs	r3, #0
 800a514:	f7f6 fae0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d034      	beq.n	800a586 <_printf_float+0x27a>
 800a51c:	4a37      	ldr	r2, [pc, #220]	; (800a5fc <_printf_float+0x2f0>)
 800a51e:	2301      	movs	r3, #1
 800a520:	4631      	mov	r1, r6
 800a522:	4628      	mov	r0, r5
 800a524:	47b8      	blx	r7
 800a526:	3001      	adds	r0, #1
 800a528:	f43f af51 	beq.w	800a3ce <_printf_float+0xc2>
 800a52c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a530:	429a      	cmp	r2, r3
 800a532:	db02      	blt.n	800a53a <_printf_float+0x22e>
 800a534:	6823      	ldr	r3, [r4, #0]
 800a536:	07d8      	lsls	r0, r3, #31
 800a538:	d510      	bpl.n	800a55c <_printf_float+0x250>
 800a53a:	ee18 3a10 	vmov	r3, s16
 800a53e:	4652      	mov	r2, sl
 800a540:	4631      	mov	r1, r6
 800a542:	4628      	mov	r0, r5
 800a544:	47b8      	blx	r7
 800a546:	3001      	adds	r0, #1
 800a548:	f43f af41 	beq.w	800a3ce <_printf_float+0xc2>
 800a54c:	f04f 0800 	mov.w	r8, #0
 800a550:	f104 091a 	add.w	r9, r4, #26
 800a554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a556:	3b01      	subs	r3, #1
 800a558:	4543      	cmp	r3, r8
 800a55a:	dc09      	bgt.n	800a570 <_printf_float+0x264>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	079b      	lsls	r3, r3, #30
 800a560:	f100 8105 	bmi.w	800a76e <_printf_float+0x462>
 800a564:	68e0      	ldr	r0, [r4, #12]
 800a566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a568:	4298      	cmp	r0, r3
 800a56a:	bfb8      	it	lt
 800a56c:	4618      	movlt	r0, r3
 800a56e:	e730      	b.n	800a3d2 <_printf_float+0xc6>
 800a570:	2301      	movs	r3, #1
 800a572:	464a      	mov	r2, r9
 800a574:	4631      	mov	r1, r6
 800a576:	4628      	mov	r0, r5
 800a578:	47b8      	blx	r7
 800a57a:	3001      	adds	r0, #1
 800a57c:	f43f af27 	beq.w	800a3ce <_printf_float+0xc2>
 800a580:	f108 0801 	add.w	r8, r8, #1
 800a584:	e7e6      	b.n	800a554 <_printf_float+0x248>
 800a586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dc39      	bgt.n	800a600 <_printf_float+0x2f4>
 800a58c:	4a1b      	ldr	r2, [pc, #108]	; (800a5fc <_printf_float+0x2f0>)
 800a58e:	2301      	movs	r3, #1
 800a590:	4631      	mov	r1, r6
 800a592:	4628      	mov	r0, r5
 800a594:	47b8      	blx	r7
 800a596:	3001      	adds	r0, #1
 800a598:	f43f af19 	beq.w	800a3ce <_printf_float+0xc2>
 800a59c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	d102      	bne.n	800a5aa <_printf_float+0x29e>
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	07d9      	lsls	r1, r3, #31
 800a5a8:	d5d8      	bpl.n	800a55c <_printf_float+0x250>
 800a5aa:	ee18 3a10 	vmov	r3, s16
 800a5ae:	4652      	mov	r2, sl
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	47b8      	blx	r7
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	f43f af09 	beq.w	800a3ce <_printf_float+0xc2>
 800a5bc:	f04f 0900 	mov.w	r9, #0
 800a5c0:	f104 0a1a 	add.w	sl, r4, #26
 800a5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c6:	425b      	negs	r3, r3
 800a5c8:	454b      	cmp	r3, r9
 800a5ca:	dc01      	bgt.n	800a5d0 <_printf_float+0x2c4>
 800a5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ce:	e792      	b.n	800a4f6 <_printf_float+0x1ea>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	4652      	mov	r2, sl
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f aef7 	beq.w	800a3ce <_printf_float+0xc2>
 800a5e0:	f109 0901 	add.w	r9, r9, #1
 800a5e4:	e7ee      	b.n	800a5c4 <_printf_float+0x2b8>
 800a5e6:	bf00      	nop
 800a5e8:	7fefffff 	.word	0x7fefffff
 800a5ec:	0800d168 	.word	0x0800d168
 800a5f0:	0800d16c 	.word	0x0800d16c
 800a5f4:	0800d174 	.word	0x0800d174
 800a5f8:	0800d170 	.word	0x0800d170
 800a5fc:	0800d178 	.word	0x0800d178
 800a600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a602:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a604:	429a      	cmp	r2, r3
 800a606:	bfa8      	it	ge
 800a608:	461a      	movge	r2, r3
 800a60a:	2a00      	cmp	r2, #0
 800a60c:	4691      	mov	r9, r2
 800a60e:	dc37      	bgt.n	800a680 <_printf_float+0x374>
 800a610:	f04f 0b00 	mov.w	fp, #0
 800a614:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a618:	f104 021a 	add.w	r2, r4, #26
 800a61c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a61e:	9305      	str	r3, [sp, #20]
 800a620:	eba3 0309 	sub.w	r3, r3, r9
 800a624:	455b      	cmp	r3, fp
 800a626:	dc33      	bgt.n	800a690 <_printf_float+0x384>
 800a628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a62c:	429a      	cmp	r2, r3
 800a62e:	db3b      	blt.n	800a6a8 <_printf_float+0x39c>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	07da      	lsls	r2, r3, #31
 800a634:	d438      	bmi.n	800a6a8 <_printf_float+0x39c>
 800a636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a638:	9a05      	ldr	r2, [sp, #20]
 800a63a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a63c:	1a9a      	subs	r2, r3, r2
 800a63e:	eba3 0901 	sub.w	r9, r3, r1
 800a642:	4591      	cmp	r9, r2
 800a644:	bfa8      	it	ge
 800a646:	4691      	movge	r9, r2
 800a648:	f1b9 0f00 	cmp.w	r9, #0
 800a64c:	dc35      	bgt.n	800a6ba <_printf_float+0x3ae>
 800a64e:	f04f 0800 	mov.w	r8, #0
 800a652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a656:	f104 0a1a 	add.w	sl, r4, #26
 800a65a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a65e:	1a9b      	subs	r3, r3, r2
 800a660:	eba3 0309 	sub.w	r3, r3, r9
 800a664:	4543      	cmp	r3, r8
 800a666:	f77f af79 	ble.w	800a55c <_printf_float+0x250>
 800a66a:	2301      	movs	r3, #1
 800a66c:	4652      	mov	r2, sl
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	f43f aeaa 	beq.w	800a3ce <_printf_float+0xc2>
 800a67a:	f108 0801 	add.w	r8, r8, #1
 800a67e:	e7ec      	b.n	800a65a <_printf_float+0x34e>
 800a680:	4613      	mov	r3, r2
 800a682:	4631      	mov	r1, r6
 800a684:	4642      	mov	r2, r8
 800a686:	4628      	mov	r0, r5
 800a688:	47b8      	blx	r7
 800a68a:	3001      	adds	r0, #1
 800a68c:	d1c0      	bne.n	800a610 <_printf_float+0x304>
 800a68e:	e69e      	b.n	800a3ce <_printf_float+0xc2>
 800a690:	2301      	movs	r3, #1
 800a692:	4631      	mov	r1, r6
 800a694:	4628      	mov	r0, r5
 800a696:	9205      	str	r2, [sp, #20]
 800a698:	47b8      	blx	r7
 800a69a:	3001      	adds	r0, #1
 800a69c:	f43f ae97 	beq.w	800a3ce <_printf_float+0xc2>
 800a6a0:	9a05      	ldr	r2, [sp, #20]
 800a6a2:	f10b 0b01 	add.w	fp, fp, #1
 800a6a6:	e7b9      	b.n	800a61c <_printf_float+0x310>
 800a6a8:	ee18 3a10 	vmov	r3, s16
 800a6ac:	4652      	mov	r2, sl
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	47b8      	blx	r7
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d1be      	bne.n	800a636 <_printf_float+0x32a>
 800a6b8:	e689      	b.n	800a3ce <_printf_float+0xc2>
 800a6ba:	9a05      	ldr	r2, [sp, #20]
 800a6bc:	464b      	mov	r3, r9
 800a6be:	4442      	add	r2, r8
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	d1c1      	bne.n	800a64e <_printf_float+0x342>
 800a6ca:	e680      	b.n	800a3ce <_printf_float+0xc2>
 800a6cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ce:	2a01      	cmp	r2, #1
 800a6d0:	dc01      	bgt.n	800a6d6 <_printf_float+0x3ca>
 800a6d2:	07db      	lsls	r3, r3, #31
 800a6d4:	d538      	bpl.n	800a748 <_printf_float+0x43c>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	4642      	mov	r2, r8
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f ae74 	beq.w	800a3ce <_printf_float+0xc2>
 800a6e6:	ee18 3a10 	vmov	r3, s16
 800a6ea:	4652      	mov	r2, sl
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	f43f ae6b 	beq.w	800a3ce <_printf_float+0xc2>
 800a6f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2300      	movs	r3, #0
 800a700:	f7f6 f9ea 	bl	8000ad8 <__aeabi_dcmpeq>
 800a704:	b9d8      	cbnz	r0, 800a73e <_printf_float+0x432>
 800a706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a708:	f108 0201 	add.w	r2, r8, #1
 800a70c:	3b01      	subs	r3, #1
 800a70e:	4631      	mov	r1, r6
 800a710:	4628      	mov	r0, r5
 800a712:	47b8      	blx	r7
 800a714:	3001      	adds	r0, #1
 800a716:	d10e      	bne.n	800a736 <_printf_float+0x42a>
 800a718:	e659      	b.n	800a3ce <_printf_float+0xc2>
 800a71a:	2301      	movs	r3, #1
 800a71c:	4652      	mov	r2, sl
 800a71e:	4631      	mov	r1, r6
 800a720:	4628      	mov	r0, r5
 800a722:	47b8      	blx	r7
 800a724:	3001      	adds	r0, #1
 800a726:	f43f ae52 	beq.w	800a3ce <_printf_float+0xc2>
 800a72a:	f108 0801 	add.w	r8, r8, #1
 800a72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a730:	3b01      	subs	r3, #1
 800a732:	4543      	cmp	r3, r8
 800a734:	dcf1      	bgt.n	800a71a <_printf_float+0x40e>
 800a736:	464b      	mov	r3, r9
 800a738:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a73c:	e6dc      	b.n	800a4f8 <_printf_float+0x1ec>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	f104 0a1a 	add.w	sl, r4, #26
 800a746:	e7f2      	b.n	800a72e <_printf_float+0x422>
 800a748:	2301      	movs	r3, #1
 800a74a:	4642      	mov	r2, r8
 800a74c:	e7df      	b.n	800a70e <_printf_float+0x402>
 800a74e:	2301      	movs	r3, #1
 800a750:	464a      	mov	r2, r9
 800a752:	4631      	mov	r1, r6
 800a754:	4628      	mov	r0, r5
 800a756:	47b8      	blx	r7
 800a758:	3001      	adds	r0, #1
 800a75a:	f43f ae38 	beq.w	800a3ce <_printf_float+0xc2>
 800a75e:	f108 0801 	add.w	r8, r8, #1
 800a762:	68e3      	ldr	r3, [r4, #12]
 800a764:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a766:	1a5b      	subs	r3, r3, r1
 800a768:	4543      	cmp	r3, r8
 800a76a:	dcf0      	bgt.n	800a74e <_printf_float+0x442>
 800a76c:	e6fa      	b.n	800a564 <_printf_float+0x258>
 800a76e:	f04f 0800 	mov.w	r8, #0
 800a772:	f104 0919 	add.w	r9, r4, #25
 800a776:	e7f4      	b.n	800a762 <_printf_float+0x456>

0800a778 <_printf_common>:
 800a778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a77c:	4616      	mov	r6, r2
 800a77e:	4699      	mov	r9, r3
 800a780:	688a      	ldr	r2, [r1, #8]
 800a782:	690b      	ldr	r3, [r1, #16]
 800a784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a788:	4293      	cmp	r3, r2
 800a78a:	bfb8      	it	lt
 800a78c:	4613      	movlt	r3, r2
 800a78e:	6033      	str	r3, [r6, #0]
 800a790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a794:	4607      	mov	r7, r0
 800a796:	460c      	mov	r4, r1
 800a798:	b10a      	cbz	r2, 800a79e <_printf_common+0x26>
 800a79a:	3301      	adds	r3, #1
 800a79c:	6033      	str	r3, [r6, #0]
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	0699      	lsls	r1, r3, #26
 800a7a2:	bf42      	ittt	mi
 800a7a4:	6833      	ldrmi	r3, [r6, #0]
 800a7a6:	3302      	addmi	r3, #2
 800a7a8:	6033      	strmi	r3, [r6, #0]
 800a7aa:	6825      	ldr	r5, [r4, #0]
 800a7ac:	f015 0506 	ands.w	r5, r5, #6
 800a7b0:	d106      	bne.n	800a7c0 <_printf_common+0x48>
 800a7b2:	f104 0a19 	add.w	sl, r4, #25
 800a7b6:	68e3      	ldr	r3, [r4, #12]
 800a7b8:	6832      	ldr	r2, [r6, #0]
 800a7ba:	1a9b      	subs	r3, r3, r2
 800a7bc:	42ab      	cmp	r3, r5
 800a7be:	dc26      	bgt.n	800a80e <_printf_common+0x96>
 800a7c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7c4:	1e13      	subs	r3, r2, #0
 800a7c6:	6822      	ldr	r2, [r4, #0]
 800a7c8:	bf18      	it	ne
 800a7ca:	2301      	movne	r3, #1
 800a7cc:	0692      	lsls	r2, r2, #26
 800a7ce:	d42b      	bmi.n	800a828 <_printf_common+0xb0>
 800a7d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	47c0      	blx	r8
 800a7da:	3001      	adds	r0, #1
 800a7dc:	d01e      	beq.n	800a81c <_printf_common+0xa4>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	68e5      	ldr	r5, [r4, #12]
 800a7e2:	6832      	ldr	r2, [r6, #0]
 800a7e4:	f003 0306 	and.w	r3, r3, #6
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	bf08      	it	eq
 800a7ec:	1aad      	subeq	r5, r5, r2
 800a7ee:	68a3      	ldr	r3, [r4, #8]
 800a7f0:	6922      	ldr	r2, [r4, #16]
 800a7f2:	bf0c      	ite	eq
 800a7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7f8:	2500      	movne	r5, #0
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	bfc4      	itt	gt
 800a7fe:	1a9b      	subgt	r3, r3, r2
 800a800:	18ed      	addgt	r5, r5, r3
 800a802:	2600      	movs	r6, #0
 800a804:	341a      	adds	r4, #26
 800a806:	42b5      	cmp	r5, r6
 800a808:	d11a      	bne.n	800a840 <_printf_common+0xc8>
 800a80a:	2000      	movs	r0, #0
 800a80c:	e008      	b.n	800a820 <_printf_common+0xa8>
 800a80e:	2301      	movs	r3, #1
 800a810:	4652      	mov	r2, sl
 800a812:	4649      	mov	r1, r9
 800a814:	4638      	mov	r0, r7
 800a816:	47c0      	blx	r8
 800a818:	3001      	adds	r0, #1
 800a81a:	d103      	bne.n	800a824 <_printf_common+0xac>
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a824:	3501      	adds	r5, #1
 800a826:	e7c6      	b.n	800a7b6 <_printf_common+0x3e>
 800a828:	18e1      	adds	r1, r4, r3
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	2030      	movs	r0, #48	; 0x30
 800a82e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a832:	4422      	add	r2, r4
 800a834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a83c:	3302      	adds	r3, #2
 800a83e:	e7c7      	b.n	800a7d0 <_printf_common+0x58>
 800a840:	2301      	movs	r3, #1
 800a842:	4622      	mov	r2, r4
 800a844:	4649      	mov	r1, r9
 800a846:	4638      	mov	r0, r7
 800a848:	47c0      	blx	r8
 800a84a:	3001      	adds	r0, #1
 800a84c:	d0e6      	beq.n	800a81c <_printf_common+0xa4>
 800a84e:	3601      	adds	r6, #1
 800a850:	e7d9      	b.n	800a806 <_printf_common+0x8e>
	...

0800a854 <_printf_i>:
 800a854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a858:	7e0f      	ldrb	r7, [r1, #24]
 800a85a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a85c:	2f78      	cmp	r7, #120	; 0x78
 800a85e:	4691      	mov	r9, r2
 800a860:	4680      	mov	r8, r0
 800a862:	460c      	mov	r4, r1
 800a864:	469a      	mov	sl, r3
 800a866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a86a:	d807      	bhi.n	800a87c <_printf_i+0x28>
 800a86c:	2f62      	cmp	r7, #98	; 0x62
 800a86e:	d80a      	bhi.n	800a886 <_printf_i+0x32>
 800a870:	2f00      	cmp	r7, #0
 800a872:	f000 80d8 	beq.w	800aa26 <_printf_i+0x1d2>
 800a876:	2f58      	cmp	r7, #88	; 0x58
 800a878:	f000 80a3 	beq.w	800a9c2 <_printf_i+0x16e>
 800a87c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a884:	e03a      	b.n	800a8fc <_printf_i+0xa8>
 800a886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a88a:	2b15      	cmp	r3, #21
 800a88c:	d8f6      	bhi.n	800a87c <_printf_i+0x28>
 800a88e:	a101      	add	r1, pc, #4	; (adr r1, 800a894 <_printf_i+0x40>)
 800a890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a894:	0800a8ed 	.word	0x0800a8ed
 800a898:	0800a901 	.word	0x0800a901
 800a89c:	0800a87d 	.word	0x0800a87d
 800a8a0:	0800a87d 	.word	0x0800a87d
 800a8a4:	0800a87d 	.word	0x0800a87d
 800a8a8:	0800a87d 	.word	0x0800a87d
 800a8ac:	0800a901 	.word	0x0800a901
 800a8b0:	0800a87d 	.word	0x0800a87d
 800a8b4:	0800a87d 	.word	0x0800a87d
 800a8b8:	0800a87d 	.word	0x0800a87d
 800a8bc:	0800a87d 	.word	0x0800a87d
 800a8c0:	0800aa0d 	.word	0x0800aa0d
 800a8c4:	0800a931 	.word	0x0800a931
 800a8c8:	0800a9ef 	.word	0x0800a9ef
 800a8cc:	0800a87d 	.word	0x0800a87d
 800a8d0:	0800a87d 	.word	0x0800a87d
 800a8d4:	0800aa2f 	.word	0x0800aa2f
 800a8d8:	0800a87d 	.word	0x0800a87d
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a87d 	.word	0x0800a87d
 800a8e4:	0800a87d 	.word	0x0800a87d
 800a8e8:	0800a9f7 	.word	0x0800a9f7
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	1d1a      	adds	r2, r3, #4
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	602a      	str	r2, [r5, #0]
 800a8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e0a3      	b.n	800aa48 <_printf_i+0x1f4>
 800a900:	6820      	ldr	r0, [r4, #0]
 800a902:	6829      	ldr	r1, [r5, #0]
 800a904:	0606      	lsls	r6, r0, #24
 800a906:	f101 0304 	add.w	r3, r1, #4
 800a90a:	d50a      	bpl.n	800a922 <_printf_i+0xce>
 800a90c:	680e      	ldr	r6, [r1, #0]
 800a90e:	602b      	str	r3, [r5, #0]
 800a910:	2e00      	cmp	r6, #0
 800a912:	da03      	bge.n	800a91c <_printf_i+0xc8>
 800a914:	232d      	movs	r3, #45	; 0x2d
 800a916:	4276      	negs	r6, r6
 800a918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a91c:	485e      	ldr	r0, [pc, #376]	; (800aa98 <_printf_i+0x244>)
 800a91e:	230a      	movs	r3, #10
 800a920:	e019      	b.n	800a956 <_printf_i+0x102>
 800a922:	680e      	ldr	r6, [r1, #0]
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a92a:	bf18      	it	ne
 800a92c:	b236      	sxthne	r6, r6
 800a92e:	e7ef      	b.n	800a910 <_printf_i+0xbc>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	6820      	ldr	r0, [r4, #0]
 800a934:	1d19      	adds	r1, r3, #4
 800a936:	6029      	str	r1, [r5, #0]
 800a938:	0601      	lsls	r1, r0, #24
 800a93a:	d501      	bpl.n	800a940 <_printf_i+0xec>
 800a93c:	681e      	ldr	r6, [r3, #0]
 800a93e:	e002      	b.n	800a946 <_printf_i+0xf2>
 800a940:	0646      	lsls	r6, r0, #25
 800a942:	d5fb      	bpl.n	800a93c <_printf_i+0xe8>
 800a944:	881e      	ldrh	r6, [r3, #0]
 800a946:	4854      	ldr	r0, [pc, #336]	; (800aa98 <_printf_i+0x244>)
 800a948:	2f6f      	cmp	r7, #111	; 0x6f
 800a94a:	bf0c      	ite	eq
 800a94c:	2308      	moveq	r3, #8
 800a94e:	230a      	movne	r3, #10
 800a950:	2100      	movs	r1, #0
 800a952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a956:	6865      	ldr	r5, [r4, #4]
 800a958:	60a5      	str	r5, [r4, #8]
 800a95a:	2d00      	cmp	r5, #0
 800a95c:	bfa2      	ittt	ge
 800a95e:	6821      	ldrge	r1, [r4, #0]
 800a960:	f021 0104 	bicge.w	r1, r1, #4
 800a964:	6021      	strge	r1, [r4, #0]
 800a966:	b90e      	cbnz	r6, 800a96c <_printf_i+0x118>
 800a968:	2d00      	cmp	r5, #0
 800a96a:	d04d      	beq.n	800aa08 <_printf_i+0x1b4>
 800a96c:	4615      	mov	r5, r2
 800a96e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a972:	fb03 6711 	mls	r7, r3, r1, r6
 800a976:	5dc7      	ldrb	r7, [r0, r7]
 800a978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a97c:	4637      	mov	r7, r6
 800a97e:	42bb      	cmp	r3, r7
 800a980:	460e      	mov	r6, r1
 800a982:	d9f4      	bls.n	800a96e <_printf_i+0x11a>
 800a984:	2b08      	cmp	r3, #8
 800a986:	d10b      	bne.n	800a9a0 <_printf_i+0x14c>
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	07de      	lsls	r6, r3, #31
 800a98c:	d508      	bpl.n	800a9a0 <_printf_i+0x14c>
 800a98e:	6923      	ldr	r3, [r4, #16]
 800a990:	6861      	ldr	r1, [r4, #4]
 800a992:	4299      	cmp	r1, r3
 800a994:	bfde      	ittt	le
 800a996:	2330      	movle	r3, #48	; 0x30
 800a998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a99c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9a0:	1b52      	subs	r2, r2, r5
 800a9a2:	6122      	str	r2, [r4, #16]
 800a9a4:	f8cd a000 	str.w	sl, [sp]
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	aa03      	add	r2, sp, #12
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	f7ff fee2 	bl	800a778 <_printf_common>
 800a9b4:	3001      	adds	r0, #1
 800a9b6:	d14c      	bne.n	800aa52 <_printf_i+0x1fe>
 800a9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9bc:	b004      	add	sp, #16
 800a9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c2:	4835      	ldr	r0, [pc, #212]	; (800aa98 <_printf_i+0x244>)
 800a9c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9c8:	6829      	ldr	r1, [r5, #0]
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9d0:	6029      	str	r1, [r5, #0]
 800a9d2:	061d      	lsls	r5, r3, #24
 800a9d4:	d514      	bpl.n	800aa00 <_printf_i+0x1ac>
 800a9d6:	07df      	lsls	r7, r3, #31
 800a9d8:	bf44      	itt	mi
 800a9da:	f043 0320 	orrmi.w	r3, r3, #32
 800a9de:	6023      	strmi	r3, [r4, #0]
 800a9e0:	b91e      	cbnz	r6, 800a9ea <_printf_i+0x196>
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	f023 0320 	bic.w	r3, r3, #32
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	2310      	movs	r3, #16
 800a9ec:	e7b0      	b.n	800a950 <_printf_i+0xfc>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f043 0320 	orr.w	r3, r3, #32
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	2378      	movs	r3, #120	; 0x78
 800a9f8:	4828      	ldr	r0, [pc, #160]	; (800aa9c <_printf_i+0x248>)
 800a9fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9fe:	e7e3      	b.n	800a9c8 <_printf_i+0x174>
 800aa00:	0659      	lsls	r1, r3, #25
 800aa02:	bf48      	it	mi
 800aa04:	b2b6      	uxthmi	r6, r6
 800aa06:	e7e6      	b.n	800a9d6 <_printf_i+0x182>
 800aa08:	4615      	mov	r5, r2
 800aa0a:	e7bb      	b.n	800a984 <_printf_i+0x130>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	6826      	ldr	r6, [r4, #0]
 800aa10:	6961      	ldr	r1, [r4, #20]
 800aa12:	1d18      	adds	r0, r3, #4
 800aa14:	6028      	str	r0, [r5, #0]
 800aa16:	0635      	lsls	r5, r6, #24
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	d501      	bpl.n	800aa20 <_printf_i+0x1cc>
 800aa1c:	6019      	str	r1, [r3, #0]
 800aa1e:	e002      	b.n	800aa26 <_printf_i+0x1d2>
 800aa20:	0670      	lsls	r0, r6, #25
 800aa22:	d5fb      	bpl.n	800aa1c <_printf_i+0x1c8>
 800aa24:	8019      	strh	r1, [r3, #0]
 800aa26:	2300      	movs	r3, #0
 800aa28:	6123      	str	r3, [r4, #16]
 800aa2a:	4615      	mov	r5, r2
 800aa2c:	e7ba      	b.n	800a9a4 <_printf_i+0x150>
 800aa2e:	682b      	ldr	r3, [r5, #0]
 800aa30:	1d1a      	adds	r2, r3, #4
 800aa32:	602a      	str	r2, [r5, #0]
 800aa34:	681d      	ldr	r5, [r3, #0]
 800aa36:	6862      	ldr	r2, [r4, #4]
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f7f5 fbd8 	bl	80001f0 <memchr>
 800aa40:	b108      	cbz	r0, 800aa46 <_printf_i+0x1f2>
 800aa42:	1b40      	subs	r0, r0, r5
 800aa44:	6060      	str	r0, [r4, #4]
 800aa46:	6863      	ldr	r3, [r4, #4]
 800aa48:	6123      	str	r3, [r4, #16]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa50:	e7a8      	b.n	800a9a4 <_printf_i+0x150>
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	462a      	mov	r2, r5
 800aa56:	4649      	mov	r1, r9
 800aa58:	4640      	mov	r0, r8
 800aa5a:	47d0      	blx	sl
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d0ab      	beq.n	800a9b8 <_printf_i+0x164>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	079b      	lsls	r3, r3, #30
 800aa64:	d413      	bmi.n	800aa8e <_printf_i+0x23a>
 800aa66:	68e0      	ldr	r0, [r4, #12]
 800aa68:	9b03      	ldr	r3, [sp, #12]
 800aa6a:	4298      	cmp	r0, r3
 800aa6c:	bfb8      	it	lt
 800aa6e:	4618      	movlt	r0, r3
 800aa70:	e7a4      	b.n	800a9bc <_printf_i+0x168>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4632      	mov	r2, r6
 800aa76:	4649      	mov	r1, r9
 800aa78:	4640      	mov	r0, r8
 800aa7a:	47d0      	blx	sl
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d09b      	beq.n	800a9b8 <_printf_i+0x164>
 800aa80:	3501      	adds	r5, #1
 800aa82:	68e3      	ldr	r3, [r4, #12]
 800aa84:	9903      	ldr	r1, [sp, #12]
 800aa86:	1a5b      	subs	r3, r3, r1
 800aa88:	42ab      	cmp	r3, r5
 800aa8a:	dcf2      	bgt.n	800aa72 <_printf_i+0x21e>
 800aa8c:	e7eb      	b.n	800aa66 <_printf_i+0x212>
 800aa8e:	2500      	movs	r5, #0
 800aa90:	f104 0619 	add.w	r6, r4, #25
 800aa94:	e7f5      	b.n	800aa82 <_printf_i+0x22e>
 800aa96:	bf00      	nop
 800aa98:	0800d17a 	.word	0x0800d17a
 800aa9c:	0800d18b 	.word	0x0800d18b

0800aaa0 <iprintf>:
 800aaa0:	b40f      	push	{r0, r1, r2, r3}
 800aaa2:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <iprintf+0x2c>)
 800aaa4:	b513      	push	{r0, r1, r4, lr}
 800aaa6:	681c      	ldr	r4, [r3, #0]
 800aaa8:	b124      	cbz	r4, 800aab4 <iprintf+0x14>
 800aaaa:	69a3      	ldr	r3, [r4, #24]
 800aaac:	b913      	cbnz	r3, 800aab4 <iprintf+0x14>
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 ff18 	bl	800b8e4 <__sinit>
 800aab4:	ab05      	add	r3, sp, #20
 800aab6:	9a04      	ldr	r2, [sp, #16]
 800aab8:	68a1      	ldr	r1, [r4, #8]
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	4620      	mov	r0, r4
 800aabe:	f001 fdcd 	bl	800c65c <_vfiprintf_r>
 800aac2:	b002      	add	sp, #8
 800aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac8:	b004      	add	sp, #16
 800aaca:	4770      	bx	lr
 800aacc:	20000100 	.word	0x20000100

0800aad0 <putchar>:
 800aad0:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <putchar+0x28>)
 800aad2:	b513      	push	{r0, r1, r4, lr}
 800aad4:	681c      	ldr	r4, [r3, #0]
 800aad6:	4601      	mov	r1, r0
 800aad8:	b134      	cbz	r4, 800aae8 <putchar+0x18>
 800aada:	69a3      	ldr	r3, [r4, #24]
 800aadc:	b923      	cbnz	r3, 800aae8 <putchar+0x18>
 800aade:	9001      	str	r0, [sp, #4]
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 feff 	bl	800b8e4 <__sinit>
 800aae6:	9901      	ldr	r1, [sp, #4]
 800aae8:	68a2      	ldr	r2, [r4, #8]
 800aaea:	4620      	mov	r0, r4
 800aaec:	b002      	add	sp, #8
 800aaee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aaf2:	f001 bee3 	b.w	800c8bc <_putc_r>
 800aaf6:	bf00      	nop
 800aaf8:	20000100 	.word	0x20000100

0800aafc <siprintf>:
 800aafc:	b40e      	push	{r1, r2, r3}
 800aafe:	b500      	push	{lr}
 800ab00:	b09c      	sub	sp, #112	; 0x70
 800ab02:	ab1d      	add	r3, sp, #116	; 0x74
 800ab04:	9002      	str	r0, [sp, #8]
 800ab06:	9006      	str	r0, [sp, #24]
 800ab08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab0c:	4809      	ldr	r0, [pc, #36]	; (800ab34 <siprintf+0x38>)
 800ab0e:	9107      	str	r1, [sp, #28]
 800ab10:	9104      	str	r1, [sp, #16]
 800ab12:	4909      	ldr	r1, [pc, #36]	; (800ab38 <siprintf+0x3c>)
 800ab14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab18:	9105      	str	r1, [sp, #20]
 800ab1a:	6800      	ldr	r0, [r0, #0]
 800ab1c:	9301      	str	r3, [sp, #4]
 800ab1e:	a902      	add	r1, sp, #8
 800ab20:	f001 fc72 	bl	800c408 <_svfiprintf_r>
 800ab24:	9b02      	ldr	r3, [sp, #8]
 800ab26:	2200      	movs	r2, #0
 800ab28:	701a      	strb	r2, [r3, #0]
 800ab2a:	b01c      	add	sp, #112	; 0x70
 800ab2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab30:	b003      	add	sp, #12
 800ab32:	4770      	bx	lr
 800ab34:	20000100 	.word	0x20000100
 800ab38:	ffff0208 	.word	0xffff0208

0800ab3c <quorem>:
 800ab3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	6903      	ldr	r3, [r0, #16]
 800ab42:	690c      	ldr	r4, [r1, #16]
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	4607      	mov	r7, r0
 800ab48:	f2c0 8081 	blt.w	800ac4e <quorem+0x112>
 800ab4c:	3c01      	subs	r4, #1
 800ab4e:	f101 0814 	add.w	r8, r1, #20
 800ab52:	f100 0514 	add.w	r5, r0, #20
 800ab56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab5a:	9301      	str	r3, [sp, #4]
 800ab5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab64:	3301      	adds	r3, #1
 800ab66:	429a      	cmp	r2, r3
 800ab68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab70:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab74:	d331      	bcc.n	800abda <quorem+0x9e>
 800ab76:	f04f 0e00 	mov.w	lr, #0
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	46ac      	mov	ip, r5
 800ab7e:	46f2      	mov	sl, lr
 800ab80:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab84:	b293      	uxth	r3, r2
 800ab86:	fb06 e303 	mla	r3, r6, r3, lr
 800ab8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	ebaa 0303 	sub.w	r3, sl, r3
 800ab94:	f8dc a000 	ldr.w	sl, [ip]
 800ab98:	0c12      	lsrs	r2, r2, #16
 800ab9a:	fa13 f38a 	uxtah	r3, r3, sl
 800ab9e:	fb06 e202 	mla	r2, r6, r2, lr
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	9b00      	ldr	r3, [sp, #0]
 800aba6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abaa:	b292      	uxth	r2, r2
 800abac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800abb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abb4:	f8bd 3000 	ldrh.w	r3, [sp]
 800abb8:	4581      	cmp	r9, r0
 800abba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abbe:	f84c 3b04 	str.w	r3, [ip], #4
 800abc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abc6:	d2db      	bcs.n	800ab80 <quorem+0x44>
 800abc8:	f855 300b 	ldr.w	r3, [r5, fp]
 800abcc:	b92b      	cbnz	r3, 800abda <quorem+0x9e>
 800abce:	9b01      	ldr	r3, [sp, #4]
 800abd0:	3b04      	subs	r3, #4
 800abd2:	429d      	cmp	r5, r3
 800abd4:	461a      	mov	r2, r3
 800abd6:	d32e      	bcc.n	800ac36 <quorem+0xfa>
 800abd8:	613c      	str	r4, [r7, #16]
 800abda:	4638      	mov	r0, r7
 800abdc:	f001 f9c0 	bl	800bf60 <__mcmp>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	db24      	blt.n	800ac2e <quorem+0xf2>
 800abe4:	3601      	adds	r6, #1
 800abe6:	4628      	mov	r0, r5
 800abe8:	f04f 0c00 	mov.w	ip, #0
 800abec:	f858 2b04 	ldr.w	r2, [r8], #4
 800abf0:	f8d0 e000 	ldr.w	lr, [r0]
 800abf4:	b293      	uxth	r3, r2
 800abf6:	ebac 0303 	sub.w	r3, ip, r3
 800abfa:	0c12      	lsrs	r2, r2, #16
 800abfc:	fa13 f38e 	uxtah	r3, r3, lr
 800ac00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac0e:	45c1      	cmp	r9, r8
 800ac10:	f840 3b04 	str.w	r3, [r0], #4
 800ac14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac18:	d2e8      	bcs.n	800abec <quorem+0xb0>
 800ac1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac22:	b922      	cbnz	r2, 800ac2e <quorem+0xf2>
 800ac24:	3b04      	subs	r3, #4
 800ac26:	429d      	cmp	r5, r3
 800ac28:	461a      	mov	r2, r3
 800ac2a:	d30a      	bcc.n	800ac42 <quorem+0x106>
 800ac2c:	613c      	str	r4, [r7, #16]
 800ac2e:	4630      	mov	r0, r6
 800ac30:	b003      	add	sp, #12
 800ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac36:	6812      	ldr	r2, [r2, #0]
 800ac38:	3b04      	subs	r3, #4
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	d1cc      	bne.n	800abd8 <quorem+0x9c>
 800ac3e:	3c01      	subs	r4, #1
 800ac40:	e7c7      	b.n	800abd2 <quorem+0x96>
 800ac42:	6812      	ldr	r2, [r2, #0]
 800ac44:	3b04      	subs	r3, #4
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	d1f0      	bne.n	800ac2c <quorem+0xf0>
 800ac4a:	3c01      	subs	r4, #1
 800ac4c:	e7eb      	b.n	800ac26 <quorem+0xea>
 800ac4e:	2000      	movs	r0, #0
 800ac50:	e7ee      	b.n	800ac30 <quorem+0xf4>
 800ac52:	0000      	movs	r0, r0
 800ac54:	0000      	movs	r0, r0
	...

0800ac58 <_dtoa_r>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	ed2d 8b04 	vpush	{d8-d9}
 800ac60:	ec57 6b10 	vmov	r6, r7, d0
 800ac64:	b093      	sub	sp, #76	; 0x4c
 800ac66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac6c:	9106      	str	r1, [sp, #24]
 800ac6e:	ee10 aa10 	vmov	sl, s0
 800ac72:	4604      	mov	r4, r0
 800ac74:	9209      	str	r2, [sp, #36]	; 0x24
 800ac76:	930c      	str	r3, [sp, #48]	; 0x30
 800ac78:	46bb      	mov	fp, r7
 800ac7a:	b975      	cbnz	r5, 800ac9a <_dtoa_r+0x42>
 800ac7c:	2010      	movs	r0, #16
 800ac7e:	f000 fed7 	bl	800ba30 <malloc>
 800ac82:	4602      	mov	r2, r0
 800ac84:	6260      	str	r0, [r4, #36]	; 0x24
 800ac86:	b920      	cbnz	r0, 800ac92 <_dtoa_r+0x3a>
 800ac88:	4ba7      	ldr	r3, [pc, #668]	; (800af28 <_dtoa_r+0x2d0>)
 800ac8a:	21ea      	movs	r1, #234	; 0xea
 800ac8c:	48a7      	ldr	r0, [pc, #668]	; (800af2c <_dtoa_r+0x2d4>)
 800ac8e:	f001 ff83 	bl	800cb98 <__assert_func>
 800ac92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac96:	6005      	str	r5, [r0, #0]
 800ac98:	60c5      	str	r5, [r0, #12]
 800ac9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac9c:	6819      	ldr	r1, [r3, #0]
 800ac9e:	b151      	cbz	r1, 800acb6 <_dtoa_r+0x5e>
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	604a      	str	r2, [r1, #4]
 800aca4:	2301      	movs	r3, #1
 800aca6:	4093      	lsls	r3, r2
 800aca8:	608b      	str	r3, [r1, #8]
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 ff16 	bl	800badc <_Bfree>
 800acb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	1e3b      	subs	r3, r7, #0
 800acb8:	bfaa      	itet	ge
 800acba:	2300      	movge	r3, #0
 800acbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800acc0:	f8c8 3000 	strge.w	r3, [r8]
 800acc4:	4b9a      	ldr	r3, [pc, #616]	; (800af30 <_dtoa_r+0x2d8>)
 800acc6:	bfbc      	itt	lt
 800acc8:	2201      	movlt	r2, #1
 800acca:	f8c8 2000 	strlt.w	r2, [r8]
 800acce:	ea33 030b 	bics.w	r3, r3, fp
 800acd2:	d11b      	bne.n	800ad0c <_dtoa_r+0xb4>
 800acd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800acd6:	f242 730f 	movw	r3, #9999	; 0x270f
 800acda:	6013      	str	r3, [r2, #0]
 800acdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ace0:	4333      	orrs	r3, r6
 800ace2:	f000 8592 	beq.w	800b80a <_dtoa_r+0xbb2>
 800ace6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ace8:	b963      	cbnz	r3, 800ad04 <_dtoa_r+0xac>
 800acea:	4b92      	ldr	r3, [pc, #584]	; (800af34 <_dtoa_r+0x2dc>)
 800acec:	e022      	b.n	800ad34 <_dtoa_r+0xdc>
 800acee:	4b92      	ldr	r3, [pc, #584]	; (800af38 <_dtoa_r+0x2e0>)
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	3308      	adds	r3, #8
 800acf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	9801      	ldr	r0, [sp, #4]
 800acfa:	b013      	add	sp, #76	; 0x4c
 800acfc:	ecbd 8b04 	vpop	{d8-d9}
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	4b8b      	ldr	r3, [pc, #556]	; (800af34 <_dtoa_r+0x2dc>)
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	3303      	adds	r3, #3
 800ad0a:	e7f3      	b.n	800acf4 <_dtoa_r+0x9c>
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	2300      	movs	r3, #0
 800ad10:	4650      	mov	r0, sl
 800ad12:	4659      	mov	r1, fp
 800ad14:	f7f5 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad18:	ec4b ab19 	vmov	d9, sl, fp
 800ad1c:	4680      	mov	r8, r0
 800ad1e:	b158      	cbz	r0, 800ad38 <_dtoa_r+0xe0>
 800ad20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad22:	2301      	movs	r3, #1
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 856b 	beq.w	800b804 <_dtoa_r+0xbac>
 800ad2e:	4883      	ldr	r0, [pc, #524]	; (800af3c <_dtoa_r+0x2e4>)
 800ad30:	6018      	str	r0, [r3, #0]
 800ad32:	1e43      	subs	r3, r0, #1
 800ad34:	9301      	str	r3, [sp, #4]
 800ad36:	e7df      	b.n	800acf8 <_dtoa_r+0xa0>
 800ad38:	ec4b ab10 	vmov	d0, sl, fp
 800ad3c:	aa10      	add	r2, sp, #64	; 0x40
 800ad3e:	a911      	add	r1, sp, #68	; 0x44
 800ad40:	4620      	mov	r0, r4
 800ad42:	f001 f9b3 	bl	800c0ac <__d2b>
 800ad46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ad4a:	ee08 0a10 	vmov	s16, r0
 800ad4e:	2d00      	cmp	r5, #0
 800ad50:	f000 8084 	beq.w	800ae5c <_dtoa_r+0x204>
 800ad54:	ee19 3a90 	vmov	r3, s19
 800ad58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad60:	4656      	mov	r6, sl
 800ad62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ad6e:	4b74      	ldr	r3, [pc, #464]	; (800af40 <_dtoa_r+0x2e8>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	4630      	mov	r0, r6
 800ad74:	4639      	mov	r1, r7
 800ad76:	f7f5 fa8f 	bl	8000298 <__aeabi_dsub>
 800ad7a:	a365      	add	r3, pc, #404	; (adr r3, 800af10 <_dtoa_r+0x2b8>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f7f5 fc42 	bl	8000608 <__aeabi_dmul>
 800ad84:	a364      	add	r3, pc, #400	; (adr r3, 800af18 <_dtoa_r+0x2c0>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 fa87 	bl	800029c <__adddf3>
 800ad8e:	4606      	mov	r6, r0
 800ad90:	4628      	mov	r0, r5
 800ad92:	460f      	mov	r7, r1
 800ad94:	f7f5 fbce 	bl	8000534 <__aeabi_i2d>
 800ad98:	a361      	add	r3, pc, #388	; (adr r3, 800af20 <_dtoa_r+0x2c8>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fc33 	bl	8000608 <__aeabi_dmul>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4630      	mov	r0, r6
 800ada8:	4639      	mov	r1, r7
 800adaa:	f7f5 fa77 	bl	800029c <__adddf3>
 800adae:	4606      	mov	r6, r0
 800adb0:	460f      	mov	r7, r1
 800adb2:	f7f5 fed9 	bl	8000b68 <__aeabi_d2iz>
 800adb6:	2200      	movs	r2, #0
 800adb8:	9000      	str	r0, [sp, #0]
 800adba:	2300      	movs	r3, #0
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 fe94 	bl	8000aec <__aeabi_dcmplt>
 800adc4:	b150      	cbz	r0, 800addc <_dtoa_r+0x184>
 800adc6:	9800      	ldr	r0, [sp, #0]
 800adc8:	f7f5 fbb4 	bl	8000534 <__aeabi_i2d>
 800adcc:	4632      	mov	r2, r6
 800adce:	463b      	mov	r3, r7
 800add0:	f7f5 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 800add4:	b910      	cbnz	r0, 800addc <_dtoa_r+0x184>
 800add6:	9b00      	ldr	r3, [sp, #0]
 800add8:	3b01      	subs	r3, #1
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	9b00      	ldr	r3, [sp, #0]
 800adde:	2b16      	cmp	r3, #22
 800ade0:	d85a      	bhi.n	800ae98 <_dtoa_r+0x240>
 800ade2:	9a00      	ldr	r2, [sp, #0]
 800ade4:	4b57      	ldr	r3, [pc, #348]	; (800af44 <_dtoa_r+0x2ec>)
 800ade6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	ec51 0b19 	vmov	r0, r1, d9
 800adf2:	f7f5 fe7b 	bl	8000aec <__aeabi_dcmplt>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d050      	beq.n	800ae9c <_dtoa_r+0x244>
 800adfa:	9b00      	ldr	r3, [sp, #0]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	2300      	movs	r3, #0
 800ae02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae06:	1b5d      	subs	r5, r3, r5
 800ae08:	1e6b      	subs	r3, r5, #1
 800ae0a:	9305      	str	r3, [sp, #20]
 800ae0c:	bf45      	ittet	mi
 800ae0e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae12:	9304      	strmi	r3, [sp, #16]
 800ae14:	2300      	movpl	r3, #0
 800ae16:	2300      	movmi	r3, #0
 800ae18:	bf4c      	ite	mi
 800ae1a:	9305      	strmi	r3, [sp, #20]
 800ae1c:	9304      	strpl	r3, [sp, #16]
 800ae1e:	9b00      	ldr	r3, [sp, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	db3d      	blt.n	800aea0 <_dtoa_r+0x248>
 800ae24:	9b05      	ldr	r3, [sp, #20]
 800ae26:	9a00      	ldr	r2, [sp, #0]
 800ae28:	920a      	str	r2, [sp, #40]	; 0x28
 800ae2a:	4413      	add	r3, r2
 800ae2c:	9305      	str	r3, [sp, #20]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	9307      	str	r3, [sp, #28]
 800ae32:	9b06      	ldr	r3, [sp, #24]
 800ae34:	2b09      	cmp	r3, #9
 800ae36:	f200 8089 	bhi.w	800af4c <_dtoa_r+0x2f4>
 800ae3a:	2b05      	cmp	r3, #5
 800ae3c:	bfc4      	itt	gt
 800ae3e:	3b04      	subgt	r3, #4
 800ae40:	9306      	strgt	r3, [sp, #24]
 800ae42:	9b06      	ldr	r3, [sp, #24]
 800ae44:	f1a3 0302 	sub.w	r3, r3, #2
 800ae48:	bfcc      	ite	gt
 800ae4a:	2500      	movgt	r5, #0
 800ae4c:	2501      	movle	r5, #1
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	f200 8087 	bhi.w	800af62 <_dtoa_r+0x30a>
 800ae54:	e8df f003 	tbb	[pc, r3]
 800ae58:	59383a2d 	.word	0x59383a2d
 800ae5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ae60:	441d      	add	r5, r3
 800ae62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae66:	2b20      	cmp	r3, #32
 800ae68:	bfc1      	itttt	gt
 800ae6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae72:	fa0b f303 	lslgt.w	r3, fp, r3
 800ae76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae7a:	bfda      	itte	le
 800ae7c:	f1c3 0320 	rsble	r3, r3, #32
 800ae80:	fa06 f003 	lslle.w	r0, r6, r3
 800ae84:	4318      	orrgt	r0, r3
 800ae86:	f7f5 fb45 	bl	8000514 <__aeabi_ui2d>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	4606      	mov	r6, r0
 800ae8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae92:	3d01      	subs	r5, #1
 800ae94:	930e      	str	r3, [sp, #56]	; 0x38
 800ae96:	e76a      	b.n	800ad6e <_dtoa_r+0x116>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e7b2      	b.n	800ae02 <_dtoa_r+0x1aa>
 800ae9c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae9e:	e7b1      	b.n	800ae04 <_dtoa_r+0x1ac>
 800aea0:	9b04      	ldr	r3, [sp, #16]
 800aea2:	9a00      	ldr	r2, [sp, #0]
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	9304      	str	r3, [sp, #16]
 800aea8:	4253      	negs	r3, r2
 800aeaa:	9307      	str	r3, [sp, #28]
 800aeac:	2300      	movs	r3, #0
 800aeae:	930a      	str	r3, [sp, #40]	; 0x28
 800aeb0:	e7bf      	b.n	800ae32 <_dtoa_r+0x1da>
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	9308      	str	r3, [sp, #32]
 800aeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc55      	bgt.n	800af68 <_dtoa_r+0x310>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aec2:	461a      	mov	r2, r3
 800aec4:	9209      	str	r2, [sp, #36]	; 0x24
 800aec6:	e00c      	b.n	800aee2 <_dtoa_r+0x28a>
 800aec8:	2301      	movs	r3, #1
 800aeca:	e7f3      	b.n	800aeb4 <_dtoa_r+0x25c>
 800aecc:	2300      	movs	r3, #0
 800aece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed0:	9308      	str	r3, [sp, #32]
 800aed2:	9b00      	ldr	r3, [sp, #0]
 800aed4:	4413      	add	r3, r2
 800aed6:	9302      	str	r3, [sp, #8]
 800aed8:	3301      	adds	r3, #1
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	9303      	str	r3, [sp, #12]
 800aede:	bfb8      	it	lt
 800aee0:	2301      	movlt	r3, #1
 800aee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aee4:	2200      	movs	r2, #0
 800aee6:	6042      	str	r2, [r0, #4]
 800aee8:	2204      	movs	r2, #4
 800aeea:	f102 0614 	add.w	r6, r2, #20
 800aeee:	429e      	cmp	r6, r3
 800aef0:	6841      	ldr	r1, [r0, #4]
 800aef2:	d93d      	bls.n	800af70 <_dtoa_r+0x318>
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fdb1 	bl	800ba5c <_Balloc>
 800aefa:	9001      	str	r0, [sp, #4]
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d13b      	bne.n	800af78 <_dtoa_r+0x320>
 800af00:	4b11      	ldr	r3, [pc, #68]	; (800af48 <_dtoa_r+0x2f0>)
 800af02:	4602      	mov	r2, r0
 800af04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af08:	e6c0      	b.n	800ac8c <_dtoa_r+0x34>
 800af0a:	2301      	movs	r3, #1
 800af0c:	e7df      	b.n	800aece <_dtoa_r+0x276>
 800af0e:	bf00      	nop
 800af10:	636f4361 	.word	0x636f4361
 800af14:	3fd287a7 	.word	0x3fd287a7
 800af18:	8b60c8b3 	.word	0x8b60c8b3
 800af1c:	3fc68a28 	.word	0x3fc68a28
 800af20:	509f79fb 	.word	0x509f79fb
 800af24:	3fd34413 	.word	0x3fd34413
 800af28:	0800d1a9 	.word	0x0800d1a9
 800af2c:	0800d1c0 	.word	0x0800d1c0
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	0800d1a5 	.word	0x0800d1a5
 800af38:	0800d19c 	.word	0x0800d19c
 800af3c:	0800d179 	.word	0x0800d179
 800af40:	3ff80000 	.word	0x3ff80000
 800af44:	0800d310 	.word	0x0800d310
 800af48:	0800d21b 	.word	0x0800d21b
 800af4c:	2501      	movs	r5, #1
 800af4e:	2300      	movs	r3, #0
 800af50:	9306      	str	r3, [sp, #24]
 800af52:	9508      	str	r5, [sp, #32]
 800af54:	f04f 33ff 	mov.w	r3, #4294967295
 800af58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af5c:	2200      	movs	r2, #0
 800af5e:	2312      	movs	r3, #18
 800af60:	e7b0      	b.n	800aec4 <_dtoa_r+0x26c>
 800af62:	2301      	movs	r3, #1
 800af64:	9308      	str	r3, [sp, #32]
 800af66:	e7f5      	b.n	800af54 <_dtoa_r+0x2fc>
 800af68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af6e:	e7b8      	b.n	800aee2 <_dtoa_r+0x28a>
 800af70:	3101      	adds	r1, #1
 800af72:	6041      	str	r1, [r0, #4]
 800af74:	0052      	lsls	r2, r2, #1
 800af76:	e7b8      	b.n	800aeea <_dtoa_r+0x292>
 800af78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af7a:	9a01      	ldr	r2, [sp, #4]
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	2b0e      	cmp	r3, #14
 800af82:	f200 809d 	bhi.w	800b0c0 <_dtoa_r+0x468>
 800af86:	2d00      	cmp	r5, #0
 800af88:	f000 809a 	beq.w	800b0c0 <_dtoa_r+0x468>
 800af8c:	9b00      	ldr	r3, [sp, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	dd32      	ble.n	800aff8 <_dtoa_r+0x3a0>
 800af92:	4ab7      	ldr	r2, [pc, #732]	; (800b270 <_dtoa_r+0x618>)
 800af94:	f003 030f 	and.w	r3, r3, #15
 800af98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800af9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afa0:	9b00      	ldr	r3, [sp, #0]
 800afa2:	05d8      	lsls	r0, r3, #23
 800afa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800afa8:	d516      	bpl.n	800afd8 <_dtoa_r+0x380>
 800afaa:	4bb2      	ldr	r3, [pc, #712]	; (800b274 <_dtoa_r+0x61c>)
 800afac:	ec51 0b19 	vmov	r0, r1, d9
 800afb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afb4:	f7f5 fc52 	bl	800085c <__aeabi_ddiv>
 800afb8:	f007 070f 	and.w	r7, r7, #15
 800afbc:	4682      	mov	sl, r0
 800afbe:	468b      	mov	fp, r1
 800afc0:	2503      	movs	r5, #3
 800afc2:	4eac      	ldr	r6, [pc, #688]	; (800b274 <_dtoa_r+0x61c>)
 800afc4:	b957      	cbnz	r7, 800afdc <_dtoa_r+0x384>
 800afc6:	4642      	mov	r2, r8
 800afc8:	464b      	mov	r3, r9
 800afca:	4650      	mov	r0, sl
 800afcc:	4659      	mov	r1, fp
 800afce:	f7f5 fc45 	bl	800085c <__aeabi_ddiv>
 800afd2:	4682      	mov	sl, r0
 800afd4:	468b      	mov	fp, r1
 800afd6:	e028      	b.n	800b02a <_dtoa_r+0x3d2>
 800afd8:	2502      	movs	r5, #2
 800afda:	e7f2      	b.n	800afc2 <_dtoa_r+0x36a>
 800afdc:	07f9      	lsls	r1, r7, #31
 800afde:	d508      	bpl.n	800aff2 <_dtoa_r+0x39a>
 800afe0:	4640      	mov	r0, r8
 800afe2:	4649      	mov	r1, r9
 800afe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800afe8:	f7f5 fb0e 	bl	8000608 <__aeabi_dmul>
 800afec:	3501      	adds	r5, #1
 800afee:	4680      	mov	r8, r0
 800aff0:	4689      	mov	r9, r1
 800aff2:	107f      	asrs	r7, r7, #1
 800aff4:	3608      	adds	r6, #8
 800aff6:	e7e5      	b.n	800afc4 <_dtoa_r+0x36c>
 800aff8:	f000 809b 	beq.w	800b132 <_dtoa_r+0x4da>
 800affc:	9b00      	ldr	r3, [sp, #0]
 800affe:	4f9d      	ldr	r7, [pc, #628]	; (800b274 <_dtoa_r+0x61c>)
 800b000:	425e      	negs	r6, r3
 800b002:	4b9b      	ldr	r3, [pc, #620]	; (800b270 <_dtoa_r+0x618>)
 800b004:	f006 020f 	and.w	r2, r6, #15
 800b008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	ec51 0b19 	vmov	r0, r1, d9
 800b014:	f7f5 faf8 	bl	8000608 <__aeabi_dmul>
 800b018:	1136      	asrs	r6, r6, #4
 800b01a:	4682      	mov	sl, r0
 800b01c:	468b      	mov	fp, r1
 800b01e:	2300      	movs	r3, #0
 800b020:	2502      	movs	r5, #2
 800b022:	2e00      	cmp	r6, #0
 800b024:	d17a      	bne.n	800b11c <_dtoa_r+0x4c4>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1d3      	bne.n	800afd2 <_dtoa_r+0x37a>
 800b02a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 8082 	beq.w	800b136 <_dtoa_r+0x4de>
 800b032:	4b91      	ldr	r3, [pc, #580]	; (800b278 <_dtoa_r+0x620>)
 800b034:	2200      	movs	r2, #0
 800b036:	4650      	mov	r0, sl
 800b038:	4659      	mov	r1, fp
 800b03a:	f7f5 fd57 	bl	8000aec <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d079      	beq.n	800b136 <_dtoa_r+0x4de>
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d076      	beq.n	800b136 <_dtoa_r+0x4de>
 800b048:	9b02      	ldr	r3, [sp, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	dd36      	ble.n	800b0bc <_dtoa_r+0x464>
 800b04e:	9b00      	ldr	r3, [sp, #0]
 800b050:	4650      	mov	r0, sl
 800b052:	4659      	mov	r1, fp
 800b054:	1e5f      	subs	r7, r3, #1
 800b056:	2200      	movs	r2, #0
 800b058:	4b88      	ldr	r3, [pc, #544]	; (800b27c <_dtoa_r+0x624>)
 800b05a:	f7f5 fad5 	bl	8000608 <__aeabi_dmul>
 800b05e:	9e02      	ldr	r6, [sp, #8]
 800b060:	4682      	mov	sl, r0
 800b062:	468b      	mov	fp, r1
 800b064:	3501      	adds	r5, #1
 800b066:	4628      	mov	r0, r5
 800b068:	f7f5 fa64 	bl	8000534 <__aeabi_i2d>
 800b06c:	4652      	mov	r2, sl
 800b06e:	465b      	mov	r3, fp
 800b070:	f7f5 faca 	bl	8000608 <__aeabi_dmul>
 800b074:	4b82      	ldr	r3, [pc, #520]	; (800b280 <_dtoa_r+0x628>)
 800b076:	2200      	movs	r2, #0
 800b078:	f7f5 f910 	bl	800029c <__adddf3>
 800b07c:	46d0      	mov	r8, sl
 800b07e:	46d9      	mov	r9, fp
 800b080:	4682      	mov	sl, r0
 800b082:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b086:	2e00      	cmp	r6, #0
 800b088:	d158      	bne.n	800b13c <_dtoa_r+0x4e4>
 800b08a:	4b7e      	ldr	r3, [pc, #504]	; (800b284 <_dtoa_r+0x62c>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	4640      	mov	r0, r8
 800b090:	4649      	mov	r1, r9
 800b092:	f7f5 f901 	bl	8000298 <__aeabi_dsub>
 800b096:	4652      	mov	r2, sl
 800b098:	465b      	mov	r3, fp
 800b09a:	4680      	mov	r8, r0
 800b09c:	4689      	mov	r9, r1
 800b09e:	f7f5 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	f040 8295 	bne.w	800b5d2 <_dtoa_r+0x97a>
 800b0a8:	4652      	mov	r2, sl
 800b0aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	f7f5 fd1b 	bl	8000aec <__aeabi_dcmplt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f040 8289 	bne.w	800b5ce <_dtoa_r+0x976>
 800b0bc:	ec5b ab19 	vmov	sl, fp, d9
 800b0c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f2c0 8148 	blt.w	800b358 <_dtoa_r+0x700>
 800b0c8:	9a00      	ldr	r2, [sp, #0]
 800b0ca:	2a0e      	cmp	r2, #14
 800b0cc:	f300 8144 	bgt.w	800b358 <_dtoa_r+0x700>
 800b0d0:	4b67      	ldr	r3, [pc, #412]	; (800b270 <_dtoa_r+0x618>)
 800b0d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f280 80d5 	bge.w	800b28c <_dtoa_r+0x634>
 800b0e2:	9b03      	ldr	r3, [sp, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f300 80d1 	bgt.w	800b28c <_dtoa_r+0x634>
 800b0ea:	f040 826f 	bne.w	800b5cc <_dtoa_r+0x974>
 800b0ee:	4b65      	ldr	r3, [pc, #404]	; (800b284 <_dtoa_r+0x62c>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4640      	mov	r0, r8
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	f7f5 fa87 	bl	8000608 <__aeabi_dmul>
 800b0fa:	4652      	mov	r2, sl
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	f7f5 fd09 	bl	8000b14 <__aeabi_dcmpge>
 800b102:	9e03      	ldr	r6, [sp, #12]
 800b104:	4637      	mov	r7, r6
 800b106:	2800      	cmp	r0, #0
 800b108:	f040 8245 	bne.w	800b596 <_dtoa_r+0x93e>
 800b10c:	9d01      	ldr	r5, [sp, #4]
 800b10e:	2331      	movs	r3, #49	; 0x31
 800b110:	f805 3b01 	strb.w	r3, [r5], #1
 800b114:	9b00      	ldr	r3, [sp, #0]
 800b116:	3301      	adds	r3, #1
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	e240      	b.n	800b59e <_dtoa_r+0x946>
 800b11c:	07f2      	lsls	r2, r6, #31
 800b11e:	d505      	bpl.n	800b12c <_dtoa_r+0x4d4>
 800b120:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b124:	f7f5 fa70 	bl	8000608 <__aeabi_dmul>
 800b128:	3501      	adds	r5, #1
 800b12a:	2301      	movs	r3, #1
 800b12c:	1076      	asrs	r6, r6, #1
 800b12e:	3708      	adds	r7, #8
 800b130:	e777      	b.n	800b022 <_dtoa_r+0x3ca>
 800b132:	2502      	movs	r5, #2
 800b134:	e779      	b.n	800b02a <_dtoa_r+0x3d2>
 800b136:	9f00      	ldr	r7, [sp, #0]
 800b138:	9e03      	ldr	r6, [sp, #12]
 800b13a:	e794      	b.n	800b066 <_dtoa_r+0x40e>
 800b13c:	9901      	ldr	r1, [sp, #4]
 800b13e:	4b4c      	ldr	r3, [pc, #304]	; (800b270 <_dtoa_r+0x618>)
 800b140:	4431      	add	r1, r6
 800b142:	910d      	str	r1, [sp, #52]	; 0x34
 800b144:	9908      	ldr	r1, [sp, #32]
 800b146:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b14a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b14e:	2900      	cmp	r1, #0
 800b150:	d043      	beq.n	800b1da <_dtoa_r+0x582>
 800b152:	494d      	ldr	r1, [pc, #308]	; (800b288 <_dtoa_r+0x630>)
 800b154:	2000      	movs	r0, #0
 800b156:	f7f5 fb81 	bl	800085c <__aeabi_ddiv>
 800b15a:	4652      	mov	r2, sl
 800b15c:	465b      	mov	r3, fp
 800b15e:	f7f5 f89b 	bl	8000298 <__aeabi_dsub>
 800b162:	9d01      	ldr	r5, [sp, #4]
 800b164:	4682      	mov	sl, r0
 800b166:	468b      	mov	fp, r1
 800b168:	4649      	mov	r1, r9
 800b16a:	4640      	mov	r0, r8
 800b16c:	f7f5 fcfc 	bl	8000b68 <__aeabi_d2iz>
 800b170:	4606      	mov	r6, r0
 800b172:	f7f5 f9df 	bl	8000534 <__aeabi_i2d>
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	4640      	mov	r0, r8
 800b17c:	4649      	mov	r1, r9
 800b17e:	f7f5 f88b 	bl	8000298 <__aeabi_dsub>
 800b182:	3630      	adds	r6, #48	; 0x30
 800b184:	f805 6b01 	strb.w	r6, [r5], #1
 800b188:	4652      	mov	r2, sl
 800b18a:	465b      	mov	r3, fp
 800b18c:	4680      	mov	r8, r0
 800b18e:	4689      	mov	r9, r1
 800b190:	f7f5 fcac 	bl	8000aec <__aeabi_dcmplt>
 800b194:	2800      	cmp	r0, #0
 800b196:	d163      	bne.n	800b260 <_dtoa_r+0x608>
 800b198:	4642      	mov	r2, r8
 800b19a:	464b      	mov	r3, r9
 800b19c:	4936      	ldr	r1, [pc, #216]	; (800b278 <_dtoa_r+0x620>)
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f7f5 f87a 	bl	8000298 <__aeabi_dsub>
 800b1a4:	4652      	mov	r2, sl
 800b1a6:	465b      	mov	r3, fp
 800b1a8:	f7f5 fca0 	bl	8000aec <__aeabi_dcmplt>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f040 80b5 	bne.w	800b31c <_dtoa_r+0x6c4>
 800b1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b4:	429d      	cmp	r5, r3
 800b1b6:	d081      	beq.n	800b0bc <_dtoa_r+0x464>
 800b1b8:	4b30      	ldr	r3, [pc, #192]	; (800b27c <_dtoa_r+0x624>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4650      	mov	r0, sl
 800b1be:	4659      	mov	r1, fp
 800b1c0:	f7f5 fa22 	bl	8000608 <__aeabi_dmul>
 800b1c4:	4b2d      	ldr	r3, [pc, #180]	; (800b27c <_dtoa_r+0x624>)
 800b1c6:	4682      	mov	sl, r0
 800b1c8:	468b      	mov	fp, r1
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f7f5 fa1a 	bl	8000608 <__aeabi_dmul>
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4689      	mov	r9, r1
 800b1d8:	e7c6      	b.n	800b168 <_dtoa_r+0x510>
 800b1da:	4650      	mov	r0, sl
 800b1dc:	4659      	mov	r1, fp
 800b1de:	f7f5 fa13 	bl	8000608 <__aeabi_dmul>
 800b1e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1e4:	9d01      	ldr	r5, [sp, #4]
 800b1e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	468b      	mov	fp, r1
 800b1ec:	4649      	mov	r1, r9
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	f7f5 fcba 	bl	8000b68 <__aeabi_d2iz>
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	f7f5 f99d 	bl	8000534 <__aeabi_i2d>
 800b1fa:	3630      	adds	r6, #48	; 0x30
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4640      	mov	r0, r8
 800b202:	4649      	mov	r1, r9
 800b204:	f7f5 f848 	bl	8000298 <__aeabi_dsub>
 800b208:	f805 6b01 	strb.w	r6, [r5], #1
 800b20c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b20e:	429d      	cmp	r5, r3
 800b210:	4680      	mov	r8, r0
 800b212:	4689      	mov	r9, r1
 800b214:	f04f 0200 	mov.w	r2, #0
 800b218:	d124      	bne.n	800b264 <_dtoa_r+0x60c>
 800b21a:	4b1b      	ldr	r3, [pc, #108]	; (800b288 <_dtoa_r+0x630>)
 800b21c:	4650      	mov	r0, sl
 800b21e:	4659      	mov	r1, fp
 800b220:	f7f5 f83c 	bl	800029c <__adddf3>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4640      	mov	r0, r8
 800b22a:	4649      	mov	r1, r9
 800b22c:	f7f5 fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 800b230:	2800      	cmp	r0, #0
 800b232:	d173      	bne.n	800b31c <_dtoa_r+0x6c4>
 800b234:	4652      	mov	r2, sl
 800b236:	465b      	mov	r3, fp
 800b238:	4913      	ldr	r1, [pc, #76]	; (800b288 <_dtoa_r+0x630>)
 800b23a:	2000      	movs	r0, #0
 800b23c:	f7f5 f82c 	bl	8000298 <__aeabi_dsub>
 800b240:	4602      	mov	r2, r0
 800b242:	460b      	mov	r3, r1
 800b244:	4640      	mov	r0, r8
 800b246:	4649      	mov	r1, r9
 800b248:	f7f5 fc50 	bl	8000aec <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	f43f af35 	beq.w	800b0bc <_dtoa_r+0x464>
 800b252:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b254:	1e6b      	subs	r3, r5, #1
 800b256:	930f      	str	r3, [sp, #60]	; 0x3c
 800b258:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b25c:	2b30      	cmp	r3, #48	; 0x30
 800b25e:	d0f8      	beq.n	800b252 <_dtoa_r+0x5fa>
 800b260:	9700      	str	r7, [sp, #0]
 800b262:	e049      	b.n	800b2f8 <_dtoa_r+0x6a0>
 800b264:	4b05      	ldr	r3, [pc, #20]	; (800b27c <_dtoa_r+0x624>)
 800b266:	f7f5 f9cf 	bl	8000608 <__aeabi_dmul>
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	e7bd      	b.n	800b1ec <_dtoa_r+0x594>
 800b270:	0800d310 	.word	0x0800d310
 800b274:	0800d2e8 	.word	0x0800d2e8
 800b278:	3ff00000 	.word	0x3ff00000
 800b27c:	40240000 	.word	0x40240000
 800b280:	401c0000 	.word	0x401c0000
 800b284:	40140000 	.word	0x40140000
 800b288:	3fe00000 	.word	0x3fe00000
 800b28c:	9d01      	ldr	r5, [sp, #4]
 800b28e:	4656      	mov	r6, sl
 800b290:	465f      	mov	r7, fp
 800b292:	4642      	mov	r2, r8
 800b294:	464b      	mov	r3, r9
 800b296:	4630      	mov	r0, r6
 800b298:	4639      	mov	r1, r7
 800b29a:	f7f5 fadf 	bl	800085c <__aeabi_ddiv>
 800b29e:	f7f5 fc63 	bl	8000b68 <__aeabi_d2iz>
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	f7f5 f946 	bl	8000534 <__aeabi_i2d>
 800b2a8:	4642      	mov	r2, r8
 800b2aa:	464b      	mov	r3, r9
 800b2ac:	f7f5 f9ac 	bl	8000608 <__aeabi_dmul>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	4639      	mov	r1, r7
 800b2b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b2bc:	f7f4 ffec 	bl	8000298 <__aeabi_dsub>
 800b2c0:	f805 6b01 	strb.w	r6, [r5], #1
 800b2c4:	9e01      	ldr	r6, [sp, #4]
 800b2c6:	9f03      	ldr	r7, [sp, #12]
 800b2c8:	1bae      	subs	r6, r5, r6
 800b2ca:	42b7      	cmp	r7, r6
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	d135      	bne.n	800b33e <_dtoa_r+0x6e6>
 800b2d2:	f7f4 ffe3 	bl	800029c <__adddf3>
 800b2d6:	4642      	mov	r2, r8
 800b2d8:	464b      	mov	r3, r9
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	f7f5 fc23 	bl	8000b28 <__aeabi_dcmpgt>
 800b2e2:	b9d0      	cbnz	r0, 800b31a <_dtoa_r+0x6c2>
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	f7f5 fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2f0:	b110      	cbz	r0, 800b2f8 <_dtoa_r+0x6a0>
 800b2f2:	f01a 0f01 	tst.w	sl, #1
 800b2f6:	d110      	bne.n	800b31a <_dtoa_r+0x6c2>
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	ee18 1a10 	vmov	r1, s16
 800b2fe:	f000 fbed 	bl	800badc <_Bfree>
 800b302:	2300      	movs	r3, #0
 800b304:	9800      	ldr	r0, [sp, #0]
 800b306:	702b      	strb	r3, [r5, #0]
 800b308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b30a:	3001      	adds	r0, #1
 800b30c:	6018      	str	r0, [r3, #0]
 800b30e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b310:	2b00      	cmp	r3, #0
 800b312:	f43f acf1 	beq.w	800acf8 <_dtoa_r+0xa0>
 800b316:	601d      	str	r5, [r3, #0]
 800b318:	e4ee      	b.n	800acf8 <_dtoa_r+0xa0>
 800b31a:	9f00      	ldr	r7, [sp, #0]
 800b31c:	462b      	mov	r3, r5
 800b31e:	461d      	mov	r5, r3
 800b320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b324:	2a39      	cmp	r2, #57	; 0x39
 800b326:	d106      	bne.n	800b336 <_dtoa_r+0x6de>
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d1f7      	bne.n	800b31e <_dtoa_r+0x6c6>
 800b32e:	9901      	ldr	r1, [sp, #4]
 800b330:	2230      	movs	r2, #48	; 0x30
 800b332:	3701      	adds	r7, #1
 800b334:	700a      	strb	r2, [r1, #0]
 800b336:	781a      	ldrb	r2, [r3, #0]
 800b338:	3201      	adds	r2, #1
 800b33a:	701a      	strb	r2, [r3, #0]
 800b33c:	e790      	b.n	800b260 <_dtoa_r+0x608>
 800b33e:	4ba6      	ldr	r3, [pc, #664]	; (800b5d8 <_dtoa_r+0x980>)
 800b340:	2200      	movs	r2, #0
 800b342:	f7f5 f961 	bl	8000608 <__aeabi_dmul>
 800b346:	2200      	movs	r2, #0
 800b348:	2300      	movs	r3, #0
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	f7f5 fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b352:	2800      	cmp	r0, #0
 800b354:	d09d      	beq.n	800b292 <_dtoa_r+0x63a>
 800b356:	e7cf      	b.n	800b2f8 <_dtoa_r+0x6a0>
 800b358:	9a08      	ldr	r2, [sp, #32]
 800b35a:	2a00      	cmp	r2, #0
 800b35c:	f000 80d7 	beq.w	800b50e <_dtoa_r+0x8b6>
 800b360:	9a06      	ldr	r2, [sp, #24]
 800b362:	2a01      	cmp	r2, #1
 800b364:	f300 80ba 	bgt.w	800b4dc <_dtoa_r+0x884>
 800b368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b36a:	2a00      	cmp	r2, #0
 800b36c:	f000 80b2 	beq.w	800b4d4 <_dtoa_r+0x87c>
 800b370:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b374:	9e07      	ldr	r6, [sp, #28]
 800b376:	9d04      	ldr	r5, [sp, #16]
 800b378:	9a04      	ldr	r2, [sp, #16]
 800b37a:	441a      	add	r2, r3
 800b37c:	9204      	str	r2, [sp, #16]
 800b37e:	9a05      	ldr	r2, [sp, #20]
 800b380:	2101      	movs	r1, #1
 800b382:	441a      	add	r2, r3
 800b384:	4620      	mov	r0, r4
 800b386:	9205      	str	r2, [sp, #20]
 800b388:	f000 fc60 	bl	800bc4c <__i2b>
 800b38c:	4607      	mov	r7, r0
 800b38e:	2d00      	cmp	r5, #0
 800b390:	dd0c      	ble.n	800b3ac <_dtoa_r+0x754>
 800b392:	9b05      	ldr	r3, [sp, #20]
 800b394:	2b00      	cmp	r3, #0
 800b396:	dd09      	ble.n	800b3ac <_dtoa_r+0x754>
 800b398:	42ab      	cmp	r3, r5
 800b39a:	9a04      	ldr	r2, [sp, #16]
 800b39c:	bfa8      	it	ge
 800b39e:	462b      	movge	r3, r5
 800b3a0:	1ad2      	subs	r2, r2, r3
 800b3a2:	9204      	str	r2, [sp, #16]
 800b3a4:	9a05      	ldr	r2, [sp, #20]
 800b3a6:	1aed      	subs	r5, r5, r3
 800b3a8:	1ad3      	subs	r3, r2, r3
 800b3aa:	9305      	str	r3, [sp, #20]
 800b3ac:	9b07      	ldr	r3, [sp, #28]
 800b3ae:	b31b      	cbz	r3, 800b3f8 <_dtoa_r+0x7a0>
 800b3b0:	9b08      	ldr	r3, [sp, #32]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 80af 	beq.w	800b516 <_dtoa_r+0x8be>
 800b3b8:	2e00      	cmp	r6, #0
 800b3ba:	dd13      	ble.n	800b3e4 <_dtoa_r+0x78c>
 800b3bc:	4639      	mov	r1, r7
 800b3be:	4632      	mov	r2, r6
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fd03 	bl	800bdcc <__pow5mult>
 800b3c6:	ee18 2a10 	vmov	r2, s16
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	4607      	mov	r7, r0
 800b3ce:	4620      	mov	r0, r4
 800b3d0:	f000 fc52 	bl	800bc78 <__multiply>
 800b3d4:	ee18 1a10 	vmov	r1, s16
 800b3d8:	4680      	mov	r8, r0
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 fb7e 	bl	800badc <_Bfree>
 800b3e0:	ee08 8a10 	vmov	s16, r8
 800b3e4:	9b07      	ldr	r3, [sp, #28]
 800b3e6:	1b9a      	subs	r2, r3, r6
 800b3e8:	d006      	beq.n	800b3f8 <_dtoa_r+0x7a0>
 800b3ea:	ee18 1a10 	vmov	r1, s16
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f000 fcec 	bl	800bdcc <__pow5mult>
 800b3f4:	ee08 0a10 	vmov	s16, r0
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 fc26 	bl	800bc4c <__i2b>
 800b400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b402:	2b00      	cmp	r3, #0
 800b404:	4606      	mov	r6, r0
 800b406:	f340 8088 	ble.w	800b51a <_dtoa_r+0x8c2>
 800b40a:	461a      	mov	r2, r3
 800b40c:	4601      	mov	r1, r0
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 fcdc 	bl	800bdcc <__pow5mult>
 800b414:	9b06      	ldr	r3, [sp, #24]
 800b416:	2b01      	cmp	r3, #1
 800b418:	4606      	mov	r6, r0
 800b41a:	f340 8081 	ble.w	800b520 <_dtoa_r+0x8c8>
 800b41e:	f04f 0800 	mov.w	r8, #0
 800b422:	6933      	ldr	r3, [r6, #16]
 800b424:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b428:	6918      	ldr	r0, [r3, #16]
 800b42a:	f000 fbbf 	bl	800bbac <__hi0bits>
 800b42e:	f1c0 0020 	rsb	r0, r0, #32
 800b432:	9b05      	ldr	r3, [sp, #20]
 800b434:	4418      	add	r0, r3
 800b436:	f010 001f 	ands.w	r0, r0, #31
 800b43a:	f000 8092 	beq.w	800b562 <_dtoa_r+0x90a>
 800b43e:	f1c0 0320 	rsb	r3, r0, #32
 800b442:	2b04      	cmp	r3, #4
 800b444:	f340 808a 	ble.w	800b55c <_dtoa_r+0x904>
 800b448:	f1c0 001c 	rsb	r0, r0, #28
 800b44c:	9b04      	ldr	r3, [sp, #16]
 800b44e:	4403      	add	r3, r0
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	9b05      	ldr	r3, [sp, #20]
 800b454:	4403      	add	r3, r0
 800b456:	4405      	add	r5, r0
 800b458:	9305      	str	r3, [sp, #20]
 800b45a:	9b04      	ldr	r3, [sp, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dd07      	ble.n	800b470 <_dtoa_r+0x818>
 800b460:	ee18 1a10 	vmov	r1, s16
 800b464:	461a      	mov	r2, r3
 800b466:	4620      	mov	r0, r4
 800b468:	f000 fd0a 	bl	800be80 <__lshift>
 800b46c:	ee08 0a10 	vmov	s16, r0
 800b470:	9b05      	ldr	r3, [sp, #20]
 800b472:	2b00      	cmp	r3, #0
 800b474:	dd05      	ble.n	800b482 <_dtoa_r+0x82a>
 800b476:	4631      	mov	r1, r6
 800b478:	461a      	mov	r2, r3
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 fd00 	bl	800be80 <__lshift>
 800b480:	4606      	mov	r6, r0
 800b482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d06e      	beq.n	800b566 <_dtoa_r+0x90e>
 800b488:	ee18 0a10 	vmov	r0, s16
 800b48c:	4631      	mov	r1, r6
 800b48e:	f000 fd67 	bl	800bf60 <__mcmp>
 800b492:	2800      	cmp	r0, #0
 800b494:	da67      	bge.n	800b566 <_dtoa_r+0x90e>
 800b496:	9b00      	ldr	r3, [sp, #0]
 800b498:	3b01      	subs	r3, #1
 800b49a:	ee18 1a10 	vmov	r1, s16
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	220a      	movs	r2, #10
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 fb3b 	bl	800bb20 <__multadd>
 800b4aa:	9b08      	ldr	r3, [sp, #32]
 800b4ac:	ee08 0a10 	vmov	s16, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f000 81b1 	beq.w	800b818 <_dtoa_r+0xbc0>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	4639      	mov	r1, r7
 800b4ba:	220a      	movs	r2, #10
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 fb2f 	bl	800bb20 <__multadd>
 800b4c2:	9b02      	ldr	r3, [sp, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	4607      	mov	r7, r0
 800b4c8:	f300 808e 	bgt.w	800b5e8 <_dtoa_r+0x990>
 800b4cc:	9b06      	ldr	r3, [sp, #24]
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	dc51      	bgt.n	800b576 <_dtoa_r+0x91e>
 800b4d2:	e089      	b.n	800b5e8 <_dtoa_r+0x990>
 800b4d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b4da:	e74b      	b.n	800b374 <_dtoa_r+0x71c>
 800b4dc:	9b03      	ldr	r3, [sp, #12]
 800b4de:	1e5e      	subs	r6, r3, #1
 800b4e0:	9b07      	ldr	r3, [sp, #28]
 800b4e2:	42b3      	cmp	r3, r6
 800b4e4:	bfbf      	itttt	lt
 800b4e6:	9b07      	ldrlt	r3, [sp, #28]
 800b4e8:	9607      	strlt	r6, [sp, #28]
 800b4ea:	1af2      	sublt	r2, r6, r3
 800b4ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b4ee:	bfb6      	itet	lt
 800b4f0:	189b      	addlt	r3, r3, r2
 800b4f2:	1b9e      	subge	r6, r3, r6
 800b4f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b4f6:	9b03      	ldr	r3, [sp, #12]
 800b4f8:	bfb8      	it	lt
 800b4fa:	2600      	movlt	r6, #0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	bfb7      	itett	lt
 800b500:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b504:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b508:	1a9d      	sublt	r5, r3, r2
 800b50a:	2300      	movlt	r3, #0
 800b50c:	e734      	b.n	800b378 <_dtoa_r+0x720>
 800b50e:	9e07      	ldr	r6, [sp, #28]
 800b510:	9d04      	ldr	r5, [sp, #16]
 800b512:	9f08      	ldr	r7, [sp, #32]
 800b514:	e73b      	b.n	800b38e <_dtoa_r+0x736>
 800b516:	9a07      	ldr	r2, [sp, #28]
 800b518:	e767      	b.n	800b3ea <_dtoa_r+0x792>
 800b51a:	9b06      	ldr	r3, [sp, #24]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	dc18      	bgt.n	800b552 <_dtoa_r+0x8fa>
 800b520:	f1ba 0f00 	cmp.w	sl, #0
 800b524:	d115      	bne.n	800b552 <_dtoa_r+0x8fa>
 800b526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b52a:	b993      	cbnz	r3, 800b552 <_dtoa_r+0x8fa>
 800b52c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b530:	0d1b      	lsrs	r3, r3, #20
 800b532:	051b      	lsls	r3, r3, #20
 800b534:	b183      	cbz	r3, 800b558 <_dtoa_r+0x900>
 800b536:	9b04      	ldr	r3, [sp, #16]
 800b538:	3301      	adds	r3, #1
 800b53a:	9304      	str	r3, [sp, #16]
 800b53c:	9b05      	ldr	r3, [sp, #20]
 800b53e:	3301      	adds	r3, #1
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	f04f 0801 	mov.w	r8, #1
 800b546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f47f af6a 	bne.w	800b422 <_dtoa_r+0x7ca>
 800b54e:	2001      	movs	r0, #1
 800b550:	e76f      	b.n	800b432 <_dtoa_r+0x7da>
 800b552:	f04f 0800 	mov.w	r8, #0
 800b556:	e7f6      	b.n	800b546 <_dtoa_r+0x8ee>
 800b558:	4698      	mov	r8, r3
 800b55a:	e7f4      	b.n	800b546 <_dtoa_r+0x8ee>
 800b55c:	f43f af7d 	beq.w	800b45a <_dtoa_r+0x802>
 800b560:	4618      	mov	r0, r3
 800b562:	301c      	adds	r0, #28
 800b564:	e772      	b.n	800b44c <_dtoa_r+0x7f4>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	dc37      	bgt.n	800b5dc <_dtoa_r+0x984>
 800b56c:	9b06      	ldr	r3, [sp, #24]
 800b56e:	2b02      	cmp	r3, #2
 800b570:	dd34      	ble.n	800b5dc <_dtoa_r+0x984>
 800b572:	9b03      	ldr	r3, [sp, #12]
 800b574:	9302      	str	r3, [sp, #8]
 800b576:	9b02      	ldr	r3, [sp, #8]
 800b578:	b96b      	cbnz	r3, 800b596 <_dtoa_r+0x93e>
 800b57a:	4631      	mov	r1, r6
 800b57c:	2205      	movs	r2, #5
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 face 	bl	800bb20 <__multadd>
 800b584:	4601      	mov	r1, r0
 800b586:	4606      	mov	r6, r0
 800b588:	ee18 0a10 	vmov	r0, s16
 800b58c:	f000 fce8 	bl	800bf60 <__mcmp>
 800b590:	2800      	cmp	r0, #0
 800b592:	f73f adbb 	bgt.w	800b10c <_dtoa_r+0x4b4>
 800b596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b598:	9d01      	ldr	r5, [sp, #4]
 800b59a:	43db      	mvns	r3, r3
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	f04f 0800 	mov.w	r8, #0
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 fa99 	bl	800badc <_Bfree>
 800b5aa:	2f00      	cmp	r7, #0
 800b5ac:	f43f aea4 	beq.w	800b2f8 <_dtoa_r+0x6a0>
 800b5b0:	f1b8 0f00 	cmp.w	r8, #0
 800b5b4:	d005      	beq.n	800b5c2 <_dtoa_r+0x96a>
 800b5b6:	45b8      	cmp	r8, r7
 800b5b8:	d003      	beq.n	800b5c2 <_dtoa_r+0x96a>
 800b5ba:	4641      	mov	r1, r8
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fa8d 	bl	800badc <_Bfree>
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f000 fa89 	bl	800badc <_Bfree>
 800b5ca:	e695      	b.n	800b2f8 <_dtoa_r+0x6a0>
 800b5cc:	2600      	movs	r6, #0
 800b5ce:	4637      	mov	r7, r6
 800b5d0:	e7e1      	b.n	800b596 <_dtoa_r+0x93e>
 800b5d2:	9700      	str	r7, [sp, #0]
 800b5d4:	4637      	mov	r7, r6
 800b5d6:	e599      	b.n	800b10c <_dtoa_r+0x4b4>
 800b5d8:	40240000 	.word	0x40240000
 800b5dc:	9b08      	ldr	r3, [sp, #32]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 80ca 	beq.w	800b778 <_dtoa_r+0xb20>
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	9302      	str	r3, [sp, #8]
 800b5e8:	2d00      	cmp	r5, #0
 800b5ea:	dd05      	ble.n	800b5f8 <_dtoa_r+0x9a0>
 800b5ec:	4639      	mov	r1, r7
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 fc45 	bl	800be80 <__lshift>
 800b5f6:	4607      	mov	r7, r0
 800b5f8:	f1b8 0f00 	cmp.w	r8, #0
 800b5fc:	d05b      	beq.n	800b6b6 <_dtoa_r+0xa5e>
 800b5fe:	6879      	ldr	r1, [r7, #4]
 800b600:	4620      	mov	r0, r4
 800b602:	f000 fa2b 	bl	800ba5c <_Balloc>
 800b606:	4605      	mov	r5, r0
 800b608:	b928      	cbnz	r0, 800b616 <_dtoa_r+0x9be>
 800b60a:	4b87      	ldr	r3, [pc, #540]	; (800b828 <_dtoa_r+0xbd0>)
 800b60c:	4602      	mov	r2, r0
 800b60e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b612:	f7ff bb3b 	b.w	800ac8c <_dtoa_r+0x34>
 800b616:	693a      	ldr	r2, [r7, #16]
 800b618:	3202      	adds	r2, #2
 800b61a:	0092      	lsls	r2, r2, #2
 800b61c:	f107 010c 	add.w	r1, r7, #12
 800b620:	300c      	adds	r0, #12
 800b622:	f000 fa0d 	bl	800ba40 <memcpy>
 800b626:	2201      	movs	r2, #1
 800b628:	4629      	mov	r1, r5
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 fc28 	bl	800be80 <__lshift>
 800b630:	9b01      	ldr	r3, [sp, #4]
 800b632:	f103 0901 	add.w	r9, r3, #1
 800b636:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b63a:	4413      	add	r3, r2
 800b63c:	9305      	str	r3, [sp, #20]
 800b63e:	f00a 0301 	and.w	r3, sl, #1
 800b642:	46b8      	mov	r8, r7
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	4607      	mov	r7, r0
 800b648:	4631      	mov	r1, r6
 800b64a:	ee18 0a10 	vmov	r0, s16
 800b64e:	f7ff fa75 	bl	800ab3c <quorem>
 800b652:	4641      	mov	r1, r8
 800b654:	9002      	str	r0, [sp, #8]
 800b656:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b65a:	ee18 0a10 	vmov	r0, s16
 800b65e:	f000 fc7f 	bl	800bf60 <__mcmp>
 800b662:	463a      	mov	r2, r7
 800b664:	9003      	str	r0, [sp, #12]
 800b666:	4631      	mov	r1, r6
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 fc95 	bl	800bf98 <__mdiff>
 800b66e:	68c2      	ldr	r2, [r0, #12]
 800b670:	f109 3bff 	add.w	fp, r9, #4294967295
 800b674:	4605      	mov	r5, r0
 800b676:	bb02      	cbnz	r2, 800b6ba <_dtoa_r+0xa62>
 800b678:	4601      	mov	r1, r0
 800b67a:	ee18 0a10 	vmov	r0, s16
 800b67e:	f000 fc6f 	bl	800bf60 <__mcmp>
 800b682:	4602      	mov	r2, r0
 800b684:	4629      	mov	r1, r5
 800b686:	4620      	mov	r0, r4
 800b688:	9207      	str	r2, [sp, #28]
 800b68a:	f000 fa27 	bl	800badc <_Bfree>
 800b68e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b692:	ea43 0102 	orr.w	r1, r3, r2
 800b696:	9b04      	ldr	r3, [sp, #16]
 800b698:	430b      	orrs	r3, r1
 800b69a:	464d      	mov	r5, r9
 800b69c:	d10f      	bne.n	800b6be <_dtoa_r+0xa66>
 800b69e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6a2:	d02a      	beq.n	800b6fa <_dtoa_r+0xaa2>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	dd02      	ble.n	800b6b0 <_dtoa_r+0xa58>
 800b6aa:	9b02      	ldr	r3, [sp, #8]
 800b6ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b6b0:	f88b a000 	strb.w	sl, [fp]
 800b6b4:	e775      	b.n	800b5a2 <_dtoa_r+0x94a>
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	e7ba      	b.n	800b630 <_dtoa_r+0x9d8>
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	e7e2      	b.n	800b684 <_dtoa_r+0xa2c>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	db04      	blt.n	800b6ce <_dtoa_r+0xa76>
 800b6c4:	9906      	ldr	r1, [sp, #24]
 800b6c6:	430b      	orrs	r3, r1
 800b6c8:	9904      	ldr	r1, [sp, #16]
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	d122      	bne.n	800b714 <_dtoa_r+0xabc>
 800b6ce:	2a00      	cmp	r2, #0
 800b6d0:	ddee      	ble.n	800b6b0 <_dtoa_r+0xa58>
 800b6d2:	ee18 1a10 	vmov	r1, s16
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fbd1 	bl	800be80 <__lshift>
 800b6de:	4631      	mov	r1, r6
 800b6e0:	ee08 0a10 	vmov	s16, r0
 800b6e4:	f000 fc3c 	bl	800bf60 <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	dc03      	bgt.n	800b6f4 <_dtoa_r+0xa9c>
 800b6ec:	d1e0      	bne.n	800b6b0 <_dtoa_r+0xa58>
 800b6ee:	f01a 0f01 	tst.w	sl, #1
 800b6f2:	d0dd      	beq.n	800b6b0 <_dtoa_r+0xa58>
 800b6f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b6f8:	d1d7      	bne.n	800b6aa <_dtoa_r+0xa52>
 800b6fa:	2339      	movs	r3, #57	; 0x39
 800b6fc:	f88b 3000 	strb.w	r3, [fp]
 800b700:	462b      	mov	r3, r5
 800b702:	461d      	mov	r5, r3
 800b704:	3b01      	subs	r3, #1
 800b706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b70a:	2a39      	cmp	r2, #57	; 0x39
 800b70c:	d071      	beq.n	800b7f2 <_dtoa_r+0xb9a>
 800b70e:	3201      	adds	r2, #1
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	e746      	b.n	800b5a2 <_dtoa_r+0x94a>
 800b714:	2a00      	cmp	r2, #0
 800b716:	dd07      	ble.n	800b728 <_dtoa_r+0xad0>
 800b718:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b71c:	d0ed      	beq.n	800b6fa <_dtoa_r+0xaa2>
 800b71e:	f10a 0301 	add.w	r3, sl, #1
 800b722:	f88b 3000 	strb.w	r3, [fp]
 800b726:	e73c      	b.n	800b5a2 <_dtoa_r+0x94a>
 800b728:	9b05      	ldr	r3, [sp, #20]
 800b72a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b72e:	4599      	cmp	r9, r3
 800b730:	d047      	beq.n	800b7c2 <_dtoa_r+0xb6a>
 800b732:	ee18 1a10 	vmov	r1, s16
 800b736:	2300      	movs	r3, #0
 800b738:	220a      	movs	r2, #10
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 f9f0 	bl	800bb20 <__multadd>
 800b740:	45b8      	cmp	r8, r7
 800b742:	ee08 0a10 	vmov	s16, r0
 800b746:	f04f 0300 	mov.w	r3, #0
 800b74a:	f04f 020a 	mov.w	r2, #10
 800b74e:	4641      	mov	r1, r8
 800b750:	4620      	mov	r0, r4
 800b752:	d106      	bne.n	800b762 <_dtoa_r+0xb0a>
 800b754:	f000 f9e4 	bl	800bb20 <__multadd>
 800b758:	4680      	mov	r8, r0
 800b75a:	4607      	mov	r7, r0
 800b75c:	f109 0901 	add.w	r9, r9, #1
 800b760:	e772      	b.n	800b648 <_dtoa_r+0x9f0>
 800b762:	f000 f9dd 	bl	800bb20 <__multadd>
 800b766:	4639      	mov	r1, r7
 800b768:	4680      	mov	r8, r0
 800b76a:	2300      	movs	r3, #0
 800b76c:	220a      	movs	r2, #10
 800b76e:	4620      	mov	r0, r4
 800b770:	f000 f9d6 	bl	800bb20 <__multadd>
 800b774:	4607      	mov	r7, r0
 800b776:	e7f1      	b.n	800b75c <_dtoa_r+0xb04>
 800b778:	9b03      	ldr	r3, [sp, #12]
 800b77a:	9302      	str	r3, [sp, #8]
 800b77c:	9d01      	ldr	r5, [sp, #4]
 800b77e:	ee18 0a10 	vmov	r0, s16
 800b782:	4631      	mov	r1, r6
 800b784:	f7ff f9da 	bl	800ab3c <quorem>
 800b788:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	f805 ab01 	strb.w	sl, [r5], #1
 800b792:	1aea      	subs	r2, r5, r3
 800b794:	9b02      	ldr	r3, [sp, #8]
 800b796:	4293      	cmp	r3, r2
 800b798:	dd09      	ble.n	800b7ae <_dtoa_r+0xb56>
 800b79a:	ee18 1a10 	vmov	r1, s16
 800b79e:	2300      	movs	r3, #0
 800b7a0:	220a      	movs	r2, #10
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f9bc 	bl	800bb20 <__multadd>
 800b7a8:	ee08 0a10 	vmov	s16, r0
 800b7ac:	e7e7      	b.n	800b77e <_dtoa_r+0xb26>
 800b7ae:	9b02      	ldr	r3, [sp, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bfc8      	it	gt
 800b7b4:	461d      	movgt	r5, r3
 800b7b6:	9b01      	ldr	r3, [sp, #4]
 800b7b8:	bfd8      	it	le
 800b7ba:	2501      	movle	r5, #1
 800b7bc:	441d      	add	r5, r3
 800b7be:	f04f 0800 	mov.w	r8, #0
 800b7c2:	ee18 1a10 	vmov	r1, s16
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	f000 fb59 	bl	800be80 <__lshift>
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	ee08 0a10 	vmov	s16, r0
 800b7d4:	f000 fbc4 	bl	800bf60 <__mcmp>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	dc91      	bgt.n	800b700 <_dtoa_r+0xaa8>
 800b7dc:	d102      	bne.n	800b7e4 <_dtoa_r+0xb8c>
 800b7de:	f01a 0f01 	tst.w	sl, #1
 800b7e2:	d18d      	bne.n	800b700 <_dtoa_r+0xaa8>
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	461d      	mov	r5, r3
 800b7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7ec:	2a30      	cmp	r2, #48	; 0x30
 800b7ee:	d0fa      	beq.n	800b7e6 <_dtoa_r+0xb8e>
 800b7f0:	e6d7      	b.n	800b5a2 <_dtoa_r+0x94a>
 800b7f2:	9a01      	ldr	r2, [sp, #4]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d184      	bne.n	800b702 <_dtoa_r+0xaaa>
 800b7f8:	9b00      	ldr	r3, [sp, #0]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	2331      	movs	r3, #49	; 0x31
 800b800:	7013      	strb	r3, [r2, #0]
 800b802:	e6ce      	b.n	800b5a2 <_dtoa_r+0x94a>
 800b804:	4b09      	ldr	r3, [pc, #36]	; (800b82c <_dtoa_r+0xbd4>)
 800b806:	f7ff ba95 	b.w	800ad34 <_dtoa_r+0xdc>
 800b80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f47f aa6e 	bne.w	800acee <_dtoa_r+0x96>
 800b812:	4b07      	ldr	r3, [pc, #28]	; (800b830 <_dtoa_r+0xbd8>)
 800b814:	f7ff ba8e 	b.w	800ad34 <_dtoa_r+0xdc>
 800b818:	9b02      	ldr	r3, [sp, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dcae      	bgt.n	800b77c <_dtoa_r+0xb24>
 800b81e:	9b06      	ldr	r3, [sp, #24]
 800b820:	2b02      	cmp	r3, #2
 800b822:	f73f aea8 	bgt.w	800b576 <_dtoa_r+0x91e>
 800b826:	e7a9      	b.n	800b77c <_dtoa_r+0xb24>
 800b828:	0800d21b 	.word	0x0800d21b
 800b82c:	0800d178 	.word	0x0800d178
 800b830:	0800d19c 	.word	0x0800d19c

0800b834 <std>:
 800b834:	2300      	movs	r3, #0
 800b836:	b510      	push	{r4, lr}
 800b838:	4604      	mov	r4, r0
 800b83a:	e9c0 3300 	strd	r3, r3, [r0]
 800b83e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b842:	6083      	str	r3, [r0, #8]
 800b844:	8181      	strh	r1, [r0, #12]
 800b846:	6643      	str	r3, [r0, #100]	; 0x64
 800b848:	81c2      	strh	r2, [r0, #14]
 800b84a:	6183      	str	r3, [r0, #24]
 800b84c:	4619      	mov	r1, r3
 800b84e:	2208      	movs	r2, #8
 800b850:	305c      	adds	r0, #92	; 0x5c
 800b852:	f7fe fcb3 	bl	800a1bc <memset>
 800b856:	4b05      	ldr	r3, [pc, #20]	; (800b86c <std+0x38>)
 800b858:	6263      	str	r3, [r4, #36]	; 0x24
 800b85a:	4b05      	ldr	r3, [pc, #20]	; (800b870 <std+0x3c>)
 800b85c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b85e:	4b05      	ldr	r3, [pc, #20]	; (800b874 <std+0x40>)
 800b860:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b862:	4b05      	ldr	r3, [pc, #20]	; (800b878 <std+0x44>)
 800b864:	6224      	str	r4, [r4, #32]
 800b866:	6323      	str	r3, [r4, #48]	; 0x30
 800b868:	bd10      	pop	{r4, pc}
 800b86a:	bf00      	nop
 800b86c:	0800c96d 	.word	0x0800c96d
 800b870:	0800c98f 	.word	0x0800c98f
 800b874:	0800c9c7 	.word	0x0800c9c7
 800b878:	0800c9eb 	.word	0x0800c9eb

0800b87c <_cleanup_r>:
 800b87c:	4901      	ldr	r1, [pc, #4]	; (800b884 <_cleanup_r+0x8>)
 800b87e:	f000 b8af 	b.w	800b9e0 <_fwalk_reent>
 800b882:	bf00      	nop
 800b884:	0800cd01 	.word	0x0800cd01

0800b888 <__sfmoreglue>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	2268      	movs	r2, #104	; 0x68
 800b88c:	1e4d      	subs	r5, r1, #1
 800b88e:	4355      	muls	r5, r2
 800b890:	460e      	mov	r6, r1
 800b892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b896:	f000 fce7 	bl	800c268 <_malloc_r>
 800b89a:	4604      	mov	r4, r0
 800b89c:	b140      	cbz	r0, 800b8b0 <__sfmoreglue+0x28>
 800b89e:	2100      	movs	r1, #0
 800b8a0:	e9c0 1600 	strd	r1, r6, [r0]
 800b8a4:	300c      	adds	r0, #12
 800b8a6:	60a0      	str	r0, [r4, #8]
 800b8a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8ac:	f7fe fc86 	bl	800a1bc <memset>
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}

0800b8b4 <__sfp_lock_acquire>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	; (800b8bc <__sfp_lock_acquire+0x8>)
 800b8b6:	f000 b8b8 	b.w	800ba2a <__retarget_lock_acquire_recursive>
 800b8ba:	bf00      	nop
 800b8bc:	20001ff1 	.word	0x20001ff1

0800b8c0 <__sfp_lock_release>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <__sfp_lock_release+0x8>)
 800b8c2:	f000 b8b3 	b.w	800ba2c <__retarget_lock_release_recursive>
 800b8c6:	bf00      	nop
 800b8c8:	20001ff1 	.word	0x20001ff1

0800b8cc <__sinit_lock_acquire>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	; (800b8d4 <__sinit_lock_acquire+0x8>)
 800b8ce:	f000 b8ac 	b.w	800ba2a <__retarget_lock_acquire_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	20001ff2 	.word	0x20001ff2

0800b8d8 <__sinit_lock_release>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__sinit_lock_release+0x8>)
 800b8da:	f000 b8a7 	b.w	800ba2c <__retarget_lock_release_recursive>
 800b8de:	bf00      	nop
 800b8e0:	20001ff2 	.word	0x20001ff2

0800b8e4 <__sinit>:
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	f7ff fff0 	bl	800b8cc <__sinit_lock_acquire>
 800b8ec:	69a3      	ldr	r3, [r4, #24]
 800b8ee:	b11b      	cbz	r3, 800b8f8 <__sinit+0x14>
 800b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f4:	f7ff bff0 	b.w	800b8d8 <__sinit_lock_release>
 800b8f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8fc:	6523      	str	r3, [r4, #80]	; 0x50
 800b8fe:	4b13      	ldr	r3, [pc, #76]	; (800b94c <__sinit+0x68>)
 800b900:	4a13      	ldr	r2, [pc, #76]	; (800b950 <__sinit+0x6c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	62a2      	str	r2, [r4, #40]	; 0x28
 800b906:	42a3      	cmp	r3, r4
 800b908:	bf04      	itt	eq
 800b90a:	2301      	moveq	r3, #1
 800b90c:	61a3      	streq	r3, [r4, #24]
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 f820 	bl	800b954 <__sfp>
 800b914:	6060      	str	r0, [r4, #4]
 800b916:	4620      	mov	r0, r4
 800b918:	f000 f81c 	bl	800b954 <__sfp>
 800b91c:	60a0      	str	r0, [r4, #8]
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 f818 	bl	800b954 <__sfp>
 800b924:	2200      	movs	r2, #0
 800b926:	60e0      	str	r0, [r4, #12]
 800b928:	2104      	movs	r1, #4
 800b92a:	6860      	ldr	r0, [r4, #4]
 800b92c:	f7ff ff82 	bl	800b834 <std>
 800b930:	68a0      	ldr	r0, [r4, #8]
 800b932:	2201      	movs	r2, #1
 800b934:	2109      	movs	r1, #9
 800b936:	f7ff ff7d 	bl	800b834 <std>
 800b93a:	68e0      	ldr	r0, [r4, #12]
 800b93c:	2202      	movs	r2, #2
 800b93e:	2112      	movs	r1, #18
 800b940:	f7ff ff78 	bl	800b834 <std>
 800b944:	2301      	movs	r3, #1
 800b946:	61a3      	str	r3, [r4, #24]
 800b948:	e7d2      	b.n	800b8f0 <__sinit+0xc>
 800b94a:	bf00      	nop
 800b94c:	0800d164 	.word	0x0800d164
 800b950:	0800b87d 	.word	0x0800b87d

0800b954 <__sfp>:
 800b954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b956:	4607      	mov	r7, r0
 800b958:	f7ff ffac 	bl	800b8b4 <__sfp_lock_acquire>
 800b95c:	4b1e      	ldr	r3, [pc, #120]	; (800b9d8 <__sfp+0x84>)
 800b95e:	681e      	ldr	r6, [r3, #0]
 800b960:	69b3      	ldr	r3, [r6, #24]
 800b962:	b913      	cbnz	r3, 800b96a <__sfp+0x16>
 800b964:	4630      	mov	r0, r6
 800b966:	f7ff ffbd 	bl	800b8e4 <__sinit>
 800b96a:	3648      	adds	r6, #72	; 0x48
 800b96c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b970:	3b01      	subs	r3, #1
 800b972:	d503      	bpl.n	800b97c <__sfp+0x28>
 800b974:	6833      	ldr	r3, [r6, #0]
 800b976:	b30b      	cbz	r3, 800b9bc <__sfp+0x68>
 800b978:	6836      	ldr	r6, [r6, #0]
 800b97a:	e7f7      	b.n	800b96c <__sfp+0x18>
 800b97c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b980:	b9d5      	cbnz	r5, 800b9b8 <__sfp+0x64>
 800b982:	4b16      	ldr	r3, [pc, #88]	; (800b9dc <__sfp+0x88>)
 800b984:	60e3      	str	r3, [r4, #12]
 800b986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b98a:	6665      	str	r5, [r4, #100]	; 0x64
 800b98c:	f000 f84c 	bl	800ba28 <__retarget_lock_init_recursive>
 800b990:	f7ff ff96 	bl	800b8c0 <__sfp_lock_release>
 800b994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b99c:	6025      	str	r5, [r4, #0]
 800b99e:	61a5      	str	r5, [r4, #24]
 800b9a0:	2208      	movs	r2, #8
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9a8:	f7fe fc08 	bl	800a1bc <memset>
 800b9ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b8:	3468      	adds	r4, #104	; 0x68
 800b9ba:	e7d9      	b.n	800b970 <__sfp+0x1c>
 800b9bc:	2104      	movs	r1, #4
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7ff ff62 	bl	800b888 <__sfmoreglue>
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	6030      	str	r0, [r6, #0]
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d1d5      	bne.n	800b978 <__sfp+0x24>
 800b9cc:	f7ff ff78 	bl	800b8c0 <__sfp_lock_release>
 800b9d0:	230c      	movs	r3, #12
 800b9d2:	603b      	str	r3, [r7, #0]
 800b9d4:	e7ee      	b.n	800b9b4 <__sfp+0x60>
 800b9d6:	bf00      	nop
 800b9d8:	0800d164 	.word	0x0800d164
 800b9dc:	ffff0001 	.word	0xffff0001

0800b9e0 <_fwalk_reent>:
 800b9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	4688      	mov	r8, r1
 800b9e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9ec:	2700      	movs	r7, #0
 800b9ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b9f6:	d505      	bpl.n	800ba04 <_fwalk_reent+0x24>
 800b9f8:	6824      	ldr	r4, [r4, #0]
 800b9fa:	2c00      	cmp	r4, #0
 800b9fc:	d1f7      	bne.n	800b9ee <_fwalk_reent+0xe>
 800b9fe:	4638      	mov	r0, r7
 800ba00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba04:	89ab      	ldrh	r3, [r5, #12]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d907      	bls.n	800ba1a <_fwalk_reent+0x3a>
 800ba0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	d003      	beq.n	800ba1a <_fwalk_reent+0x3a>
 800ba12:	4629      	mov	r1, r5
 800ba14:	4630      	mov	r0, r6
 800ba16:	47c0      	blx	r8
 800ba18:	4307      	orrs	r7, r0
 800ba1a:	3568      	adds	r5, #104	; 0x68
 800ba1c:	e7e9      	b.n	800b9f2 <_fwalk_reent+0x12>
	...

0800ba20 <_localeconv_r>:
 800ba20:	4800      	ldr	r0, [pc, #0]	; (800ba24 <_localeconv_r+0x4>)
 800ba22:	4770      	bx	lr
 800ba24:	20000254 	.word	0x20000254

0800ba28 <__retarget_lock_init_recursive>:
 800ba28:	4770      	bx	lr

0800ba2a <__retarget_lock_acquire_recursive>:
 800ba2a:	4770      	bx	lr

0800ba2c <__retarget_lock_release_recursive>:
 800ba2c:	4770      	bx	lr
	...

0800ba30 <malloc>:
 800ba30:	4b02      	ldr	r3, [pc, #8]	; (800ba3c <malloc+0xc>)
 800ba32:	4601      	mov	r1, r0
 800ba34:	6818      	ldr	r0, [r3, #0]
 800ba36:	f000 bc17 	b.w	800c268 <_malloc_r>
 800ba3a:	bf00      	nop
 800ba3c:	20000100 	.word	0x20000100

0800ba40 <memcpy>:
 800ba40:	440a      	add	r2, r1
 800ba42:	4291      	cmp	r1, r2
 800ba44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba48:	d100      	bne.n	800ba4c <memcpy+0xc>
 800ba4a:	4770      	bx	lr
 800ba4c:	b510      	push	{r4, lr}
 800ba4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba56:	4291      	cmp	r1, r2
 800ba58:	d1f9      	bne.n	800ba4e <memcpy+0xe>
 800ba5a:	bd10      	pop	{r4, pc}

0800ba5c <_Balloc>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba60:	4604      	mov	r4, r0
 800ba62:	460d      	mov	r5, r1
 800ba64:	b976      	cbnz	r6, 800ba84 <_Balloc+0x28>
 800ba66:	2010      	movs	r0, #16
 800ba68:	f7ff ffe2 	bl	800ba30 <malloc>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	6260      	str	r0, [r4, #36]	; 0x24
 800ba70:	b920      	cbnz	r0, 800ba7c <_Balloc+0x20>
 800ba72:	4b18      	ldr	r3, [pc, #96]	; (800bad4 <_Balloc+0x78>)
 800ba74:	4818      	ldr	r0, [pc, #96]	; (800bad8 <_Balloc+0x7c>)
 800ba76:	2166      	movs	r1, #102	; 0x66
 800ba78:	f001 f88e 	bl	800cb98 <__assert_func>
 800ba7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba80:	6006      	str	r6, [r0, #0]
 800ba82:	60c6      	str	r6, [r0, #12]
 800ba84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba86:	68f3      	ldr	r3, [r6, #12]
 800ba88:	b183      	cbz	r3, 800baac <_Balloc+0x50>
 800ba8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba92:	b9b8      	cbnz	r0, 800bac4 <_Balloc+0x68>
 800ba94:	2101      	movs	r1, #1
 800ba96:	fa01 f605 	lsl.w	r6, r1, r5
 800ba9a:	1d72      	adds	r2, r6, #5
 800ba9c:	0092      	lsls	r2, r2, #2
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fb60 	bl	800c164 <_calloc_r>
 800baa4:	b160      	cbz	r0, 800bac0 <_Balloc+0x64>
 800baa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baaa:	e00e      	b.n	800baca <_Balloc+0x6e>
 800baac:	2221      	movs	r2, #33	; 0x21
 800baae:	2104      	movs	r1, #4
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fb57 	bl	800c164 <_calloc_r>
 800bab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab8:	60f0      	str	r0, [r6, #12]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e4      	bne.n	800ba8a <_Balloc+0x2e>
 800bac0:	2000      	movs	r0, #0
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	6802      	ldr	r2, [r0, #0]
 800bac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baca:	2300      	movs	r3, #0
 800bacc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bad0:	e7f7      	b.n	800bac2 <_Balloc+0x66>
 800bad2:	bf00      	nop
 800bad4:	0800d1a9 	.word	0x0800d1a9
 800bad8:	0800d28c 	.word	0x0800d28c

0800badc <_Bfree>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bae0:	4605      	mov	r5, r0
 800bae2:	460c      	mov	r4, r1
 800bae4:	b976      	cbnz	r6, 800bb04 <_Bfree+0x28>
 800bae6:	2010      	movs	r0, #16
 800bae8:	f7ff ffa2 	bl	800ba30 <malloc>
 800baec:	4602      	mov	r2, r0
 800baee:	6268      	str	r0, [r5, #36]	; 0x24
 800baf0:	b920      	cbnz	r0, 800bafc <_Bfree+0x20>
 800baf2:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <_Bfree+0x3c>)
 800baf4:	4809      	ldr	r0, [pc, #36]	; (800bb1c <_Bfree+0x40>)
 800baf6:	218a      	movs	r1, #138	; 0x8a
 800baf8:	f001 f84e 	bl	800cb98 <__assert_func>
 800bafc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb00:	6006      	str	r6, [r0, #0]
 800bb02:	60c6      	str	r6, [r0, #12]
 800bb04:	b13c      	cbz	r4, 800bb16 <_Bfree+0x3a>
 800bb06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb08:	6862      	ldr	r2, [r4, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb10:	6021      	str	r1, [r4, #0]
 800bb12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	0800d1a9 	.word	0x0800d1a9
 800bb1c:	0800d28c 	.word	0x0800d28c

0800bb20 <__multadd>:
 800bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb24:	690d      	ldr	r5, [r1, #16]
 800bb26:	4607      	mov	r7, r0
 800bb28:	460c      	mov	r4, r1
 800bb2a:	461e      	mov	r6, r3
 800bb2c:	f101 0c14 	add.w	ip, r1, #20
 800bb30:	2000      	movs	r0, #0
 800bb32:	f8dc 3000 	ldr.w	r3, [ip]
 800bb36:	b299      	uxth	r1, r3
 800bb38:	fb02 6101 	mla	r1, r2, r1, r6
 800bb3c:	0c1e      	lsrs	r6, r3, #16
 800bb3e:	0c0b      	lsrs	r3, r1, #16
 800bb40:	fb02 3306 	mla	r3, r2, r6, r3
 800bb44:	b289      	uxth	r1, r1
 800bb46:	3001      	adds	r0, #1
 800bb48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb4c:	4285      	cmp	r5, r0
 800bb4e:	f84c 1b04 	str.w	r1, [ip], #4
 800bb52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb56:	dcec      	bgt.n	800bb32 <__multadd+0x12>
 800bb58:	b30e      	cbz	r6, 800bb9e <__multadd+0x7e>
 800bb5a:	68a3      	ldr	r3, [r4, #8]
 800bb5c:	42ab      	cmp	r3, r5
 800bb5e:	dc19      	bgt.n	800bb94 <__multadd+0x74>
 800bb60:	6861      	ldr	r1, [r4, #4]
 800bb62:	4638      	mov	r0, r7
 800bb64:	3101      	adds	r1, #1
 800bb66:	f7ff ff79 	bl	800ba5c <_Balloc>
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <__multadd+0x5a>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4b0c      	ldr	r3, [pc, #48]	; (800bba4 <__multadd+0x84>)
 800bb72:	480d      	ldr	r0, [pc, #52]	; (800bba8 <__multadd+0x88>)
 800bb74:	21b5      	movs	r1, #181	; 0xb5
 800bb76:	f001 f80f 	bl	800cb98 <__assert_func>
 800bb7a:	6922      	ldr	r2, [r4, #16]
 800bb7c:	3202      	adds	r2, #2
 800bb7e:	f104 010c 	add.w	r1, r4, #12
 800bb82:	0092      	lsls	r2, r2, #2
 800bb84:	300c      	adds	r0, #12
 800bb86:	f7ff ff5b 	bl	800ba40 <memcpy>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f7ff ffa5 	bl	800badc <_Bfree>
 800bb92:	4644      	mov	r4, r8
 800bb94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb98:	3501      	adds	r5, #1
 800bb9a:	615e      	str	r6, [r3, #20]
 800bb9c:	6125      	str	r5, [r4, #16]
 800bb9e:	4620      	mov	r0, r4
 800bba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba4:	0800d21b 	.word	0x0800d21b
 800bba8:	0800d28c 	.word	0x0800d28c

0800bbac <__hi0bits>:
 800bbac:	0c03      	lsrs	r3, r0, #16
 800bbae:	041b      	lsls	r3, r3, #16
 800bbb0:	b9d3      	cbnz	r3, 800bbe8 <__hi0bits+0x3c>
 800bbb2:	0400      	lsls	r0, r0, #16
 800bbb4:	2310      	movs	r3, #16
 800bbb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbba:	bf04      	itt	eq
 800bbbc:	0200      	lsleq	r0, r0, #8
 800bbbe:	3308      	addeq	r3, #8
 800bbc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbc4:	bf04      	itt	eq
 800bbc6:	0100      	lsleq	r0, r0, #4
 800bbc8:	3304      	addeq	r3, #4
 800bbca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbce:	bf04      	itt	eq
 800bbd0:	0080      	lsleq	r0, r0, #2
 800bbd2:	3302      	addeq	r3, #2
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	db05      	blt.n	800bbe4 <__hi0bits+0x38>
 800bbd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbdc:	f103 0301 	add.w	r3, r3, #1
 800bbe0:	bf08      	it	eq
 800bbe2:	2320      	moveq	r3, #32
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	4770      	bx	lr
 800bbe8:	2300      	movs	r3, #0
 800bbea:	e7e4      	b.n	800bbb6 <__hi0bits+0xa>

0800bbec <__lo0bits>:
 800bbec:	6803      	ldr	r3, [r0, #0]
 800bbee:	f013 0207 	ands.w	r2, r3, #7
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	d00b      	beq.n	800bc0e <__lo0bits+0x22>
 800bbf6:	07da      	lsls	r2, r3, #31
 800bbf8:	d423      	bmi.n	800bc42 <__lo0bits+0x56>
 800bbfa:	0798      	lsls	r0, r3, #30
 800bbfc:	bf49      	itett	mi
 800bbfe:	085b      	lsrmi	r3, r3, #1
 800bc00:	089b      	lsrpl	r3, r3, #2
 800bc02:	2001      	movmi	r0, #1
 800bc04:	600b      	strmi	r3, [r1, #0]
 800bc06:	bf5c      	itt	pl
 800bc08:	600b      	strpl	r3, [r1, #0]
 800bc0a:	2002      	movpl	r0, #2
 800bc0c:	4770      	bx	lr
 800bc0e:	b298      	uxth	r0, r3
 800bc10:	b9a8      	cbnz	r0, 800bc3e <__lo0bits+0x52>
 800bc12:	0c1b      	lsrs	r3, r3, #16
 800bc14:	2010      	movs	r0, #16
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	b90a      	cbnz	r2, 800bc1e <__lo0bits+0x32>
 800bc1a:	3008      	adds	r0, #8
 800bc1c:	0a1b      	lsrs	r3, r3, #8
 800bc1e:	071a      	lsls	r2, r3, #28
 800bc20:	bf04      	itt	eq
 800bc22:	091b      	lsreq	r3, r3, #4
 800bc24:	3004      	addeq	r0, #4
 800bc26:	079a      	lsls	r2, r3, #30
 800bc28:	bf04      	itt	eq
 800bc2a:	089b      	lsreq	r3, r3, #2
 800bc2c:	3002      	addeq	r0, #2
 800bc2e:	07da      	lsls	r2, r3, #31
 800bc30:	d403      	bmi.n	800bc3a <__lo0bits+0x4e>
 800bc32:	085b      	lsrs	r3, r3, #1
 800bc34:	f100 0001 	add.w	r0, r0, #1
 800bc38:	d005      	beq.n	800bc46 <__lo0bits+0x5a>
 800bc3a:	600b      	str	r3, [r1, #0]
 800bc3c:	4770      	bx	lr
 800bc3e:	4610      	mov	r0, r2
 800bc40:	e7e9      	b.n	800bc16 <__lo0bits+0x2a>
 800bc42:	2000      	movs	r0, #0
 800bc44:	4770      	bx	lr
 800bc46:	2020      	movs	r0, #32
 800bc48:	4770      	bx	lr
	...

0800bc4c <__i2b>:
 800bc4c:	b510      	push	{r4, lr}
 800bc4e:	460c      	mov	r4, r1
 800bc50:	2101      	movs	r1, #1
 800bc52:	f7ff ff03 	bl	800ba5c <_Balloc>
 800bc56:	4602      	mov	r2, r0
 800bc58:	b928      	cbnz	r0, 800bc66 <__i2b+0x1a>
 800bc5a:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <__i2b+0x24>)
 800bc5c:	4805      	ldr	r0, [pc, #20]	; (800bc74 <__i2b+0x28>)
 800bc5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc62:	f000 ff99 	bl	800cb98 <__assert_func>
 800bc66:	2301      	movs	r3, #1
 800bc68:	6144      	str	r4, [r0, #20]
 800bc6a:	6103      	str	r3, [r0, #16]
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	bf00      	nop
 800bc70:	0800d21b 	.word	0x0800d21b
 800bc74:	0800d28c 	.word	0x0800d28c

0800bc78 <__multiply>:
 800bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	4691      	mov	r9, r2
 800bc7e:	690a      	ldr	r2, [r1, #16]
 800bc80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	bfb8      	it	lt
 800bc88:	460b      	movlt	r3, r1
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	bfbc      	itt	lt
 800bc8e:	464c      	movlt	r4, r9
 800bc90:	4699      	movlt	r9, r3
 800bc92:	6927      	ldr	r7, [r4, #16]
 800bc94:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc98:	68a3      	ldr	r3, [r4, #8]
 800bc9a:	6861      	ldr	r1, [r4, #4]
 800bc9c:	eb07 060a 	add.w	r6, r7, sl
 800bca0:	42b3      	cmp	r3, r6
 800bca2:	b085      	sub	sp, #20
 800bca4:	bfb8      	it	lt
 800bca6:	3101      	addlt	r1, #1
 800bca8:	f7ff fed8 	bl	800ba5c <_Balloc>
 800bcac:	b930      	cbnz	r0, 800bcbc <__multiply+0x44>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	4b44      	ldr	r3, [pc, #272]	; (800bdc4 <__multiply+0x14c>)
 800bcb2:	4845      	ldr	r0, [pc, #276]	; (800bdc8 <__multiply+0x150>)
 800bcb4:	f240 115d 	movw	r1, #349	; 0x15d
 800bcb8:	f000 ff6e 	bl	800cb98 <__assert_func>
 800bcbc:	f100 0514 	add.w	r5, r0, #20
 800bcc0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcc4:	462b      	mov	r3, r5
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	4543      	cmp	r3, r8
 800bcca:	d321      	bcc.n	800bd10 <__multiply+0x98>
 800bccc:	f104 0314 	add.w	r3, r4, #20
 800bcd0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcd4:	f109 0314 	add.w	r3, r9, #20
 800bcd8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bcdc:	9202      	str	r2, [sp, #8]
 800bcde:	1b3a      	subs	r2, r7, r4
 800bce0:	3a15      	subs	r2, #21
 800bce2:	f022 0203 	bic.w	r2, r2, #3
 800bce6:	3204      	adds	r2, #4
 800bce8:	f104 0115 	add.w	r1, r4, #21
 800bcec:	428f      	cmp	r7, r1
 800bcee:	bf38      	it	cc
 800bcf0:	2204      	movcc	r2, #4
 800bcf2:	9201      	str	r2, [sp, #4]
 800bcf4:	9a02      	ldr	r2, [sp, #8]
 800bcf6:	9303      	str	r3, [sp, #12]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d80c      	bhi.n	800bd16 <__multiply+0x9e>
 800bcfc:	2e00      	cmp	r6, #0
 800bcfe:	dd03      	ble.n	800bd08 <__multiply+0x90>
 800bd00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d05a      	beq.n	800bdbe <__multiply+0x146>
 800bd08:	6106      	str	r6, [r0, #16]
 800bd0a:	b005      	add	sp, #20
 800bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd10:	f843 2b04 	str.w	r2, [r3], #4
 800bd14:	e7d8      	b.n	800bcc8 <__multiply+0x50>
 800bd16:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd1a:	f1ba 0f00 	cmp.w	sl, #0
 800bd1e:	d024      	beq.n	800bd6a <__multiply+0xf2>
 800bd20:	f104 0e14 	add.w	lr, r4, #20
 800bd24:	46a9      	mov	r9, r5
 800bd26:	f04f 0c00 	mov.w	ip, #0
 800bd2a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd2e:	f8d9 1000 	ldr.w	r1, [r9]
 800bd32:	fa1f fb82 	uxth.w	fp, r2
 800bd36:	b289      	uxth	r1, r1
 800bd38:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd3c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd40:	f8d9 2000 	ldr.w	r2, [r9]
 800bd44:	4461      	add	r1, ip
 800bd46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd4a:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd52:	b289      	uxth	r1, r1
 800bd54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd58:	4577      	cmp	r7, lr
 800bd5a:	f849 1b04 	str.w	r1, [r9], #4
 800bd5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd62:	d8e2      	bhi.n	800bd2a <__multiply+0xb2>
 800bd64:	9a01      	ldr	r2, [sp, #4]
 800bd66:	f845 c002 	str.w	ip, [r5, r2]
 800bd6a:	9a03      	ldr	r2, [sp, #12]
 800bd6c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd70:	3304      	adds	r3, #4
 800bd72:	f1b9 0f00 	cmp.w	r9, #0
 800bd76:	d020      	beq.n	800bdba <__multiply+0x142>
 800bd78:	6829      	ldr	r1, [r5, #0]
 800bd7a:	f104 0c14 	add.w	ip, r4, #20
 800bd7e:	46ae      	mov	lr, r5
 800bd80:	f04f 0a00 	mov.w	sl, #0
 800bd84:	f8bc b000 	ldrh.w	fp, [ip]
 800bd88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bd8c:	fb09 220b 	mla	r2, r9, fp, r2
 800bd90:	4492      	add	sl, r2
 800bd92:	b289      	uxth	r1, r1
 800bd94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bd98:	f84e 1b04 	str.w	r1, [lr], #4
 800bd9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bda0:	f8be 1000 	ldrh.w	r1, [lr]
 800bda4:	0c12      	lsrs	r2, r2, #16
 800bda6:	fb09 1102 	mla	r1, r9, r2, r1
 800bdaa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdae:	4567      	cmp	r7, ip
 800bdb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdb4:	d8e6      	bhi.n	800bd84 <__multiply+0x10c>
 800bdb6:	9a01      	ldr	r2, [sp, #4]
 800bdb8:	50a9      	str	r1, [r5, r2]
 800bdba:	3504      	adds	r5, #4
 800bdbc:	e79a      	b.n	800bcf4 <__multiply+0x7c>
 800bdbe:	3e01      	subs	r6, #1
 800bdc0:	e79c      	b.n	800bcfc <__multiply+0x84>
 800bdc2:	bf00      	nop
 800bdc4:	0800d21b 	.word	0x0800d21b
 800bdc8:	0800d28c 	.word	0x0800d28c

0800bdcc <__pow5mult>:
 800bdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdd0:	4615      	mov	r5, r2
 800bdd2:	f012 0203 	ands.w	r2, r2, #3
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	d007      	beq.n	800bdec <__pow5mult+0x20>
 800bddc:	4c25      	ldr	r4, [pc, #148]	; (800be74 <__pow5mult+0xa8>)
 800bdde:	3a01      	subs	r2, #1
 800bde0:	2300      	movs	r3, #0
 800bde2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bde6:	f7ff fe9b 	bl	800bb20 <__multadd>
 800bdea:	4607      	mov	r7, r0
 800bdec:	10ad      	asrs	r5, r5, #2
 800bdee:	d03d      	beq.n	800be6c <__pow5mult+0xa0>
 800bdf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdf2:	b97c      	cbnz	r4, 800be14 <__pow5mult+0x48>
 800bdf4:	2010      	movs	r0, #16
 800bdf6:	f7ff fe1b 	bl	800ba30 <malloc>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	6270      	str	r0, [r6, #36]	; 0x24
 800bdfe:	b928      	cbnz	r0, 800be0c <__pow5mult+0x40>
 800be00:	4b1d      	ldr	r3, [pc, #116]	; (800be78 <__pow5mult+0xac>)
 800be02:	481e      	ldr	r0, [pc, #120]	; (800be7c <__pow5mult+0xb0>)
 800be04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be08:	f000 fec6 	bl	800cb98 <__assert_func>
 800be0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be10:	6004      	str	r4, [r0, #0]
 800be12:	60c4      	str	r4, [r0, #12]
 800be14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be1c:	b94c      	cbnz	r4, 800be32 <__pow5mult+0x66>
 800be1e:	f240 2171 	movw	r1, #625	; 0x271
 800be22:	4630      	mov	r0, r6
 800be24:	f7ff ff12 	bl	800bc4c <__i2b>
 800be28:	2300      	movs	r3, #0
 800be2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800be2e:	4604      	mov	r4, r0
 800be30:	6003      	str	r3, [r0, #0]
 800be32:	f04f 0900 	mov.w	r9, #0
 800be36:	07eb      	lsls	r3, r5, #31
 800be38:	d50a      	bpl.n	800be50 <__pow5mult+0x84>
 800be3a:	4639      	mov	r1, r7
 800be3c:	4622      	mov	r2, r4
 800be3e:	4630      	mov	r0, r6
 800be40:	f7ff ff1a 	bl	800bc78 <__multiply>
 800be44:	4639      	mov	r1, r7
 800be46:	4680      	mov	r8, r0
 800be48:	4630      	mov	r0, r6
 800be4a:	f7ff fe47 	bl	800badc <_Bfree>
 800be4e:	4647      	mov	r7, r8
 800be50:	106d      	asrs	r5, r5, #1
 800be52:	d00b      	beq.n	800be6c <__pow5mult+0xa0>
 800be54:	6820      	ldr	r0, [r4, #0]
 800be56:	b938      	cbnz	r0, 800be68 <__pow5mult+0x9c>
 800be58:	4622      	mov	r2, r4
 800be5a:	4621      	mov	r1, r4
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7ff ff0b 	bl	800bc78 <__multiply>
 800be62:	6020      	str	r0, [r4, #0]
 800be64:	f8c0 9000 	str.w	r9, [r0]
 800be68:	4604      	mov	r4, r0
 800be6a:	e7e4      	b.n	800be36 <__pow5mult+0x6a>
 800be6c:	4638      	mov	r0, r7
 800be6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be72:	bf00      	nop
 800be74:	0800d3d8 	.word	0x0800d3d8
 800be78:	0800d1a9 	.word	0x0800d1a9
 800be7c:	0800d28c 	.word	0x0800d28c

0800be80 <__lshift>:
 800be80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be84:	460c      	mov	r4, r1
 800be86:	6849      	ldr	r1, [r1, #4]
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be8e:	68a3      	ldr	r3, [r4, #8]
 800be90:	4607      	mov	r7, r0
 800be92:	4691      	mov	r9, r2
 800be94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be98:	f108 0601 	add.w	r6, r8, #1
 800be9c:	42b3      	cmp	r3, r6
 800be9e:	db0b      	blt.n	800beb8 <__lshift+0x38>
 800bea0:	4638      	mov	r0, r7
 800bea2:	f7ff fddb 	bl	800ba5c <_Balloc>
 800bea6:	4605      	mov	r5, r0
 800bea8:	b948      	cbnz	r0, 800bebe <__lshift+0x3e>
 800beaa:	4602      	mov	r2, r0
 800beac:	4b2a      	ldr	r3, [pc, #168]	; (800bf58 <__lshift+0xd8>)
 800beae:	482b      	ldr	r0, [pc, #172]	; (800bf5c <__lshift+0xdc>)
 800beb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800beb4:	f000 fe70 	bl	800cb98 <__assert_func>
 800beb8:	3101      	adds	r1, #1
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	e7ee      	b.n	800be9c <__lshift+0x1c>
 800bebe:	2300      	movs	r3, #0
 800bec0:	f100 0114 	add.w	r1, r0, #20
 800bec4:	f100 0210 	add.w	r2, r0, #16
 800bec8:	4618      	mov	r0, r3
 800beca:	4553      	cmp	r3, sl
 800becc:	db37      	blt.n	800bf3e <__lshift+0xbe>
 800bece:	6920      	ldr	r0, [r4, #16]
 800bed0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bed4:	f104 0314 	add.w	r3, r4, #20
 800bed8:	f019 091f 	ands.w	r9, r9, #31
 800bedc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bee0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bee4:	d02f      	beq.n	800bf46 <__lshift+0xc6>
 800bee6:	f1c9 0e20 	rsb	lr, r9, #32
 800beea:	468a      	mov	sl, r1
 800beec:	f04f 0c00 	mov.w	ip, #0
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	fa02 f209 	lsl.w	r2, r2, r9
 800bef6:	ea42 020c 	orr.w	r2, r2, ip
 800befa:	f84a 2b04 	str.w	r2, [sl], #4
 800befe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf02:	4298      	cmp	r0, r3
 800bf04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf08:	d8f2      	bhi.n	800bef0 <__lshift+0x70>
 800bf0a:	1b03      	subs	r3, r0, r4
 800bf0c:	3b15      	subs	r3, #21
 800bf0e:	f023 0303 	bic.w	r3, r3, #3
 800bf12:	3304      	adds	r3, #4
 800bf14:	f104 0215 	add.w	r2, r4, #21
 800bf18:	4290      	cmp	r0, r2
 800bf1a:	bf38      	it	cc
 800bf1c:	2304      	movcc	r3, #4
 800bf1e:	f841 c003 	str.w	ip, [r1, r3]
 800bf22:	f1bc 0f00 	cmp.w	ip, #0
 800bf26:	d001      	beq.n	800bf2c <__lshift+0xac>
 800bf28:	f108 0602 	add.w	r6, r8, #2
 800bf2c:	3e01      	subs	r6, #1
 800bf2e:	4638      	mov	r0, r7
 800bf30:	612e      	str	r6, [r5, #16]
 800bf32:	4621      	mov	r1, r4
 800bf34:	f7ff fdd2 	bl	800badc <_Bfree>
 800bf38:	4628      	mov	r0, r5
 800bf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf42:	3301      	adds	r3, #1
 800bf44:	e7c1      	b.n	800beca <__lshift+0x4a>
 800bf46:	3904      	subs	r1, #4
 800bf48:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf4c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf50:	4298      	cmp	r0, r3
 800bf52:	d8f9      	bhi.n	800bf48 <__lshift+0xc8>
 800bf54:	e7ea      	b.n	800bf2c <__lshift+0xac>
 800bf56:	bf00      	nop
 800bf58:	0800d21b 	.word	0x0800d21b
 800bf5c:	0800d28c 	.word	0x0800d28c

0800bf60 <__mcmp>:
 800bf60:	b530      	push	{r4, r5, lr}
 800bf62:	6902      	ldr	r2, [r0, #16]
 800bf64:	690c      	ldr	r4, [r1, #16]
 800bf66:	1b12      	subs	r2, r2, r4
 800bf68:	d10e      	bne.n	800bf88 <__mcmp+0x28>
 800bf6a:	f100 0314 	add.w	r3, r0, #20
 800bf6e:	3114      	adds	r1, #20
 800bf70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf80:	42a5      	cmp	r5, r4
 800bf82:	d003      	beq.n	800bf8c <__mcmp+0x2c>
 800bf84:	d305      	bcc.n	800bf92 <__mcmp+0x32>
 800bf86:	2201      	movs	r2, #1
 800bf88:	4610      	mov	r0, r2
 800bf8a:	bd30      	pop	{r4, r5, pc}
 800bf8c:	4283      	cmp	r3, r0
 800bf8e:	d3f3      	bcc.n	800bf78 <__mcmp+0x18>
 800bf90:	e7fa      	b.n	800bf88 <__mcmp+0x28>
 800bf92:	f04f 32ff 	mov.w	r2, #4294967295
 800bf96:	e7f7      	b.n	800bf88 <__mcmp+0x28>

0800bf98 <__mdiff>:
 800bf98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	4690      	mov	r8, r2
 800bfa6:	f7ff ffdb 	bl	800bf60 <__mcmp>
 800bfaa:	1e05      	subs	r5, r0, #0
 800bfac:	d110      	bne.n	800bfd0 <__mdiff+0x38>
 800bfae:	4629      	mov	r1, r5
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f7ff fd53 	bl	800ba5c <_Balloc>
 800bfb6:	b930      	cbnz	r0, 800bfc6 <__mdiff+0x2e>
 800bfb8:	4b3a      	ldr	r3, [pc, #232]	; (800c0a4 <__mdiff+0x10c>)
 800bfba:	4602      	mov	r2, r0
 800bfbc:	f240 2132 	movw	r1, #562	; 0x232
 800bfc0:	4839      	ldr	r0, [pc, #228]	; (800c0a8 <__mdiff+0x110>)
 800bfc2:	f000 fde9 	bl	800cb98 <__assert_func>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd0:	bfa4      	itt	ge
 800bfd2:	4643      	movge	r3, r8
 800bfd4:	46a0      	movge	r8, r4
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bfdc:	bfa6      	itte	ge
 800bfde:	461c      	movge	r4, r3
 800bfe0:	2500      	movge	r5, #0
 800bfe2:	2501      	movlt	r5, #1
 800bfe4:	f7ff fd3a 	bl	800ba5c <_Balloc>
 800bfe8:	b920      	cbnz	r0, 800bff4 <__mdiff+0x5c>
 800bfea:	4b2e      	ldr	r3, [pc, #184]	; (800c0a4 <__mdiff+0x10c>)
 800bfec:	4602      	mov	r2, r0
 800bfee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bff2:	e7e5      	b.n	800bfc0 <__mdiff+0x28>
 800bff4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bff8:	6926      	ldr	r6, [r4, #16]
 800bffa:	60c5      	str	r5, [r0, #12]
 800bffc:	f104 0914 	add.w	r9, r4, #20
 800c000:	f108 0514 	add.w	r5, r8, #20
 800c004:	f100 0e14 	add.w	lr, r0, #20
 800c008:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c00c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c010:	f108 0210 	add.w	r2, r8, #16
 800c014:	46f2      	mov	sl, lr
 800c016:	2100      	movs	r1, #0
 800c018:	f859 3b04 	ldr.w	r3, [r9], #4
 800c01c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c020:	fa1f f883 	uxth.w	r8, r3
 800c024:	fa11 f18b 	uxtah	r1, r1, fp
 800c028:	0c1b      	lsrs	r3, r3, #16
 800c02a:	eba1 0808 	sub.w	r8, r1, r8
 800c02e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c032:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c036:	fa1f f888 	uxth.w	r8, r8
 800c03a:	1419      	asrs	r1, r3, #16
 800c03c:	454e      	cmp	r6, r9
 800c03e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c042:	f84a 3b04 	str.w	r3, [sl], #4
 800c046:	d8e7      	bhi.n	800c018 <__mdiff+0x80>
 800c048:	1b33      	subs	r3, r6, r4
 800c04a:	3b15      	subs	r3, #21
 800c04c:	f023 0303 	bic.w	r3, r3, #3
 800c050:	3304      	adds	r3, #4
 800c052:	3415      	adds	r4, #21
 800c054:	42a6      	cmp	r6, r4
 800c056:	bf38      	it	cc
 800c058:	2304      	movcc	r3, #4
 800c05a:	441d      	add	r5, r3
 800c05c:	4473      	add	r3, lr
 800c05e:	469e      	mov	lr, r3
 800c060:	462e      	mov	r6, r5
 800c062:	4566      	cmp	r6, ip
 800c064:	d30e      	bcc.n	800c084 <__mdiff+0xec>
 800c066:	f10c 0203 	add.w	r2, ip, #3
 800c06a:	1b52      	subs	r2, r2, r5
 800c06c:	f022 0203 	bic.w	r2, r2, #3
 800c070:	3d03      	subs	r5, #3
 800c072:	45ac      	cmp	ip, r5
 800c074:	bf38      	it	cc
 800c076:	2200      	movcc	r2, #0
 800c078:	441a      	add	r2, r3
 800c07a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c07e:	b17b      	cbz	r3, 800c0a0 <__mdiff+0x108>
 800c080:	6107      	str	r7, [r0, #16]
 800c082:	e7a3      	b.n	800bfcc <__mdiff+0x34>
 800c084:	f856 8b04 	ldr.w	r8, [r6], #4
 800c088:	fa11 f288 	uxtah	r2, r1, r8
 800c08c:	1414      	asrs	r4, r2, #16
 800c08e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c092:	b292      	uxth	r2, r2
 800c094:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c098:	f84e 2b04 	str.w	r2, [lr], #4
 800c09c:	1421      	asrs	r1, r4, #16
 800c09e:	e7e0      	b.n	800c062 <__mdiff+0xca>
 800c0a0:	3f01      	subs	r7, #1
 800c0a2:	e7ea      	b.n	800c07a <__mdiff+0xe2>
 800c0a4:	0800d21b 	.word	0x0800d21b
 800c0a8:	0800d28c 	.word	0x0800d28c

0800c0ac <__d2b>:
 800c0ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0b0:	4689      	mov	r9, r1
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	ec57 6b10 	vmov	r6, r7, d0
 800c0b8:	4690      	mov	r8, r2
 800c0ba:	f7ff fccf 	bl	800ba5c <_Balloc>
 800c0be:	4604      	mov	r4, r0
 800c0c0:	b930      	cbnz	r0, 800c0d0 <__d2b+0x24>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	4b25      	ldr	r3, [pc, #148]	; (800c15c <__d2b+0xb0>)
 800c0c6:	4826      	ldr	r0, [pc, #152]	; (800c160 <__d2b+0xb4>)
 800c0c8:	f240 310a 	movw	r1, #778	; 0x30a
 800c0cc:	f000 fd64 	bl	800cb98 <__assert_func>
 800c0d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0d8:	bb35      	cbnz	r5, 800c128 <__d2b+0x7c>
 800c0da:	2e00      	cmp	r6, #0
 800c0dc:	9301      	str	r3, [sp, #4]
 800c0de:	d028      	beq.n	800c132 <__d2b+0x86>
 800c0e0:	4668      	mov	r0, sp
 800c0e2:	9600      	str	r6, [sp, #0]
 800c0e4:	f7ff fd82 	bl	800bbec <__lo0bits>
 800c0e8:	9900      	ldr	r1, [sp, #0]
 800c0ea:	b300      	cbz	r0, 800c12e <__d2b+0x82>
 800c0ec:	9a01      	ldr	r2, [sp, #4]
 800c0ee:	f1c0 0320 	rsb	r3, r0, #32
 800c0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	40c2      	lsrs	r2, r0
 800c0fa:	6163      	str	r3, [r4, #20]
 800c0fc:	9201      	str	r2, [sp, #4]
 800c0fe:	9b01      	ldr	r3, [sp, #4]
 800c100:	61a3      	str	r3, [r4, #24]
 800c102:	2b00      	cmp	r3, #0
 800c104:	bf14      	ite	ne
 800c106:	2202      	movne	r2, #2
 800c108:	2201      	moveq	r2, #1
 800c10a:	6122      	str	r2, [r4, #16]
 800c10c:	b1d5      	cbz	r5, 800c144 <__d2b+0x98>
 800c10e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c112:	4405      	add	r5, r0
 800c114:	f8c9 5000 	str.w	r5, [r9]
 800c118:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c11c:	f8c8 0000 	str.w	r0, [r8]
 800c120:	4620      	mov	r0, r4
 800c122:	b003      	add	sp, #12
 800c124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c12c:	e7d5      	b.n	800c0da <__d2b+0x2e>
 800c12e:	6161      	str	r1, [r4, #20]
 800c130:	e7e5      	b.n	800c0fe <__d2b+0x52>
 800c132:	a801      	add	r0, sp, #4
 800c134:	f7ff fd5a 	bl	800bbec <__lo0bits>
 800c138:	9b01      	ldr	r3, [sp, #4]
 800c13a:	6163      	str	r3, [r4, #20]
 800c13c:	2201      	movs	r2, #1
 800c13e:	6122      	str	r2, [r4, #16]
 800c140:	3020      	adds	r0, #32
 800c142:	e7e3      	b.n	800c10c <__d2b+0x60>
 800c144:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c148:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c14c:	f8c9 0000 	str.w	r0, [r9]
 800c150:	6918      	ldr	r0, [r3, #16]
 800c152:	f7ff fd2b 	bl	800bbac <__hi0bits>
 800c156:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c15a:	e7df      	b.n	800c11c <__d2b+0x70>
 800c15c:	0800d21b 	.word	0x0800d21b
 800c160:	0800d28c 	.word	0x0800d28c

0800c164 <_calloc_r>:
 800c164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c166:	fba1 2402 	umull	r2, r4, r1, r2
 800c16a:	b94c      	cbnz	r4, 800c180 <_calloc_r+0x1c>
 800c16c:	4611      	mov	r1, r2
 800c16e:	9201      	str	r2, [sp, #4]
 800c170:	f000 f87a 	bl	800c268 <_malloc_r>
 800c174:	9a01      	ldr	r2, [sp, #4]
 800c176:	4605      	mov	r5, r0
 800c178:	b930      	cbnz	r0, 800c188 <_calloc_r+0x24>
 800c17a:	4628      	mov	r0, r5
 800c17c:	b003      	add	sp, #12
 800c17e:	bd30      	pop	{r4, r5, pc}
 800c180:	220c      	movs	r2, #12
 800c182:	6002      	str	r2, [r0, #0]
 800c184:	2500      	movs	r5, #0
 800c186:	e7f8      	b.n	800c17a <_calloc_r+0x16>
 800c188:	4621      	mov	r1, r4
 800c18a:	f7fe f817 	bl	800a1bc <memset>
 800c18e:	e7f4      	b.n	800c17a <_calloc_r+0x16>

0800c190 <_free_r>:
 800c190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c192:	2900      	cmp	r1, #0
 800c194:	d044      	beq.n	800c220 <_free_r+0x90>
 800c196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c19a:	9001      	str	r0, [sp, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f1a1 0404 	sub.w	r4, r1, #4
 800c1a2:	bfb8      	it	lt
 800c1a4:	18e4      	addlt	r4, r4, r3
 800c1a6:	f000 fe9d 	bl	800cee4 <__malloc_lock>
 800c1aa:	4a1e      	ldr	r2, [pc, #120]	; (800c224 <_free_r+0x94>)
 800c1ac:	9801      	ldr	r0, [sp, #4]
 800c1ae:	6813      	ldr	r3, [r2, #0]
 800c1b0:	b933      	cbnz	r3, 800c1c0 <_free_r+0x30>
 800c1b2:	6063      	str	r3, [r4, #4]
 800c1b4:	6014      	str	r4, [r2, #0]
 800c1b6:	b003      	add	sp, #12
 800c1b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1bc:	f000 be98 	b.w	800cef0 <__malloc_unlock>
 800c1c0:	42a3      	cmp	r3, r4
 800c1c2:	d908      	bls.n	800c1d6 <_free_r+0x46>
 800c1c4:	6825      	ldr	r5, [r4, #0]
 800c1c6:	1961      	adds	r1, r4, r5
 800c1c8:	428b      	cmp	r3, r1
 800c1ca:	bf01      	itttt	eq
 800c1cc:	6819      	ldreq	r1, [r3, #0]
 800c1ce:	685b      	ldreq	r3, [r3, #4]
 800c1d0:	1949      	addeq	r1, r1, r5
 800c1d2:	6021      	streq	r1, [r4, #0]
 800c1d4:	e7ed      	b.n	800c1b2 <_free_r+0x22>
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	b10b      	cbz	r3, 800c1e0 <_free_r+0x50>
 800c1dc:	42a3      	cmp	r3, r4
 800c1de:	d9fa      	bls.n	800c1d6 <_free_r+0x46>
 800c1e0:	6811      	ldr	r1, [r2, #0]
 800c1e2:	1855      	adds	r5, r2, r1
 800c1e4:	42a5      	cmp	r5, r4
 800c1e6:	d10b      	bne.n	800c200 <_free_r+0x70>
 800c1e8:	6824      	ldr	r4, [r4, #0]
 800c1ea:	4421      	add	r1, r4
 800c1ec:	1854      	adds	r4, r2, r1
 800c1ee:	42a3      	cmp	r3, r4
 800c1f0:	6011      	str	r1, [r2, #0]
 800c1f2:	d1e0      	bne.n	800c1b6 <_free_r+0x26>
 800c1f4:	681c      	ldr	r4, [r3, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	6053      	str	r3, [r2, #4]
 800c1fa:	4421      	add	r1, r4
 800c1fc:	6011      	str	r1, [r2, #0]
 800c1fe:	e7da      	b.n	800c1b6 <_free_r+0x26>
 800c200:	d902      	bls.n	800c208 <_free_r+0x78>
 800c202:	230c      	movs	r3, #12
 800c204:	6003      	str	r3, [r0, #0]
 800c206:	e7d6      	b.n	800c1b6 <_free_r+0x26>
 800c208:	6825      	ldr	r5, [r4, #0]
 800c20a:	1961      	adds	r1, r4, r5
 800c20c:	428b      	cmp	r3, r1
 800c20e:	bf04      	itt	eq
 800c210:	6819      	ldreq	r1, [r3, #0]
 800c212:	685b      	ldreq	r3, [r3, #4]
 800c214:	6063      	str	r3, [r4, #4]
 800c216:	bf04      	itt	eq
 800c218:	1949      	addeq	r1, r1, r5
 800c21a:	6021      	streq	r1, [r4, #0]
 800c21c:	6054      	str	r4, [r2, #4]
 800c21e:	e7ca      	b.n	800c1b6 <_free_r+0x26>
 800c220:	b003      	add	sp, #12
 800c222:	bd30      	pop	{r4, r5, pc}
 800c224:	20001ff4 	.word	0x20001ff4

0800c228 <sbrk_aligned>:
 800c228:	b570      	push	{r4, r5, r6, lr}
 800c22a:	4e0e      	ldr	r6, [pc, #56]	; (800c264 <sbrk_aligned+0x3c>)
 800c22c:	460c      	mov	r4, r1
 800c22e:	6831      	ldr	r1, [r6, #0]
 800c230:	4605      	mov	r5, r0
 800c232:	b911      	cbnz	r1, 800c23a <sbrk_aligned+0x12>
 800c234:	f000 fb8a 	bl	800c94c <_sbrk_r>
 800c238:	6030      	str	r0, [r6, #0]
 800c23a:	4621      	mov	r1, r4
 800c23c:	4628      	mov	r0, r5
 800c23e:	f000 fb85 	bl	800c94c <_sbrk_r>
 800c242:	1c43      	adds	r3, r0, #1
 800c244:	d00a      	beq.n	800c25c <sbrk_aligned+0x34>
 800c246:	1cc4      	adds	r4, r0, #3
 800c248:	f024 0403 	bic.w	r4, r4, #3
 800c24c:	42a0      	cmp	r0, r4
 800c24e:	d007      	beq.n	800c260 <sbrk_aligned+0x38>
 800c250:	1a21      	subs	r1, r4, r0
 800c252:	4628      	mov	r0, r5
 800c254:	f000 fb7a 	bl	800c94c <_sbrk_r>
 800c258:	3001      	adds	r0, #1
 800c25a:	d101      	bne.n	800c260 <sbrk_aligned+0x38>
 800c25c:	f04f 34ff 	mov.w	r4, #4294967295
 800c260:	4620      	mov	r0, r4
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	20001ff8 	.word	0x20001ff8

0800c268 <_malloc_r>:
 800c268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c26c:	1ccd      	adds	r5, r1, #3
 800c26e:	f025 0503 	bic.w	r5, r5, #3
 800c272:	3508      	adds	r5, #8
 800c274:	2d0c      	cmp	r5, #12
 800c276:	bf38      	it	cc
 800c278:	250c      	movcc	r5, #12
 800c27a:	2d00      	cmp	r5, #0
 800c27c:	4607      	mov	r7, r0
 800c27e:	db01      	blt.n	800c284 <_malloc_r+0x1c>
 800c280:	42a9      	cmp	r1, r5
 800c282:	d905      	bls.n	800c290 <_malloc_r+0x28>
 800c284:	230c      	movs	r3, #12
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	2600      	movs	r6, #0
 800c28a:	4630      	mov	r0, r6
 800c28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c290:	4e2e      	ldr	r6, [pc, #184]	; (800c34c <_malloc_r+0xe4>)
 800c292:	f000 fe27 	bl	800cee4 <__malloc_lock>
 800c296:	6833      	ldr	r3, [r6, #0]
 800c298:	461c      	mov	r4, r3
 800c29a:	bb34      	cbnz	r4, 800c2ea <_malloc_r+0x82>
 800c29c:	4629      	mov	r1, r5
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ffc2 	bl	800c228 <sbrk_aligned>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	d14d      	bne.n	800c346 <_malloc_r+0xde>
 800c2aa:	6834      	ldr	r4, [r6, #0]
 800c2ac:	4626      	mov	r6, r4
 800c2ae:	2e00      	cmp	r6, #0
 800c2b0:	d140      	bne.n	800c334 <_malloc_r+0xcc>
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	4631      	mov	r1, r6
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	eb04 0803 	add.w	r8, r4, r3
 800c2bc:	f000 fb46 	bl	800c94c <_sbrk_r>
 800c2c0:	4580      	cmp	r8, r0
 800c2c2:	d13a      	bne.n	800c33a <_malloc_r+0xd2>
 800c2c4:	6821      	ldr	r1, [r4, #0]
 800c2c6:	3503      	adds	r5, #3
 800c2c8:	1a6d      	subs	r5, r5, r1
 800c2ca:	f025 0503 	bic.w	r5, r5, #3
 800c2ce:	3508      	adds	r5, #8
 800c2d0:	2d0c      	cmp	r5, #12
 800c2d2:	bf38      	it	cc
 800c2d4:	250c      	movcc	r5, #12
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f7ff ffa5 	bl	800c228 <sbrk_aligned>
 800c2de:	3001      	adds	r0, #1
 800c2e0:	d02b      	beq.n	800c33a <_malloc_r+0xd2>
 800c2e2:	6823      	ldr	r3, [r4, #0]
 800c2e4:	442b      	add	r3, r5
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	e00e      	b.n	800c308 <_malloc_r+0xa0>
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	1b52      	subs	r2, r2, r5
 800c2ee:	d41e      	bmi.n	800c32e <_malloc_r+0xc6>
 800c2f0:	2a0b      	cmp	r2, #11
 800c2f2:	d916      	bls.n	800c322 <_malloc_r+0xba>
 800c2f4:	1961      	adds	r1, r4, r5
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	6025      	str	r5, [r4, #0]
 800c2fa:	bf18      	it	ne
 800c2fc:	6059      	strne	r1, [r3, #4]
 800c2fe:	6863      	ldr	r3, [r4, #4]
 800c300:	bf08      	it	eq
 800c302:	6031      	streq	r1, [r6, #0]
 800c304:	5162      	str	r2, [r4, r5]
 800c306:	604b      	str	r3, [r1, #4]
 800c308:	4638      	mov	r0, r7
 800c30a:	f104 060b 	add.w	r6, r4, #11
 800c30e:	f000 fdef 	bl	800cef0 <__malloc_unlock>
 800c312:	f026 0607 	bic.w	r6, r6, #7
 800c316:	1d23      	adds	r3, r4, #4
 800c318:	1af2      	subs	r2, r6, r3
 800c31a:	d0b6      	beq.n	800c28a <_malloc_r+0x22>
 800c31c:	1b9b      	subs	r3, r3, r6
 800c31e:	50a3      	str	r3, [r4, r2]
 800c320:	e7b3      	b.n	800c28a <_malloc_r+0x22>
 800c322:	6862      	ldr	r2, [r4, #4]
 800c324:	42a3      	cmp	r3, r4
 800c326:	bf0c      	ite	eq
 800c328:	6032      	streq	r2, [r6, #0]
 800c32a:	605a      	strne	r2, [r3, #4]
 800c32c:	e7ec      	b.n	800c308 <_malloc_r+0xa0>
 800c32e:	4623      	mov	r3, r4
 800c330:	6864      	ldr	r4, [r4, #4]
 800c332:	e7b2      	b.n	800c29a <_malloc_r+0x32>
 800c334:	4634      	mov	r4, r6
 800c336:	6876      	ldr	r6, [r6, #4]
 800c338:	e7b9      	b.n	800c2ae <_malloc_r+0x46>
 800c33a:	230c      	movs	r3, #12
 800c33c:	603b      	str	r3, [r7, #0]
 800c33e:	4638      	mov	r0, r7
 800c340:	f000 fdd6 	bl	800cef0 <__malloc_unlock>
 800c344:	e7a1      	b.n	800c28a <_malloc_r+0x22>
 800c346:	6025      	str	r5, [r4, #0]
 800c348:	e7de      	b.n	800c308 <_malloc_r+0xa0>
 800c34a:	bf00      	nop
 800c34c:	20001ff4 	.word	0x20001ff4

0800c350 <__ssputs_r>:
 800c350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c354:	688e      	ldr	r6, [r1, #8]
 800c356:	429e      	cmp	r6, r3
 800c358:	4682      	mov	sl, r0
 800c35a:	460c      	mov	r4, r1
 800c35c:	4690      	mov	r8, r2
 800c35e:	461f      	mov	r7, r3
 800c360:	d838      	bhi.n	800c3d4 <__ssputs_r+0x84>
 800c362:	898a      	ldrh	r2, [r1, #12]
 800c364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c368:	d032      	beq.n	800c3d0 <__ssputs_r+0x80>
 800c36a:	6825      	ldr	r5, [r4, #0]
 800c36c:	6909      	ldr	r1, [r1, #16]
 800c36e:	eba5 0901 	sub.w	r9, r5, r1
 800c372:	6965      	ldr	r5, [r4, #20]
 800c374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c37c:	3301      	adds	r3, #1
 800c37e:	444b      	add	r3, r9
 800c380:	106d      	asrs	r5, r5, #1
 800c382:	429d      	cmp	r5, r3
 800c384:	bf38      	it	cc
 800c386:	461d      	movcc	r5, r3
 800c388:	0553      	lsls	r3, r2, #21
 800c38a:	d531      	bpl.n	800c3f0 <__ssputs_r+0xa0>
 800c38c:	4629      	mov	r1, r5
 800c38e:	f7ff ff6b 	bl	800c268 <_malloc_r>
 800c392:	4606      	mov	r6, r0
 800c394:	b950      	cbnz	r0, 800c3ac <__ssputs_r+0x5c>
 800c396:	230c      	movs	r3, #12
 800c398:	f8ca 3000 	str.w	r3, [sl]
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ac:	6921      	ldr	r1, [r4, #16]
 800c3ae:	464a      	mov	r2, r9
 800c3b0:	f7ff fb46 	bl	800ba40 <memcpy>
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	6126      	str	r6, [r4, #16]
 800c3c2:	6165      	str	r5, [r4, #20]
 800c3c4:	444e      	add	r6, r9
 800c3c6:	eba5 0509 	sub.w	r5, r5, r9
 800c3ca:	6026      	str	r6, [r4, #0]
 800c3cc:	60a5      	str	r5, [r4, #8]
 800c3ce:	463e      	mov	r6, r7
 800c3d0:	42be      	cmp	r6, r7
 800c3d2:	d900      	bls.n	800c3d6 <__ssputs_r+0x86>
 800c3d4:	463e      	mov	r6, r7
 800c3d6:	6820      	ldr	r0, [r4, #0]
 800c3d8:	4632      	mov	r2, r6
 800c3da:	4641      	mov	r1, r8
 800c3dc:	f000 fd68 	bl	800ceb0 <memmove>
 800c3e0:	68a3      	ldr	r3, [r4, #8]
 800c3e2:	1b9b      	subs	r3, r3, r6
 800c3e4:	60a3      	str	r3, [r4, #8]
 800c3e6:	6823      	ldr	r3, [r4, #0]
 800c3e8:	4433      	add	r3, r6
 800c3ea:	6023      	str	r3, [r4, #0]
 800c3ec:	2000      	movs	r0, #0
 800c3ee:	e7db      	b.n	800c3a8 <__ssputs_r+0x58>
 800c3f0:	462a      	mov	r2, r5
 800c3f2:	f000 fd83 	bl	800cefc <_realloc_r>
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d1e1      	bne.n	800c3c0 <__ssputs_r+0x70>
 800c3fc:	6921      	ldr	r1, [r4, #16]
 800c3fe:	4650      	mov	r0, sl
 800c400:	f7ff fec6 	bl	800c190 <_free_r>
 800c404:	e7c7      	b.n	800c396 <__ssputs_r+0x46>
	...

0800c408 <_svfiprintf_r>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	4698      	mov	r8, r3
 800c40e:	898b      	ldrh	r3, [r1, #12]
 800c410:	061b      	lsls	r3, r3, #24
 800c412:	b09d      	sub	sp, #116	; 0x74
 800c414:	4607      	mov	r7, r0
 800c416:	460d      	mov	r5, r1
 800c418:	4614      	mov	r4, r2
 800c41a:	d50e      	bpl.n	800c43a <_svfiprintf_r+0x32>
 800c41c:	690b      	ldr	r3, [r1, #16]
 800c41e:	b963      	cbnz	r3, 800c43a <_svfiprintf_r+0x32>
 800c420:	2140      	movs	r1, #64	; 0x40
 800c422:	f7ff ff21 	bl	800c268 <_malloc_r>
 800c426:	6028      	str	r0, [r5, #0]
 800c428:	6128      	str	r0, [r5, #16]
 800c42a:	b920      	cbnz	r0, 800c436 <_svfiprintf_r+0x2e>
 800c42c:	230c      	movs	r3, #12
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	f04f 30ff 	mov.w	r0, #4294967295
 800c434:	e0d1      	b.n	800c5da <_svfiprintf_r+0x1d2>
 800c436:	2340      	movs	r3, #64	; 0x40
 800c438:	616b      	str	r3, [r5, #20]
 800c43a:	2300      	movs	r3, #0
 800c43c:	9309      	str	r3, [sp, #36]	; 0x24
 800c43e:	2320      	movs	r3, #32
 800c440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c444:	f8cd 800c 	str.w	r8, [sp, #12]
 800c448:	2330      	movs	r3, #48	; 0x30
 800c44a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c5f4 <_svfiprintf_r+0x1ec>
 800c44e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c452:	f04f 0901 	mov.w	r9, #1
 800c456:	4623      	mov	r3, r4
 800c458:	469a      	mov	sl, r3
 800c45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c45e:	b10a      	cbz	r2, 800c464 <_svfiprintf_r+0x5c>
 800c460:	2a25      	cmp	r2, #37	; 0x25
 800c462:	d1f9      	bne.n	800c458 <_svfiprintf_r+0x50>
 800c464:	ebba 0b04 	subs.w	fp, sl, r4
 800c468:	d00b      	beq.n	800c482 <_svfiprintf_r+0x7a>
 800c46a:	465b      	mov	r3, fp
 800c46c:	4622      	mov	r2, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	4638      	mov	r0, r7
 800c472:	f7ff ff6d 	bl	800c350 <__ssputs_r>
 800c476:	3001      	adds	r0, #1
 800c478:	f000 80aa 	beq.w	800c5d0 <_svfiprintf_r+0x1c8>
 800c47c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c47e:	445a      	add	r2, fp
 800c480:	9209      	str	r2, [sp, #36]	; 0x24
 800c482:	f89a 3000 	ldrb.w	r3, [sl]
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 80a2 	beq.w	800c5d0 <_svfiprintf_r+0x1c8>
 800c48c:	2300      	movs	r3, #0
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295
 800c492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c496:	f10a 0a01 	add.w	sl, sl, #1
 800c49a:	9304      	str	r3, [sp, #16]
 800c49c:	9307      	str	r3, [sp, #28]
 800c49e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4a4:	4654      	mov	r4, sl
 800c4a6:	2205      	movs	r2, #5
 800c4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ac:	4851      	ldr	r0, [pc, #324]	; (800c5f4 <_svfiprintf_r+0x1ec>)
 800c4ae:	f7f3 fe9f 	bl	80001f0 <memchr>
 800c4b2:	9a04      	ldr	r2, [sp, #16]
 800c4b4:	b9d8      	cbnz	r0, 800c4ee <_svfiprintf_r+0xe6>
 800c4b6:	06d0      	lsls	r0, r2, #27
 800c4b8:	bf44      	itt	mi
 800c4ba:	2320      	movmi	r3, #32
 800c4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4c0:	0711      	lsls	r1, r2, #28
 800c4c2:	bf44      	itt	mi
 800c4c4:	232b      	movmi	r3, #43	; 0x2b
 800c4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c4d0:	d015      	beq.n	800c4fe <_svfiprintf_r+0xf6>
 800c4d2:	9a07      	ldr	r2, [sp, #28]
 800c4d4:	4654      	mov	r4, sl
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	f04f 0c0a 	mov.w	ip, #10
 800c4dc:	4621      	mov	r1, r4
 800c4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4e2:	3b30      	subs	r3, #48	; 0x30
 800c4e4:	2b09      	cmp	r3, #9
 800c4e6:	d94e      	bls.n	800c586 <_svfiprintf_r+0x17e>
 800c4e8:	b1b0      	cbz	r0, 800c518 <_svfiprintf_r+0x110>
 800c4ea:	9207      	str	r2, [sp, #28]
 800c4ec:	e014      	b.n	800c518 <_svfiprintf_r+0x110>
 800c4ee:	eba0 0308 	sub.w	r3, r0, r8
 800c4f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	9304      	str	r3, [sp, #16]
 800c4fa:	46a2      	mov	sl, r4
 800c4fc:	e7d2      	b.n	800c4a4 <_svfiprintf_r+0x9c>
 800c4fe:	9b03      	ldr	r3, [sp, #12]
 800c500:	1d19      	adds	r1, r3, #4
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	9103      	str	r1, [sp, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	bfbb      	ittet	lt
 800c50a:	425b      	neglt	r3, r3
 800c50c:	f042 0202 	orrlt.w	r2, r2, #2
 800c510:	9307      	strge	r3, [sp, #28]
 800c512:	9307      	strlt	r3, [sp, #28]
 800c514:	bfb8      	it	lt
 800c516:	9204      	strlt	r2, [sp, #16]
 800c518:	7823      	ldrb	r3, [r4, #0]
 800c51a:	2b2e      	cmp	r3, #46	; 0x2e
 800c51c:	d10c      	bne.n	800c538 <_svfiprintf_r+0x130>
 800c51e:	7863      	ldrb	r3, [r4, #1]
 800c520:	2b2a      	cmp	r3, #42	; 0x2a
 800c522:	d135      	bne.n	800c590 <_svfiprintf_r+0x188>
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	1d1a      	adds	r2, r3, #4
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	9203      	str	r2, [sp, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bfb8      	it	lt
 800c530:	f04f 33ff 	movlt.w	r3, #4294967295
 800c534:	3402      	adds	r4, #2
 800c536:	9305      	str	r3, [sp, #20]
 800c538:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c604 <_svfiprintf_r+0x1fc>
 800c53c:	7821      	ldrb	r1, [r4, #0]
 800c53e:	2203      	movs	r2, #3
 800c540:	4650      	mov	r0, sl
 800c542:	f7f3 fe55 	bl	80001f0 <memchr>
 800c546:	b140      	cbz	r0, 800c55a <_svfiprintf_r+0x152>
 800c548:	2340      	movs	r3, #64	; 0x40
 800c54a:	eba0 000a 	sub.w	r0, r0, sl
 800c54e:	fa03 f000 	lsl.w	r0, r3, r0
 800c552:	9b04      	ldr	r3, [sp, #16]
 800c554:	4303      	orrs	r3, r0
 800c556:	3401      	adds	r4, #1
 800c558:	9304      	str	r3, [sp, #16]
 800c55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c55e:	4826      	ldr	r0, [pc, #152]	; (800c5f8 <_svfiprintf_r+0x1f0>)
 800c560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c564:	2206      	movs	r2, #6
 800c566:	f7f3 fe43 	bl	80001f0 <memchr>
 800c56a:	2800      	cmp	r0, #0
 800c56c:	d038      	beq.n	800c5e0 <_svfiprintf_r+0x1d8>
 800c56e:	4b23      	ldr	r3, [pc, #140]	; (800c5fc <_svfiprintf_r+0x1f4>)
 800c570:	bb1b      	cbnz	r3, 800c5ba <_svfiprintf_r+0x1b2>
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	3307      	adds	r3, #7
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	3308      	adds	r3, #8
 800c57c:	9303      	str	r3, [sp, #12]
 800c57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c580:	4433      	add	r3, r6
 800c582:	9309      	str	r3, [sp, #36]	; 0x24
 800c584:	e767      	b.n	800c456 <_svfiprintf_r+0x4e>
 800c586:	fb0c 3202 	mla	r2, ip, r2, r3
 800c58a:	460c      	mov	r4, r1
 800c58c:	2001      	movs	r0, #1
 800c58e:	e7a5      	b.n	800c4dc <_svfiprintf_r+0xd4>
 800c590:	2300      	movs	r3, #0
 800c592:	3401      	adds	r4, #1
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	4619      	mov	r1, r3
 800c598:	f04f 0c0a 	mov.w	ip, #10
 800c59c:	4620      	mov	r0, r4
 800c59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5a2:	3a30      	subs	r2, #48	; 0x30
 800c5a4:	2a09      	cmp	r2, #9
 800c5a6:	d903      	bls.n	800c5b0 <_svfiprintf_r+0x1a8>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d0c5      	beq.n	800c538 <_svfiprintf_r+0x130>
 800c5ac:	9105      	str	r1, [sp, #20]
 800c5ae:	e7c3      	b.n	800c538 <_svfiprintf_r+0x130>
 800c5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	e7f0      	b.n	800c59c <_svfiprintf_r+0x194>
 800c5ba:	ab03      	add	r3, sp, #12
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	462a      	mov	r2, r5
 800c5c0:	4b0f      	ldr	r3, [pc, #60]	; (800c600 <_svfiprintf_r+0x1f8>)
 800c5c2:	a904      	add	r1, sp, #16
 800c5c4:	4638      	mov	r0, r7
 800c5c6:	f7fd fea1 	bl	800a30c <_printf_float>
 800c5ca:	1c42      	adds	r2, r0, #1
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	d1d6      	bne.n	800c57e <_svfiprintf_r+0x176>
 800c5d0:	89ab      	ldrh	r3, [r5, #12]
 800c5d2:	065b      	lsls	r3, r3, #25
 800c5d4:	f53f af2c 	bmi.w	800c430 <_svfiprintf_r+0x28>
 800c5d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5da:	b01d      	add	sp, #116	; 0x74
 800c5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e0:	ab03      	add	r3, sp, #12
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	462a      	mov	r2, r5
 800c5e6:	4b06      	ldr	r3, [pc, #24]	; (800c600 <_svfiprintf_r+0x1f8>)
 800c5e8:	a904      	add	r1, sp, #16
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	f7fe f932 	bl	800a854 <_printf_i>
 800c5f0:	e7eb      	b.n	800c5ca <_svfiprintf_r+0x1c2>
 800c5f2:	bf00      	nop
 800c5f4:	0800d3e4 	.word	0x0800d3e4
 800c5f8:	0800d3ee 	.word	0x0800d3ee
 800c5fc:	0800a30d 	.word	0x0800a30d
 800c600:	0800c351 	.word	0x0800c351
 800c604:	0800d3ea 	.word	0x0800d3ea

0800c608 <__sfputc_r>:
 800c608:	6893      	ldr	r3, [r2, #8]
 800c60a:	3b01      	subs	r3, #1
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	b410      	push	{r4}
 800c610:	6093      	str	r3, [r2, #8]
 800c612:	da08      	bge.n	800c626 <__sfputc_r+0x1e>
 800c614:	6994      	ldr	r4, [r2, #24]
 800c616:	42a3      	cmp	r3, r4
 800c618:	db01      	blt.n	800c61e <__sfputc_r+0x16>
 800c61a:	290a      	cmp	r1, #10
 800c61c:	d103      	bne.n	800c626 <__sfputc_r+0x1e>
 800c61e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c622:	f000 b9e7 	b.w	800c9f4 <__swbuf_r>
 800c626:	6813      	ldr	r3, [r2, #0]
 800c628:	1c58      	adds	r0, r3, #1
 800c62a:	6010      	str	r0, [r2, #0]
 800c62c:	7019      	strb	r1, [r3, #0]
 800c62e:	4608      	mov	r0, r1
 800c630:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <__sfputs_r>:
 800c636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c638:	4606      	mov	r6, r0
 800c63a:	460f      	mov	r7, r1
 800c63c:	4614      	mov	r4, r2
 800c63e:	18d5      	adds	r5, r2, r3
 800c640:	42ac      	cmp	r4, r5
 800c642:	d101      	bne.n	800c648 <__sfputs_r+0x12>
 800c644:	2000      	movs	r0, #0
 800c646:	e007      	b.n	800c658 <__sfputs_r+0x22>
 800c648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c64c:	463a      	mov	r2, r7
 800c64e:	4630      	mov	r0, r6
 800c650:	f7ff ffda 	bl	800c608 <__sfputc_r>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	d1f3      	bne.n	800c640 <__sfputs_r+0xa>
 800c658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c65c <_vfiprintf_r>:
 800c65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c660:	460d      	mov	r5, r1
 800c662:	b09d      	sub	sp, #116	; 0x74
 800c664:	4614      	mov	r4, r2
 800c666:	4698      	mov	r8, r3
 800c668:	4606      	mov	r6, r0
 800c66a:	b118      	cbz	r0, 800c674 <_vfiprintf_r+0x18>
 800c66c:	6983      	ldr	r3, [r0, #24]
 800c66e:	b90b      	cbnz	r3, 800c674 <_vfiprintf_r+0x18>
 800c670:	f7ff f938 	bl	800b8e4 <__sinit>
 800c674:	4b89      	ldr	r3, [pc, #548]	; (800c89c <_vfiprintf_r+0x240>)
 800c676:	429d      	cmp	r5, r3
 800c678:	d11b      	bne.n	800c6b2 <_vfiprintf_r+0x56>
 800c67a:	6875      	ldr	r5, [r6, #4]
 800c67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c67e:	07d9      	lsls	r1, r3, #31
 800c680:	d405      	bmi.n	800c68e <_vfiprintf_r+0x32>
 800c682:	89ab      	ldrh	r3, [r5, #12]
 800c684:	059a      	lsls	r2, r3, #22
 800c686:	d402      	bmi.n	800c68e <_vfiprintf_r+0x32>
 800c688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c68a:	f7ff f9ce 	bl	800ba2a <__retarget_lock_acquire_recursive>
 800c68e:	89ab      	ldrh	r3, [r5, #12]
 800c690:	071b      	lsls	r3, r3, #28
 800c692:	d501      	bpl.n	800c698 <_vfiprintf_r+0x3c>
 800c694:	692b      	ldr	r3, [r5, #16]
 800c696:	b9eb      	cbnz	r3, 800c6d4 <_vfiprintf_r+0x78>
 800c698:	4629      	mov	r1, r5
 800c69a:	4630      	mov	r0, r6
 800c69c:	f000 fa0e 	bl	800cabc <__swsetup_r>
 800c6a0:	b1c0      	cbz	r0, 800c6d4 <_vfiprintf_r+0x78>
 800c6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6a4:	07dc      	lsls	r4, r3, #31
 800c6a6:	d50e      	bpl.n	800c6c6 <_vfiprintf_r+0x6a>
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ac:	b01d      	add	sp, #116	; 0x74
 800c6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b2:	4b7b      	ldr	r3, [pc, #492]	; (800c8a0 <_vfiprintf_r+0x244>)
 800c6b4:	429d      	cmp	r5, r3
 800c6b6:	d101      	bne.n	800c6bc <_vfiprintf_r+0x60>
 800c6b8:	68b5      	ldr	r5, [r6, #8]
 800c6ba:	e7df      	b.n	800c67c <_vfiprintf_r+0x20>
 800c6bc:	4b79      	ldr	r3, [pc, #484]	; (800c8a4 <_vfiprintf_r+0x248>)
 800c6be:	429d      	cmp	r5, r3
 800c6c0:	bf08      	it	eq
 800c6c2:	68f5      	ldreq	r5, [r6, #12]
 800c6c4:	e7da      	b.n	800c67c <_vfiprintf_r+0x20>
 800c6c6:	89ab      	ldrh	r3, [r5, #12]
 800c6c8:	0598      	lsls	r0, r3, #22
 800c6ca:	d4ed      	bmi.n	800c6a8 <_vfiprintf_r+0x4c>
 800c6cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ce:	f7ff f9ad 	bl	800ba2c <__retarget_lock_release_recursive>
 800c6d2:	e7e9      	b.n	800c6a8 <_vfiprintf_r+0x4c>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d8:	2320      	movs	r3, #32
 800c6da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6e2:	2330      	movs	r3, #48	; 0x30
 800c6e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8a8 <_vfiprintf_r+0x24c>
 800c6e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6ec:	f04f 0901 	mov.w	r9, #1
 800c6f0:	4623      	mov	r3, r4
 800c6f2:	469a      	mov	sl, r3
 800c6f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6f8:	b10a      	cbz	r2, 800c6fe <_vfiprintf_r+0xa2>
 800c6fa:	2a25      	cmp	r2, #37	; 0x25
 800c6fc:	d1f9      	bne.n	800c6f2 <_vfiprintf_r+0x96>
 800c6fe:	ebba 0b04 	subs.w	fp, sl, r4
 800c702:	d00b      	beq.n	800c71c <_vfiprintf_r+0xc0>
 800c704:	465b      	mov	r3, fp
 800c706:	4622      	mov	r2, r4
 800c708:	4629      	mov	r1, r5
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7ff ff93 	bl	800c636 <__sfputs_r>
 800c710:	3001      	adds	r0, #1
 800c712:	f000 80aa 	beq.w	800c86a <_vfiprintf_r+0x20e>
 800c716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c718:	445a      	add	r2, fp
 800c71a:	9209      	str	r2, [sp, #36]	; 0x24
 800c71c:	f89a 3000 	ldrb.w	r3, [sl]
 800c720:	2b00      	cmp	r3, #0
 800c722:	f000 80a2 	beq.w	800c86a <_vfiprintf_r+0x20e>
 800c726:	2300      	movs	r3, #0
 800c728:	f04f 32ff 	mov.w	r2, #4294967295
 800c72c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c730:	f10a 0a01 	add.w	sl, sl, #1
 800c734:	9304      	str	r3, [sp, #16]
 800c736:	9307      	str	r3, [sp, #28]
 800c738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c73c:	931a      	str	r3, [sp, #104]	; 0x68
 800c73e:	4654      	mov	r4, sl
 800c740:	2205      	movs	r2, #5
 800c742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c746:	4858      	ldr	r0, [pc, #352]	; (800c8a8 <_vfiprintf_r+0x24c>)
 800c748:	f7f3 fd52 	bl	80001f0 <memchr>
 800c74c:	9a04      	ldr	r2, [sp, #16]
 800c74e:	b9d8      	cbnz	r0, 800c788 <_vfiprintf_r+0x12c>
 800c750:	06d1      	lsls	r1, r2, #27
 800c752:	bf44      	itt	mi
 800c754:	2320      	movmi	r3, #32
 800c756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c75a:	0713      	lsls	r3, r2, #28
 800c75c:	bf44      	itt	mi
 800c75e:	232b      	movmi	r3, #43	; 0x2b
 800c760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c764:	f89a 3000 	ldrb.w	r3, [sl]
 800c768:	2b2a      	cmp	r3, #42	; 0x2a
 800c76a:	d015      	beq.n	800c798 <_vfiprintf_r+0x13c>
 800c76c:	9a07      	ldr	r2, [sp, #28]
 800c76e:	4654      	mov	r4, sl
 800c770:	2000      	movs	r0, #0
 800c772:	f04f 0c0a 	mov.w	ip, #10
 800c776:	4621      	mov	r1, r4
 800c778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c77c:	3b30      	subs	r3, #48	; 0x30
 800c77e:	2b09      	cmp	r3, #9
 800c780:	d94e      	bls.n	800c820 <_vfiprintf_r+0x1c4>
 800c782:	b1b0      	cbz	r0, 800c7b2 <_vfiprintf_r+0x156>
 800c784:	9207      	str	r2, [sp, #28]
 800c786:	e014      	b.n	800c7b2 <_vfiprintf_r+0x156>
 800c788:	eba0 0308 	sub.w	r3, r0, r8
 800c78c:	fa09 f303 	lsl.w	r3, r9, r3
 800c790:	4313      	orrs	r3, r2
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	46a2      	mov	sl, r4
 800c796:	e7d2      	b.n	800c73e <_vfiprintf_r+0xe2>
 800c798:	9b03      	ldr	r3, [sp, #12]
 800c79a:	1d19      	adds	r1, r3, #4
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	9103      	str	r1, [sp, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	bfbb      	ittet	lt
 800c7a4:	425b      	neglt	r3, r3
 800c7a6:	f042 0202 	orrlt.w	r2, r2, #2
 800c7aa:	9307      	strge	r3, [sp, #28]
 800c7ac:	9307      	strlt	r3, [sp, #28]
 800c7ae:	bfb8      	it	lt
 800c7b0:	9204      	strlt	r2, [sp, #16]
 800c7b2:	7823      	ldrb	r3, [r4, #0]
 800c7b4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7b6:	d10c      	bne.n	800c7d2 <_vfiprintf_r+0x176>
 800c7b8:	7863      	ldrb	r3, [r4, #1]
 800c7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c7bc:	d135      	bne.n	800c82a <_vfiprintf_r+0x1ce>
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	1d1a      	adds	r2, r3, #4
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	9203      	str	r2, [sp, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfb8      	it	lt
 800c7ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7ce:	3402      	adds	r4, #2
 800c7d0:	9305      	str	r3, [sp, #20]
 800c7d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8b8 <_vfiprintf_r+0x25c>
 800c7d6:	7821      	ldrb	r1, [r4, #0]
 800c7d8:	2203      	movs	r2, #3
 800c7da:	4650      	mov	r0, sl
 800c7dc:	f7f3 fd08 	bl	80001f0 <memchr>
 800c7e0:	b140      	cbz	r0, 800c7f4 <_vfiprintf_r+0x198>
 800c7e2:	2340      	movs	r3, #64	; 0x40
 800c7e4:	eba0 000a 	sub.w	r0, r0, sl
 800c7e8:	fa03 f000 	lsl.w	r0, r3, r0
 800c7ec:	9b04      	ldr	r3, [sp, #16]
 800c7ee:	4303      	orrs	r3, r0
 800c7f0:	3401      	adds	r4, #1
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f8:	482c      	ldr	r0, [pc, #176]	; (800c8ac <_vfiprintf_r+0x250>)
 800c7fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7fe:	2206      	movs	r2, #6
 800c800:	f7f3 fcf6 	bl	80001f0 <memchr>
 800c804:	2800      	cmp	r0, #0
 800c806:	d03f      	beq.n	800c888 <_vfiprintf_r+0x22c>
 800c808:	4b29      	ldr	r3, [pc, #164]	; (800c8b0 <_vfiprintf_r+0x254>)
 800c80a:	bb1b      	cbnz	r3, 800c854 <_vfiprintf_r+0x1f8>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	3307      	adds	r3, #7
 800c810:	f023 0307 	bic.w	r3, r3, #7
 800c814:	3308      	adds	r3, #8
 800c816:	9303      	str	r3, [sp, #12]
 800c818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c81a:	443b      	add	r3, r7
 800c81c:	9309      	str	r3, [sp, #36]	; 0x24
 800c81e:	e767      	b.n	800c6f0 <_vfiprintf_r+0x94>
 800c820:	fb0c 3202 	mla	r2, ip, r2, r3
 800c824:	460c      	mov	r4, r1
 800c826:	2001      	movs	r0, #1
 800c828:	e7a5      	b.n	800c776 <_vfiprintf_r+0x11a>
 800c82a:	2300      	movs	r3, #0
 800c82c:	3401      	adds	r4, #1
 800c82e:	9305      	str	r3, [sp, #20]
 800c830:	4619      	mov	r1, r3
 800c832:	f04f 0c0a 	mov.w	ip, #10
 800c836:	4620      	mov	r0, r4
 800c838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c83c:	3a30      	subs	r2, #48	; 0x30
 800c83e:	2a09      	cmp	r2, #9
 800c840:	d903      	bls.n	800c84a <_vfiprintf_r+0x1ee>
 800c842:	2b00      	cmp	r3, #0
 800c844:	d0c5      	beq.n	800c7d2 <_vfiprintf_r+0x176>
 800c846:	9105      	str	r1, [sp, #20]
 800c848:	e7c3      	b.n	800c7d2 <_vfiprintf_r+0x176>
 800c84a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c84e:	4604      	mov	r4, r0
 800c850:	2301      	movs	r3, #1
 800c852:	e7f0      	b.n	800c836 <_vfiprintf_r+0x1da>
 800c854:	ab03      	add	r3, sp, #12
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	462a      	mov	r2, r5
 800c85a:	4b16      	ldr	r3, [pc, #88]	; (800c8b4 <_vfiprintf_r+0x258>)
 800c85c:	a904      	add	r1, sp, #16
 800c85e:	4630      	mov	r0, r6
 800c860:	f7fd fd54 	bl	800a30c <_printf_float>
 800c864:	4607      	mov	r7, r0
 800c866:	1c78      	adds	r0, r7, #1
 800c868:	d1d6      	bne.n	800c818 <_vfiprintf_r+0x1bc>
 800c86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c86c:	07d9      	lsls	r1, r3, #31
 800c86e:	d405      	bmi.n	800c87c <_vfiprintf_r+0x220>
 800c870:	89ab      	ldrh	r3, [r5, #12]
 800c872:	059a      	lsls	r2, r3, #22
 800c874:	d402      	bmi.n	800c87c <_vfiprintf_r+0x220>
 800c876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c878:	f7ff f8d8 	bl	800ba2c <__retarget_lock_release_recursive>
 800c87c:	89ab      	ldrh	r3, [r5, #12]
 800c87e:	065b      	lsls	r3, r3, #25
 800c880:	f53f af12 	bmi.w	800c6a8 <_vfiprintf_r+0x4c>
 800c884:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c886:	e711      	b.n	800c6ac <_vfiprintf_r+0x50>
 800c888:	ab03      	add	r3, sp, #12
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	462a      	mov	r2, r5
 800c88e:	4b09      	ldr	r3, [pc, #36]	; (800c8b4 <_vfiprintf_r+0x258>)
 800c890:	a904      	add	r1, sp, #16
 800c892:	4630      	mov	r0, r6
 800c894:	f7fd ffde 	bl	800a854 <_printf_i>
 800c898:	e7e4      	b.n	800c864 <_vfiprintf_r+0x208>
 800c89a:	bf00      	nop
 800c89c:	0800d24c 	.word	0x0800d24c
 800c8a0:	0800d26c 	.word	0x0800d26c
 800c8a4:	0800d22c 	.word	0x0800d22c
 800c8a8:	0800d3e4 	.word	0x0800d3e4
 800c8ac:	0800d3ee 	.word	0x0800d3ee
 800c8b0:	0800a30d 	.word	0x0800a30d
 800c8b4:	0800c637 	.word	0x0800c637
 800c8b8:	0800d3ea 	.word	0x0800d3ea

0800c8bc <_putc_r>:
 800c8bc:	b570      	push	{r4, r5, r6, lr}
 800c8be:	460d      	mov	r5, r1
 800c8c0:	4614      	mov	r4, r2
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	b118      	cbz	r0, 800c8ce <_putc_r+0x12>
 800c8c6:	6983      	ldr	r3, [r0, #24]
 800c8c8:	b90b      	cbnz	r3, 800c8ce <_putc_r+0x12>
 800c8ca:	f7ff f80b 	bl	800b8e4 <__sinit>
 800c8ce:	4b1c      	ldr	r3, [pc, #112]	; (800c940 <_putc_r+0x84>)
 800c8d0:	429c      	cmp	r4, r3
 800c8d2:	d124      	bne.n	800c91e <_putc_r+0x62>
 800c8d4:	6874      	ldr	r4, [r6, #4]
 800c8d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8d8:	07d8      	lsls	r0, r3, #31
 800c8da:	d405      	bmi.n	800c8e8 <_putc_r+0x2c>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	0599      	lsls	r1, r3, #22
 800c8e0:	d402      	bmi.n	800c8e8 <_putc_r+0x2c>
 800c8e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8e4:	f7ff f8a1 	bl	800ba2a <__retarget_lock_acquire_recursive>
 800c8e8:	68a3      	ldr	r3, [r4, #8]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	60a3      	str	r3, [r4, #8]
 800c8f0:	da05      	bge.n	800c8fe <_putc_r+0x42>
 800c8f2:	69a2      	ldr	r2, [r4, #24]
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	db1c      	blt.n	800c932 <_putc_r+0x76>
 800c8f8:	b2eb      	uxtb	r3, r5
 800c8fa:	2b0a      	cmp	r3, #10
 800c8fc:	d019      	beq.n	800c932 <_putc_r+0x76>
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	6022      	str	r2, [r4, #0]
 800c904:	701d      	strb	r5, [r3, #0]
 800c906:	b2ed      	uxtb	r5, r5
 800c908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c90a:	07da      	lsls	r2, r3, #31
 800c90c:	d405      	bmi.n	800c91a <_putc_r+0x5e>
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	059b      	lsls	r3, r3, #22
 800c912:	d402      	bmi.n	800c91a <_putc_r+0x5e>
 800c914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c916:	f7ff f889 	bl	800ba2c <__retarget_lock_release_recursive>
 800c91a:	4628      	mov	r0, r5
 800c91c:	bd70      	pop	{r4, r5, r6, pc}
 800c91e:	4b09      	ldr	r3, [pc, #36]	; (800c944 <_putc_r+0x88>)
 800c920:	429c      	cmp	r4, r3
 800c922:	d101      	bne.n	800c928 <_putc_r+0x6c>
 800c924:	68b4      	ldr	r4, [r6, #8]
 800c926:	e7d6      	b.n	800c8d6 <_putc_r+0x1a>
 800c928:	4b07      	ldr	r3, [pc, #28]	; (800c948 <_putc_r+0x8c>)
 800c92a:	429c      	cmp	r4, r3
 800c92c:	bf08      	it	eq
 800c92e:	68f4      	ldreq	r4, [r6, #12]
 800c930:	e7d1      	b.n	800c8d6 <_putc_r+0x1a>
 800c932:	4629      	mov	r1, r5
 800c934:	4622      	mov	r2, r4
 800c936:	4630      	mov	r0, r6
 800c938:	f000 f85c 	bl	800c9f4 <__swbuf_r>
 800c93c:	4605      	mov	r5, r0
 800c93e:	e7e3      	b.n	800c908 <_putc_r+0x4c>
 800c940:	0800d24c 	.word	0x0800d24c
 800c944:	0800d26c 	.word	0x0800d26c
 800c948:	0800d22c 	.word	0x0800d22c

0800c94c <_sbrk_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	4d06      	ldr	r5, [pc, #24]	; (800c968 <_sbrk_r+0x1c>)
 800c950:	2300      	movs	r3, #0
 800c952:	4604      	mov	r4, r0
 800c954:	4608      	mov	r0, r1
 800c956:	602b      	str	r3, [r5, #0]
 800c958:	f7f4 fd3a 	bl	80013d0 <_sbrk>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d102      	bne.n	800c966 <_sbrk_r+0x1a>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	b103      	cbz	r3, 800c966 <_sbrk_r+0x1a>
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	bd38      	pop	{r3, r4, r5, pc}
 800c968:	20001ffc 	.word	0x20001ffc

0800c96c <__sread>:
 800c96c:	b510      	push	{r4, lr}
 800c96e:	460c      	mov	r4, r1
 800c970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c974:	f000 faf2 	bl	800cf5c <_read_r>
 800c978:	2800      	cmp	r0, #0
 800c97a:	bfab      	itete	ge
 800c97c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c97e:	89a3      	ldrhlt	r3, [r4, #12]
 800c980:	181b      	addge	r3, r3, r0
 800c982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c986:	bfac      	ite	ge
 800c988:	6563      	strge	r3, [r4, #84]	; 0x54
 800c98a:	81a3      	strhlt	r3, [r4, #12]
 800c98c:	bd10      	pop	{r4, pc}

0800c98e <__swrite>:
 800c98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c992:	461f      	mov	r7, r3
 800c994:	898b      	ldrh	r3, [r1, #12]
 800c996:	05db      	lsls	r3, r3, #23
 800c998:	4605      	mov	r5, r0
 800c99a:	460c      	mov	r4, r1
 800c99c:	4616      	mov	r6, r2
 800c99e:	d505      	bpl.n	800c9ac <__swrite+0x1e>
 800c9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f000 f9f8 	bl	800cd9c <_lseek_r>
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9b6:	81a3      	strh	r3, [r4, #12]
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	4628      	mov	r0, r5
 800c9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c2:	f000 b869 	b.w	800ca98 <_write_r>

0800c9c6 <__sseek>:
 800c9c6:	b510      	push	{r4, lr}
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ce:	f000 f9e5 	bl	800cd9c <_lseek_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	bf15      	itete	ne
 800c9d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9e2:	81a3      	strheq	r3, [r4, #12]
 800c9e4:	bf18      	it	ne
 800c9e6:	81a3      	strhne	r3, [r4, #12]
 800c9e8:	bd10      	pop	{r4, pc}

0800c9ea <__sclose>:
 800c9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ee:	f000 b8f1 	b.w	800cbd4 <_close_r>
	...

0800c9f4 <__swbuf_r>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	460e      	mov	r6, r1
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	b118      	cbz	r0, 800ca06 <__swbuf_r+0x12>
 800c9fe:	6983      	ldr	r3, [r0, #24]
 800ca00:	b90b      	cbnz	r3, 800ca06 <__swbuf_r+0x12>
 800ca02:	f7fe ff6f 	bl	800b8e4 <__sinit>
 800ca06:	4b21      	ldr	r3, [pc, #132]	; (800ca8c <__swbuf_r+0x98>)
 800ca08:	429c      	cmp	r4, r3
 800ca0a:	d12b      	bne.n	800ca64 <__swbuf_r+0x70>
 800ca0c:	686c      	ldr	r4, [r5, #4]
 800ca0e:	69a3      	ldr	r3, [r4, #24]
 800ca10:	60a3      	str	r3, [r4, #8]
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	071a      	lsls	r2, r3, #28
 800ca16:	d52f      	bpl.n	800ca78 <__swbuf_r+0x84>
 800ca18:	6923      	ldr	r3, [r4, #16]
 800ca1a:	b36b      	cbz	r3, 800ca78 <__swbuf_r+0x84>
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	6820      	ldr	r0, [r4, #0]
 800ca20:	1ac0      	subs	r0, r0, r3
 800ca22:	6963      	ldr	r3, [r4, #20]
 800ca24:	b2f6      	uxtb	r6, r6
 800ca26:	4283      	cmp	r3, r0
 800ca28:	4637      	mov	r7, r6
 800ca2a:	dc04      	bgt.n	800ca36 <__swbuf_r+0x42>
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f000 f966 	bl	800cd00 <_fflush_r>
 800ca34:	bb30      	cbnz	r0, 800ca84 <__swbuf_r+0x90>
 800ca36:	68a3      	ldr	r3, [r4, #8]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	60a3      	str	r3, [r4, #8]
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	6022      	str	r2, [r4, #0]
 800ca42:	701e      	strb	r6, [r3, #0]
 800ca44:	6963      	ldr	r3, [r4, #20]
 800ca46:	3001      	adds	r0, #1
 800ca48:	4283      	cmp	r3, r0
 800ca4a:	d004      	beq.n	800ca56 <__swbuf_r+0x62>
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	07db      	lsls	r3, r3, #31
 800ca50:	d506      	bpl.n	800ca60 <__swbuf_r+0x6c>
 800ca52:	2e0a      	cmp	r6, #10
 800ca54:	d104      	bne.n	800ca60 <__swbuf_r+0x6c>
 800ca56:	4621      	mov	r1, r4
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f000 f951 	bl	800cd00 <_fflush_r>
 800ca5e:	b988      	cbnz	r0, 800ca84 <__swbuf_r+0x90>
 800ca60:	4638      	mov	r0, r7
 800ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca64:	4b0a      	ldr	r3, [pc, #40]	; (800ca90 <__swbuf_r+0x9c>)
 800ca66:	429c      	cmp	r4, r3
 800ca68:	d101      	bne.n	800ca6e <__swbuf_r+0x7a>
 800ca6a:	68ac      	ldr	r4, [r5, #8]
 800ca6c:	e7cf      	b.n	800ca0e <__swbuf_r+0x1a>
 800ca6e:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <__swbuf_r+0xa0>)
 800ca70:	429c      	cmp	r4, r3
 800ca72:	bf08      	it	eq
 800ca74:	68ec      	ldreq	r4, [r5, #12]
 800ca76:	e7ca      	b.n	800ca0e <__swbuf_r+0x1a>
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f000 f81e 	bl	800cabc <__swsetup_r>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d0cb      	beq.n	800ca1c <__swbuf_r+0x28>
 800ca84:	f04f 37ff 	mov.w	r7, #4294967295
 800ca88:	e7ea      	b.n	800ca60 <__swbuf_r+0x6c>
 800ca8a:	bf00      	nop
 800ca8c:	0800d24c 	.word	0x0800d24c
 800ca90:	0800d26c 	.word	0x0800d26c
 800ca94:	0800d22c 	.word	0x0800d22c

0800ca98 <_write_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d07      	ldr	r5, [pc, #28]	; (800cab8 <_write_r+0x20>)
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	4608      	mov	r0, r1
 800caa0:	4611      	mov	r1, r2
 800caa2:	2200      	movs	r2, #0
 800caa4:	602a      	str	r2, [r5, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	f7f4 fb52 	bl	8001150 <_write>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_write_r+0x1e>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_write_r+0x1e>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20001ffc 	.word	0x20001ffc

0800cabc <__swsetup_r>:
 800cabc:	4b32      	ldr	r3, [pc, #200]	; (800cb88 <__swsetup_r+0xcc>)
 800cabe:	b570      	push	{r4, r5, r6, lr}
 800cac0:	681d      	ldr	r5, [r3, #0]
 800cac2:	4606      	mov	r6, r0
 800cac4:	460c      	mov	r4, r1
 800cac6:	b125      	cbz	r5, 800cad2 <__swsetup_r+0x16>
 800cac8:	69ab      	ldr	r3, [r5, #24]
 800caca:	b913      	cbnz	r3, 800cad2 <__swsetup_r+0x16>
 800cacc:	4628      	mov	r0, r5
 800cace:	f7fe ff09 	bl	800b8e4 <__sinit>
 800cad2:	4b2e      	ldr	r3, [pc, #184]	; (800cb8c <__swsetup_r+0xd0>)
 800cad4:	429c      	cmp	r4, r3
 800cad6:	d10f      	bne.n	800caf8 <__swsetup_r+0x3c>
 800cad8:	686c      	ldr	r4, [r5, #4]
 800cada:	89a3      	ldrh	r3, [r4, #12]
 800cadc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cae0:	0719      	lsls	r1, r3, #28
 800cae2:	d42c      	bmi.n	800cb3e <__swsetup_r+0x82>
 800cae4:	06dd      	lsls	r5, r3, #27
 800cae6:	d411      	bmi.n	800cb0c <__swsetup_r+0x50>
 800cae8:	2309      	movs	r3, #9
 800caea:	6033      	str	r3, [r6, #0]
 800caec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800caf0:	81a3      	strh	r3, [r4, #12]
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	e03e      	b.n	800cb76 <__swsetup_r+0xba>
 800caf8:	4b25      	ldr	r3, [pc, #148]	; (800cb90 <__swsetup_r+0xd4>)
 800cafa:	429c      	cmp	r4, r3
 800cafc:	d101      	bne.n	800cb02 <__swsetup_r+0x46>
 800cafe:	68ac      	ldr	r4, [r5, #8]
 800cb00:	e7eb      	b.n	800cada <__swsetup_r+0x1e>
 800cb02:	4b24      	ldr	r3, [pc, #144]	; (800cb94 <__swsetup_r+0xd8>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	bf08      	it	eq
 800cb08:	68ec      	ldreq	r4, [r5, #12]
 800cb0a:	e7e6      	b.n	800cada <__swsetup_r+0x1e>
 800cb0c:	0758      	lsls	r0, r3, #29
 800cb0e:	d512      	bpl.n	800cb36 <__swsetup_r+0x7a>
 800cb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb12:	b141      	cbz	r1, 800cb26 <__swsetup_r+0x6a>
 800cb14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb18:	4299      	cmp	r1, r3
 800cb1a:	d002      	beq.n	800cb22 <__swsetup_r+0x66>
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff fb37 	bl	800c190 <_free_r>
 800cb22:	2300      	movs	r3, #0
 800cb24:	6363      	str	r3, [r4, #52]	; 0x34
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb2c:	81a3      	strh	r3, [r4, #12]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	6063      	str	r3, [r4, #4]
 800cb32:	6923      	ldr	r3, [r4, #16]
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f043 0308 	orr.w	r3, r3, #8
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	b94b      	cbnz	r3, 800cb56 <__swsetup_r+0x9a>
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb4c:	d003      	beq.n	800cb56 <__swsetup_r+0x9a>
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4630      	mov	r0, r6
 800cb52:	f000 f95b 	bl	800ce0c <__smakebuf_r>
 800cb56:	89a0      	ldrh	r0, [r4, #12]
 800cb58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb5c:	f010 0301 	ands.w	r3, r0, #1
 800cb60:	d00a      	beq.n	800cb78 <__swsetup_r+0xbc>
 800cb62:	2300      	movs	r3, #0
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	6963      	ldr	r3, [r4, #20]
 800cb68:	425b      	negs	r3, r3
 800cb6a:	61a3      	str	r3, [r4, #24]
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	b943      	cbnz	r3, 800cb82 <__swsetup_r+0xc6>
 800cb70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb74:	d1ba      	bne.n	800caec <__swsetup_r+0x30>
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	0781      	lsls	r1, r0, #30
 800cb7a:	bf58      	it	pl
 800cb7c:	6963      	ldrpl	r3, [r4, #20]
 800cb7e:	60a3      	str	r3, [r4, #8]
 800cb80:	e7f4      	b.n	800cb6c <__swsetup_r+0xb0>
 800cb82:	2000      	movs	r0, #0
 800cb84:	e7f7      	b.n	800cb76 <__swsetup_r+0xba>
 800cb86:	bf00      	nop
 800cb88:	20000100 	.word	0x20000100
 800cb8c:	0800d24c 	.word	0x0800d24c
 800cb90:	0800d26c 	.word	0x0800d26c
 800cb94:	0800d22c 	.word	0x0800d22c

0800cb98 <__assert_func>:
 800cb98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb9a:	4614      	mov	r4, r2
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <__assert_func+0x2c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4605      	mov	r5, r0
 800cba4:	68d8      	ldr	r0, [r3, #12]
 800cba6:	b14c      	cbz	r4, 800cbbc <__assert_func+0x24>
 800cba8:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <__assert_func+0x30>)
 800cbaa:	9100      	str	r1, [sp, #0]
 800cbac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbb0:	4906      	ldr	r1, [pc, #24]	; (800cbcc <__assert_func+0x34>)
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	f000 f8e0 	bl	800cd78 <fiprintf>
 800cbb8:	f000 f9ef 	bl	800cf9a <abort>
 800cbbc:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <__assert_func+0x38>)
 800cbbe:	461c      	mov	r4, r3
 800cbc0:	e7f3      	b.n	800cbaa <__assert_func+0x12>
 800cbc2:	bf00      	nop
 800cbc4:	20000100 	.word	0x20000100
 800cbc8:	0800d3f5 	.word	0x0800d3f5
 800cbcc:	0800d402 	.word	0x0800d402
 800cbd0:	0800d430 	.word	0x0800d430

0800cbd4 <_close_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d06      	ldr	r5, [pc, #24]	; (800cbf0 <_close_r+0x1c>)
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4608      	mov	r0, r1
 800cbde:	602b      	str	r3, [r5, #0]
 800cbe0:	f7f4 fbc1 	bl	8001366 <_close>
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	d102      	bne.n	800cbee <_close_r+0x1a>
 800cbe8:	682b      	ldr	r3, [r5, #0]
 800cbea:	b103      	cbz	r3, 800cbee <_close_r+0x1a>
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	20001ffc 	.word	0x20001ffc

0800cbf4 <__sflush_r>:
 800cbf4:	898a      	ldrh	r2, [r1, #12]
 800cbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	0710      	lsls	r0, r2, #28
 800cbfe:	460c      	mov	r4, r1
 800cc00:	d458      	bmi.n	800ccb4 <__sflush_r+0xc0>
 800cc02:	684b      	ldr	r3, [r1, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dc05      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dc02      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc16:	2e00      	cmp	r6, #0
 800cc18:	d0f9      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc20:	682f      	ldr	r7, [r5, #0]
 800cc22:	602b      	str	r3, [r5, #0]
 800cc24:	d032      	beq.n	800cc8c <__sflush_r+0x98>
 800cc26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	075a      	lsls	r2, r3, #29
 800cc2c:	d505      	bpl.n	800cc3a <__sflush_r+0x46>
 800cc2e:	6863      	ldr	r3, [r4, #4]
 800cc30:	1ac0      	subs	r0, r0, r3
 800cc32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc34:	b10b      	cbz	r3, 800cc3a <__sflush_r+0x46>
 800cc36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc38:	1ac0      	subs	r0, r0, r3
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc40:	6a21      	ldr	r1, [r4, #32]
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b0      	blx	r6
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	d106      	bne.n	800cc5a <__sflush_r+0x66>
 800cc4c:	6829      	ldr	r1, [r5, #0]
 800cc4e:	291d      	cmp	r1, #29
 800cc50:	d82c      	bhi.n	800ccac <__sflush_r+0xb8>
 800cc52:	4a2a      	ldr	r2, [pc, #168]	; (800ccfc <__sflush_r+0x108>)
 800cc54:	40ca      	lsrs	r2, r1
 800cc56:	07d6      	lsls	r6, r2, #31
 800cc58:	d528      	bpl.n	800ccac <__sflush_r+0xb8>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	6062      	str	r2, [r4, #4]
 800cc5e:	04d9      	lsls	r1, r3, #19
 800cc60:	6922      	ldr	r2, [r4, #16]
 800cc62:	6022      	str	r2, [r4, #0]
 800cc64:	d504      	bpl.n	800cc70 <__sflush_r+0x7c>
 800cc66:	1c42      	adds	r2, r0, #1
 800cc68:	d101      	bne.n	800cc6e <__sflush_r+0x7a>
 800cc6a:	682b      	ldr	r3, [r5, #0]
 800cc6c:	b903      	cbnz	r3, 800cc70 <__sflush_r+0x7c>
 800cc6e:	6560      	str	r0, [r4, #84]	; 0x54
 800cc70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc72:	602f      	str	r7, [r5, #0]
 800cc74:	2900      	cmp	r1, #0
 800cc76:	d0ca      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	d002      	beq.n	800cc86 <__sflush_r+0x92>
 800cc80:	4628      	mov	r0, r5
 800cc82:	f7ff fa85 	bl	800c190 <_free_r>
 800cc86:	2000      	movs	r0, #0
 800cc88:	6360      	str	r0, [r4, #52]	; 0x34
 800cc8a:	e7c1      	b.n	800cc10 <__sflush_r+0x1c>
 800cc8c:	6a21      	ldr	r1, [r4, #32]
 800cc8e:	2301      	movs	r3, #1
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b0      	blx	r6
 800cc94:	1c41      	adds	r1, r0, #1
 800cc96:	d1c7      	bne.n	800cc28 <__sflush_r+0x34>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0c4      	beq.n	800cc28 <__sflush_r+0x34>
 800cc9e:	2b1d      	cmp	r3, #29
 800cca0:	d001      	beq.n	800cca6 <__sflush_r+0xb2>
 800cca2:	2b16      	cmp	r3, #22
 800cca4:	d101      	bne.n	800ccaa <__sflush_r+0xb6>
 800cca6:	602f      	str	r7, [r5, #0]
 800cca8:	e7b1      	b.n	800cc0e <__sflush_r+0x1a>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	e7ad      	b.n	800cc10 <__sflush_r+0x1c>
 800ccb4:	690f      	ldr	r7, [r1, #16]
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	d0a9      	beq.n	800cc0e <__sflush_r+0x1a>
 800ccba:	0793      	lsls	r3, r2, #30
 800ccbc:	680e      	ldr	r6, [r1, #0]
 800ccbe:	bf08      	it	eq
 800ccc0:	694b      	ldreq	r3, [r1, #20]
 800ccc2:	600f      	str	r7, [r1, #0]
 800ccc4:	bf18      	it	ne
 800ccc6:	2300      	movne	r3, #0
 800ccc8:	eba6 0807 	sub.w	r8, r6, r7
 800cccc:	608b      	str	r3, [r1, #8]
 800ccce:	f1b8 0f00 	cmp.w	r8, #0
 800ccd2:	dd9c      	ble.n	800cc0e <__sflush_r+0x1a>
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccd8:	4643      	mov	r3, r8
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b0      	blx	r6
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dc06      	bgt.n	800ccf2 <__sflush_r+0xfe>
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf0:	e78e      	b.n	800cc10 <__sflush_r+0x1c>
 800ccf2:	4407      	add	r7, r0
 800ccf4:	eba8 0800 	sub.w	r8, r8, r0
 800ccf8:	e7e9      	b.n	800ccce <__sflush_r+0xda>
 800ccfa:	bf00      	nop
 800ccfc:	20400001 	.word	0x20400001

0800cd00 <_fflush_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	690b      	ldr	r3, [r1, #16]
 800cd04:	4605      	mov	r5, r0
 800cd06:	460c      	mov	r4, r1
 800cd08:	b913      	cbnz	r3, 800cd10 <_fflush_r+0x10>
 800cd0a:	2500      	movs	r5, #0
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	b118      	cbz	r0, 800cd1a <_fflush_r+0x1a>
 800cd12:	6983      	ldr	r3, [r0, #24]
 800cd14:	b90b      	cbnz	r3, 800cd1a <_fflush_r+0x1a>
 800cd16:	f7fe fde5 	bl	800b8e4 <__sinit>
 800cd1a:	4b14      	ldr	r3, [pc, #80]	; (800cd6c <_fflush_r+0x6c>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d11b      	bne.n	800cd58 <_fflush_r+0x58>
 800cd20:	686c      	ldr	r4, [r5, #4]
 800cd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0ef      	beq.n	800cd0a <_fflush_r+0xa>
 800cd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd2c:	07d0      	lsls	r0, r2, #31
 800cd2e:	d404      	bmi.n	800cd3a <_fflush_r+0x3a>
 800cd30:	0599      	lsls	r1, r3, #22
 800cd32:	d402      	bmi.n	800cd3a <_fflush_r+0x3a>
 800cd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd36:	f7fe fe78 	bl	800ba2a <__retarget_lock_acquire_recursive>
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	f7ff ff59 	bl	800cbf4 <__sflush_r>
 800cd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd44:	07da      	lsls	r2, r3, #31
 800cd46:	4605      	mov	r5, r0
 800cd48:	d4e0      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	059b      	lsls	r3, r3, #22
 800cd4e:	d4dd      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd52:	f7fe fe6b 	bl	800ba2c <__retarget_lock_release_recursive>
 800cd56:	e7d9      	b.n	800cd0c <_fflush_r+0xc>
 800cd58:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <_fflush_r+0x70>)
 800cd5a:	429c      	cmp	r4, r3
 800cd5c:	d101      	bne.n	800cd62 <_fflush_r+0x62>
 800cd5e:	68ac      	ldr	r4, [r5, #8]
 800cd60:	e7df      	b.n	800cd22 <_fflush_r+0x22>
 800cd62:	4b04      	ldr	r3, [pc, #16]	; (800cd74 <_fflush_r+0x74>)
 800cd64:	429c      	cmp	r4, r3
 800cd66:	bf08      	it	eq
 800cd68:	68ec      	ldreq	r4, [r5, #12]
 800cd6a:	e7da      	b.n	800cd22 <_fflush_r+0x22>
 800cd6c:	0800d24c 	.word	0x0800d24c
 800cd70:	0800d26c 	.word	0x0800d26c
 800cd74:	0800d22c 	.word	0x0800d22c

0800cd78 <fiprintf>:
 800cd78:	b40e      	push	{r1, r2, r3}
 800cd7a:	b503      	push	{r0, r1, lr}
 800cd7c:	4601      	mov	r1, r0
 800cd7e:	ab03      	add	r3, sp, #12
 800cd80:	4805      	ldr	r0, [pc, #20]	; (800cd98 <fiprintf+0x20>)
 800cd82:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd86:	6800      	ldr	r0, [r0, #0]
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	f7ff fc67 	bl	800c65c <_vfiprintf_r>
 800cd8e:	b002      	add	sp, #8
 800cd90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd94:	b003      	add	sp, #12
 800cd96:	4770      	bx	lr
 800cd98:	20000100 	.word	0x20000100

0800cd9c <_lseek_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	; (800cdbc <_lseek_r+0x20>)
 800cda0:	4604      	mov	r4, r0
 800cda2:	4608      	mov	r0, r1
 800cda4:	4611      	mov	r1, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	602a      	str	r2, [r5, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f7f4 fb02 	bl	80013b4 <_lseek>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_lseek_r+0x1e>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_lseek_r+0x1e>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	20001ffc 	.word	0x20001ffc

0800cdc0 <__swhatbuf_r>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	460e      	mov	r6, r1
 800cdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	b096      	sub	sp, #88	; 0x58
 800cdcc:	4614      	mov	r4, r2
 800cdce:	461d      	mov	r5, r3
 800cdd0:	da08      	bge.n	800cde4 <__swhatbuf_r+0x24>
 800cdd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	602a      	str	r2, [r5, #0]
 800cdda:	061a      	lsls	r2, r3, #24
 800cddc:	d410      	bmi.n	800ce00 <__swhatbuf_r+0x40>
 800cdde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cde2:	e00e      	b.n	800ce02 <__swhatbuf_r+0x42>
 800cde4:	466a      	mov	r2, sp
 800cde6:	f000 f8df 	bl	800cfa8 <_fstat_r>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	dbf1      	blt.n	800cdd2 <__swhatbuf_r+0x12>
 800cdee:	9a01      	ldr	r2, [sp, #4]
 800cdf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdf8:	425a      	negs	r2, r3
 800cdfa:	415a      	adcs	r2, r3
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	e7ee      	b.n	800cdde <__swhatbuf_r+0x1e>
 800ce00:	2340      	movs	r3, #64	; 0x40
 800ce02:	2000      	movs	r0, #0
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	b016      	add	sp, #88	; 0x58
 800ce08:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce0c <__smakebuf_r>:
 800ce0c:	898b      	ldrh	r3, [r1, #12]
 800ce0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce10:	079d      	lsls	r5, r3, #30
 800ce12:	4606      	mov	r6, r0
 800ce14:	460c      	mov	r4, r1
 800ce16:	d507      	bpl.n	800ce28 <__smakebuf_r+0x1c>
 800ce18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	6123      	str	r3, [r4, #16]
 800ce20:	2301      	movs	r3, #1
 800ce22:	6163      	str	r3, [r4, #20]
 800ce24:	b002      	add	sp, #8
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	ab01      	add	r3, sp, #4
 800ce2a:	466a      	mov	r2, sp
 800ce2c:	f7ff ffc8 	bl	800cdc0 <__swhatbuf_r>
 800ce30:	9900      	ldr	r1, [sp, #0]
 800ce32:	4605      	mov	r5, r0
 800ce34:	4630      	mov	r0, r6
 800ce36:	f7ff fa17 	bl	800c268 <_malloc_r>
 800ce3a:	b948      	cbnz	r0, 800ce50 <__smakebuf_r+0x44>
 800ce3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce40:	059a      	lsls	r2, r3, #22
 800ce42:	d4ef      	bmi.n	800ce24 <__smakebuf_r+0x18>
 800ce44:	f023 0303 	bic.w	r3, r3, #3
 800ce48:	f043 0302 	orr.w	r3, r3, #2
 800ce4c:	81a3      	strh	r3, [r4, #12]
 800ce4e:	e7e3      	b.n	800ce18 <__smakebuf_r+0xc>
 800ce50:	4b0d      	ldr	r3, [pc, #52]	; (800ce88 <__smakebuf_r+0x7c>)
 800ce52:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	6020      	str	r0, [r4, #0]
 800ce58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	9b00      	ldr	r3, [sp, #0]
 800ce60:	6163      	str	r3, [r4, #20]
 800ce62:	9b01      	ldr	r3, [sp, #4]
 800ce64:	6120      	str	r0, [r4, #16]
 800ce66:	b15b      	cbz	r3, 800ce80 <__smakebuf_r+0x74>
 800ce68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f8ad 	bl	800cfcc <_isatty_r>
 800ce72:	b128      	cbz	r0, 800ce80 <__smakebuf_r+0x74>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f023 0303 	bic.w	r3, r3, #3
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	89a0      	ldrh	r0, [r4, #12]
 800ce82:	4305      	orrs	r5, r0
 800ce84:	81a5      	strh	r5, [r4, #12]
 800ce86:	e7cd      	b.n	800ce24 <__smakebuf_r+0x18>
 800ce88:	0800b87d 	.word	0x0800b87d

0800ce8c <__ascii_mbtowc>:
 800ce8c:	b082      	sub	sp, #8
 800ce8e:	b901      	cbnz	r1, 800ce92 <__ascii_mbtowc+0x6>
 800ce90:	a901      	add	r1, sp, #4
 800ce92:	b142      	cbz	r2, 800cea6 <__ascii_mbtowc+0x1a>
 800ce94:	b14b      	cbz	r3, 800ceaa <__ascii_mbtowc+0x1e>
 800ce96:	7813      	ldrb	r3, [r2, #0]
 800ce98:	600b      	str	r3, [r1, #0]
 800ce9a:	7812      	ldrb	r2, [r2, #0]
 800ce9c:	1e10      	subs	r0, r2, #0
 800ce9e:	bf18      	it	ne
 800cea0:	2001      	movne	r0, #1
 800cea2:	b002      	add	sp, #8
 800cea4:	4770      	bx	lr
 800cea6:	4610      	mov	r0, r2
 800cea8:	e7fb      	b.n	800cea2 <__ascii_mbtowc+0x16>
 800ceaa:	f06f 0001 	mvn.w	r0, #1
 800ceae:	e7f8      	b.n	800cea2 <__ascii_mbtowc+0x16>

0800ceb0 <memmove>:
 800ceb0:	4288      	cmp	r0, r1
 800ceb2:	b510      	push	{r4, lr}
 800ceb4:	eb01 0402 	add.w	r4, r1, r2
 800ceb8:	d902      	bls.n	800cec0 <memmove+0x10>
 800ceba:	4284      	cmp	r4, r0
 800cebc:	4623      	mov	r3, r4
 800cebe:	d807      	bhi.n	800ced0 <memmove+0x20>
 800cec0:	1e43      	subs	r3, r0, #1
 800cec2:	42a1      	cmp	r1, r4
 800cec4:	d008      	beq.n	800ced8 <memmove+0x28>
 800cec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cece:	e7f8      	b.n	800cec2 <memmove+0x12>
 800ced0:	4402      	add	r2, r0
 800ced2:	4601      	mov	r1, r0
 800ced4:	428a      	cmp	r2, r1
 800ced6:	d100      	bne.n	800ceda <memmove+0x2a>
 800ced8:	bd10      	pop	{r4, pc}
 800ceda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cee2:	e7f7      	b.n	800ced4 <memmove+0x24>

0800cee4 <__malloc_lock>:
 800cee4:	4801      	ldr	r0, [pc, #4]	; (800ceec <__malloc_lock+0x8>)
 800cee6:	f7fe bda0 	b.w	800ba2a <__retarget_lock_acquire_recursive>
 800ceea:	bf00      	nop
 800ceec:	20001ff0 	.word	0x20001ff0

0800cef0 <__malloc_unlock>:
 800cef0:	4801      	ldr	r0, [pc, #4]	; (800cef8 <__malloc_unlock+0x8>)
 800cef2:	f7fe bd9b 	b.w	800ba2c <__retarget_lock_release_recursive>
 800cef6:	bf00      	nop
 800cef8:	20001ff0 	.word	0x20001ff0

0800cefc <_realloc_r>:
 800cefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf00:	4680      	mov	r8, r0
 800cf02:	4614      	mov	r4, r2
 800cf04:	460e      	mov	r6, r1
 800cf06:	b921      	cbnz	r1, 800cf12 <_realloc_r+0x16>
 800cf08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	4611      	mov	r1, r2
 800cf0e:	f7ff b9ab 	b.w	800c268 <_malloc_r>
 800cf12:	b92a      	cbnz	r2, 800cf20 <_realloc_r+0x24>
 800cf14:	f7ff f93c 	bl	800c190 <_free_r>
 800cf18:	4625      	mov	r5, r4
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf20:	f000 f864 	bl	800cfec <_malloc_usable_size_r>
 800cf24:	4284      	cmp	r4, r0
 800cf26:	4607      	mov	r7, r0
 800cf28:	d802      	bhi.n	800cf30 <_realloc_r+0x34>
 800cf2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf2e:	d812      	bhi.n	800cf56 <_realloc_r+0x5a>
 800cf30:	4621      	mov	r1, r4
 800cf32:	4640      	mov	r0, r8
 800cf34:	f7ff f998 	bl	800c268 <_malloc_r>
 800cf38:	4605      	mov	r5, r0
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d0ed      	beq.n	800cf1a <_realloc_r+0x1e>
 800cf3e:	42bc      	cmp	r4, r7
 800cf40:	4622      	mov	r2, r4
 800cf42:	4631      	mov	r1, r6
 800cf44:	bf28      	it	cs
 800cf46:	463a      	movcs	r2, r7
 800cf48:	f7fe fd7a 	bl	800ba40 <memcpy>
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4640      	mov	r0, r8
 800cf50:	f7ff f91e 	bl	800c190 <_free_r>
 800cf54:	e7e1      	b.n	800cf1a <_realloc_r+0x1e>
 800cf56:	4635      	mov	r5, r6
 800cf58:	e7df      	b.n	800cf1a <_realloc_r+0x1e>
	...

0800cf5c <_read_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d07      	ldr	r5, [pc, #28]	; (800cf7c <_read_r+0x20>)
 800cf60:	4604      	mov	r4, r0
 800cf62:	4608      	mov	r0, r1
 800cf64:	4611      	mov	r1, r2
 800cf66:	2200      	movs	r2, #0
 800cf68:	602a      	str	r2, [r5, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f7f4 f9de 	bl	800132c <_read>
 800cf70:	1c43      	adds	r3, r0, #1
 800cf72:	d102      	bne.n	800cf7a <_read_r+0x1e>
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	b103      	cbz	r3, 800cf7a <_read_r+0x1e>
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	20001ffc 	.word	0x20001ffc

0800cf80 <__ascii_wctomb>:
 800cf80:	b149      	cbz	r1, 800cf96 <__ascii_wctomb+0x16>
 800cf82:	2aff      	cmp	r2, #255	; 0xff
 800cf84:	bf85      	ittet	hi
 800cf86:	238a      	movhi	r3, #138	; 0x8a
 800cf88:	6003      	strhi	r3, [r0, #0]
 800cf8a:	700a      	strbls	r2, [r1, #0]
 800cf8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf90:	bf98      	it	ls
 800cf92:	2001      	movls	r0, #1
 800cf94:	4770      	bx	lr
 800cf96:	4608      	mov	r0, r1
 800cf98:	4770      	bx	lr

0800cf9a <abort>:
 800cf9a:	b508      	push	{r3, lr}
 800cf9c:	2006      	movs	r0, #6
 800cf9e:	f000 f855 	bl	800d04c <raise>
 800cfa2:	2001      	movs	r0, #1
 800cfa4:	f7f4 f9b8 	bl	8001318 <_exit>

0800cfa8 <_fstat_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4d07      	ldr	r5, [pc, #28]	; (800cfc8 <_fstat_r+0x20>)
 800cfac:	2300      	movs	r3, #0
 800cfae:	4604      	mov	r4, r0
 800cfb0:	4608      	mov	r0, r1
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	602b      	str	r3, [r5, #0]
 800cfb6:	f7f4 f9e2 	bl	800137e <_fstat>
 800cfba:	1c43      	adds	r3, r0, #1
 800cfbc:	d102      	bne.n	800cfc4 <_fstat_r+0x1c>
 800cfbe:	682b      	ldr	r3, [r5, #0]
 800cfc0:	b103      	cbz	r3, 800cfc4 <_fstat_r+0x1c>
 800cfc2:	6023      	str	r3, [r4, #0]
 800cfc4:	bd38      	pop	{r3, r4, r5, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20001ffc 	.word	0x20001ffc

0800cfcc <_isatty_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d06      	ldr	r5, [pc, #24]	; (800cfe8 <_isatty_r+0x1c>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	602b      	str	r3, [r5, #0]
 800cfd8:	f7f4 f9e1 	bl	800139e <_isatty>
 800cfdc:	1c43      	adds	r3, r0, #1
 800cfde:	d102      	bne.n	800cfe6 <_isatty_r+0x1a>
 800cfe0:	682b      	ldr	r3, [r5, #0]
 800cfe2:	b103      	cbz	r3, 800cfe6 <_isatty_r+0x1a>
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	bd38      	pop	{r3, r4, r5, pc}
 800cfe8:	20001ffc 	.word	0x20001ffc

0800cfec <_malloc_usable_size_r>:
 800cfec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cff0:	1f18      	subs	r0, r3, #4
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bfbc      	itt	lt
 800cff6:	580b      	ldrlt	r3, [r1, r0]
 800cff8:	18c0      	addlt	r0, r0, r3
 800cffa:	4770      	bx	lr

0800cffc <_raise_r>:
 800cffc:	291f      	cmp	r1, #31
 800cffe:	b538      	push	{r3, r4, r5, lr}
 800d000:	4604      	mov	r4, r0
 800d002:	460d      	mov	r5, r1
 800d004:	d904      	bls.n	800d010 <_raise_r+0x14>
 800d006:	2316      	movs	r3, #22
 800d008:	6003      	str	r3, [r0, #0]
 800d00a:	f04f 30ff 	mov.w	r0, #4294967295
 800d00e:	bd38      	pop	{r3, r4, r5, pc}
 800d010:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d012:	b112      	cbz	r2, 800d01a <_raise_r+0x1e>
 800d014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d018:	b94b      	cbnz	r3, 800d02e <_raise_r+0x32>
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 f830 	bl	800d080 <_getpid_r>
 800d020:	462a      	mov	r2, r5
 800d022:	4601      	mov	r1, r0
 800d024:	4620      	mov	r0, r4
 800d026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d02a:	f000 b817 	b.w	800d05c <_kill_r>
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d00a      	beq.n	800d048 <_raise_r+0x4c>
 800d032:	1c59      	adds	r1, r3, #1
 800d034:	d103      	bne.n	800d03e <_raise_r+0x42>
 800d036:	2316      	movs	r3, #22
 800d038:	6003      	str	r3, [r0, #0]
 800d03a:	2001      	movs	r0, #1
 800d03c:	e7e7      	b.n	800d00e <_raise_r+0x12>
 800d03e:	2400      	movs	r4, #0
 800d040:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d044:	4628      	mov	r0, r5
 800d046:	4798      	blx	r3
 800d048:	2000      	movs	r0, #0
 800d04a:	e7e0      	b.n	800d00e <_raise_r+0x12>

0800d04c <raise>:
 800d04c:	4b02      	ldr	r3, [pc, #8]	; (800d058 <raise+0xc>)
 800d04e:	4601      	mov	r1, r0
 800d050:	6818      	ldr	r0, [r3, #0]
 800d052:	f7ff bfd3 	b.w	800cffc <_raise_r>
 800d056:	bf00      	nop
 800d058:	20000100 	.word	0x20000100

0800d05c <_kill_r>:
 800d05c:	b538      	push	{r3, r4, r5, lr}
 800d05e:	4d07      	ldr	r5, [pc, #28]	; (800d07c <_kill_r+0x20>)
 800d060:	2300      	movs	r3, #0
 800d062:	4604      	mov	r4, r0
 800d064:	4608      	mov	r0, r1
 800d066:	4611      	mov	r1, r2
 800d068:	602b      	str	r3, [r5, #0]
 800d06a:	f7f4 f945 	bl	80012f8 <_kill>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	d102      	bne.n	800d078 <_kill_r+0x1c>
 800d072:	682b      	ldr	r3, [r5, #0]
 800d074:	b103      	cbz	r3, 800d078 <_kill_r+0x1c>
 800d076:	6023      	str	r3, [r4, #0]
 800d078:	bd38      	pop	{r3, r4, r5, pc}
 800d07a:	bf00      	nop
 800d07c:	20001ffc 	.word	0x20001ffc

0800d080 <_getpid_r>:
 800d080:	f7f4 b932 	b.w	80012e8 <_getpid>

0800d084 <_init>:
 800d084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d086:	bf00      	nop
 800d088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08a:	bc08      	pop	{r3}
 800d08c:	469e      	mov	lr, r3
 800d08e:	4770      	bx	lr

0800d090 <_fini>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	bf00      	nop
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr
