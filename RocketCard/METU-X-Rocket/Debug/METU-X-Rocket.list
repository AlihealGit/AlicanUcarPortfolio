
METU-X-Rocket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  0800b648  0800b648  0001b648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd54  0800bd54  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd54  0800bd54  0001bd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd5c  0800bd5c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd5c  0800bd5c  0001bd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bd64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  200001f0  0800bf54  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800bf54  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152d7  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fb  00000000  00000000  000354f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  000385f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019318  00000000  00000000  0003a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fc5  00000000  00000000  00053cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093e16  00000000  00000000  0006ac75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fea8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f38  00000000  00000000  000feadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b62c 	.word	0x0800b62c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b62c 	.word	0x0800b62c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	2007      	movs	r0, #7
 8000f6c:	f000 fca4 	bl	80018b8 <bno055_writeData>
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4619      	mov	r1, r3
 8000f86:	203d      	movs	r0, #61	; 0x3d
 8000f88:	f000 fc96 	bl	80018b8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d103      	bne.n	8000f9a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000f92:	2013      	movs	r0, #19
 8000f94:	f000 fc84 	bl	80018a0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000f98:	e002      	b.n	8000fa0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000f9a:	2007      	movs	r0, #7
 8000f9c:	f000 fc80 	bl	80018a0 <bno055_delay>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ffe3 	bl	8000f78 <bno055_setOperationMode>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000fba:	200c      	movs	r0, #12
 8000fbc:	f7ff ffdc 	bl	8000f78 <bno055_setOperationMode>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000fc8:	2120      	movs	r1, #32
 8000fca:	203f      	movs	r0, #63	; 0x3f
 8000fcc:	f000 fc74 	bl	80018b8 <bno055_writeData>
  bno055_delay(700);
 8000fd0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000fd4:	f000 fc64 	bl	80018a0 <bno055_delay>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  bno055_reset();
 8000fe2:	f7ff ffef 	bl	8000fc4 <bno055_reset>

  uint8_t id = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	2201      	movs	r2, #1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 fd4d 	bl	8001a90 <bno055_readData>
  if (id != BNO055_ID) {
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2ba0      	cmp	r3, #160	; 0xa0
 8000ffa:	d004      	beq.n	8001006 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4809      	ldr	r0, [pc, #36]	; (8001028 <bno055_setup+0x4c>)
 8001002:	f008 f81b 	bl	800903c <iprintf>
  }
  bno055_setPage(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ffa8 	bl	8000f5c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800100c:	2100      	movs	r1, #0
 800100e:	203f      	movs	r0, #63	; 0x3f
 8001010:	f000 fc52 	bl	80018b8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001014:	f7ff ffc8 	bl	8000fa8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f000 fc41 	bl	80018a0 <bno055_delay>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	0800b648 	.word	0x0800b648

0800102c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800102c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001030:	b09e      	sub	sp, #120	; 0x78
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ff8e 	bl	8000f5c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001044:	2b20      	cmp	r3, #32
 8001046:	d108      	bne.n	800105a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001048:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800104c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001050:	2208      	movs	r2, #8
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fd1c 	bl	8001a90 <bno055_readData>
 8001058:	e007      	b.n	800106a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800105a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800105e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001062:	2206      	movs	r2, #6
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fd13 	bl	8001a90 <bno055_readData>

  double scale = 1;
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b8b      	ldr	r3, [pc, #556]	; (800129c <bno055_getVector+0x270>)
 8001070:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001078:	2b0e      	cmp	r3, #14
 800107a:	d109      	bne.n	8001090 <bno055_getVector+0x64>
    scale = magScale;
 800107c:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <bno055_getVector+0x274>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa47 	bl	8000514 <__aeabi_ui2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800108e:	e03e      	b.n	800110e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001094:	2b08      	cmp	r3, #8
 8001096:	d007      	beq.n	80010a8 <bno055_getVector+0x7c>
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	2b28      	cmp	r3, #40	; 0x28
 800109e:	d003      	beq.n	80010a8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80010a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a4:	2b2e      	cmp	r3, #46	; 0x2e
 80010a6:	d109      	bne.n	80010bc <bno055_getVector+0x90>
    scale = accelScale;
 80010a8:	4b7e      	ldr	r3, [pc, #504]	; (80012a4 <bno055_getVector+0x278>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa31 	bl	8000514 <__aeabi_ui2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010ba:	e028      	b.n	800110e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80010bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c0:	2b14      	cmp	r3, #20
 80010c2:	d109      	bne.n	80010d8 <bno055_getVector+0xac>
    scale = angularRateScale;
 80010c4:	4b78      	ldr	r3, [pc, #480]	; (80012a8 <bno055_getVector+0x27c>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa23 	bl	8000514 <__aeabi_ui2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010d6:	e01a      	b.n	800110e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80010d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010dc:	2b1a      	cmp	r3, #26
 80010de:	d109      	bne.n	80010f4 <bno055_getVector+0xc8>
    scale = eulerScale;
 80010e0:	4b72      	ldr	r3, [pc, #456]	; (80012ac <bno055_getVector+0x280>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa15 	bl	8000514 <__aeabi_ui2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80010f2:	e00c      	b.n	800110e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80010f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f8:	2b20      	cmp	r3, #32
 80010fa:	d108      	bne.n	800110e <bno055_getVector+0xe2>
    scale = quaScale;
 80010fc:	4b6c      	ldr	r3, [pc, #432]	; (80012b0 <bno055_getVector+0x284>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa07 	bl	8000514 <__aeabi_ui2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800110e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001112:	2220      	movs	r2, #32
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f007 fb1e 	bl	8008758 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800111c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001120:	2b20      	cmp	r3, #32
 8001122:	d150      	bne.n	80011c6 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001124:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21b      	sxth	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9fc 	bl	8000534 <__aeabi_i2d>
 800113c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001140:	f7ff fb8c 	bl	800085c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800114c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21b      	sxth	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9e8 	bl	8000534 <__aeabi_i2d>
 8001164:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001168:	f7ff fb78 	bl	800085c <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001174:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9d4 	bl	8000534 <__aeabi_i2d>
 800118c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001190:	f7ff fb64 	bl	800085c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800119c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9c0 	bl	8000534 <__aeabi_i2d>
 80011b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011b8:	f7ff fb50 	bl	800085c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80011c4:	e03b      	b.n	800123e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80011c6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9ab 	bl	8000534 <__aeabi_i2d>
 80011de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80011ee:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f997 	bl	8000534 <__aeabi_i2d>
 8001206:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800120a:	f7ff fb27 	bl	800085c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001216:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b21b      	sxth	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f983 	bl	8000534 <__aeabi_i2d>
 800122e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001232:	f7ff fb13 	bl	800085c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800123e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001242:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800124e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001252:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001256:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800125a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800125e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001262:	ec49 8b14 	vmov	d4, r8, r9
 8001266:	ec45 4b15 	vmov	d5, r4, r5
 800126a:	ec41 0b16 	vmov	d6, r0, r1
 800126e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001272:	eeb0 0a44 	vmov.f32	s0, s8
 8001276:	eef0 0a64 	vmov.f32	s1, s9
 800127a:	eeb0 1a45 	vmov.f32	s2, s10
 800127e:	eef0 1a65 	vmov.f32	s3, s11
 8001282:	eeb0 2a46 	vmov.f32	s4, s12
 8001286:	eef0 2a66 	vmov.f32	s5, s13
 800128a:	eeb0 3a47 	vmov.f32	s6, s14
 800128e:	eef0 3a67 	vmov.f32	s7, s15
 8001292:	3778      	adds	r7, #120	; 0x78
 8001294:	46bd      	mov	sp, r7
 8001296:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800129a:	bf00      	nop
 800129c:	3ff00000 	.word	0x3ff00000
 80012a0:	20000006 	.word	0x20000006
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000002 	.word	0x20000002
 80012ac:	20000004 	.word	0x20000004
 80012b0:	20000008 	.word	0x20000008

080012b4 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80012b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012b8:	b090      	sub	sp, #64	; 0x40
 80012ba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80012bc:	201a      	movs	r0, #26
 80012be:	f7ff feb5 	bl	800102c <bno055_getVector>
 80012c2:	eeb0 4a40 	vmov.f32	s8, s0
 80012c6:	eef0 4a60 	vmov.f32	s9, s1
 80012ca:	eeb0 5a41 	vmov.f32	s10, s2
 80012ce:	eef0 5a61 	vmov.f32	s11, s3
 80012d2:	eeb0 6a42 	vmov.f32	s12, s4
 80012d6:	eef0 6a62 	vmov.f32	s13, s5
 80012da:	eeb0 7a43 	vmov.f32	s14, s6
 80012de:	eef0 7a63 	vmov.f32	s15, s7
 80012e2:	ed87 4b08 	vstr	d4, [r7, #32]
 80012e6:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80012ea:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80012ee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80012f2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012f6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80012fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001302:	ec49 8b14 	vmov	d4, r8, r9
 8001306:	ec45 4b15 	vmov	d5, r4, r5
 800130a:	ec41 0b16 	vmov	d6, r0, r1
 800130e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001312:	eeb0 0a44 	vmov.f32	s0, s8
 8001316:	eef0 0a64 	vmov.f32	s1, s9
 800131a:	eeb0 1a45 	vmov.f32	s2, s10
 800131e:	eef0 1a65 	vmov.f32	s3, s11
 8001322:	eeb0 2a46 	vmov.f32	s4, s12
 8001326:	eef0 2a66 	vmov.f32	s5, s13
 800132a:	eeb0 3a47 	vmov.f32	s6, s14
 800132e:	eef0 3a67 	vmov.f32	s7, s15
 8001332:	3740      	adds	r7, #64	; 0x40
 8001334:	46bd      	mov	sp, r7
 8001336:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800133a <Control>:
#include "main.h"

__SELENOID_STATES SELENOID_STATES = {0};
extern volatile uint8_t MAIN_THRST_ACTIVATE;

void Control(__SELENOID_STATES* SELENOID_STATES, float roll, float pitch) {
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	ed87 0a02 	vstr	s0, [r7, #8]
 8001346:	edc7 0a01 	vstr	s1, [r7, #4]

	SELENOID_STATES->Selenoid_1 = 0;
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	7813      	ldrb	r3, [r2, #0]
 800134e:	f36f 0300 	bfc	r3, #0, #1
 8001352:	7013      	strb	r3, [r2, #0]
	SELENOID_STATES->Selenoid_2 = 0;
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	7813      	ldrb	r3, [r2, #0]
 8001358:	f36f 0341 	bfc	r3, #1, #1
 800135c:	7013      	strb	r3, [r2, #0]
	SELENOID_STATES->Selenoid_3 = 0;
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	7813      	ldrb	r3, [r2, #0]
 8001362:	f36f 0382 	bfc	r3, #2, #1
 8001366:	7013      	strb	r3, [r2, #0]
	SELENOID_STATES->Selenoid_4 = 0;
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	7813      	ldrb	r3, [r2, #0]
 800136c:	f36f 03c3 	bfc	r3, #3, #1
 8001370:	7013      	strb	r3, [r2, #0]

	if (roll > ROLL_MAX_ANGLE_LIMIT)	// Sağ-sol
 8001372:	edd7 7a02 	vldr	s15, [r7, #8]
 8001376:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800137a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	dd05      	ble.n	8001390 <Control+0x56>
		SELENOID_STATES->Selenoid_1 = 1;
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	7813      	ldrb	r3, [r2, #0]
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	7013      	strb	r3, [r2, #0]
 800138e:	e00d      	b.n	80013ac <Control+0x72>
	else if (roll < ROLL_MIN_ANGLE_LIMIT)
 8001390:	edd7 7a02 	vldr	s15, [r7, #8]
 8001394:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 8001398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d504      	bpl.n	80013ac <Control+0x72>
		SELENOID_STATES->Selenoid_3 = 1;
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	7813      	ldrb	r3, [r2, #0]
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	7013      	strb	r3, [r2, #0]

	if (pitch > PITCH_MAX_ANGLE_LIMIT)
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80013b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	dd05      	ble.n	80013ca <Control+0x90>
		SELENOID_STATES->Selenoid_2 = 1;
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	7813      	ldrb	r3, [r2, #0]
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	7013      	strb	r3, [r2, #0]
	else if (pitch < PITCH_MIN_ANGLE_LIMIT)
		SELENOID_STATES->Selenoid_4 = 1;
}
 80013c8:	e00e      	b.n	80013e8 <Control+0xae>
	else if (pitch < PITCH_MIN_ANGLE_LIMIT)
 80013ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ce:	eebf 7a08 	vmov.f32	s14, #248	; 0xbfc00000 -1.5
 80013d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d400      	bmi.n	80013de <Control+0xa4>
}
 80013dc:	e004      	b.n	80013e8 <Control+0xae>
		SELENOID_STATES->Selenoid_4 = 1;
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	7813      	ldrb	r3, [r2, #0]
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	7013      	strb	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <AssignOutputs>:

void AssignOutputs(__SELENOID_STATES SELENOID_STATES) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(Selenoid_1_GPIO_Port, Selenoid_1_Pin, SELENOID_STATES.Selenoid_1);
 80013fc:	793b      	ldrb	r3, [r7, #4]
 80013fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	461a      	mov	r2, r3
 8001406:	2120      	movs	r1, #32
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <AssignOutputs+0x68>)
 800140a:	f002 ff91 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Selenoid_2_GPIO_Port, Selenoid_2_Pin, SELENOID_STATES.Selenoid_2);
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001414:	b2db      	uxtb	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	4810      	ldr	r0, [pc, #64]	; (800145c <AssignOutputs+0x68>)
 800141c:	f002 ff88 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Selenoid_3_GPIO_Port, Selenoid_3_Pin, SELENOID_STATES.Selenoid_3);
 8001420:	793b      	ldrb	r3, [r7, #4]
 8001422:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	2101      	movs	r1, #1
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <AssignOutputs+0x6c>)
 800142e:	f002 ff7f 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Selenoid_4_GPIO_Port, Selenoid_4_Pin, SELENOID_STATES.Selenoid_4);
 8001432:	793b      	ldrb	r3, [r7, #4]
 8001434:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	2102      	movs	r1, #2
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <AssignOutputs+0x6c>)
 8001440:	f002 ff76 	bl	8004330 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Main_selenoid_GPIO_Port, Main_selenoid_Pin, MAIN_THRST_ACTIVATE);
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <AssignOutputs+0x70>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	2110      	movs	r1, #16
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <AssignOutputs+0x68>)
 8001450:	f002 ff6e 	bl	8004330 <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40020000 	.word	0x40020000
 8001460:	40020400 	.word	0x40020400
 8001464:	200002eb 	.word	0x200002eb

08001468 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_DMA_Init+0x78>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <MX_DMA_Init+0x78>)
 8001478:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_DMA_Init+0x78>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <MX_DMA_Init+0x78>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a13      	ldr	r2, [pc, #76]	; (80014e0 <MX_DMA_Init+0x78>)
 8001494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <MX_DMA_Init+0x78>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2011      	movs	r0, #17
 80014ac:	f002 f80f 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014b0:	2011      	movs	r0, #17
 80014b2:	f002 f828 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	203a      	movs	r0, #58	; 0x3a
 80014bc:	f002 f807 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80014c0:	203a      	movs	r0, #58	; 0x3a
 80014c2:	f002 f820 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2045      	movs	r0, #69	; 0x45
 80014cc:	f001 ffff 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014d0:	2045      	movs	r0, #69	; 0x45
 80014d2:	f002 f818 	bl	8003506 <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b4b      	ldr	r3, [pc, #300]	; (800162c <MX_GPIO_Init+0x148>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a4a      	ldr	r2, [pc, #296]	; (800162c <MX_GPIO_Init+0x148>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b48      	ldr	r3, [pc, #288]	; (800162c <MX_GPIO_Init+0x148>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <MX_GPIO_Init+0x148>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a43      	ldr	r2, [pc, #268]	; (800162c <MX_GPIO_Init+0x148>)
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <MX_GPIO_Init+0x148>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <MX_GPIO_Init+0x148>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a3c      	ldr	r2, [pc, #240]	; (800162c <MX_GPIO_Init+0x148>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <MX_GPIO_Init+0x148>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <MX_GPIO_Init+0x148>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a35      	ldr	r2, [pc, #212]	; (800162c <MX_GPIO_Init+0x148>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <MX_GPIO_Init+0x148>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001570:	482f      	ldr	r0, [pc, #188]	; (8001630 <MX_GPIO_Init+0x14c>)
 8001572:	f002 fedd 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Main_selenoid_Pin|Selenoid_1_Pin|Selenoid_2_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	21b0      	movs	r1, #176	; 0xb0
 800157a:	482e      	ldr	r0, [pc, #184]	; (8001634 <MX_GPIO_Init+0x150>)
 800157c:	f002 fed8 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Selenoid_3_Pin|Selenoid_4_Pin|APC220_SET_Pin, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	210b      	movs	r1, #11
 8001584:	482c      	ldr	r0, [pc, #176]	; (8001638 <MX_GPIO_Init+0x154>)
 8001586:	f002 fed3 	bl	8004330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4823      	ldr	r0, [pc, #140]	; (8001630 <MX_GPIO_Init+0x14c>)
 80015a4:	f002 fc44 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Contact_Pin;
 80015a8:	2301      	movs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Contact_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	481d      	ldr	r0, [pc, #116]	; (8001634 <MX_GPIO_Init+0x150>)
 80015be:	f002 fc37 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Safety_Pin;
 80015c2:	2302      	movs	r3, #2
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Safety_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4817      	ldr	r0, [pc, #92]	; (8001634 <MX_GPIO_Init+0x150>)
 80015d6:	f002 fc2b 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Main_selenoid_Pin|Selenoid_1_Pin|Selenoid_2_Pin;
 80015da:	23b0      	movs	r3, #176	; 0xb0
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <MX_GPIO_Init+0x150>)
 80015f2:	f002 fc1d 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Selenoid_3_Pin|Selenoid_4_Pin|APC220_SET_Pin;
 80015f6:	230b      	movs	r3, #11
 80015f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <MX_GPIO_Init+0x154>)
 800160e:	f002 fc0f 	bl	8003e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2006      	movs	r0, #6
 8001618:	f001 ff59 	bl	80034ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800161c:	2006      	movs	r0, #6
 800161e:	f001 ff72 	bl	8003506 <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800
 8001630:	40020800 	.word	0x40020800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400

0800163c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_I2C1_Init+0x50>)
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <MX_I2C1_Init+0x54>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_I2C1_Init+0x50>)
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_I2C1_Init+0x58>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_I2C1_Init+0x50>)
 800165a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_I2C1_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_I2C1_Init+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_I2C1_Init+0x50>)
 800167a:	f002 fea5 	bl	80043c8 <HAL_I2C_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001684:	f000 fcce 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000210 	.word	0x20000210
 8001690:	40005400 	.word	0x40005400
 8001694:	00061a80 	.word	0x00061a80

08001698 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_I2C3_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_I2C3_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_I2C3_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_I2C3_Init+0x50>)
 80016d6:	f002 fe77 	bl	80043c8 <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f000 fca0 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000264 	.word	0x20000264
 80016ec:	40005c00 	.word	0x40005c00
 80016f0:	00061a80 	.word	0x00061a80

080016f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	; 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a42      	ldr	r2, [pc, #264]	; (800181c <HAL_I2C_MspInit+0x128>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12d      	bne.n	8001772 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a40      	ldr	r2, [pc, #256]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BNO055_SCL_Pin|BNO055_SDA_Pin;
 8001732:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001738:	2312      	movs	r3, #18
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001744:	2304      	movs	r3, #4
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 031c 	add.w	r3, r7, #28
 800174c:	4619      	mov	r1, r3
 800174e:	4835      	ldr	r0, [pc, #212]	; (8001824 <HAL_I2C_MspInit+0x130>)
 8001750:	f002 fb6e 	bl	8003e30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 800175e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001770:	e04f      	b.n	8001812 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a2c      	ldr	r2, [pc, #176]	; (8001828 <HAL_I2C_MspInit+0x134>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d14a      	bne.n	8001812 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6313      	str	r3, [r2, #48]	; 0x30
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MS5611_SCL_Pin;
 80017b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ba:	2312      	movs	r3, #18
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017c6:	2304      	movs	r3, #4
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MS5611_SCL_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	4619      	mov	r1, r3
 80017d0:	4816      	ldr	r0, [pc, #88]	; (800182c <HAL_I2C_MspInit+0x138>)
 80017d2:	f002 fb2d 	bl	8003e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MS5611_SDA_Pin;
 80017d6:	2310      	movs	r3, #16
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80017e6:	2309      	movs	r3, #9
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MS5611_SDA_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <HAL_I2C_MspInit+0x130>)
 80017f2:	f002 fb1d 	bl	8003e30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 8001800:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_I2C_MspInit+0x12c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
}
 8001812:	bf00      	nop
 8001814:	3730      	adds	r7, #48	; 0x30
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40005400 	.word	0x40005400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400
 8001828:	40005c00 	.word	0x40005c00
 800182c:	40020000 	.word	0x40020000

08001830 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001838:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800183c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001848:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800184c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001850:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001858:	e000      	b.n	800185c <ITM_SendChar+0x2c>
    {
      __NOP();
 800185a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800185c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f9      	beq.n	800185a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001866:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001870:	687b      	ldr	r3, [r7, #4]
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <bno055_assignI2C+0x1c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200002b8 	.word	0x200002b8

080018a0 <bno055_delay>:

void bno055_delay(int time) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 fcec 	bl	8003288 <HAL_Delay>
#endif
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af02      	add	r7, sp, #8
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	733b      	strb	r3, [r7, #12]
 80018cc:	79bb      	ldrb	r3, [r7, #6]
 80018ce:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80018d0:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <bno055_writeData+0x184>)
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	f107 020c 	add.w	r2, r7, #12
 80018d8:	230a      	movs	r3, #10
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2302      	movs	r3, #2
 80018de:	2150      	movs	r1, #80	; 0x50
 80018e0:	f002 feb6 	bl	8004650 <HAL_I2C_Master_Transmit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a0 	beq.w	8001a30 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d103      	bne.n	80018fe <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80018f6:	4852      	ldr	r0, [pc, #328]	; (8001a40 <bno055_writeData+0x188>)
 80018f8:	f007 fc26 	bl	8009148 <puts>
 80018fc:	e012      	b.n	8001924 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d103      	bne.n	800190c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001904:	484f      	ldr	r0, [pc, #316]	; (8001a44 <bno055_writeData+0x18c>)
 8001906:	f007 fc1f 	bl	8009148 <puts>
 800190a:	e00b      	b.n	8001924 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d103      	bne.n	800191a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001912:	484d      	ldr	r0, [pc, #308]	; (8001a48 <bno055_writeData+0x190>)
 8001914:	f007 fc18 	bl	8009148 <puts>
 8001918:	e004      	b.n	8001924 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	4619      	mov	r1, r3
 800191e:	484b      	ldr	r0, [pc, #300]	; (8001a4c <bno055_writeData+0x194>)
 8001920:	f007 fb8c 	bl	800903c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001924:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <bno055_writeData+0x184>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 fce3 	bl	80052f4 <HAL_I2C_GetError>
 800192e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d07e      	beq.n	8001a34 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d103      	bne.n	8001944 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 800193c:	4844      	ldr	r0, [pc, #272]	; (8001a50 <bno055_writeData+0x198>)
 800193e:	f007 fc03 	bl	8009148 <puts>
 8001942:	e021      	b.n	8001988 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d103      	bne.n	8001952 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 800194a:	4842      	ldr	r0, [pc, #264]	; (8001a54 <bno055_writeData+0x19c>)
 800194c:	f007 fbfc 	bl	8009148 <puts>
 8001950:	e01a      	b.n	8001988 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	2b04      	cmp	r3, #4
 8001956:	d103      	bne.n	8001960 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001958:	483f      	ldr	r0, [pc, #252]	; (8001a58 <bno055_writeData+0x1a0>)
 800195a:	f007 fbf5 	bl	8009148 <puts>
 800195e:	e013      	b.n	8001988 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b08      	cmp	r3, #8
 8001964:	d103      	bne.n	800196e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001966:	483d      	ldr	r0, [pc, #244]	; (8001a5c <bno055_writeData+0x1a4>)
 8001968:	f007 fbee 	bl	8009148 <puts>
 800196c:	e00c      	b.n	8001988 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	2b10      	cmp	r3, #16
 8001972:	d103      	bne.n	800197c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001974:	483a      	ldr	r0, [pc, #232]	; (8001a60 <bno055_writeData+0x1a8>)
 8001976:	f007 fbe7 	bl	8009148 <puts>
 800197a:	e005      	b.n	8001988 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b20      	cmp	r3, #32
 8001980:	d102      	bne.n	8001988 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001982:	4838      	ldr	r0, [pc, #224]	; (8001a64 <bno055_writeData+0x1ac>)
 8001984:	f007 fbe0 	bl	8009148 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <bno055_writeData+0x184>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fca3 	bl	80052d8 <HAL_I2C_GetState>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 800199c:	4832      	ldr	r0, [pc, #200]	; (8001a68 <bno055_writeData+0x1b0>)
 800199e:	f007 fbd3 	bl	8009148 <puts>
 80019a2:	e048      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d103      	bne.n	80019b2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80019aa:	482f      	ldr	r0, [pc, #188]	; (8001a68 <bno055_writeData+0x1b0>)
 80019ac:	f007 fbcc 	bl	8009148 <puts>
 80019b0:	e041      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80019b2:	7bfb      	ldrb	r3, [r7, #15]
 80019b4:	2b24      	cmp	r3, #36	; 0x24
 80019b6:	d103      	bne.n	80019c0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80019b8:	482c      	ldr	r0, [pc, #176]	; (8001a6c <bno055_writeData+0x1b4>)
 80019ba:	f007 fbc5 	bl	8009148 <puts>
 80019be:	e03a      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b21      	cmp	r3, #33	; 0x21
 80019c4:	d103      	bne.n	80019ce <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80019c6:	482a      	ldr	r0, [pc, #168]	; (8001a70 <bno055_writeData+0x1b8>)
 80019c8:	f007 fbbe 	bl	8009148 <puts>
 80019cc:	e033      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b22      	cmp	r3, #34	; 0x22
 80019d2:	d103      	bne.n	80019dc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80019d4:	4827      	ldr	r0, [pc, #156]	; (8001a74 <bno055_writeData+0x1bc>)
 80019d6:	f007 fbb7 	bl	8009148 <puts>
 80019da:	e02c      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b28      	cmp	r3, #40	; 0x28
 80019e0:	d103      	bne.n	80019ea <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80019e2:	4825      	ldr	r0, [pc, #148]	; (8001a78 <bno055_writeData+0x1c0>)
 80019e4:	f007 fbb0 	bl	8009148 <puts>
 80019e8:	e025      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b29      	cmp	r3, #41	; 0x29
 80019ee:	d103      	bne.n	80019f8 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80019f0:	4822      	ldr	r0, [pc, #136]	; (8001a7c <bno055_writeData+0x1c4>)
 80019f2:	f007 fba9 	bl	8009148 <puts>
 80019f6:	e01e      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b2a      	cmp	r3, #42	; 0x2a
 80019fc:	d103      	bne.n	8001a06 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80019fe:	4820      	ldr	r0, [pc, #128]	; (8001a80 <bno055_writeData+0x1c8>)
 8001a00:	f007 fba2 	bl	8009148 <puts>
 8001a04:	e017      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b60      	cmp	r3, #96	; 0x60
 8001a0a:	d103      	bne.n	8001a14 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001a0c:	481d      	ldr	r0, [pc, #116]	; (8001a84 <bno055_writeData+0x1cc>)
 8001a0e:	f007 fb9b 	bl	8009148 <puts>
 8001a12:	e010      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2ba0      	cmp	r3, #160	; 0xa0
 8001a18:	d103      	bne.n	8001a22 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <bno055_writeData+0x1d0>)
 8001a1c:	f007 fb94 	bl	8009148 <puts>
 8001a20:	e009      	b.n	8001a36 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2be0      	cmp	r3, #224	; 0xe0
 8001a26:	d106      	bne.n	8001a36 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001a28:	4818      	ldr	r0, [pc, #96]	; (8001a8c <bno055_writeData+0x1d4>)
 8001a2a:	f007 fb8d 	bl	8009148 <puts>
 8001a2e:	e002      	b.n	8001a36 <bno055_writeData+0x17e>
    return;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <bno055_writeData+0x17e>
    return;
 8001a34:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200002b8 	.word	0x200002b8
 8001a40:	0800b684 	.word	0x0800b684
 8001a44:	0800b6a8 	.word	0x0800b6a8
 8001a48:	0800b6d0 	.word	0x0800b6d0
 8001a4c:	0800b6f4 	.word	0x0800b6f4
 8001a50:	0800b70c 	.word	0x0800b70c
 8001a54:	0800b720 	.word	0x0800b720
 8001a58:	0800b734 	.word	0x0800b734
 8001a5c:	0800b748 	.word	0x0800b748
 8001a60:	0800b75c 	.word	0x0800b75c
 8001a64:	0800b770 	.word	0x0800b770
 8001a68:	0800b788 	.word	0x0800b788
 8001a6c:	0800b7a0 	.word	0x0800b7a0
 8001a70:	0800b7b4 	.word	0x0800b7b4
 8001a74:	0800b7cc 	.word	0x0800b7cc
 8001a78:	0800b7e4 	.word	0x0800b7e4
 8001a7c:	0800b7fc 	.word	0x0800b7fc
 8001a80:	0800b81c 	.word	0x0800b81c
 8001a84:	0800b83c 	.word	0x0800b83c
 8001a88:	0800b854 	.word	0x0800b854
 8001a8c:	0800b86c 	.word	0x0800b86c

08001a90 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <bno055_readData+0x40>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	1dfa      	adds	r2, r7, #7
 8001aa6:	2364      	movs	r3, #100	; 0x64
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2150      	movs	r1, #80	; 0x50
 8001aae:	f002 fdcf 	bl	8004650 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <bno055_readData+0x40>)
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2264      	movs	r2, #100	; 0x64
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	2150      	movs	r1, #80	; 0x50
 8001ac2:	f002 fec3 	bl	800484c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002b8 	.word	0x200002b8

08001ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad8:	b0b5      	sub	sp, #212	; 0xd4
 8001ada:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001adc:	f001 fb62 	bl	80031a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae0:	f000 f9b8 	bl	8001e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae4:	f7ff fcfe 	bl	80014e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ae8:	f7ff fcbe 	bl	8001468 <MX_DMA_Init>
  MX_I2C1_Init();
 8001aec:	f7ff fda6 	bl	800163c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001af0:	f001 f948 	bl	8002d84 <MX_USART6_UART_Init>
  MX_I2C3_Init();
 8001af4:	f7ff fdd0 	bl	8001698 <MX_I2C3_Init>
  MX_TIM4_Init();
 8001af8:	f000 ff98 	bl	8002a2c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001afc:	f001 f918 	bl	8002d30 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001b00:	f001 f8ec 	bl	8002cdc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  TOF_UART_Init(&huart1);
 8001b04:	48b5      	ldr	r0, [pc, #724]	; (8001ddc <main+0x308>)
 8001b06:	f001 f8cb 	bl	8002ca0 <TOF_UART_Init>

	HAL_GPIO_WritePin(APC220_SET_GPIO_Port, APC220_SET_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2108      	movs	r1, #8
 8001b0e:	48b4      	ldr	r0, [pc, #720]	; (8001de0 <main+0x30c>)
 8001b10:	f002 fc0e 	bl	8004330 <HAL_GPIO_WritePin>

	ms5611_set_i2c(&hi2c3);
 8001b14:	48b3      	ldr	r0, [pc, #716]	; (8001de4 <main+0x310>)
 8001b16:	f000 fad7 	bl	80020c8 <ms5611_set_i2c>
	ms5611_init();
 8001b1a:	f000 fb19 	bl	8002150 <ms5611_init>

	bno055_assignI2C(&hi2c1);
 8001b1e:	48b2      	ldr	r0, [pc, #712]	; (8001de8 <main+0x314>)
 8001b20:	f7ff feae 	bl	8001880 <bno055_assignI2C>
	bno055_setup();
 8001b24:	f7ff fa5a 	bl	8000fdc <bno055_setup>
	bno055_setOperationModeNDOF();
 8001b28:	f7ff fa45 	bl	8000fb6 <bno055_setOperationModeNDOF>


	HAL_Delay(5000);
 8001b2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b30:	f001 fbaa 	bl	8003288 <HAL_Delay>

	HAL_UART_Receive(&huart2, &recv, 1, 100);
 8001b34:	2364      	movs	r3, #100	; 0x64
 8001b36:	2201      	movs	r2, #1
 8001b38:	49ac      	ldr	r1, [pc, #688]	; (8001dec <main+0x318>)
 8001b3a:	48ad      	ldr	r0, [pc, #692]	; (8001df0 <main+0x31c>)
 8001b3c:	f005 fa32 	bl	8006fa4 <HAL_UART_Receive>
	HAL_UART_Transmit_DMA(&huart2, tele_header, sizeof(tele_header));
 8001b40:	2237      	movs	r2, #55	; 0x37
 8001b42:	49ac      	ldr	r1, [pc, #688]	; (8001df4 <main+0x320>)
 8001b44:	48aa      	ldr	r0, [pc, #680]	; (8001df0 <main+0x31c>)
 8001b46:	f005 facf 	bl	80070e8 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive(&huart2, &recv, 1, 100);
 8001b4a:	2364      	movs	r3, #100	; 0x64
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	49a7      	ldr	r1, [pc, #668]	; (8001dec <main+0x318>)
 8001b50:	48a7      	ldr	r0, [pc, #668]	; (8001df0 <main+0x31c>)
 8001b52:	f005 fa27 	bl	8006fa4 <HAL_UART_Receive>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5c:	48a6      	ldr	r0, [pc, #664]	; (8001df8 <main+0x324>)
 8001b5e:	f002 fbe7 	bl	8004330 <HAL_GPIO_WritePin>

	while(HAL_GPIO_ReadPin(Safety_GPIO_Port, Safety_Pin) == GPIO_PIN_SET);
 8001b62:	bf00      	nop
 8001b64:	2102      	movs	r1, #2
 8001b66:	48a5      	ldr	r0, [pc, #660]	; (8001dfc <main+0x328>)
 8001b68:	f002 fbca 	bl	8004300 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d0f8      	beq.n	8001b64 <main+0x90>

	HAL_TIM_Base_Start_IT(&htim4);
 8001b72:	48a3      	ldr	r0, [pc, #652]	; (8001e00 <main+0x32c>)
 8001b74:	f004 fd1e 	bl	80065b4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (!MAIN_THRST_LOCK && (tof_meas < MAIN_SELENOID_HEIGHT)) {
 8001b78:	4ba2      	ldr	r3, [pc, #648]	; (8001e04 <main+0x330>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10b      	bne.n	8001b9a <main+0xc6>
 8001b82:	4ba1      	ldr	r3, [pc, #644]	; (8001e08 <main+0x334>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001b8c:	d205      	bcs.n	8001b9a <main+0xc6>
		MAIN_THRST_ACTIVATE = GPIO_PIN_SET;
 8001b8e:	4b9f      	ldr	r3, [pc, #636]	; (8001e0c <main+0x338>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
		MAIN_THRST_LOCK = 1;
 8001b94:	4b9b      	ldr	r3, [pc, #620]	; (8001e04 <main+0x330>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
	}

	if (IMU_DTRDY) {
 8001b9a:	4b9d      	ldr	r3, [pc, #628]	; (8001e10 <main+0x33c>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d073      	beq.n	8001c8c <main+0x1b8>
		v = bno055_getVectorEuler();
 8001ba4:	f7ff fb86 	bl	80012b4 <bno055_getVectorEuler>
 8001ba8:	eeb0 4a40 	vmov.f32	s8, s0
 8001bac:	eef0 4a60 	vmov.f32	s9, s1
 8001bb0:	eeb0 5a41 	vmov.f32	s10, s2
 8001bb4:	eef0 5a61 	vmov.f32	s11, s3
 8001bb8:	eeb0 6a42 	vmov.f32	s12, s4
 8001bbc:	eef0 6a62 	vmov.f32	s13, s5
 8001bc0:	eeb0 7a43 	vmov.f32	s14, s6
 8001bc4:	eef0 7a63 	vmov.f32	s15, s7
 8001bc8:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <main+0x340>)
 8001bca:	ed83 4b00 	vstr	d4, [r3]
 8001bce:	ed83 5b02 	vstr	d5, [r3, #8]
 8001bd2:	ed83 6b04 	vstr	d6, [r3, #16]
 8001bd6:	ed83 7b06 	vstr	d7, [r3, #24]
		printf("Roll: %.2f\tPitch: %.2f\tYaw: %.2f\n", v.x, v.y, v.z);
 8001bda:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <main+0x340>)
 8001bdc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001be0:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <main+0x340>)
 8001be2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001be6:	498b      	ldr	r1, [pc, #556]	; (8001e14 <main+0x340>)
 8001be8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8001bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001bf0:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	462b      	mov	r3, r5
 8001bf8:	4887      	ldr	r0, [pc, #540]	; (8001e18 <main+0x344>)
 8001bfa:	f007 fa1f 	bl	800903c <iprintf>
		IMU_DTRDY = 0;
 8001bfe:	4b84      	ldr	r3, [pc, #528]	; (8001e10 <main+0x33c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

		ms5611_update();
 8001c04:	f000 fb38 	bl	8002278 <ms5611_update>
		temp = ms5611_get_temperature();
 8001c08:	f000 fb3e 	bl	8002288 <ms5611_get_temperature>
 8001c0c:	ec53 2b10 	vmov	r2, r3, d0
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe ffd0 	bl	8000bb8 <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a80      	ldr	r2, [pc, #512]	; (8001e1c <main+0x348>)
 8001c1c:	6013      	str	r3, [r2, #0]
		pressure = ms5611_get_pressure();
 8001c1e:	f000 fbaf 	bl	8002380 <ms5611_get_pressure>
 8001c22:	ec53 2b10 	vmov	r2, r3, d0
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe ffc5 	bl	8000bb8 <__aeabi_d2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a7b      	ldr	r2, [pc, #492]	; (8001e20 <main+0x34c>)
 8001c32:	6013      	str	r3, [r2, #0]
		printf("Temp: %.2f\tPressure: %.2f\n", temp, pressure);
 8001c34:	4b79      	ldr	r3, [pc, #484]	; (8001e1c <main+0x348>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc8d 	bl	8000558 <__aeabi_f2d>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	460d      	mov	r5, r1
 8001c42:	4b77      	ldr	r3, [pc, #476]	; (8001e20 <main+0x34c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fc86 	bl	8000558 <__aeabi_f2d>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9cd 2300 	strd	r2, r3, [sp]
 8001c54:	4622      	mov	r2, r4
 8001c56:	462b      	mov	r3, r5
 8001c58:	4872      	ldr	r0, [pc, #456]	; (8001e24 <main+0x350>)
 8001c5a:	f007 f9ef 	bl	800903c <iprintf>

		Control(&SELENOID_STATES, v.x, v.y);
 8001c5e:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <main+0x340>)
 8001c60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffa6 	bl	8000bb8 <__aeabi_d2f>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <main+0x340>)
 8001c70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7fe ff9e 	bl	8000bb8 <__aeabi_d2f>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	ee00 3a90 	vmov	s1, r3
 8001c82:	ee00 4a10 	vmov	s0, r4
 8001c86:	4868      	ldr	r0, [pc, #416]	; (8001e28 <main+0x354>)
 8001c88:	f7ff fb57 	bl	800133a <Control>
	}

	if(SD_LOG_RDY){
 8001c8c:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <main+0x358>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d04c      	beq.n	8001d30 <main+0x25c>
		char s[150] = {0};
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2292      	movs	r2, #146	; 0x92
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f006 fd58 	bl	8008758 <memset>
		sprintf(s, "%ld,%.2f,%.2f,%.2f,%.2f,%.2f,%d\n", HAL_GetTick(), v.x, v.y, v.z, temp, pressure, tof_meas);
 8001ca8:	f001 fae2 	bl	8003270 <HAL_GetTick>
 8001cac:	4606      	mov	r6, r0
 8001cae:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <main+0x340>)
 8001cb0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001cb4:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <main+0x340>)
 8001cb6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001cba:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <main+0x340>)
 8001cbc:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8001cc0:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <main+0x348>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc47 	bl	8000558 <__aeabi_f2d>
 8001cca:	e9c7 0100 	strd	r0, r1, [r7]
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <main+0x34c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc40 	bl	8000558 <__aeabi_f2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	494a      	ldr	r1, [pc, #296]	; (8001e08 <main+0x334>)
 8001cde:	8809      	ldrh	r1, [r1, #0]
 8001ce0:	b289      	uxth	r1, r1
 8001ce2:	f107 0008 	add.w	r0, r7, #8
 8001ce6:	910a      	str	r1, [sp, #40]	; 0x28
 8001ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001cec:	ed97 7b00 	vldr	d7, [r7]
 8001cf0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001cf4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001cf8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001cfc:	e9cd 4500 	strd	r4, r5, [sp]
 8001d00:	4632      	mov	r2, r6
 8001d02:	494b      	ldr	r1, [pc, #300]	; (8001e30 <main+0x35c>)
 8001d04:	f007 fa28 	bl	8009158 <siprintf>
		uint8_t len = strlen(s);
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fa67 	bl	80001e0 <strlen>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		HAL_UART_Transmit_DMA(&huart2, (const uint8_t*) s, len);
 8001d18:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	4619      	mov	r1, r3
 8001d24:	4832      	ldr	r0, [pc, #200]	; (8001df0 <main+0x31c>)
 8001d26:	f005 f9df 	bl	80070e8 <HAL_UART_Transmit_DMA>

		SD_LOG_RDY = 0;
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <main+0x358>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
	}

	if(TELEMETRY_RDY) {
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <main+0x360>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8083 	beq.w	8001e42 <main+0x36e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d40:	482d      	ldr	r0, [pc, #180]	; (8001df8 <main+0x324>)
 8001d42:	f002 fb0e 	bl	8004362 <HAL_GPIO_TogglePin>

		char s[150] = {0};
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	2292      	movs	r2, #146	; 0x92
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f006 fd00 	bl	8008758 <memset>
		sprintf(s, "%ld,%.2f,%.2f,%.2f,%.2f,%.2f,%d\n", HAL_GetTick(), v.x, v.y, v.z, temp, pressure, tof_meas);
 8001d58:	f001 fa8a 	bl	8003270 <HAL_GetTick>
 8001d5c:	4606      	mov	r6, r0
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <main+0x340>)
 8001d60:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <main+0x340>)
 8001d66:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <main+0x340>)
 8001d6c:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <main+0x348>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbef 	bl	8000558 <__aeabi_f2d>
 8001d7a:	e9c7 0100 	strd	r0, r1, [r7]
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <main+0x34c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbe8 	bl	8000558 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	491e      	ldr	r1, [pc, #120]	; (8001e08 <main+0x334>)
 8001d8e:	8809      	ldrh	r1, [r1, #0]
 8001d90:	b289      	uxth	r1, r1
 8001d92:	f107 0008 	add.w	r0, r7, #8
 8001d96:	910a      	str	r1, [sp, #40]	; 0x28
 8001d98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d9c:	ed97 7b00 	vldr	d7, [r7]
 8001da0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001da4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001da8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dac:	e9cd 4500 	strd	r4, r5, [sp]
 8001db0:	4632      	mov	r2, r6
 8001db2:	491f      	ldr	r1, [pc, #124]	; (8001e30 <main+0x35c>)
 8001db4:	f007 f9d0 	bl	8009158 <siprintf>
		uint8_t len = strlen(s);
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa0f 	bl	80001e0 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		HAL_UART_Transmit_DMA(&huart6, (const uint8_t*)s, len);
 8001dc8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4818      	ldr	r0, [pc, #96]	; (8001e38 <main+0x364>)
 8001dd6:	f005 f987 	bl	80070e8 <HAL_UART_Transmit_DMA>
 8001dda:	e02f      	b.n	8001e3c <main+0x368>
 8001ddc:	20000364 	.word	0x20000364
 8001de0:	40020400 	.word	0x40020400
 8001de4:	20000264 	.word	0x20000264
 8001de8:	20000210 	.word	0x20000210
 8001dec:	2000000a 	.word	0x2000000a
 8001df0:	200003d8 	.word	0x200003d8
 8001df4:	0800b924 	.word	0x0800b924
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	20000310 	.word	0x20000310
 8001e04:	200002ec 	.word	0x200002ec
 8001e08:	20000014 	.word	0x20000014
 8001e0c:	200002eb 	.word	0x200002eb
 8001e10:	200002c4 	.word	0x200002c4
 8001e14:	200002c8 	.word	0x200002c8
 8001e18:	0800b884 	.word	0x0800b884
 8001e1c:	200002bc 	.word	0x200002bc
 8001e20:	200002c0 	.word	0x200002c0
 8001e24:	0800b8a8 	.word	0x0800b8a8
 8001e28:	2000020c 	.word	0x2000020c
 8001e2c:	200002e8 	.word	0x200002e8
 8001e30:	0800b8c4 	.word	0x0800b8c4
 8001e34:	200002ea 	.word	0x200002ea
 8001e38:	2000044c 	.word	0x2000044c
		TELEMETRY_RDY = 0;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <main+0x378>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
	}


	AssignOutputs(SELENOID_STATES);
 8001e42:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <main+0x37c>)
 8001e44:	7818      	ldrb	r0, [r3, #0]
 8001e46:	f7ff fad5 	bl	80013f4 <AssignOutputs>
	if (!MAIN_THRST_LOCK && (tof_meas < MAIN_SELENOID_HEIGHT)) {
 8001e4a:	e695      	b.n	8001b78 <main+0xa4>
 8001e4c:	200002ea 	.word	0x200002ea
 8001e50:	2000020c 	.word	0x2000020c

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b094      	sub	sp, #80	; 0x50
 8001e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5a:	f107 0320 	add.w	r3, r7, #32
 8001e5e:	2230      	movs	r2, #48	; 0x30
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f006 fc78 	bl	8008758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <SystemClock_Config+0xc8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <SystemClock_Config+0xc8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <SystemClock_Config+0xc8>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <SystemClock_Config+0xcc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <SystemClock_Config+0xcc>)
 8001e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <SystemClock_Config+0xcc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001ec8:	2360      	movs	r3, #96	; 0x60
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001ed0:	2305      	movs	r3, #5
 8001ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fec3 	bl	8005c64 <HAL_RCC_OscConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ee4:	f000 f89e 	bl	8002024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee8:	230f      	movs	r3, #15
 8001eea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eec:	2302      	movs	r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 f925 	bl	8006154 <HAL_RCC_ClockConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f10:	f000 f888 	bl	8002024 <Error_Handler>
  }
}
 8001f14:	bf00      	nop
 8001f16:	3750      	adds	r7, #80	; 0x50
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000

08001f24 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fc7e 	bl	8001830 <ITM_SendChar>
    return ch;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  static uint8_t Counter_10ms = 1;
  static uint32_t main_counter = 0;

  if (htim == &htim4 ){
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d13d      	bne.n	8001fcc <HAL_TIM_PeriodElapsedCallback+0x8c>

	  IMU_DTRDY = 1;
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]

	  if (Counter_10ms == 20) {
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b14      	cmp	r3, #20
 8001f5c:	d102      	bne.n	8001f64 <HAL_TIM_PeriodElapsedCallback+0x24>
		  TELEMETRY_RDY = 1;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
	  }

	  if (Counter_10ms == 50) {
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b32      	cmp	r3, #50	; 0x32
 8001f6a:	d102      	bne.n	8001f72 <HAL_TIM_PeriodElapsedCallback+0x32>
		  SD_LOG_RDY = 1;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
	  }

	  if (Counter_10ms == 100) {
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d108      	bne.n	8001f8c <HAL_TIM_PeriodElapsedCallback+0x4c>
		  BATTERY_RDY   = 1;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
		  SD_LOG_RDY = 1;
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
		  Counter_10ms = 0;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	  }

	  if((!MAIN_THRST_LOCK) && (MAIN_THRST_ACTIVATE == GPIO_PIN_RESET)) {
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d114      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10f      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x80>
		  main_counter++;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001fa8:	6013      	str	r3, [r2, #0]
		  if(main_counter == MAIN_SELENOID_TIMEOUT){	// 1 sec, only once
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fb2:	d105      	bne.n	8001fc0 <HAL_TIM_PeriodElapsedCallback+0x80>
			  MAIN_THRST_ACTIVATE = GPIO_PIN_SET;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
			  MAIN_THRST_LOCK = 1;
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  Counter_10ms++;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001fca:	701a      	strb	r2, [r3, #0]

  }
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	20000310 	.word	0x20000310
 8001fdc:	200002c4 	.word	0x200002c4
 8001fe0:	2000000b 	.word	0x2000000b
 8001fe4:	200002ea 	.word	0x200002ea
 8001fe8:	200002e8 	.word	0x200002e8
 8001fec:	200002e9 	.word	0x200002e9
 8001ff0:	200002ec 	.word	0x200002ec
 8001ff4:	200002eb 	.word	0x200002eb
 8001ff8:	200002f0 	.word	0x200002f0

08001ffc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == Contact_Pin) {
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d102      	bne.n	8002012 <HAL_GPIO_EXTI_Callback+0x16>
	  MAIN_THRST_ACTIVATE = GPIO_PIN_RESET;
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_GPIO_EXTI_Callback+0x24>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
  }

}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200002eb 	.word	0x200002eb

08002024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800202c:	e7fe      	b.n	800202c <Error_Handler+0x8>

0800202e <I2C_read>:
I2C_HandleTypeDef* ms5611_i2cx;
enum MS5611_OSR selected_osr = MS5611_OSR_4096;



uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 800202e:	b580      	push	{r7, lr}
 8002030:	b088      	sub	sp, #32
 8002032:	af04      	add	r7, sp, #16
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	4608      	mov	r0, r1
 8002038:	4611      	mov	r1, r2
 800203a:	461a      	mov	r2, r3
 800203c:	4603      	mov	r3, r0
 800203e:	70fb      	strb	r3, [r7, #3]
 8002040:	460b      	mov	r3, r1
 8002042:	70bb      	strb	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,10);
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	b29b      	uxth	r3, r3
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	b299      	uxth	r1, r3
 8002050:	78bb      	ldrb	r3, [r7, #2]
 8002052:	b29a      	uxth	r2, r3
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	b29b      	uxth	r3, r3
 8002058:	200a      	movs	r0, #10
 800205a:	9002      	str	r0, [sp, #8]
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2301      	movs	r3, #1
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f002 ff11 	bl	8004e8c <HAL_I2C_Mem_Read>
 800206a:	4603      	mov	r3, r0
 800206c:	60fb      	str	r3, [r7, #12]
	if (state != HAL_OK){
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d000      	beq.n	8002076 <I2C_read+0x48>
		__NOP();
 8002074:	bf00      	nop
	}
	return state;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	b2db      	uxtb	r3, r3
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af04      	add	r7, sp, #16
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	4608      	mov	r0, r1
 800208c:	4611      	mov	r1, r2
 800208e:	461a      	mov	r2, r3
 8002090:	4603      	mov	r3, r0
 8002092:	70fb      	strb	r3, [r7, #3]
 8002094:	460b      	mov	r3, r1
 8002096:	70bb      	strb	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
	return HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,10);
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	b299      	uxth	r1, r3
 80020a4:	78bb      	ldrb	r3, [r7, #2]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	787b      	ldrb	r3, [r7, #1]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	200a      	movs	r0, #10
 80020ae:	9002      	str	r0, [sp, #8]
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2301      	movs	r3, #1
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f002 fded 	bl	8004c98 <HAL_I2C_Mem_Write>
 80020be:	4603      	mov	r3, r0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <ms5611_set_i2c>:

/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	ms5611_i2cx = i2cx;
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <ms5611_set_i2c+0x1c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000308 	.word	0x20000308

080020e8 <ms5611_read_i2c>:
 * @param register_address register/command to request data
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	4603      	mov	r3, r0
 80020f0:	603a      	str	r2, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
 80020f4:	460b      	mov	r3, r1
 80020f6:	71bb      	strb	r3, [r7, #6]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <ms5611_read_i2c+0x30>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	79b9      	ldrb	r1, [r7, #6]
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	460b      	mov	r3, r1
 8002106:	2177      	movs	r1, #119	; 0x77
 8002108:	f7ff ff91 	bl	800202e <I2C_read>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000308 	.word	0x20000308

0800211c <ms5611_write_i2c>:
 * @param register_address register/command to send
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af02      	add	r7, sp, #8
 8002122:	4603      	mov	r3, r0
 8002124:	603a      	str	r2, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	460b      	mov	r3, r1
 800212a:	71bb      	strb	r3, [r7, #6]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <ms5611_write_i2c+0x30>)
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	79b9      	ldrb	r1, [r7, #6]
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	460b      	mov	r3, r1
 800213a:	2177      	movs	r1, #119	; 0x77
 800213c:	f7ff ffa1 	bl	8002082 <I2C_write>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000308 	.word	0x20000308

08002150 <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	e01a      	b.n	8002192 <ms5611_init+0x42>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3b5e      	subs	r3, #94	; 0x5e
 8002166:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2];
		ms5611_read_i2c(reg_addr,2,buffer);
 8002168:	463a      	mov	r2, r7
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ffba 	bl	80020e8 <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8002174:	783b      	ldrb	r3, [r7, #0]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b21a      	sxth	r2, r3
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	b299      	uxth	r1, r3
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <ms5611_init+0x54>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3301      	adds	r3, #1
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b05      	cmp	r3, #5
 8002196:	dde1      	ble.n	800215c <ms5611_init+0xc>
	}
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002f4 	.word	0x200002f4

080021a8 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80021ae:	4a15      	ldr	r2, [pc, #84]	; (8002204 <ms5611_update_pressure+0x5c>)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	4611      	mov	r1, r2
 80021b6:	8019      	strh	r1, [r3, #0]
 80021b8:	3302      	adds	r3, #2
 80021ba:	0c12      	lsrs	r2, r2, #16
 80021bc:	701a      	strb	r2, [r3, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <ms5611_update_pressure+0x60>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	1d3a      	adds	r2, r7, #4
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffa2 	bl	800211c <ms5611_write_i2c>

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80021d8:	200c      	movs	r0, #12
 80021da:	f001 f855 	bl	8003288 <HAL_Delay>

	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	461a      	mov	r2, r3
 80021e2:	2103      	movs	r1, #3
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff ff7f 	bl	80020e8 <ms5611_read_i2c>
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80021ea:	793b      	ldrb	r3, [r7, #4]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	797b      	ldrb	r3, [r7, #5]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	4313      	orrs	r3, r2
 80021f4:	79ba      	ldrb	r2, [r7, #6]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <ms5611_update_pressure+0x64>)
 80021fa:	6013      	str	r3, [r2, #0]

}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	0800b8e8 	.word	0x0800b8e8
 8002208:	2000000c 	.word	0x2000000c
 800220c:	20000300 	.word	0x20000300

08002210 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8002216:	4a15      	ldr	r2, [pc, #84]	; (800226c <ms5611_update_temperature+0x5c>)
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	4611      	mov	r1, r2
 800221e:	8019      	strh	r1, [r3, #0]
 8002220:	3302      	adds	r3, #2
 8002222:	0c12      	lsrs	r2, r2, #16
 8002224:	701a      	strb	r2, [r3, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <ms5611_update_temperature+0x60>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	b25b      	sxtb	r3, r3
 800222e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8002232:	b25b      	sxtb	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	1d3a      	adds	r2, r7, #4
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff6e 	bl	800211c <ms5611_write_i2c>

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8002240:	200c      	movs	r0, #12
 8002242:	f001 f821 	bl	8003288 <HAL_Delay>

	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	461a      	mov	r2, r3
 800224a:	2103      	movs	r1, #3
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff ff4b 	bl	80020e8 <ms5611_read_i2c>
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8002252:	793b      	ldrb	r3, [r7, #4]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	797b      	ldrb	r3, [r7, #5]
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	4313      	orrs	r3, r2
 800225c:	79ba      	ldrb	r2, [r7, #6]
 800225e:	4313      	orrs	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <ms5611_update_temperature+0x64>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	0800b8e8 	.word	0x0800b8e8
 8002270:	2000000c 	.word	0x2000000c
 8002274:	20000304 	.word	0x20000304

08002278 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 800227c:	f7ff ffc8 	bl	8002210 <ms5611_update_temperature>
	ms5611_update_pressure();
 8002280:	f7ff ff92 	bl	80021a8 <ms5611_update_pressure>
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}

08002288 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <ms5611_get_temperature+0xe0>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <ms5611_get_temperature+0xe4>)
 8002294:	891b      	ldrh	r3, [r3, #8]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f7fe f939 	bl	8000514 <__aeabi_ui2d>
 80022a2:	4604      	mov	r4, r0
 80022a4:	460d      	mov	r5, r1
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <ms5611_get_temperature+0xe4>)
 80022a8:	895b      	ldrh	r3, [r3, #10]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f942 	bl	8000534 <__aeabi_i2d>
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <ms5611_get_temperature+0xe8>)
 80022b6:	f7fe fad1 	bl	800085c <__aeabi_ddiv>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4620      	mov	r0, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fe f9a1 	bl	8000608 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b28      	ldr	r3, [pc, #160]	; (8002374 <ms5611_get_temperature+0xec>)
 80022d4:	f7fd ffe2 	bl	800029c <__adddf3>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <ms5611_get_temperature+0xec>)
 80022f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022f6:	f7fe fbf9 	bl	8000aec <__aeabi_dcmplt>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d016      	beq.n	800232e <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7fe f907 	bl	8000514 <__aeabi_ui2d>
 8002306:	4604      	mov	r4, r0
 8002308:	460d      	mov	r5, r1
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7fe f902 	bl	8000514 <__aeabi_ui2d>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <ms5611_get_temperature+0xf0>)
 8002316:	f7fe faa1 	bl	800085c <__aeabi_ddiv>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	f7fe f971 	bl	8000608 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 800232e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002336:	f7fd ffaf 	bl	8000298 <__aeabi_dsub>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP / 100;
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <ms5611_get_temperature+0xf4>)
 8002348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800234c:	f7fe fa86 	bl	800085c <__aeabi_ddiv>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	ec43 2b17 	vmov	d7, r2, r3
}
 8002358:	eeb0 0a47 	vmov.f32	s0, s14
 800235c:	eef0 0a67 	vmov.f32	s1, s15
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bdb0      	pop	{r4, r5, r7, pc}
 8002366:	bf00      	nop
 8002368:	20000304 	.word	0x20000304
 800236c:	200002f4 	.word	0x200002f4
 8002370:	41600000 	.word	0x41600000
 8002374:	409f4000 	.word	0x409f4000
 8002378:	41e00000 	.word	0x41e00000
 800237c:	40590000 	.word	0x40590000

08002380 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8002380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002384:	b090      	sub	sp, #64	; 0x40
 8002386:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 8002388:	4bc3      	ldr	r3, [pc, #780]	; (8002698 <ms5611_get_pressure+0x318>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4bc3      	ldr	r3, [pc, #780]	; (800269c <ms5611_get_pressure+0x31c>)
 800238e:	891b      	ldrh	r3, [r3, #8]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 8002396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002398:	f7fe f8bc 	bl	8000514 <__aeabi_ui2d>
 800239c:	4604      	mov	r4, r0
 800239e:	460d      	mov	r5, r1
 80023a0:	4bbe      	ldr	r3, [pc, #760]	; (800269c <ms5611_get_pressure+0x31c>)
 80023a2:	895b      	ldrh	r3, [r3, #10]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8c5 	bl	8000534 <__aeabi_i2d>
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	4bbc      	ldr	r3, [pc, #752]	; (80026a0 <ms5611_get_pressure+0x320>)
 80023b0:	f7fe fa54 	bl	800085c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fe f924 	bl	8000608 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	4bb5      	ldr	r3, [pc, #724]	; (80026a4 <ms5611_get_pressure+0x324>)
 80023ce:	f7fd ff65 	bl	800029c <__adddf3>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 80023da:	4bb0      	ldr	r3, [pc, #704]	; (800269c <ms5611_get_pressure+0x31c>)
 80023dc:	885b      	ldrh	r3, [r3, #2]
 80023de:	041b      	lsls	r3, r3, #16
 80023e0:	461a      	mov	r2, r3
 80023e2:	4bae      	ldr	r3, [pc, #696]	; (800269c <ms5611_get_pressure+0x31c>)
 80023e4:	88db      	ldrh	r3, [r3, #6]
 80023e6:	4619      	mov	r1, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	09db      	lsrs	r3, r3, #7
 80023f0:	4413      	add	r3, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f88e 	bl	8000514 <__aeabi_ui2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 8002400:	4ba6      	ldr	r3, [pc, #664]	; (800269c <ms5611_get_pressure+0x31c>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	03db      	lsls	r3, r3, #15
 8002406:	461a      	mov	r2, r3
 8002408:	4ba4      	ldr	r3, [pc, #656]	; (800269c <ms5611_get_pressure+0x31c>)
 800240a:	889b      	ldrh	r3, [r3, #4]
 800240c:	4619      	mov	r1, r3
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	4413      	add	r3, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f87b 	bl	8000514 <__aeabi_ui2d>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 8002426:	4ba0      	ldr	r3, [pc, #640]	; (80026a8 <ms5611_get_pressure+0x328>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f872 	bl	8000514 <__aeabi_ui2d>
 8002430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002434:	f7fe f8e8 	bl	8000608 <__aeabi_dmul>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4b99      	ldr	r3, [pc, #612]	; (80026ac <ms5611_get_pressure+0x32c>)
 8002446:	f7fe fa09 	bl	800085c <__aeabi_ddiv>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002456:	f7fd ff1f 	bl	8000298 <__aeabi_dsub>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <ms5611_get_pressure+0x330>)
 8002468:	f7fe f9f8 	bl	800085c <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <ms5611_get_pressure+0x324>)
 800249e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024a2:	f7fe fb23 	bl	8000aec <__aeabi_dcmplt>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 80cc 	beq.w	8002646 <ms5611_get_pressure+0x2c6>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	fb03 f303 	mul.w	r3, r3, r3
 80024b4:	0fdb      	lsrs	r3, r3, #31
 80024b6:	2200      	movs	r2, #0
 80024b8:	4698      	mov	r8, r3
 80024ba:	4691      	mov	r9, r2
 80024bc:	4640      	mov	r0, r8
 80024be:	4649      	mov	r1, r9
 80024c0:	f7fe f874 	bl	80005ac <__aeabi_l2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <ms5611_get_pressure+0x324>)
 80024d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024d6:	f7fd fedf 	bl	8000298 <__aeabi_dsub>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b73      	ldr	r3, [pc, #460]	; (80026b4 <ms5611_get_pressure+0x334>)
 80024e8:	f7fe f88e 	bl	8000608 <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <ms5611_get_pressure+0x324>)
 80024fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024fe:	f7fd fecb 	bl	8000298 <__aeabi_dsub>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fe f87d 	bl	8000608 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800251e:	f7fe f99d 	bl	800085c <__aeabi_ddiv>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <ms5611_get_pressure+0x324>)
 8002530:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002534:	f7fd feb0 	bl	8000298 <__aeabi_dsub>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <ms5611_get_pressure+0x334>)
 8002546:	f7fe f85f 	bl	8000608 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4614      	mov	r4, r2
 8002550:	461d      	mov	r5, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <ms5611_get_pressure+0x324>)
 8002558:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255c:	f7fd fe9c 	bl	8000298 <__aeabi_dsub>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fe f84e 	bl	8000608 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <ms5611_get_pressure+0x338>)
 800257a:	f7fe f96f 	bl	800085c <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 8002586:	a340      	add	r3, pc, #256	; (adr r3, 8002688 <ms5611_get_pressure+0x308>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002590:	f7fe faac 	bl	8000aec <__aeabi_dcmplt>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d055      	beq.n	8002646 <ms5611_get_pressure+0x2c6>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 800259a:	a33d      	add	r3, pc, #244	; (adr r3, 8002690 <ms5611_get_pressure+0x310>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025a4:	f7fd fe7a 	bl	800029c <__adddf3>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <ms5611_get_pressure+0x33c>)
 80025b6:	f7fe f827 	bl	8000608 <__aeabi_dmul>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4614      	mov	r4, r2
 80025c0:	461d      	mov	r5, r3
 80025c2:	a333      	add	r3, pc, #204	; (adr r3, 8002690 <ms5611_get_pressure+0x310>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025cc:	f7fd fe66 	bl	800029c <__adddf3>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fe f816 	bl	8000608 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025e4:	f7fd fe5a 	bl	800029c <__adddf3>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 80025f0:	a327      	add	r3, pc, #156	; (adr r3, 8002690 <ms5611_get_pressure+0x310>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025fa:	f7fd fe4f 	bl	800029c <__adddf3>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4610      	mov	r0, r2
 8002604:	4619      	mov	r1, r3
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <ms5611_get_pressure+0x334>)
 800260c:	f7fd fffc 	bl	8000608 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4614      	mov	r4, r2
 8002616:	461d      	mov	r5, r3
 8002618:	a31d      	add	r3, pc, #116	; (adr r3, 8002690 <ms5611_get_pressure+0x310>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002622:	f7fd fe3b 	bl	800029c <__adddf3>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4620      	mov	r0, r4
 800262c:	4629      	mov	r1, r5
 800262e:	f7fd ffeb 	bl	8000608 <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800263a:	f7fd fe2f 	bl	800029c <__adddf3>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 8002646:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800264a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800264e:	f7fd fe23 	bl	8000298 <__aeabi_dsub>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 800265a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800265e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002662:	f7fd fe19 	bl	8000298 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 800266e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002676:	f7fd fe0f 	bl	8000298 <__aeabi_dsub>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <ms5611_get_pressure+0x328>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	e01b      	b.n	80026c0 <ms5611_get_pressure+0x340>
 8002688:	00000000 	.word	0x00000000
 800268c:	c0977000 	.word	0xc0977000
 8002690:	00000000 	.word	0x00000000
 8002694:	40977000 	.word	0x40977000
 8002698:	20000304 	.word	0x20000304
 800269c:	200002f4 	.word	0x200002f4
 80026a0:	41600000 	.word	0x41600000
 80026a4:	409f4000 	.word	0x409f4000
 80026a8:	20000300 	.word	0x20000300
 80026ac:	41400000 	.word	0x41400000
 80026b0:	40e00000 	.word	0x40e00000
 80026b4:	40140000 	.word	0x40140000
 80026b8:	40100000 	.word	0x40100000
 80026bc:	401c0000 	.word	0x401c0000
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff27 	bl	8000514 <__aeabi_ui2d>
 80026c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ca:	f7fd ff9d 	bl	8000608 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <ms5611_get_pressure+0x3b0>)
 80026dc:	f7fe f8be 	bl	800085c <__aeabi_ddiv>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026ec:	f7fd fdd4 	bl	8000298 <__aeabi_dsub>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <ms5611_get_pressure+0x3b4>)
 80026fe:	f7fe f8ad 	bl	800085c <__aeabi_ddiv>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <ms5611_get_pressure+0x3b8>)
 8002710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002714:	f7fe f8a2 	bl	800085c <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002720:	eeb0 0a47 	vmov.f32	s0, s14
 8002724:	eef0 0a67 	vmov.f32	s1, s15
 8002728:	3740      	adds	r7, #64	; 0x40
 800272a:	46bd      	mov	sp, r7
 800272c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002730:	41400000 	.word	0x41400000
 8002734:	40e00000 	.word	0x40e00000
 8002738:	40590000 	.word	0x40590000

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_MspInit+0x4c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	4a0f      	ldr	r2, [pc, #60]	; (8002788 <HAL_MspInit+0x4c>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002750:	6453      	str	r3, [r2, #68]	; 0x44
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_MspInit+0x4c>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	603b      	str	r3, [r7, #0]
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_MspInit+0x4c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_MspInit+0x4c>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_MspInit+0x4c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <NMI_Handler+0x4>

08002792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <HardFault_Handler+0x4>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <MemManage_Handler+0x4>

0800279e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <UsageFault_Handler+0x4>

080027aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d8:	f000 fd36 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Contact_Pin);
 80027e4:	2001      	movs	r0, #1
 80027e6:	f001 fdd7 	bl	8004398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <DMA1_Stream6_IRQHandler+0x10>)
 80027f6:	f001 f8a5 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000520 	.word	0x20000520

08002804 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <TIM4_IRQHandler+0x10>)
 800280a:	f003 ff35 	bl	8006678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000310 	.word	0x20000310

08002818 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <USART1_IRQHandler+0x10>)
 800281e:	f004 fd91 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000364 	.word	0x20000364

0800282c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <USART2_IRQHandler+0x10>)
 8002832:	f004 fd87 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200003d8 	.word	0x200003d8

08002840 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <DMA2_Stream2_IRQHandler+0x10>)
 8002846:	f001 f87d 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200004c0 	.word	0x200004c0

08002854 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002858:	4802      	ldr	r0, [pc, #8]	; (8002864 <DMA2_Stream6_IRQHandler+0x10>)
 800285a:	f001 f873 	bl	8003944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000580 	.word	0x20000580

08002868 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <USART6_IRQHandler+0x10>)
 800286e:	f004 fd69 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000044c 	.word	0x2000044c

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
	return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_kill>:

int _kill(int pid, int sig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002896:	f005 ff27 	bl	80086e8 <__errno>
 800289a:	4603      	mov	r3, r0
 800289c:	2216      	movs	r2, #22
 800289e:	601a      	str	r2, [r3, #0]
	return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_exit>:

void _exit (int status)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_kill>
	while (1) {}		/* Make sure we hang here */
 80028be:	e7fe      	b.n	80028be <_exit+0x12>

080028c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	e00a      	b.n	80028e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028d2:	f3af 8000 	nop.w
 80028d6:	4601      	mov	r1, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	60ba      	str	r2, [r7, #8]
 80028de:	b2ca      	uxtb	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbf0      	blt.n	80028d2 <_read+0x12>
	}

return len;
 80028f0:	687b      	ldr	r3, [r7, #4]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e009      	b.n	8002920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fb05 	bl	8001f24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbf1      	blt.n	800290c <_write+0x12>
	}
	return len;
 8002928:	687b      	ldr	r3, [r7, #4]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_close>:

int _close(int file)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	return -1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800295a:	605a      	str	r2, [r3, #4]
	return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_isatty>:

int _isatty(int file)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	return 1;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
	return 0;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f005 fe8c 	bl	80086e8 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20020000 	.word	0x20020000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	2000030c 	.word	0x2000030c
 8002a04:	200005f8 	.word	0x200005f8

08002a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	463b      	mov	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <MX_TIM4_Init+0x98>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a70:	4813      	ldr	r0, [pc, #76]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a72:	f003 fd4f 	bl	8006514 <HAL_TIM_Base_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002a7c:	f7ff fad2 	bl	8002024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002a8e:	f003 fefb 	bl	8006888 <HAL_TIM_ConfigClockSource>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002a98:	f7ff fac4 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aa4:	463b      	mov	r3, r7
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <MX_TIM4_Init+0x94>)
 8002aaa:	f004 f8f7 	bl	8006c9c <HAL_TIMEx_MasterConfigSynchronization>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ab4:	f7ff fab6 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ab8:	bf00      	nop
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000310 	.word	0x20000310
 8002ac4:	40000800 	.word	0x40000800

08002ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <HAL_TIM_Base_MspInit+0x48>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d115      	bne.n	8002b06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <HAL_TIM_Base_MspInit+0x4c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <HAL_TIM_Base_MspInit+0x4c>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <HAL_TIM_Base_MspInit+0x4c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	201e      	movs	r0, #30
 8002afc:	f000 fce7 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b00:	201e      	movs	r0, #30
 8002b02:	f000 fd00 	bl	8003506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40023800 	.word	0x40023800

08002b18 <TOF_UART_Error_Callback>:

volatile uint8_t TOF_RX_Buffer[9];
volatile uint8_t rx_sync = 0;
volatile uint16_t tof_meas = 9999;

void TOF_UART_Error_Callback(struct __UART_HandleTypeDef *huart){
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
	HAL_UART_DMAStop(huart);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f004 fb84 	bl	8007244 <HAL_UART_DMAStop>
	HAL_UART_MspDeInit(huart);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 faab 	bl	8003098 <HAL_UART_MspDeInit>
	HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f948 	bl	8002dd8 <HAL_UART_MspInit>

	printf("Sensor UART Error %ld DMA RX/TX error 0x%lx-0x%lx \r\n", HAL_UART_GetError(huart), HAL_DMA_GetError(huart->hdmarx), HAL_DMA_GetError(huart->hdmatx));
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f004 fee9 	bl	8007920 <HAL_UART_GetError>
 8002b4e:	4604      	mov	r4, r0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	4618      	mov	r0, r3
 8002b56:	f001 f87f 	bl	8003c58 <HAL_DMA_GetError>
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 f879 	bl	8003c58 <HAL_DMA_GetError>
 8002b66:	4603      	mov	r3, r0
 8002b68:	462a      	mov	r2, r5
 8002b6a:	4621      	mov	r1, r4
 8002b6c:	480b      	ldr	r0, [pc, #44]	; (8002b9c <TOF_UART_Error_Callback+0x84>)
 8002b6e:	f006 fa65 	bl	800903c <iprintf>
	rx_sync = 0;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <TOF_UART_Error_Callback+0x88>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
	tof_meas = 9999;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <TOF_UART_Error_Callback+0x8c>)
 8002b7a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b7e:	801a      	strh	r2, [r3, #0]
	while(HAL_UART_Receive_DMA(huart, (uint8_t*) &TOF_RX_Buffer[0], 1) != HAL_OK);
 8002b80:	bf00      	nop
 8002b82:	2201      	movs	r2, #1
 8002b84:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <TOF_UART_Error_Callback+0x90>)
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f004 fb2c 	bl	80071e4 <HAL_UART_Receive_DMA>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f7      	bne.n	8002b82 <TOF_UART_Error_Callback+0x6a>
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9c:	0800b8ec 	.word	0x0800b8ec
 8002ba0:	20000361 	.word	0x20000361
 8002ba4:	20000014 	.word	0x20000014
 8002ba8:	20000358 	.word	0x20000358

08002bac <TOF_UART_RxComplete_Callback>:

void TOF_UART_RxComplete_Callback(struct __UART_HandleTypeDef *huart){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
	if(!rx_sync) {
 8002bb4:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <TOF_UART_RxComplete_Callback+0xe4>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d123      	bne.n	8002c06 <TOF_UART_RxComplete_Callback+0x5a>
		rx_sync = TOF_RX_Buffer[0] == SENSOR_HEADER;
 8002bbe:	4b35      	ldr	r3, [pc, #212]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b59      	cmp	r3, #89	; 0x59
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <TOF_UART_RxComplete_Callback+0xe4>)
 8002bd2:	701a      	strb	r2, [r3, #0]
		if(!rx_sync) {
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <TOF_UART_RxComplete_Callback+0xe4>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <TOF_UART_RxComplete_Callback+0x46>
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &TOF_RX_Buffer[0], 1) != HAL_OK);
 8002bde:	bf00      	nop
 8002be0:	2201      	movs	r2, #1
 8002be2:	492c      	ldr	r1, [pc, #176]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f004 fafd 	bl	80071e4 <HAL_UART_Receive_DMA>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f7      	bne.n	8002be0 <TOF_UART_RxComplete_Callback+0x34>
		} else {
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &TOF_RX_Buffer[1], 8) != HAL_OK);
		}
		return;
 8002bf0:	e04b      	b.n	8002c8a <TOF_UART_RxComplete_Callback+0xde>
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &TOF_RX_Buffer[1], 8) != HAL_OK);
 8002bf2:	bf00      	nop
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4928      	ldr	r1, [pc, #160]	; (8002c98 <TOF_UART_RxComplete_Callback+0xec>)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f004 faf3 	bl	80071e4 <HAL_UART_Receive_DMA>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f7      	bne.n	8002bf4 <TOF_UART_RxComplete_Callback+0x48>
		return;
 8002c04:	e041      	b.n	8002c8a <TOF_UART_RxComplete_Callback+0xde>
	} else {
		rx_sync = TOF_RX_Buffer[0] == SENSOR_HEADER;
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b59      	cmp	r3, #89	; 0x59
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <TOF_UART_RxComplete_Callback+0xe4>)
 8002c1a:	701a      	strb	r2, [r3, #0]
		rx_sync = rx_sync && TOF_RX_Buffer[1] == SENSOR_HEADER;
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <TOF_UART_RxComplete_Callback+0xe4>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <TOF_UART_RxComplete_Callback+0x88>
 8002c26:	4b1b      	ldr	r3, [pc, #108]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b59      	cmp	r3, #89	; 0x59
 8002c2e:	d101      	bne.n	8002c34 <TOF_UART_RxComplete_Callback+0x88>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <TOF_UART_RxComplete_Callback+0x8a>
 8002c34:	2300      	movs	r3, #0
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <TOF_UART_RxComplete_Callback+0xe4>)
 8002c3a:	701a      	strb	r2, [r3, #0]
		if(!rx_sync) {
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <TOF_UART_RxComplete_Callback+0xe4>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <TOF_UART_RxComplete_Callback+0xae>
			while(HAL_UART_Receive_DMA(huart, (uint8_t *) &TOF_RX_Buffer[0], 1) != HAL_OK);
 8002c46:	bf00      	nop
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4912      	ldr	r1, [pc, #72]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f004 fac9 	bl	80071e4 <HAL_UART_Receive_DMA>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f7      	bne.n	8002c48 <TOF_UART_RxComplete_Callback+0x9c>
			return;
 8002c58:	e017      	b.n	8002c8a <TOF_UART_RxComplete_Callback+0xde>
		}

		tof_meas = (uint16_t) (TOF_RX_Buffer[3]<<8 | TOF_RX_Buffer[2]);
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002c5c:	78db      	ldrb	r3, [r3, #3]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	b21a      	sxth	r2, r3
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002c66:	789b      	ldrb	r3, [r3, #2]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	b21b      	sxth	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b21b      	sxth	r3, r3
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <TOF_UART_RxComplete_Callback+0xf0>)
 8002c74:	801a      	strh	r2, [r3, #0]

		while(HAL_UART_Transmit_DMA(huart, (uint8_t *) TOF_RX_Buffer, 9) != HAL_OK);
 8002c76:	bf00      	nop
 8002c78:	2209      	movs	r2, #9
 8002c7a:	4906      	ldr	r1, [pc, #24]	; (8002c94 <TOF_UART_RxComplete_Callback+0xe8>)
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f004 fa33 	bl	80070e8 <HAL_UART_Transmit_DMA>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f7      	bne.n	8002c78 <TOF_UART_RxComplete_Callback+0xcc>
		return;
 8002c88:	bf00      	nop
	}
}
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000361 	.word	0x20000361
 8002c94:	20000358 	.word	0x20000358
 8002c98:	20000359 	.word	0x20000359
 8002c9c:	20000014 	.word	0x20000014

08002ca0 <TOF_UART_Init>:

void TOF_UART_Init(UART_HandleTypeDef *huart) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	  HAL_UART_RegisterCallback(huart, HAL_UART_RX_COMPLETE_CB_ID, TOF_UART_RxComplete_Callback);
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <TOF_UART_Init+0x30>)
 8002caa:	2103      	movs	r1, #3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f004 f8d1 	bl	8006e54 <HAL_UART_RegisterCallback>
	  HAL_UART_RegisterCallback(huart, HAL_UART_ERROR_CB_ID, TOF_UART_Error_Callback);
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <TOF_UART_Init+0x34>)
 8002cb4:	2104      	movs	r1, #4
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f004 f8cc 	bl	8006e54 <HAL_UART_RegisterCallback>
	  HAL_UART_Receive_DMA(huart, (uint8_t*) &TOF_RX_Buffer[0], 1);
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4906      	ldr	r1, [pc, #24]	; (8002cd8 <TOF_UART_Init+0x38>)
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f004 fa8f 	bl	80071e4 <HAL_UART_Receive_DMA>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	08002bad 	.word	0x08002bad
 8002cd4:	08002b19 	.word	0x08002b19
 8002cd8:	20000358 	.word	0x20000358

08002cdc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <MX_USART1_UART_Init+0x50>)
 8002ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d00:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002d02:	220c      	movs	r2, #12
 8002d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_USART1_UART_Init+0x4c>)
 8002d14:	f004 f844 	bl	8006da0 <HAL_UART_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d1e:	f7ff f981 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000364 	.word	0x20000364
 8002d2c:	40011000 	.word	0x40011000

08002d30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <MX_USART2_UART_Init+0x50>)
 8002d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d66:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_USART2_UART_Init+0x4c>)
 8002d68:	f004 f81a 	bl	8006da0 <HAL_UART_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d72:	f7ff f957 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200003d8 	.word	0x200003d8
 8002d80:	40004400 	.word	0x40004400

08002d84 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <MX_USART6_UART_Init+0x50>)
 8002d8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002d90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002daa:	220c      	movs	r2, #12
 8002dac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <MX_USART6_UART_Init+0x4c>)
 8002dbc:	f003 fff0 	bl	8006da0 <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002dc6:	f7ff f92d 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2000044c 	.word	0x2000044c
 8002dd4:	40011400 	.word	0x40011400

08002dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08e      	sub	sp, #56	; 0x38
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a9d      	ldr	r2, [pc, #628]	; (800306c <HAL_UART_MspInit+0x294>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d163      	bne.n	8002ec2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
 8002dfe:	4b9c      	ldr	r3, [pc, #624]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4a9b      	ldr	r2, [pc, #620]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002e04:	f043 0310 	orr.w	r3, r3, #16
 8002e08:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0a:	4b99      	ldr	r3, [pc, #612]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	4b95      	ldr	r3, [pc, #596]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a94      	ldr	r2, [pc, #592]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b92      	ldr	r3, [pc, #584]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TOF_TX_Pin|TOF_RX_Pin;
 8002e32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e44:	2307      	movs	r3, #7
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4889      	ldr	r0, [pc, #548]	; (8003074 <HAL_UART_MspInit+0x29c>)
 8002e50:	f000 ffee 	bl	8003e30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002e54:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e56:	4a89      	ldr	r2, [pc, #548]	; (800307c <HAL_UART_MspInit+0x2a4>)
 8002e58:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002e5a:	4b87      	ldr	r3, [pc, #540]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e60:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e68:	4b83      	ldr	r3, [pc, #524]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e6e:	4b82      	ldr	r3, [pc, #520]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e76:	4b80      	ldr	r3, [pc, #512]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e7c:	4b7e      	ldr	r3, [pc, #504]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002e82:	4b7d      	ldr	r3, [pc, #500]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e88:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e8e:	4b7a      	ldr	r3, [pc, #488]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e94:	4878      	ldr	r0, [pc, #480]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002e96:	f000 fb5f 	bl	8003558 <HAL_DMA_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002ea0:	f7ff f8c0 	bl	8002024 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a74      	ldr	r2, [pc, #464]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8002eaa:	4a73      	ldr	r2, [pc, #460]	; (8003078 <HAL_UART_MspInit+0x2a0>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2025      	movs	r0, #37	; 0x25
 8002eb6:	f000 fb0a 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eba:	2025      	movs	r0, #37	; 0x25
 8002ebc:	f000 fb23 	bl	8003506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002ec0:	e0cf      	b.n	8003062 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_UART_MspInit+0x2a8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d162      	bne.n	8002f92 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	4b67      	ldr	r3, [pc, #412]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	4a66      	ldr	r2, [pc, #408]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eda:	6413      	str	r3, [r2, #64]	; 0x40
 8002edc:	4b64      	ldr	r3, [pc, #400]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	4b60      	ldr	r3, [pc, #384]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4a5f      	ldr	r2, [pc, #380]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef8:	4b5d      	ldr	r3, [pc, #372]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = OPENSD_TX_Pin|OPENSD_RX_Pin;
 8002f04:	230c      	movs	r3, #12
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f14:	2307      	movs	r3, #7
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4855      	ldr	r0, [pc, #340]	; (8003074 <HAL_UART_MspInit+0x29c>)
 8002f20:	f000 ff86 	bl	8003e30 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002f24:	4b57      	ldr	r3, [pc, #348]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f26:	4a58      	ldr	r2, [pc, #352]	; (8003088 <HAL_UART_MspInit+0x2b0>)
 8002f28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002f2a:	4b56      	ldr	r3, [pc, #344]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f32:	4b54      	ldr	r3, [pc, #336]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f34:	2240      	movs	r2, #64	; 0x40
 8002f36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f38:	4b52      	ldr	r3, [pc, #328]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3e:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f46:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f52:	4b4c      	ldr	r3, [pc, #304]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f58:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f64:	4847      	ldr	r0, [pc, #284]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f66:	f000 faf7 	bl	8003558 <HAL_DMA_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002f70:	f7ff f858 	bl	8002024 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a43      	ldr	r2, [pc, #268]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7a:	4a42      	ldr	r2, [pc, #264]	; (8003084 <HAL_UART_MspInit+0x2ac>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	2026      	movs	r0, #38	; 0x26
 8002f86:	f000 faa2 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f8a:	2026      	movs	r0, #38	; 0x26
 8002f8c:	f000 fabb 	bl	8003506 <HAL_NVIC_EnableIRQ>
}
 8002f90:	e067      	b.n	8003062 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART6)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3d      	ldr	r2, [pc, #244]	; (800308c <HAL_UART_MspInit+0x2b4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d162      	bne.n	8003062 <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	4a32      	ldr	r2, [pc, #200]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002fa6:	f043 0320 	orr.w	r3, r3, #32
 8002faa:	6453      	str	r3, [r2, #68]	; 0x44
 8002fac:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b29      	ldr	r3, [pc, #164]	; (8003070 <HAL_UART_MspInit+0x298>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = APC220_RX_Pin|APC220_TX_Pin;
 8002fd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4820      	ldr	r0, [pc, #128]	; (8003074 <HAL_UART_MspInit+0x29c>)
 8002ff2:	f000 ff1d 	bl	8003e30 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8002ff8:	4a26      	ldr	r2, [pc, #152]	; (8003094 <HAL_UART_MspInit+0x2bc>)
 8002ffa:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8002ffe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003002:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003004:	4b22      	ldr	r3, [pc, #136]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8003006:	2240      	movs	r2, #64	; 0x40
 8003008:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800300a:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 800300c:	2200      	movs	r2, #0
 800300e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003010:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8003012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003016:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 800301a:	2200      	movs	r2, #0
 800301c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800301e:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8003032:	2200      	movs	r2, #0
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003036:	4816      	ldr	r0, [pc, #88]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 8003038:	f000 fa8e 	bl	8003558 <HAL_DMA_Init>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8003042:	f7fe ffef 	bl	8002024 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 800304a:	635a      	str	r2, [r3, #52]	; 0x34
 800304c:	4a10      	ldr	r2, [pc, #64]	; (8003090 <HAL_UART_MspInit+0x2b8>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2047      	movs	r0, #71	; 0x47
 8003058:	f000 fa39 	bl	80034ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800305c:	2047      	movs	r0, #71	; 0x47
 800305e:	f000 fa52 	bl	8003506 <HAL_NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3738      	adds	r7, #56	; 0x38
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40011000 	.word	0x40011000
 8003070:	40023800 	.word	0x40023800
 8003074:	40020000 	.word	0x40020000
 8003078:	200004c0 	.word	0x200004c0
 800307c:	40026440 	.word	0x40026440
 8003080:	40004400 	.word	0x40004400
 8003084:	20000520 	.word	0x20000520
 8003088:	400260a0 	.word	0x400260a0
 800308c:	40011400 	.word	0x40011400
 8003090:	20000580 	.word	0x20000580
 8003094:	400264a0 	.word	0x400264a0

08003098 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <HAL_UART_MspDeInit+0xa4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d113      	bne.n	80030d2 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_UART_MspDeInit+0xa8>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	4a24      	ldr	r2, [pc, #144]	; (8003140 <HAL_UART_MspDeInit+0xa8>)
 80030b0:	f023 0310 	bic.w	r3, r3, #16
 80030b4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, TOF_TX_Pin|TOF_RX_Pin);
 80030b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030ba:	4822      	ldr	r0, [pc, #136]	; (8003144 <HAL_UART_MspDeInit+0xac>)
 80030bc:	f001 f83c 	bl	8004138 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 faf5 	bl	80036b4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80030ca:	2025      	movs	r0, #37	; 0x25
 80030cc:	f000 fa29 	bl	8003522 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 80030d0:	e02f      	b.n	8003132 <HAL_UART_MspDeInit+0x9a>
  else if(uartHandle->Instance==USART2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_UART_MspDeInit+0xb0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d112      	bne.n	8003102 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80030dc:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_UART_MspDeInit+0xa8>)
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	4a17      	ldr	r2, [pc, #92]	; (8003140 <HAL_UART_MspDeInit+0xa8>)
 80030e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030e6:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, OPENSD_TX_Pin|OPENSD_RX_Pin);
 80030e8:	210c      	movs	r1, #12
 80030ea:	4816      	ldr	r0, [pc, #88]	; (8003144 <HAL_UART_MspDeInit+0xac>)
 80030ec:	f001 f824 	bl	8004138 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fadd 	bl	80036b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80030fa:	2026      	movs	r0, #38	; 0x26
 80030fc:	f000 fa11 	bl	8003522 <HAL_NVIC_DisableIRQ>
}
 8003100:	e017      	b.n	8003132 <HAL_UART_MspDeInit+0x9a>
  else if(uartHandle->Instance==USART6)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_UART_MspDeInit+0xb4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d112      	bne.n	8003132 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART6_CLK_DISABLE();
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_UART_MspDeInit+0xa8>)
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <HAL_UART_MspDeInit+0xa8>)
 8003112:	f023 0320 	bic.w	r3, r3, #32
 8003116:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, APC220_RX_Pin|APC220_TX_Pin);
 8003118:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800311c:	4809      	ldr	r0, [pc, #36]	; (8003144 <HAL_UART_MspDeInit+0xac>)
 800311e:	f001 f80b 	bl	8004138 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fac4 	bl	80036b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800312c:	2047      	movs	r0, #71	; 0x47
 800312e:	f000 f9f8 	bl	8003522 <HAL_NVIC_DisableIRQ>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40011000 	.word	0x40011000
 8003140:	40023800 	.word	0x40023800
 8003144:	40020000 	.word	0x40020000
 8003148:	40004400 	.word	0x40004400
 800314c:	40011400 	.word	0x40011400

08003150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003154:	480d      	ldr	r0, [pc, #52]	; (800318c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003156:	490e      	ldr	r1, [pc, #56]	; (8003190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003158:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800316c:	4c0b      	ldr	r4, [pc, #44]	; (800319c <LoopFillZerobss+0x26>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800317a:	f7ff fc45 	bl	8002a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800317e:	f005 fab9 	bl	80086f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003182:	f7fe fca7 	bl	8001ad4 <main>
  bx  lr    
 8003186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800318c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003190:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003194:	0800bd64 	.word	0x0800bd64
  ldr r2, =_sbss
 8003198:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800319c:	200005f4 	.word	0x200005f4

080031a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	; (80031e4 <HAL_Init+0x40>)
 80031ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_Init+0x40>)
 80031ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_Init+0x40>)
 80031c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031cc:	2003      	movs	r0, #3
 80031ce:	f000 f973 	bl	80034b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d2:	200f      	movs	r0, #15
 80031d4:	f000 f808 	bl	80031e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d8:	f7ff fab0 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00

080031e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_InitTick+0x54>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x58>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f999 	bl	800353e <HAL_SYSTICK_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e00e      	b.n	8003234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b0f      	cmp	r3, #15
 800321a:	d80a      	bhi.n	8003232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800321c:	2200      	movs	r2, #0
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	f04f 30ff 	mov.w	r0, #4294967295
 8003224:	f000 f953 	bl	80034ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003228:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_InitTick+0x5c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20000010 	.word	0x20000010
 8003240:	2000001c 	.word	0x2000001c
 8003244:	20000018 	.word	0x20000018

08003248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x20>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x24>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_IncTick+0x24>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	2000001c 	.word	0x2000001c
 800326c:	200005e0 	.word	0x200005e0

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	200005e0 	.word	0x200005e0

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff ffee 	bl	8003270 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d005      	beq.n	80032ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_Delay+0x44>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ae:	bf00      	nop
 80032b0:	f7ff ffde 	bl	8003270 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d8f7      	bhi.n	80032b0 <HAL_Delay+0x28>
  {
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000001c 	.word	0x2000001c

080032d0 <__NVIC_SetPriorityGrouping>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003302:	4a04      	ldr	r2, [pc, #16]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	60d3      	str	r3, [r2, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_GetPriorityGrouping>:
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <__NVIC_GetPriorityGrouping+0x18>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0307 	and.w	r3, r3, #7
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_EnableIRQ>:
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db0b      	blt.n	800335e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4907      	ldr	r1, [pc, #28]	; (800336c <__NVIC_EnableIRQ+0x38>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_DisableIRQ>:
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	db12      	blt.n	80033a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	490a      	ldr	r1, [pc, #40]	; (80033b4 <__NVIC_DisableIRQ+0x44>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2001      	movs	r0, #1
 8003392:	fa00 f202 	lsl.w	r2, r0, r2
 8003396:	3320      	adds	r3, #32
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800339c:	f3bf 8f4f 	dsb	sy
}
 80033a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033a2:	f3bf 8f6f 	isb	sy
}
 80033a6:	bf00      	nop
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000e100 	.word	0xe000e100

080033b8 <__NVIC_SetPriority>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	6039      	str	r1, [r7, #0]
 80033c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	db0a      	blt.n	80033e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	490c      	ldr	r1, [pc, #48]	; (8003404 <__NVIC_SetPriority+0x4c>)
 80033d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d6:	0112      	lsls	r2, r2, #4
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	440b      	add	r3, r1
 80033dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033e0:	e00a      	b.n	80033f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	4908      	ldr	r1, [pc, #32]	; (8003408 <__NVIC_SetPriority+0x50>)
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	3b04      	subs	r3, #4
 80033f0:	0112      	lsls	r2, r2, #4
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	440b      	add	r3, r1
 80033f6:	761a      	strb	r2, [r3, #24]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000e100 	.word	0xe000e100
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <NVIC_EncodePriority>:
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f1c3 0307 	rsb	r3, r3, #7
 8003426:	2b04      	cmp	r3, #4
 8003428:	bf28      	it	cs
 800342a:	2304      	movcs	r3, #4
 800342c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3304      	adds	r3, #4
 8003432:	2b06      	cmp	r3, #6
 8003434:	d902      	bls.n	800343c <NVIC_EncodePriority+0x30>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3b03      	subs	r3, #3
 800343a:	e000      	b.n	800343e <NVIC_EncodePriority+0x32>
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	f04f 32ff 	mov.w	r2, #4294967295
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	401a      	ands	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003454:	f04f 31ff 	mov.w	r1, #4294967295
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	43d9      	mvns	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	4313      	orrs	r3, r2
}
 8003466:	4618      	mov	r0, r3
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <SysTick_Config>:
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3b01      	subs	r3, #1
 8003480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003484:	d301      	bcc.n	800348a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003486:	2301      	movs	r3, #1
 8003488:	e00f      	b.n	80034aa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800348a:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <SysTick_Config+0x40>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003492:	210f      	movs	r1, #15
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	f7ff ff8e 	bl	80033b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <SysTick_Config+0x40>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <SysTick_Config+0x40>)
 80034a4:	2207      	movs	r2, #7
 80034a6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	e000e010 	.word	0xe000e010

080034b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff05 	bl	80032d0 <__NVIC_SetPriorityGrouping>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e0:	f7ff ff1a 	bl	8003318 <__NVIC_GetPriorityGrouping>
 80034e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f7ff ff8e 	bl	800340c <NVIC_EncodePriority>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff5d 	bl	80033b8 <__NVIC_SetPriority>
}
 80034fe:	bf00      	nop
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff0d 	bl	8003334 <__NVIC_EnableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff1d 	bl	8003370 <__NVIC_DisableIRQ>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ff94 	bl	8003474 <SysTick_Config>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003564:	f7ff fe84 	bl	8003270 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e099      	b.n	80036a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0201 	bic.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003594:	e00f      	b.n	80035b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003596:	f7ff fe6b 	bl	8003270 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d908      	bls.n	80035b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2203      	movs	r2, #3
 80035ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e078      	b.n	80036a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e8      	bne.n	8003596 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_DMA_Init+0x158>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	2b04      	cmp	r3, #4
 800360e:	d107      	bne.n	8003620 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	4313      	orrs	r3, r2
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f023 0307 	bic.w	r3, r3, #7
 8003636:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b04      	cmp	r3, #4
 8003648:	d117      	bne.n	800367a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fb6b 	bl	8003d38 <DMA_CheckFifoParam>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2240      	movs	r2, #64	; 0x40
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003676:	2301      	movs	r3, #1
 8003678:	e016      	b.n	80036a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb22 	bl	8003ccc <DMA_CalcBaseAndBitshift>
 8003688:	4603      	mov	r3, r0
 800368a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	223f      	movs	r2, #63	; 0x3f
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	f010803f 	.word	0xf010803f

080036b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e050      	b.n	8003768 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	e048      	b.n	8003768 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2221      	movs	r2, #33	; 0x21
 8003714:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fad8 	bl	8003ccc <DMA_CalcBaseAndBitshift>
 800371c:	4603      	mov	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	409a      	lsls	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_DMA_Start_IT+0x26>
 8003792:	2302      	movs	r3, #2
 8003794:	e040      	b.n	8003818 <HAL_DMA_Start_IT+0xa8>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d12f      	bne.n	800380a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa56 	bl	8003c70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	223f      	movs	r2, #63	; 0x3f
 80037ca:	409a      	lsls	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0216 	orr.w	r2, r2, #22
 80037de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0208 	orr.w	r2, r2, #8
 80037f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e005      	b.n	8003816 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003812:	2302      	movs	r3, #2
 8003814:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800382e:	f7ff fd1f 	bl	8003270 <HAL_GetTick>
 8003832:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d008      	beq.n	8003852 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e052      	b.n	80038f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0216 	bic.w	r2, r2, #22
 8003860:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003870:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_DMA_Abort+0x62>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0208 	bic.w	r2, r2, #8
 8003890:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a2:	e013      	b.n	80038cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a4:	f7ff fce4 	bl	8003270 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d90c      	bls.n	80038cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2203      	movs	r2, #3
 80038bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e015      	b.n	80038f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e4      	bne.n	80038a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	223f      	movs	r2, #63	; 0x3f
 80038e0:	409a      	lsls	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d004      	beq.n	800391e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2280      	movs	r2, #128	; 0x80
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e00c      	b.n	8003938 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2205      	movs	r2, #5
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003950:	4b8e      	ldr	r3, [pc, #568]	; (8003b8c <HAL_DMA_IRQHandler+0x248>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a8e      	ldr	r2, [pc, #568]	; (8003b90 <HAL_DMA_IRQHandler+0x24c>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0a9b      	lsrs	r3, r3, #10
 800395c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	2208      	movs	r2, #8
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01a      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0204 	bic.w	r2, r2, #4
 8003996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	2208      	movs	r2, #8
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	2201      	movs	r2, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	2201      	movs	r2, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	f043 0202 	orr.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	2204      	movs	r2, #4
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	2204      	movs	r2, #4
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f043 0204 	orr.w	r2, r3, #4
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2210      	movs	r2, #16
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d043      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03c      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	2210      	movs	r2, #16
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d018      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d108      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d024      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4798      	blx	r3
 8003a72:	e01f      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01b      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
 8003a84:	e016      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d107      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0208 	bic.w	r2, r2, #8
 8003aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	2220      	movs	r2, #32
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 808f 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8087 	beq.w	8003be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	2220      	movs	r2, #32
 8003adc:	409a      	lsls	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d136      	bne.n	8003b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0216 	bic.w	r2, r2, #22
 8003afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d103      	bne.n	8003b1e <HAL_DMA_IRQHandler+0x1da>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0208 	bic.w	r2, r2, #8
 8003b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	223f      	movs	r2, #63	; 0x3f
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d07e      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
        }
        return;
 8003b5a:	e079      	b.n	8003c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01d      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d031      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e02c      	b.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
 8003b8a:	bf00      	nop
 8003b8c:	20000010 	.word	0x20000010
 8003b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4798      	blx	r3
 8003ba4:	e01e      	b.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10f      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0210 	bic.w	r2, r2, #16
 8003bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d032      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d022      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3301      	adds	r3, #1
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d307      	bcc.n	8003c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f2      	bne.n	8003c10 <HAL_DMA_IRQHandler+0x2cc>
 8003c2a:	e000      	b.n	8003c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	e000      	b.n	8003c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c50:	bf00      	nop
    }
  }
}
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b40      	cmp	r3, #64	; 0x40
 8003c9c:	d108      	bne.n	8003cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cae:	e007      	b.n	8003cc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	3b10      	subs	r3, #16
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <DMA_CalcBaseAndBitshift+0x64>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <DMA_CalcBaseAndBitshift+0x68>)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d909      	bls.n	8003d0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003d0c:	e007      	b.n	8003d1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	aaaaaaab 	.word	0xaaaaaaab
 8003d34:	0800b974 	.word	0x0800b974

08003d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11f      	bne.n	8003d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d856      	bhi.n	8003e06 <DMA_CheckFifoParam+0xce>
 8003d58:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <DMA_CheckFifoParam+0x28>)
 8003d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5e:	bf00      	nop
 8003d60:	08003d71 	.word	0x08003d71
 8003d64:	08003d83 	.word	0x08003d83
 8003d68:	08003d71 	.word	0x08003d71
 8003d6c:	08003e07 	.word	0x08003e07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d046      	beq.n	8003e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d80:	e043      	b.n	8003e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d8a:	d140      	bne.n	8003e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d90:	e03d      	b.n	8003e0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9a:	d121      	bne.n	8003de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d837      	bhi.n	8003e12 <DMA_CheckFifoParam+0xda>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <DMA_CheckFifoParam+0x70>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	08003dbf 	.word	0x08003dbf
 8003db0:	08003db9 	.word	0x08003db9
 8003db4:	08003dd1 	.word	0x08003dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e030      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d025      	beq.n	8003e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dce:	e022      	b.n	8003e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dd8:	d11f      	bne.n	8003e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dde:	e01c      	b.n	8003e1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d903      	bls.n	8003dee <DMA_CheckFifoParam+0xb6>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d003      	beq.n	8003df4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dec:	e018      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      break;
 8003df2:	e015      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00e      	beq.n	8003e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e00b      	b.n	8003e1e <DMA_CheckFifoParam+0xe6>
      break;
 8003e06:	bf00      	nop
 8003e08:	e00a      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e008      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e006      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e12:	bf00      	nop
 8003e14:	e004      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	e159      	b.n	8004100 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	f040 8148 	bne.w	80040fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d005      	beq.n	8003e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d130      	bne.n	8003ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	2203      	movs	r2, #3
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4013      	ands	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eb8:	2201      	movs	r2, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 0201 	and.w	r2, r3, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d017      	beq.n	8003f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d123      	bne.n	8003f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	08da      	lsrs	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3208      	adds	r2, #8
 8003f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	220f      	movs	r2, #15
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	08da      	lsrs	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3208      	adds	r2, #8
 8003f6e:	69b9      	ldr	r1, [r7, #24]
 8003f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0203 	and.w	r2, r3, #3
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a2 	beq.w	80040fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	4b57      	ldr	r3, [pc, #348]	; (8004118 <HAL_GPIO_Init+0x2e8>)
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	4a56      	ldr	r2, [pc, #344]	; (8004118 <HAL_GPIO_Init+0x2e8>)
 8003fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fc6:	4b54      	ldr	r3, [pc, #336]	; (8004118 <HAL_GPIO_Init+0x2e8>)
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fd2:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_GPIO_Init+0x2ec>)
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	089b      	lsrs	r3, r3, #2
 8003fd8:	3302      	adds	r3, #2
 8003fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	220f      	movs	r2, #15
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_GPIO_Init+0x2f0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d019      	beq.n	8004032 <HAL_GPIO_Init+0x202>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a48      	ldr	r2, [pc, #288]	; (8004124 <HAL_GPIO_Init+0x2f4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x1fe>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a47      	ldr	r2, [pc, #284]	; (8004128 <HAL_GPIO_Init+0x2f8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00d      	beq.n	800402a <HAL_GPIO_Init+0x1fa>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a46      	ldr	r2, [pc, #280]	; (800412c <HAL_GPIO_Init+0x2fc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <HAL_GPIO_Init+0x1f6>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a45      	ldr	r2, [pc, #276]	; (8004130 <HAL_GPIO_Init+0x300>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_GPIO_Init+0x1f2>
 800401e:	2304      	movs	r3, #4
 8004020:	e008      	b.n	8004034 <HAL_GPIO_Init+0x204>
 8004022:	2307      	movs	r3, #7
 8004024:	e006      	b.n	8004034 <HAL_GPIO_Init+0x204>
 8004026:	2303      	movs	r3, #3
 8004028:	e004      	b.n	8004034 <HAL_GPIO_Init+0x204>
 800402a:	2302      	movs	r3, #2
 800402c:	e002      	b.n	8004034 <HAL_GPIO_Init+0x204>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_GPIO_Init+0x204>
 8004032:	2300      	movs	r3, #0
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	f002 0203 	and.w	r2, r2, #3
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	4093      	lsls	r3, r2
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004044:	4935      	ldr	r1, [pc, #212]	; (800411c <HAL_GPIO_Init+0x2ec>)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	3302      	adds	r3, #2
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004052:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_GPIO_Init+0x304>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004076:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <HAL_GPIO_Init+0x304>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <HAL_GPIO_Init+0x304>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a0:	4a24      	ldr	r2, [pc, #144]	; (8004134 <HAL_GPIO_Init+0x304>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040a6:	4b23      	ldr	r3, [pc, #140]	; (8004134 <HAL_GPIO_Init+0x304>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ca:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_GPIO_Init+0x304>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d0:	4b18      	ldr	r3, [pc, #96]	; (8004134 <HAL_GPIO_Init+0x304>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f4:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <HAL_GPIO_Init+0x304>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	f67f aea2 	bls.w	8003e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	40013800 	.word	0x40013800
 8004120:	40020000 	.word	0x40020000
 8004124:	40020400 	.word	0x40020400
 8004128:	40020800 	.word	0x40020800
 800412c:	40020c00 	.word	0x40020c00
 8004130:	40021000 	.word	0x40021000
 8004134:	40013c00 	.word	0x40013c00

08004138 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e0bb      	b.n	80042cc <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004154:	2201      	movs	r2, #1
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4013      	ands	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	429a      	cmp	r2, r3
 800416c:	f040 80ab 	bne.w	80042c6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004170:	4a5c      	ldr	r2, [pc, #368]	; (80042e4 <HAL_GPIO_DeInit+0x1ac>)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	089b      	lsrs	r3, r3, #2
 8004176:	3302      	adds	r3, #2
 8004178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	220f      	movs	r2, #15
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a54      	ldr	r2, [pc, #336]	; (80042e8 <HAL_GPIO_DeInit+0x1b0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d019      	beq.n	80041ce <HAL_GPIO_DeInit+0x96>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a53      	ldr	r2, [pc, #332]	; (80042ec <HAL_GPIO_DeInit+0x1b4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_GPIO_DeInit+0x92>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_GPIO_DeInit+0x1b8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00d      	beq.n	80041c6 <HAL_GPIO_DeInit+0x8e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a51      	ldr	r2, [pc, #324]	; (80042f4 <HAL_GPIO_DeInit+0x1bc>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d007      	beq.n	80041c2 <HAL_GPIO_DeInit+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a50      	ldr	r2, [pc, #320]	; (80042f8 <HAL_GPIO_DeInit+0x1c0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d101      	bne.n	80041be <HAL_GPIO_DeInit+0x86>
 80041ba:	2304      	movs	r3, #4
 80041bc:	e008      	b.n	80041d0 <HAL_GPIO_DeInit+0x98>
 80041be:	2307      	movs	r3, #7
 80041c0:	e006      	b.n	80041d0 <HAL_GPIO_DeInit+0x98>
 80041c2:	2303      	movs	r3, #3
 80041c4:	e004      	b.n	80041d0 <HAL_GPIO_DeInit+0x98>
 80041c6:	2302      	movs	r3, #2
 80041c8:	e002      	b.n	80041d0 <HAL_GPIO_DeInit+0x98>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_GPIO_DeInit+0x98>
 80041ce:	2300      	movs	r3, #0
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	f002 0203 	and.w	r2, r2, #3
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	4093      	lsls	r3, r2
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d132      	bne.n	8004246 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80041e0:	4b46      	ldr	r3, [pc, #280]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	4944      	ldr	r1, [pc, #272]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80041ee:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	43db      	mvns	r3, r3
 80041f6:	4941      	ldr	r1, [pc, #260]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041fc:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	43db      	mvns	r3, r3
 8004204:	493d      	ldr	r1, [pc, #244]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 8004206:	4013      	ands	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800420a:	4b3c      	ldr	r3, [pc, #240]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	493a      	ldr	r1, [pc, #232]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 8004214:	4013      	ands	r3, r2
 8004216:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004228:	4a2e      	ldr	r2, [pc, #184]	; (80042e4 <HAL_GPIO_DeInit+0x1ac>)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	3302      	adds	r3, #2
 8004230:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	43da      	mvns	r2, r3
 8004238:	482a      	ldr	r0, [pc, #168]	; (80042e4 <HAL_GPIO_DeInit+0x1ac>)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	089b      	lsrs	r3, r3, #2
 800423e:	400a      	ands	r2, r1
 8004240:	3302      	adds	r3, #2
 8004242:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	2103      	movs	r1, #3
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	401a      	ands	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	08da      	lsrs	r2, r3, #3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3208      	adds	r2, #8
 8004264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	220f      	movs	r2, #15
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	08d2      	lsrs	r2, r2, #3
 800427c:	4019      	ands	r1, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3208      	adds	r2, #8
 8004282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2103      	movs	r1, #3
 8004290:	fa01 f303 	lsl.w	r3, r1, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2101      	movs	r1, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	2103      	movs	r1, #3
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	401a      	ands	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	f67f af40 	bls.w	8004154 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40013800 	.word	0x40013800
 80042e8:	40020000 	.word	0x40020000
 80042ec:	40020400 	.word	0x40020400
 80042f0:	40020800 	.word	0x40020800
 80042f4:	40020c00 	.word	0x40020c00
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40013c00 	.word	0x40013c00

08004300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e001      	b.n	8004322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004340:	787b      	ldrb	r3, [r7, #1]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004346:	887a      	ldrh	r2, [r7, #2]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800434c:	e003      	b.n	8004356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	041a      	lsls	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004374:	887a      	ldrh	r2, [r7, #2]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4013      	ands	r3, r2
 800437a:	041a      	lsls	r2, r3, #16
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	43d9      	mvns	r1, r3
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	400b      	ands	r3, r1
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	619a      	str	r2, [r3, #24]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	88fb      	ldrh	r3, [r7, #6]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d006      	beq.n	80043bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd fe20 	bl	8001ffc <HAL_GPIO_EXTI_Callback>
  }
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40013c00 	.word	0x40013c00

080043c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e12b      	b.n	8004632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd f980 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	; 0x24
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800441a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800442a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800442c:	f002 f84a 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 8004430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4a81      	ldr	r2, [pc, #516]	; (800463c <HAL_I2C_Init+0x274>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d807      	bhi.n	800444c <HAL_I2C_Init+0x84>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a80      	ldr	r2, [pc, #512]	; (8004640 <HAL_I2C_Init+0x278>)
 8004440:	4293      	cmp	r3, r2
 8004442:	bf94      	ite	ls
 8004444:	2301      	movls	r3, #1
 8004446:	2300      	movhi	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e006      	b.n	800445a <HAL_I2C_Init+0x92>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a7d      	ldr	r2, [pc, #500]	; (8004644 <HAL_I2C_Init+0x27c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	bf94      	ite	ls
 8004454:	2301      	movls	r3, #1
 8004456:	2300      	movhi	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0e7      	b.n	8004632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a78      	ldr	r2, [pc, #480]	; (8004648 <HAL_I2C_Init+0x280>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	0c9b      	lsrs	r3, r3, #18
 800446c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a6a      	ldr	r2, [pc, #424]	; (800463c <HAL_I2C_Init+0x274>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d802      	bhi.n	800449c <HAL_I2C_Init+0xd4>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	3301      	adds	r3, #1
 800449a:	e009      	b.n	80044b0 <HAL_I2C_Init+0xe8>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	4a69      	ldr	r2, [pc, #420]	; (800464c <HAL_I2C_Init+0x284>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	099b      	lsrs	r3, r3, #6
 80044ae:	3301      	adds	r3, #1
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	495c      	ldr	r1, [pc, #368]	; (800463c <HAL_I2C_Init+0x274>)
 80044cc:	428b      	cmp	r3, r1
 80044ce:	d819      	bhi.n	8004504 <HAL_I2C_Init+0x13c>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1e59      	subs	r1, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	fbb1 f3f3 	udiv	r3, r1, r3
 80044de:	1c59      	adds	r1, r3, #1
 80044e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044e4:	400b      	ands	r3, r1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_I2C_Init+0x138>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1e59      	subs	r1, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f8:	3301      	adds	r3, #1
 80044fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fe:	e051      	b.n	80045a4 <HAL_I2C_Init+0x1dc>
 8004500:	2304      	movs	r3, #4
 8004502:	e04f      	b.n	80045a4 <HAL_I2C_Init+0x1dc>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d111      	bne.n	8004530 <HAL_I2C_Init+0x168>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1e58      	subs	r0, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6859      	ldr	r1, [r3, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	440b      	add	r3, r1
 800451a:	fbb0 f3f3 	udiv	r3, r0, r3
 800451e:	3301      	adds	r3, #1
 8004520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	e012      	b.n	8004556 <HAL_I2C_Init+0x18e>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1e58      	subs	r0, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	0099      	lsls	r1, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	fbb0 f3f3 	udiv	r3, r0, r3
 8004546:	3301      	adds	r3, #1
 8004548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf0c      	ite	eq
 8004550:	2301      	moveq	r3, #1
 8004552:	2300      	movne	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_Init+0x196>
 800455a:	2301      	movs	r3, #1
 800455c:	e022      	b.n	80045a4 <HAL_I2C_Init+0x1dc>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10e      	bne.n	8004584 <HAL_I2C_Init+0x1bc>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1e58      	subs	r0, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	460b      	mov	r3, r1
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	440b      	add	r3, r1
 8004574:	fbb0 f3f3 	udiv	r3, r0, r3
 8004578:	3301      	adds	r3, #1
 800457a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004582:	e00f      	b.n	80045a4 <HAL_I2C_Init+0x1dc>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1e58      	subs	r0, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	0099      	lsls	r1, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	fbb0 f3f3 	udiv	r3, r0, r3
 800459a:	3301      	adds	r3, #1
 800459c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	6809      	ldr	r1, [r1, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6911      	ldr	r1, [r2, #16]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	68d2      	ldr	r2, [r2, #12]
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	000186a0 	.word	0x000186a0
 8004640:	001e847f 	.word	0x001e847f
 8004644:	003d08ff 	.word	0x003d08ff
 8004648:	431bde83 	.word	0x431bde83
 800464c:	10624dd3 	.word	0x10624dd3

08004650 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	460b      	mov	r3, r1
 800465e:	817b      	strh	r3, [r7, #10]
 8004660:	4613      	mov	r3, r2
 8004662:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004664:	f7fe fe04 	bl	8003270 <HAL_GetTick>
 8004668:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	f040 80e0 	bne.w	8004838 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2319      	movs	r3, #25
 800467e:	2201      	movs	r2, #1
 8004680:	4970      	ldr	r1, [pc, #448]	; (8004844 <HAL_I2C_Master_Transmit+0x1f4>)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f001 f910 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
 8004690:	e0d3      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_I2C_Master_Transmit+0x50>
 800469c:	2302      	movs	r3, #2
 800469e:	e0cc      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ea>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d007      	beq.n	80046c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2221      	movs	r2, #33	; 0x21
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2210      	movs	r2, #16
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	893a      	ldrh	r2, [r7, #8]
 80046f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a50      	ldr	r2, [pc, #320]	; (8004848 <HAL_I2C_Master_Transmit+0x1f8>)
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004708:	8979      	ldrh	r1, [r7, #10]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fdfc 	bl	800530c <I2C_MasterRequestWrite>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e08d      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004734:	e066      	b.n	8004804 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6a39      	ldr	r1, [r7, #32]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f001 f98a 	bl	8005a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b04      	cmp	r3, #4
 800474c:	d107      	bne.n	800475e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e06b      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11b      	bne.n	80047d8 <HAL_I2C_Master_Transmit+0x188>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d017      	beq.n	80047d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	781a      	ldrb	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	6a39      	ldr	r1, [r7, #32]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f001 f97a 	bl	8005ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00d      	beq.n	8004804 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d107      	bne.n	8004800 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e01a      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d194      	bne.n	8004736 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	00100002 	.word	0x00100002
 8004848:	ffff0000 	.word	0xffff0000

0800484c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	; 0x30
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	461a      	mov	r2, r3
 8004858:	460b      	mov	r3, r1
 800485a:	817b      	strh	r3, [r7, #10]
 800485c:	4613      	mov	r3, r2
 800485e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7fe fd06 	bl	8003270 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	f040 820b 	bne.w	8004c8a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2319      	movs	r3, #25
 800487a:	2201      	movs	r2, #1
 800487c:	497c      	ldr	r1, [pc, #496]	; (8004a70 <HAL_I2C_Master_Receive+0x224>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f001 f812 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
 800488c:	e1fe      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_I2C_Master_Receive+0x50>
 8004898:	2302      	movs	r3, #2
 800489a:	e1f7      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d007      	beq.n	80048c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2222      	movs	r2, #34	; 0x22
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2210      	movs	r2, #16
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	893a      	ldrh	r2, [r7, #8]
 80048f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a5c      	ldr	r2, [pc, #368]	; (8004a74 <HAL_I2C_Master_Receive+0x228>)
 8004902:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004904:	8979      	ldrh	r1, [r7, #10]
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fd80 	bl	8005410 <I2C_MasterRequestRead>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e1b8      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d113      	bne.n	800494a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004922:	2300      	movs	r3, #0
 8004924:	623b      	str	r3, [r7, #32]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e18c      	b.n	8004c64 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494e:	2b01      	cmp	r3, #1
 8004950:	d11b      	bne.n	800498a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004962:	2300      	movs	r3, #0
 8004964:	61fb      	str	r3, [r7, #28]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e16c      	b.n	8004c64 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498e:	2b02      	cmp	r3, #2
 8004990:	d11b      	bne.n	80049ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	61bb      	str	r3, [r7, #24]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	e14c      	b.n	8004c64 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049f0:	e138      	b.n	8004c64 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	f200 80f1 	bhi.w	8004bde <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d123      	bne.n	8004a4c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f001 f8a5 	bl	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e139      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a4a:	e10b      	b.n	8004c64 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d14e      	bne.n	8004af2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4906      	ldr	r1, [pc, #24]	; (8004a78 <HAL_I2C_Master_Receive+0x22c>)
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 ff22 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e10e      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
 8004a6e:	bf00      	nop
 8004a70:	00100002 	.word	0x00100002
 8004a74:	ffff0000 	.word	0xffff0000
 8004a78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004af0:	e0b8      	b.n	8004c64 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af8:	2200      	movs	r2, #0
 8004afa:	4966      	ldr	r1, [pc, #408]	; (8004c94 <HAL_I2C_Master_Receive+0x448>)
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fed3 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0bf      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	494f      	ldr	r1, [pc, #316]	; (8004c94 <HAL_I2C_Master_Receive+0x448>)
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fea5 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e091      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bdc:	e042      	b.n	8004c64 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 ffb8 	bl	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e04c      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d118      	bne.n	8004c64 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	691a      	ldr	r2, [r3, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f47f aec2 	bne.w	80049f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e000      	b.n	8004c8c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004c8a:	2302      	movs	r3, #2
  }
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3728      	adds	r7, #40	; 0x28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	00010004 	.word	0x00010004

08004c98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	817b      	strh	r3, [r7, #10]
 8004caa:	460b      	mov	r3, r1
 8004cac:	813b      	strh	r3, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb2:	f7fe fadd 	bl	8003270 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	f040 80d9 	bne.w	8004e78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2319      	movs	r3, #25
 8004ccc:	2201      	movs	r2, #1
 8004cce:	496d      	ldr	r1, [pc, #436]	; (8004e84 <HAL_I2C_Mem_Write+0x1ec>)
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 fde9 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	e0cc      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_I2C_Mem_Write+0x56>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0c5      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d007      	beq.n	8004d14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2221      	movs	r2, #33	; 0x21
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2240      	movs	r2, #64	; 0x40
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a3a      	ldr	r2, [r7, #32]
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a4d      	ldr	r2, [pc, #308]	; (8004e88 <HAL_I2C_Mem_Write+0x1f0>)
 8004d54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d56:	88f8      	ldrh	r0, [r7, #6]
 8004d58:	893a      	ldrh	r2, [r7, #8]
 8004d5a:	8979      	ldrh	r1, [r7, #10]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4603      	mov	r3, r0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fc20 	bl	80055ac <I2C_RequestMemoryWrite>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d052      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e081      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fe6a 	bl	8005a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00d      	beq.n	8004da2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d107      	bne.n	8004d9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06b      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d11b      	bne.n	8004e18 <HAL_I2C_Mem_Write+0x180>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d017      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1aa      	bne.n	8004d76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fe56 	bl	8005ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00d      	beq.n	8004e4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d107      	bne.n	8004e48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e016      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	00100002 	.word	0x00100002
 8004e88:	ffff0000 	.word	0xffff0000

08004e8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08c      	sub	sp, #48	; 0x30
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ea6:	f7fe f9e3 	bl	8003270 <HAL_GetTick>
 8004eaa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	f040 8208 	bne.w	80052ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	2319      	movs	r3, #25
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	497b      	ldr	r1, [pc, #492]	; (80050b0 <HAL_I2C_Mem_Read+0x224>)
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fcef 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e1fb      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_I2C_Mem_Read+0x56>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e1f4      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d007      	beq.n	8004f08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2222      	movs	r2, #34	; 0x22
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2240      	movs	r2, #64	; 0x40
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a5b      	ldr	r2, [pc, #364]	; (80050b4 <HAL_I2C_Mem_Read+0x228>)
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f4a:	88f8      	ldrh	r0, [r7, #6]
 8004f4c:	893a      	ldrh	r2, [r7, #8]
 8004f4e:	8979      	ldrh	r1, [r7, #10]
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	4603      	mov	r3, r0
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fbbc 	bl	80056d8 <I2C_RequestMemoryRead>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e1b0      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d113      	bne.n	8004f9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	623b      	str	r3, [r7, #32]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e184      	b.n	80052a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11b      	bne.n	8004fda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e164      	b.n	80052a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d11b      	bne.n	800501a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	e144      	b.n	80052a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005030:	e138      	b.n	80052a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	2b03      	cmp	r3, #3
 8005038:	f200 80f1 	bhi.w	800521e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	2b01      	cmp	r3, #1
 8005042:	d123      	bne.n	800508c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fd85 	bl	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e139      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691a      	ldr	r2, [r3, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	855a      	strh	r2, [r3, #42]	; 0x2a
 800508a:	e10b      	b.n	80052a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	2b02      	cmp	r3, #2
 8005092:	d14e      	bne.n	8005132 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509a:	2200      	movs	r2, #0
 800509c:	4906      	ldr	r1, [pc, #24]	; (80050b8 <HAL_I2C_Mem_Read+0x22c>)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fc02 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e10e      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
 80050ae:	bf00      	nop
 80050b0:	00100002 	.word	0x00100002
 80050b4:	ffff0000 	.word	0xffff0000
 80050b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005130:	e0b8      	b.n	80052a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2200      	movs	r2, #0
 800513a:	4966      	ldr	r1, [pc, #408]	; (80052d4 <HAL_I2C_Mem_Read+0x448>)
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fbb3 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0bf      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2200      	movs	r2, #0
 8005196:	494f      	ldr	r1, [pc, #316]	; (80052d4 <HAL_I2C_Mem_Read+0x448>)
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fb85 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e091      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800521c:	e042      	b.n	80052a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fc98 	bl	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e04c      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d118      	bne.n	80052a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	3b01      	subs	r3, #1
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f aec2 	bne.w	8005032 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e000      	b.n	80052cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052ca:	2302      	movs	r3, #2
  }
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3728      	adds	r7, #40	; 0x28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	00010004 	.word	0x00010004

080052d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e6:	b2db      	uxtb	r3, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005300:	4618      	mov	r0, r3
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	460b      	mov	r3, r1
 800531a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d006      	beq.n	8005336 <I2C_MasterRequestWrite+0x2a>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d003      	beq.n	8005336 <I2C_MasterRequestWrite+0x2a>
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005334:	d108      	bne.n	8005348 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	e00b      	b.n	8005360 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	2b12      	cmp	r3, #18
 800534e:	d107      	bne.n	8005360 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fa9b 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d103      	bne.n	8005390 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e035      	b.n	8005400 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539c:	d108      	bne.n	80053b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800539e:	897b      	ldrh	r3, [r7, #10]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053ac:	611a      	str	r2, [r3, #16]
 80053ae:	e01b      	b.n	80053e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053b0:	897b      	ldrh	r3, [r7, #10]
 80053b2:	11db      	asrs	r3, r3, #7
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0306 	and.w	r3, r3, #6
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f063 030f 	orn	r3, r3, #15
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	490e      	ldr	r1, [pc, #56]	; (8005408 <I2C_MasterRequestWrite+0xfc>)
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fac1 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e010      	b.n	8005400 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4907      	ldr	r1, [pc, #28]	; (800540c <I2C_MasterRequestWrite+0x100>)
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 fab1 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	00010008 	.word	0x00010008
 800540c:	00010002 	.word	0x00010002

08005410 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af02      	add	r7, sp, #8
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	460b      	mov	r3, r1
 800541e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005434:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d006      	beq.n	800544a <I2C_MasterRequestRead+0x3a>
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d003      	beq.n	800544a <I2C_MasterRequestRead+0x3a>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005448:	d108      	bne.n	800545c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e00b      	b.n	8005474 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	2b11      	cmp	r3, #17
 8005462:	d107      	bne.n	8005474 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005472:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fa11 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549a:	d103      	bne.n	80054a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e079      	b.n	800559c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b0:	d108      	bne.n	80054c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	611a      	str	r2, [r3, #16]
 80054c2:	e05f      	b.n	8005584 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054c4:	897b      	ldrh	r3, [r7, #10]
 80054c6:	11db      	asrs	r3, r3, #7
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f003 0306 	and.w	r3, r3, #6
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f063 030f 	orn	r3, r3, #15
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4930      	ldr	r1, [pc, #192]	; (80055a4 <I2C_MasterRequestRead+0x194>)
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 fa37 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e054      	b.n	800559c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054f2:	897b      	ldrh	r3, [r7, #10]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	4929      	ldr	r1, [pc, #164]	; (80055a8 <I2C_MasterRequestRead+0x198>)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fa27 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e044      	b.n	800559c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005512:	2300      	movs	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005536:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f9af 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	d103      	bne.n	8005568 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005566:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e017      	b.n	800559c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	11db      	asrs	r3, r3, #7
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0306 	and.w	r3, r3, #6
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f063 030e 	orn	r3, r3, #14
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4907      	ldr	r1, [pc, #28]	; (80055a8 <I2C_MasterRequestRead+0x198>)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f9e3 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	00010008 	.word	0x00010008
 80055a8:	00010002 	.word	0x00010002

080055ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	4608      	mov	r0, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	461a      	mov	r2, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	817b      	strh	r3, [r7, #10]
 80055be:	460b      	mov	r3, r1
 80055c0:	813b      	strh	r3, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	2200      	movs	r2, #0
 80055de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f960 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00d      	beq.n	800560a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fc:	d103      	bne.n	8005606 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e05f      	b.n	80056ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800560a:	897b      	ldrh	r3, [r7, #10]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005618:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	6a3a      	ldr	r2, [r7, #32]
 800561e:	492d      	ldr	r1, [pc, #180]	; (80056d4 <I2C_RequestMemoryWrite+0x128>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f998 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04c      	b.n	80056ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005648:	6a39      	ldr	r1, [r7, #32]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fa02 	bl	8005a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00d      	beq.n	8005672 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b04      	cmp	r3, #4
 800565c:	d107      	bne.n	800566e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800566c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e02b      	b.n	80056ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d105      	bne.n	8005684 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005678:	893b      	ldrh	r3, [r7, #8]
 800567a:	b2da      	uxtb	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	e021      	b.n	80056c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005684:	893b      	ldrh	r3, [r7, #8]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	b29b      	uxth	r3, r3
 800568a:	b2da      	uxtb	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005694:	6a39      	ldr	r1, [r7, #32]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f9dc 	bl	8005a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00d      	beq.n	80056be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d107      	bne.n	80056ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e005      	b.n	80056ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056be:	893b      	ldrh	r3, [r7, #8]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	00010002 	.word	0x00010002

080056d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	817b      	strh	r3, [r7, #10]
 80056ea:	460b      	mov	r3, r1
 80056ec:	813b      	strh	r3, [r7, #8]
 80056ee:	4613      	mov	r3, r2
 80056f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005700:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	2200      	movs	r2, #0
 800571a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f8c2 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005738:	d103      	bne.n	8005742 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e0aa      	b.n	800589c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	4952      	ldr	r1, [pc, #328]	; (80058a4 <I2C_RequestMemoryRead+0x1cc>)
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f8fa 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e097      	b.n	800589c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	6a39      	ldr	r1, [r7, #32]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f964 	bl	8005a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	2b04      	cmp	r3, #4
 8005798:	d107      	bne.n	80057aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e076      	b.n	800589c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d105      	bne.n	80057c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b4:	893b      	ldrh	r3, [r7, #8]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	611a      	str	r2, [r3, #16]
 80057be:	e021      	b.n	8005804 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057c0:	893b      	ldrh	r3, [r7, #8]
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d0:	6a39      	ldr	r1, [r7, #32]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f93e 	bl	8005a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00d      	beq.n	80057fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d107      	bne.n	80057f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e050      	b.n	800589c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057fa:	893b      	ldrh	r3, [r7, #8]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005806:	6a39      	ldr	r1, [r7, #32]
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f923 	bl	8005a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00d      	beq.n	8005830 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b04      	cmp	r3, #4
 800581a:	d107      	bne.n	800582c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e035      	b.n	800589c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800583e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	2200      	movs	r2, #0
 8005848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f82b 	bl	80058a8 <I2C_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005866:	d103      	bne.n	8005870 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800586e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e013      	b.n	800589c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005874:	897b      	ldrh	r3, [r7, #10]
 8005876:	b2db      	uxtb	r3, r3
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	b2da      	uxtb	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	4906      	ldr	r1, [pc, #24]	; (80058a4 <I2C_RequestMemoryRead+0x1cc>)
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f863 	bl	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	00010002 	.word	0x00010002

080058a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b8:	e025      	b.n	8005906 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d021      	beq.n	8005906 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fd fcd5 	bl	8003270 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d116      	bne.n	8005906 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0220 	orr.w	r2, r3, #32
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e023      	b.n	800594e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	0c1b      	lsrs	r3, r3, #16
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d10d      	bne.n	800592c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	43da      	mvns	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4013      	ands	r3, r2
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	e00c      	b.n	8005946 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	43da      	mvns	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf0c      	ite	eq
 800593e:	2301      	moveq	r3, #1
 8005940:	2300      	movne	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	429a      	cmp	r2, r3
 800594a:	d0b6      	beq.n	80058ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005964:	e051      	b.n	8005a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005974:	d123      	bne.n	80059be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005984:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800598e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e046      	b.n	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d021      	beq.n	8005a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c6:	f7fd fc53 	bl	8003270 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d116      	bne.n	8005a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e020      	b.n	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d10c      	bne.n	8005a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bf14      	ite	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	2300      	moveq	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e00b      	b.n	8005a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	43da      	mvns	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d18d      	bne.n	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a60:	e02d      	b.n	8005abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f8ce 	bl	8005c04 <I2C_IsAcknowledgeFailed>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e02d      	b.n	8005ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a78:	d021      	beq.n	8005abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7a:	f7fd fbf9 	bl	8003270 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d302      	bcc.n	8005a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d116      	bne.n	8005abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	f043 0220 	orr.w	r2, r3, #32
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e007      	b.n	8005ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac8:	2b80      	cmp	r3, #128	; 0x80
 8005aca:	d1ca      	bne.n	8005a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b084      	sub	sp, #16
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ae2:	e02d      	b.n	8005b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f88d 	bl	8005c04 <I2C_IsAcknowledgeFailed>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e02d      	b.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d021      	beq.n	8005b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afc:	f7fd fbb8 	bl	8003270 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d116      	bne.n	8005b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	f043 0220 	orr.w	r2, r3, #32
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e007      	b.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d1ca      	bne.n	8005ae4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b64:	e042      	b.n	8005bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b10      	cmp	r3, #16
 8005b72:	d119      	bne.n	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0210 	mvn.w	r2, #16
 8005b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e029      	b.n	8005bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba8:	f7fd fb62 	bl	8003270 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d302      	bcc.n	8005bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d116      	bne.n	8005bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f043 0220 	orr.w	r2, r3, #32
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e007      	b.n	8005bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b40      	cmp	r3, #64	; 0x40
 8005bf8:	d1b5      	bne.n	8005b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1a:	d11b      	bne.n	8005c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c40:	f043 0204 	orr.w	r2, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e267      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d075      	beq.n	8005d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c82:	4b88      	ldr	r3, [pc, #544]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d00c      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c8e:	4b85      	ldr	r3, [pc, #532]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d112      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c9a:	4b82      	ldr	r3, [pc, #520]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca6:	d10b      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca8:	4b7e      	ldr	r3, [pc, #504]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05b      	beq.n	8005d6c <HAL_RCC_OscConfig+0x108>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d157      	bne.n	8005d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e242      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d106      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x74>
 8005cca:	4b76      	ldr	r3, [pc, #472]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a75      	ldr	r2, [pc, #468]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	e01d      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce0:	d10c      	bne.n	8005cfc <HAL_RCC_OscConfig+0x98>
 8005ce2:	4b70      	ldr	r3, [pc, #448]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6f      	ldr	r2, [pc, #444]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4b6d      	ldr	r3, [pc, #436]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a6c      	ldr	r2, [pc, #432]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e00b      	b.n	8005d14 <HAL_RCC_OscConfig+0xb0>
 8005cfc:	4b69      	ldr	r3, [pc, #420]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a68      	ldr	r2, [pc, #416]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4b66      	ldr	r3, [pc, #408]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a65      	ldr	r2, [pc, #404]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fd faa8 	bl	8003270 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d24:	f7fd faa4 	bl	8003270 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e207      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	4b5b      	ldr	r3, [pc, #364]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0xc0>
 8005d42:	e014      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fd fa94 	bl	8003270 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d4c:	f7fd fa90 	bl	8003270 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b64      	cmp	r3, #100	; 0x64
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e1f3      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	4b51      	ldr	r3, [pc, #324]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0xe8>
 8005d6a:	e000      	b.n	8005d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d063      	beq.n	8005e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d86:	4b47      	ldr	r3, [pc, #284]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d11c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d92:	4b44      	ldr	r3, [pc, #272]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d116      	bne.n	8005dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d9e:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e1c7      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005db6:	4b3b      	ldr	r3, [pc, #236]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4937      	ldr	r1, [pc, #220]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dca:	e03a      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d020      	beq.n	8005e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dd4:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <HAL_RCC_OscConfig+0x244>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dda:	f7fd fa49 	bl	8003270 <HAL_GetTick>
 8005dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de0:	e008      	b.n	8005df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de2:	f7fd fa45 	bl	8003270 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d901      	bls.n	8005df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e1a8      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	4b2b      	ldr	r3, [pc, #172]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f0      	beq.n	8005de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e00:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4925      	ldr	r1, [pc, #148]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	600b      	str	r3, [r1, #0]
 8005e14:	e015      	b.n	8005e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e16:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <HAL_RCC_OscConfig+0x244>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1c:	f7fd fa28 	bl	8003270 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e24:	f7fd fa24 	bl	8003270 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e187      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d036      	beq.n	8005ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d016      	beq.n	8005e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e56:	4b15      	ldr	r3, [pc, #84]	; (8005eac <HAL_RCC_OscConfig+0x248>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5c:	f7fd fa08 	bl	8003270 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e64:	f7fd fa04 	bl	8003270 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e167      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_OscConfig+0x240>)
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0x200>
 8005e82:	e01b      	b.n	8005ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <HAL_RCC_OscConfig+0x248>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e8a:	f7fd f9f1 	bl	8003270 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e90:	e00e      	b.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e92:	f7fd f9ed 	bl	8003270 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d907      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e150      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	42470000 	.word	0x42470000
 8005eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb0:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1ea      	bne.n	8005e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 8097 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ece:	4b81      	ldr	r3, [pc, #516]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10f      	bne.n	8005efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	4b7d      	ldr	r3, [pc, #500]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	4a7c      	ldr	r2, [pc, #496]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eea:	4b7a      	ldr	r3, [pc, #488]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005efa:	4b77      	ldr	r3, [pc, #476]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d118      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f06:	4b74      	ldr	r3, [pc, #464]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a73      	ldr	r2, [pc, #460]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f12:	f7fd f9ad 	bl	8003270 <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1a:	f7fd f9a9 	bl	8003270 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e10c      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	4b6a      	ldr	r3, [pc, #424]	; (80060d8 <HAL_RCC_OscConfig+0x474>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d106      	bne.n	8005f4e <HAL_RCC_OscConfig+0x2ea>
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4c:	e01c      	b.n	8005f88 <HAL_RCC_OscConfig+0x324>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b05      	cmp	r3, #5
 8005f54:	d10c      	bne.n	8005f70 <HAL_RCC_OscConfig+0x30c>
 8005f56:	4b5f      	ldr	r3, [pc, #380]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5a:	4a5e      	ldr	r2, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f5c:	f043 0304 	orr.w	r3, r3, #4
 8005f60:	6713      	str	r3, [r2, #112]	; 0x70
 8005f62:	4b5c      	ldr	r3, [pc, #368]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a5b      	ldr	r2, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f68:	f043 0301 	orr.w	r3, r3, #1
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6e:	e00b      	b.n	8005f88 <HAL_RCC_OscConfig+0x324>
 8005f70:	4b58      	ldr	r3, [pc, #352]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7c:	4b55      	ldr	r3, [pc, #340]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005f82:	f023 0304 	bic.w	r3, r3, #4
 8005f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fd f96e 	bl	8003270 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f98:	f7fd f96a 	bl	8003270 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e0cb      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fae:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0ee      	beq.n	8005f98 <HAL_RCC_OscConfig+0x334>
 8005fba:	e014      	b.n	8005fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbc:	f7fd f958 	bl	8003270 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fd f954 	bl	8003270 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0b5      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fda:	4b3e      	ldr	r3, [pc, #248]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1ee      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d105      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fec:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	4a38      	ldr	r2, [pc, #224]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 80a1 	beq.w	8006144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006002:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b08      	cmp	r3, #8
 800600c:	d05c      	beq.n	80060c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d141      	bne.n	800609a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601c:	f7fd f928 	bl	8003270 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006024:	f7fd f924 	bl	8003270 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e087      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	4b27      	ldr	r3, [pc, #156]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	019b      	lsls	r3, r3, #6
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	3b01      	subs	r3, #1
 800605c:	041b      	lsls	r3, r3, #16
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	491b      	ldr	r1, [pc, #108]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 8006068:	4313      	orrs	r3, r2
 800606a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800606c:	4b1b      	ldr	r3, [pc, #108]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fd f8fd 	bl	8003270 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607a:	f7fd f8f9 	bl	8003270 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e05c      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x416>
 8006098:	e054      	b.n	8006144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_RCC_OscConfig+0x478>)
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a0:	f7fd f8e6 	bl	8003270 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fd f8e2 	bl	8003270 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e045      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x470>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x444>
 80060c6:	e03d      	b.n	8006144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d107      	bne.n	80060e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e038      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40007000 	.word	0x40007000
 80060dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060e0:	4b1b      	ldr	r3, [pc, #108]	; (8006150 <HAL_RCC_OscConfig+0x4ec>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d028      	beq.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d121      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d11a      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006110:	4013      	ands	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006118:	4293      	cmp	r3, r2
 800611a:	d111      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	3b01      	subs	r3, #1
 800612a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d107      	bne.n	8006140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023800 	.word	0x40023800

08006154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e0cc      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006168:	4b68      	ldr	r3, [pc, #416]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	429a      	cmp	r2, r3
 8006174:	d90c      	bls.n	8006190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006176:	4b65      	ldr	r3, [pc, #404]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800617e:	4b63      	ldr	r3, [pc, #396]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	429a      	cmp	r2, r3
 800618a:	d001      	beq.n	8006190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0b8      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d020      	beq.n	80061de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061a8:	4b59      	ldr	r3, [pc, #356]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	4a58      	ldr	r2, [pc, #352]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c0:	4b53      	ldr	r3, [pc, #332]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	4a52      	ldr	r2, [pc, #328]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061cc:	4b50      	ldr	r3, [pc, #320]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	494d      	ldr	r1, [pc, #308]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d044      	beq.n	8006274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d107      	bne.n	8006202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	4b47      	ldr	r3, [pc, #284]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d119      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e07f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d003      	beq.n	8006212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800620e:	2b03      	cmp	r3, #3
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e06f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006222:	4b3b      	ldr	r3, [pc, #236]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e067      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006232:	4b37      	ldr	r3, [pc, #220]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4934      	ldr	r1, [pc, #208]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	4313      	orrs	r3, r2
 8006242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006244:	f7fd f814 	bl	8003270 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fd f810 	bl	8003270 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e04f      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	4b2b      	ldr	r3, [pc, #172]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 020c 	and.w	r2, r3, #12
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	429a      	cmp	r2, r3
 8006272:	d1eb      	bne.n	800624c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006274:	4b25      	ldr	r3, [pc, #148]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d20c      	bcs.n	800629c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006282:	4b22      	ldr	r3, [pc, #136]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCC_ClockConfig+0x1b8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e032      	b.n	8006302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062a8:	4b19      	ldr	r3, [pc, #100]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	4916      	ldr	r1, [pc, #88]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	490e      	ldr	r1, [pc, #56]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062da:	f000 f821 	bl	8006320 <HAL_RCC_GetSysClockFreq>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	091b      	lsrs	r3, r3, #4
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	490a      	ldr	r1, [pc, #40]	; (8006314 <HAL_RCC_ClockConfig+0x1c0>)
 80062ec:	5ccb      	ldrb	r3, [r1, r3]
 80062ee:	fa22 f303 	lsr.w	r3, r2, r3
 80062f2:	4a09      	ldr	r2, [pc, #36]	; (8006318 <HAL_RCC_ClockConfig+0x1c4>)
 80062f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_RCC_ClockConfig+0x1c8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fc ff74 	bl	80031e8 <HAL_InitTick>

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023c00 	.word	0x40023c00
 8006310:	40023800 	.word	0x40023800
 8006314:	0800b95c 	.word	0x0800b95c
 8006318:	20000010 	.word	0x20000010
 800631c:	20000018 	.word	0x20000018

08006320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006324:	b090      	sub	sp, #64	; 0x40
 8006326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
 800632c:	2300      	movs	r3, #0
 800632e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006330:	2300      	movs	r3, #0
 8006332:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006338:	4b59      	ldr	r3, [pc, #356]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b08      	cmp	r3, #8
 8006342:	d00d      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x40>
 8006344:	2b08      	cmp	r3, #8
 8006346:	f200 80a1 	bhi.w	800648c <HAL_RCC_GetSysClockFreq+0x16c>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x34>
 800634e:	2b04      	cmp	r3, #4
 8006350:	d003      	beq.n	800635a <HAL_RCC_GetSysClockFreq+0x3a>
 8006352:	e09b      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006354:	4b53      	ldr	r3, [pc, #332]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006356:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006358:	e09b      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800635a:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800635e:	e098      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006360:	4b4f      	ldr	r3, [pc, #316]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006368:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636a:	4b4d      	ldr	r3, [pc, #308]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d028      	beq.n	80063c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006376:	4b4a      	ldr	r3, [pc, #296]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	099b      	lsrs	r3, r3, #6
 800637c:	2200      	movs	r2, #0
 800637e:	623b      	str	r3, [r7, #32]
 8006380:	627a      	str	r2, [r7, #36]	; 0x24
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006388:	2100      	movs	r1, #0
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800638c:	fb03 f201 	mul.w	r2, r3, r1
 8006390:	2300      	movs	r3, #0
 8006392:	fb00 f303 	mul.w	r3, r0, r3
 8006396:	4413      	add	r3, r2
 8006398:	4a43      	ldr	r2, [pc, #268]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800639a:	fba0 1202 	umull	r1, r2, r0, r2
 800639e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063a0:	460a      	mov	r2, r1
 80063a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80063a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a6:	4413      	add	r3, r2
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	2200      	movs	r2, #0
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	61fa      	str	r2, [r7, #28]
 80063b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063ba:	f7fa fc4d 	bl	8000c58 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4613      	mov	r3, r2
 80063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c6:	e053      	b.n	8006470 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c8:	4b35      	ldr	r3, [pc, #212]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	099b      	lsrs	r3, r3, #6
 80063ce:	2200      	movs	r2, #0
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	617a      	str	r2, [r7, #20]
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063da:	f04f 0b00 	mov.w	fp, #0
 80063de:	4652      	mov	r2, sl
 80063e0:	465b      	mov	r3, fp
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	0159      	lsls	r1, r3, #5
 80063ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063f0:	0150      	lsls	r0, r2, #5
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	ebb2 080a 	subs.w	r8, r2, sl
 80063fa:	eb63 090b 	sbc.w	r9, r3, fp
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800640a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800640e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006412:	ebb2 0408 	subs.w	r4, r2, r8
 8006416:	eb63 0509 	sbc.w	r5, r3, r9
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	00eb      	lsls	r3, r5, #3
 8006424:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006428:	00e2      	lsls	r2, r4, #3
 800642a:	4614      	mov	r4, r2
 800642c:	461d      	mov	r5, r3
 800642e:	eb14 030a 	adds.w	r3, r4, sl
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	eb45 030b 	adc.w	r3, r5, fp
 8006438:	607b      	str	r3, [r7, #4]
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006446:	4629      	mov	r1, r5
 8006448:	028b      	lsls	r3, r1, #10
 800644a:	4621      	mov	r1, r4
 800644c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006450:	4621      	mov	r1, r4
 8006452:	028a      	lsls	r2, r1, #10
 8006454:	4610      	mov	r0, r2
 8006456:	4619      	mov	r1, r3
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	2200      	movs	r2, #0
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	60fa      	str	r2, [r7, #12]
 8006460:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006464:	f7fa fbf8 	bl	8000c58 <__aeabi_uldivmod>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4613      	mov	r3, r2
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	3301      	adds	r3, #1
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800648a:	e002      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800648e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006494:	4618      	mov	r0, r3
 8006496:	3740      	adds	r7, #64	; 0x40
 8006498:	46bd      	mov	sp, r7
 800649a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800
 80064a4:	00f42400 	.word	0x00f42400
 80064a8:	017d7840 	.word	0x017d7840

080064ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064b0:	4b03      	ldr	r3, [pc, #12]	; (80064c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064b2:	681b      	ldr	r3, [r3, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	20000010 	.word	0x20000010

080064c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064c8:	f7ff fff0 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064cc:	4602      	mov	r2, r0
 80064ce:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	0a9b      	lsrs	r3, r3, #10
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	4903      	ldr	r1, [pc, #12]	; (80064e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064da:	5ccb      	ldrb	r3, [r1, r3]
 80064dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	40023800 	.word	0x40023800
 80064e8:	0800b96c 	.word	0x0800b96c

080064ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064f0:	f7ff ffdc 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 80064f4:	4602      	mov	r2, r0
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <HAL_RCC_GetPCLK2Freq+0x20>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	0b5b      	lsrs	r3, r3, #13
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	4903      	ldr	r1, [pc, #12]	; (8006510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006502:	5ccb      	ldrb	r3, [r1, r3]
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40023800 	.word	0x40023800
 8006510:	0800b96c 	.word	0x0800b96c

08006514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e041      	b.n	80065aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fc fac4 	bl	8002ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f000 fa88 	bl	8006a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e044      	b.n	8006656 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1e      	ldr	r2, [pc, #120]	; (8006664 <HAL_TIM_Base_Start_IT+0xb0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x6c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f6:	d013      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x6c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <HAL_TIM_Base_Start_IT+0xb4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x6c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a19      	ldr	r2, [pc, #100]	; (800666c <HAL_TIM_Base_Start_IT+0xb8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x6c>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <HAL_TIM_Base_Start_IT+0xbc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x6c>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a16      	ldr	r2, [pc, #88]	; (8006674 <HAL_TIM_Base_Start_IT+0xc0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d111      	bne.n	8006644 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b06      	cmp	r3, #6
 8006630:	d010      	beq.n	8006654 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0201 	orr.w	r2, r2, #1
 8006640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006642:	e007      	b.n	8006654 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0201 	orr.w	r2, r2, #1
 8006652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40010000 	.word	0x40010000
 8006668:	40000400 	.word	0x40000400
 800666c:	40000800 	.word	0x40000800
 8006670:	40000c00 	.word	0x40000c00
 8006674:	40014000 	.word	0x40014000

08006678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b02      	cmp	r3, #2
 800668c:	d122      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d11b      	bne.n	80066d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0202 	mvn.w	r2, #2
 80066a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f003 0303 	and.w	r3, r3, #3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f9b5 	bl	8006a2a <HAL_TIM_IC_CaptureCallback>
 80066c0:	e005      	b.n	80066ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9a7 	bl	8006a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f9b8 	bl	8006a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d122      	bne.n	8006728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d11b      	bne.n	8006728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0204 	mvn.w	r2, #4
 80066f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f98b 	bl	8006a2a <HAL_TIM_IC_CaptureCallback>
 8006714:	e005      	b.n	8006722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f97d 	bl	8006a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f98e 	bl	8006a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b08      	cmp	r3, #8
 8006734:	d122      	bne.n	800677c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b08      	cmp	r3, #8
 8006742:	d11b      	bne.n	800677c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f06f 0208 	mvn.w	r2, #8
 800674c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2204      	movs	r2, #4
 8006752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f961 	bl	8006a2a <HAL_TIM_IC_CaptureCallback>
 8006768:	e005      	b.n	8006776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f953 	bl	8006a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f964 	bl	8006a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	f003 0310 	and.w	r3, r3, #16
 8006786:	2b10      	cmp	r3, #16
 8006788:	d122      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b10      	cmp	r3, #16
 8006796:	d11b      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0210 	mvn.w	r2, #16
 80067a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2208      	movs	r2, #8
 80067a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f937 	bl	8006a2a <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f929 	bl	8006a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f93a 	bl	8006a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d10e      	bne.n	80067fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d107      	bne.n	80067fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0201 	mvn.w	r2, #1
 80067f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fb fba2 	bl	8001f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	d10e      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d107      	bne.n	8006828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fab2 	bl	8006d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b40      	cmp	r3, #64	; 0x40
 8006834:	d10e      	bne.n	8006854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b40      	cmp	r3, #64	; 0x40
 8006842:	d107      	bne.n	8006854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800684c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8ff 	bl	8006a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b20      	cmp	r3, #32
 8006860:	d10e      	bne.n	8006880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b20      	cmp	r3, #32
 800686e:	d107      	bne.n	8006880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0220 	mvn.w	r2, #32
 8006878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa7c 	bl	8006d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_TIM_ConfigClockSource+0x1c>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e0b4      	b.n	8006a0e <HAL_TIM_ConfigClockSource+0x186>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068dc:	d03e      	beq.n	800695c <HAL_TIM_ConfigClockSource+0xd4>
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e2:	f200 8087 	bhi.w	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	f000 8086 	beq.w	80069fa <HAL_TIM_ConfigClockSource+0x172>
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f2:	d87f      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 80068f4:	2b70      	cmp	r3, #112	; 0x70
 80068f6:	d01a      	beq.n	800692e <HAL_TIM_ConfigClockSource+0xa6>
 80068f8:	2b70      	cmp	r3, #112	; 0x70
 80068fa:	d87b      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 80068fc:	2b60      	cmp	r3, #96	; 0x60
 80068fe:	d050      	beq.n	80069a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006900:	2b60      	cmp	r3, #96	; 0x60
 8006902:	d877      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006904:	2b50      	cmp	r3, #80	; 0x50
 8006906:	d03c      	beq.n	8006982 <HAL_TIM_ConfigClockSource+0xfa>
 8006908:	2b50      	cmp	r3, #80	; 0x50
 800690a:	d873      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d058      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d86f      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b30      	cmp	r3, #48	; 0x30
 8006916:	d064      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006918:	2b30      	cmp	r3, #48	; 0x30
 800691a:	d86b      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d060      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d867      	bhi.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d05c      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006928:	2b10      	cmp	r3, #16
 800692a:	d05a      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x15a>
 800692c:	e062      	b.n	80069f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6899      	ldr	r1, [r3, #8]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f000 f98d 	bl	8006c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	609a      	str	r2, [r3, #8]
      break;
 800695a:	e04f      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6899      	ldr	r1, [r3, #8]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685a      	ldr	r2, [r3, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f000 f976 	bl	8006c5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800697e:	609a      	str	r2, [r3, #8]
      break;
 8006980:	e03c      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	6859      	ldr	r1, [r3, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	461a      	mov	r2, r3
 8006990:	f000 f8ea 	bl	8006b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2150      	movs	r1, #80	; 0x50
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f943 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80069a0:	e02c      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	6859      	ldr	r1, [r3, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f000 f909 	bl	8006bc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2160      	movs	r1, #96	; 0x60
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f933 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80069c0:	e01c      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 f8ca 	bl	8006b68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2140      	movs	r1, #64	; 0x40
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f923 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80069e0:	e00c      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4619      	mov	r1, r3
 80069ec:	4610      	mov	r0, r2
 80069ee:	f000 f91a 	bl	8006c26 <TIM_ITRx_SetConfig>
      break;
 80069f2:	e003      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
      break;
 80069f8:	e000      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a34      	ldr	r2, [pc, #208]	; (8006b4c <TIM_Base_SetConfig+0xe4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00f      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a86:	d00b      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a31      	ldr	r2, [pc, #196]	; (8006b50 <TIM_Base_SetConfig+0xe8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a30      	ldr	r2, [pc, #192]	; (8006b54 <TIM_Base_SetConfig+0xec>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_Base_SetConfig+0x38>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a2f      	ldr	r2, [pc, #188]	; (8006b58 <TIM_Base_SetConfig+0xf0>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d108      	bne.n	8006ab2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <TIM_Base_SetConfig+0xe4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01b      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac0:	d017      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a22      	ldr	r2, [pc, #136]	; (8006b50 <TIM_Base_SetConfig+0xe8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a21      	ldr	r2, [pc, #132]	; (8006b54 <TIM_Base_SetConfig+0xec>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d00f      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <TIM_Base_SetConfig+0xf0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <TIM_Base_SetConfig+0xf4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d007      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <TIM_Base_SetConfig+0xf8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_Base_SetConfig+0x8a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a1d      	ldr	r2, [pc, #116]	; (8006b64 <TIM_Base_SetConfig+0xfc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d108      	bne.n	8006b04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a08      	ldr	r2, [pc, #32]	; (8006b4c <TIM_Base_SetConfig+0xe4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d103      	bne.n	8006b38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	615a      	str	r2, [r3, #20]
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40000400 	.word	0x40000400
 8006b54:	40000800 	.word	0x40000800
 8006b58:	40000c00 	.word	0x40000c00
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40014400 	.word	0x40014400
 8006b64:	40014800 	.word	0x40014800

08006b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0201 	bic.w	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f023 030a 	bic.w	r3, r3, #10
 8006ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b087      	sub	sp, #28
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f023 0210 	bic.w	r2, r3, #16
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	031b      	lsls	r3, r3, #12
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c3e:	683a      	ldr	r2, [r7, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f043 0307 	orr.w	r3, r3, #7
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	609a      	str	r2, [r3, #8]
}
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	371c      	adds	r7, #28
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e050      	b.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1c      	ldr	r2, [pc, #112]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d00:	d013      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a16      	ldr	r2, [pc, #88]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a13      	ldr	r2, [pc, #76]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d10c      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e04a      	b.n	8006e48 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d111      	bne.n	8006de2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fdb6 	bl	8007938 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <HAL_UART_Init+0xb0>)
 8006dd8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2224      	movs	r2, #36	; 0x24
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006df8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 fa00 	bl	8008200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	08002dd9 	.word	0x08002dd9

08006e54 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	f043 0220 	orr.w	r2, r3, #32
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e08c      	b.n	8006f96 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_UART_RegisterCallback+0x36>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e085      	b.n	8006f96 <HAL_UART_RegisterCallback+0x142>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d151      	bne.n	8006f42 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	2b0c      	cmp	r3, #12
 8006ea2:	d845      	bhi.n	8006f30 <HAL_UART_RegisterCallback+0xdc>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <HAL_UART_RegisterCallback+0x58>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ee1 	.word	0x08006ee1
 8006eb0:	08006ee9 	.word	0x08006ee9
 8006eb4:	08006ef1 	.word	0x08006ef1
 8006eb8:	08006ef9 	.word	0x08006ef9
 8006ebc:	08006f01 	.word	0x08006f01
 8006ec0:	08006f09 	.word	0x08006f09
 8006ec4:	08006f11 	.word	0x08006f11
 8006ec8:	08006f19 	.word	0x08006f19
 8006ecc:	08006f31 	.word	0x08006f31
 8006ed0:	08006f31 	.word	0x08006f31
 8006ed4:	08006f31 	.word	0x08006f31
 8006ed8:	08006f21 	.word	0x08006f21
 8006edc:	08006f29 	.word	0x08006f29
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8006ee6:	e051      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006eee:	e04d      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006ef6:	e049      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006efe:	e045      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006f06:	e041      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006f0e:	e03d      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006f16:	e039      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006f1e:	e035      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006f26:	e031      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006f2e:	e02d      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
        break;
 8006f40:	e024      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d116      	bne.n	8006f7c <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	2b0b      	cmp	r3, #11
 8006f52:	d002      	beq.n	8006f5a <HAL_UART_RegisterCallback+0x106>
 8006f54:	2b0c      	cmp	r3, #12
 8006f56:	d004      	beq.n	8006f62 <HAL_UART_RegisterCallback+0x10e>
 8006f58:	e007      	b.n	8006f6a <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006f60:	e014      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006f68:	e010      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f043 0220 	orr.w	r2, r3, #32
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	75fb      	strb	r3, [r7, #23]
        break;
 8006f7a:	e007      	b.n	8006f8c <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	f043 0220 	orr.w	r2, r3, #32
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop

08006fa4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	f040 808c 	bne.w	80070de <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_UART_Receive+0x2e>
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e084      	b.n	80070e0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_UART_Receive+0x40>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e07d      	b.n	80070e0 <HAL_UART_Receive+0x13c>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2222      	movs	r2, #34	; 0x22
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007000:	f7fc f936 	bl	8003270 <HAL_GetTick>
 8007004:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	88fa      	ldrh	r2, [r7, #6]
 800700a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	88fa      	ldrh	r2, [r7, #6]
 8007010:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701a:	d108      	bne.n	800702e <HAL_UART_Receive+0x8a>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	e003      	b.n	8007036 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800703e:	e043      	b.n	80070c8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2200      	movs	r2, #0
 8007048:	2120      	movs	r1, #32
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fe06 	bl	8007c5c <UART_WaitOnFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e042      	b.n	80070e0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10c      	bne.n	800707a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706c:	b29a      	uxth	r2, r3
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	3302      	adds	r3, #2
 8007076:	61bb      	str	r3, [r7, #24]
 8007078:	e01f      	b.n	80070ba <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007082:	d007      	beq.n	8007094 <HAL_UART_Receive+0xf0>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <HAL_UART_Receive+0xfe>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d106      	bne.n	80070a2 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	b2da      	uxtb	r2, r3
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	e008      	b.n	80070b4 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	3301      	adds	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1b6      	bne.n	8007040 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	e000      	b.n	80070e0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80070de:	2302      	movs	r3, #2
  }
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08c      	sub	sp, #48	; 0x30
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d165      	bne.n	80071ce <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <HAL_UART_Transmit_DMA+0x26>
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e05e      	b.n	80071d0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_UART_Transmit_DMA+0x38>
 800711c:	2302      	movs	r3, #2
 800711e:	e057      	b.n	80071d0 <HAL_UART_Transmit_DMA+0xe8>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	88fa      	ldrh	r2, [r7, #6]
 8007132:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	88fa      	ldrh	r2, [r7, #6]
 8007138:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2221      	movs	r2, #33	; 0x21
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714c:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <HAL_UART_Transmit_DMA+0xf0>)
 800714e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <HAL_UART_Transmit_DMA+0xf4>)
 8007156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <HAL_UART_Transmit_DMA+0xf8>)
 800715e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	2200      	movs	r2, #0
 8007166:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007168:	f107 0308 	add.w	r3, r7, #8
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	6819      	ldr	r1, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3304      	adds	r3, #4
 800717c:	461a      	mov	r2, r3
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	f7fc faf6 	bl	8003770 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800718c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3314      	adds	r3, #20
 800719c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	617b      	str	r3, [r7, #20]
   return(result);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071b6:	627a      	str	r2, [r7, #36]	; 0x24
 80071b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	6a39      	ldr	r1, [r7, #32]
 80071bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e5      	bne.n	8007196 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	e000      	b.n	80071d0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80071ce:	2302      	movs	r3, #2
  }
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3730      	adds	r7, #48	; 0x30
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	080079a9 	.word	0x080079a9
 80071dc:	08007a45 	.word	0x08007a45
 80071e0:	08007bc7 	.word	0x08007bc7

080071e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	d11d      	bne.n	800723a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <HAL_UART_Receive_DMA+0x26>
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e016      	b.n	800723c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d101      	bne.n	800721c <HAL_UART_Receive_DMA+0x38>
 8007218:	2302      	movs	r3, #2
 800721a:	e00f      	b.n	800723c <HAL_UART_Receive_DMA+0x58>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	461a      	mov	r2, r3
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fd81 	bl	8007d38 <UART_Start_Receive_DMA>
 8007236:	4603      	mov	r3, r0
 8007238:	e000      	b.n	800723c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800723a:	2302      	movs	r3, #2
  }
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b090      	sub	sp, #64	; 0x40
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800724c:	2300      	movs	r3, #0
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	bf0c      	ite	eq
 800725e:	2301      	moveq	r3, #1
 8007260:	2300      	movne	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b21      	cmp	r3, #33	; 0x21
 8007270:	d128      	bne.n	80072c4 <HAL_UART_DMAStop+0x80>
 8007272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d025      	beq.n	80072c4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3314      	adds	r3, #20
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	623b      	str	r3, [r7, #32]
   return(result);
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800728e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3314      	adds	r3, #20
 8007296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007298:	633a      	str	r2, [r7, #48]	; 0x30
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800729e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e5      	bne.n	8007278 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d004      	beq.n	80072be <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fc fab1 	bl	8003820 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fdd8 	bl	8007e74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	bf0c      	ite	eq
 80072d2:	2301      	moveq	r3, #1
 80072d4:	2300      	movne	r3, #0
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b22      	cmp	r3, #34	; 0x22
 80072e4:	d128      	bne.n	8007338 <HAL_UART_DMAStop+0xf4>
 80072e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d025      	beq.n	8007338 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3314      	adds	r3, #20
 80072f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3314      	adds	r3, #20
 800730a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800730c:	61fa      	str	r2, [r7, #28]
 800730e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	69fa      	ldr	r2, [r7, #28]
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	617b      	str	r3, [r7, #20]
   return(result);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e5      	bne.n	80072ec <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	4618      	mov	r0, r3
 800732e:	f7fc fa77 	bl	8003820 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fdc6 	bl	8007ec4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3740      	adds	r7, #64	; 0x40
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b0ba      	sub	sp, #232	; 0xe8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800736a:	2300      	movs	r3, #0
 800736c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007370:	2300      	movs	r3, #0
 8007372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10f      	bne.n	80073aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d009      	beq.n	80073aa <HAL_UART_IRQHandler+0x66>
 8007396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fe6f 	bl	8008086 <UART_Receive_IT>
      return;
 80073a8:	e25b      	b.n	8007862 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80073aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 80e1 	beq.w	8007576 <HAL_UART_IRQHandler+0x232>
 80073b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 80d4 	beq.w	8007576 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <HAL_UART_IRQHandler+0xae>
 80073da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f043 0201 	orr.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_UART_IRQHandler+0xd2>
 80073fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f043 0202 	orr.w	r2, r3, #2
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00b      	beq.n	800743a <HAL_UART_IRQHandler+0xf6>
 8007422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f043 0204 	orr.w	r2, r3, #4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800743a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d011      	beq.n	800746a <HAL_UART_IRQHandler+0x126>
 8007446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d105      	bne.n	800745e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	f043 0208 	orr.w	r2, r3, #8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 81f2 	beq.w	8007858 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_UART_IRQHandler+0x14e>
 8007480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fdfa 	bl	8008086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	bf0c      	ite	eq
 80074a0:	2301      	moveq	r3, #1
 80074a2:	2300      	movne	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d103      	bne.n	80074be <HAL_UART_IRQHandler+0x17a>
 80074b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d051      	beq.n	8007562 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fd00 	bl	8007ec4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d142      	bne.n	8007558 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3314      	adds	r3, #20
 80074d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3314      	adds	r3, #20
 80074fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800750a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1d9      	bne.n	80074d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	d013      	beq.n	800754e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	4a7f      	ldr	r2, [pc, #508]	; (8007728 <HAL_UART_IRQHandler+0x3e4>)
 800752c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	4618      	mov	r0, r3
 8007534:	f7fc f9e4 	bl	8003900 <HAL_DMA_Abort_IT>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d019      	beq.n	8007572 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800754c:	e011      	b.n	8007572 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007556:	e00c      	b.n	8007572 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007560:	e007      	b.n	8007572 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007570:	e172      	b.n	8007858 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007572:	bf00      	nop
    return;
 8007574:	e170      	b.n	8007858 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	2b01      	cmp	r3, #1
 800757c:	f040 814c 	bne.w	8007818 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 8145 	beq.w	8007818 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800758e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 813e 	beq.w	8007818 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800759c:	2300      	movs	r3, #0
 800759e:	60bb      	str	r3, [r7, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60bb      	str	r3, [r7, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	60bb      	str	r3, [r7, #8]
 80075b0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	f040 80b5 	bne.w	800772c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 8142 	beq.w	800785c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075e0:	429a      	cmp	r2, r3
 80075e2:	f080 813b 	bcs.w	800785c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ec:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f8:	f000 8088 	beq.w	800770c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	330c      	adds	r3, #12
 8007602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800761a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007628:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800762c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007634:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1d9      	bne.n	80075fc <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3314      	adds	r3, #20
 800764e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3314      	adds	r3, #20
 8007668:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800766c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007670:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007674:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800767e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e1      	bne.n	8007648 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800769a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3314      	adds	r3, #20
 80076a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e3      	bne.n	8007684 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076dc:	f023 0310 	bic.w	r3, r3, #16
 80076e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80076f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e3      	bne.n	80076ca <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	4618      	mov	r0, r3
 8007708:	f7fc f88a 	bl	8003820 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007718:	b292      	uxth	r2, r2
 800771a:	1a8a      	subs	r2, r1, r2
 800771c:	b292      	uxth	r2, r2
 800771e:	4611      	mov	r1, r2
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007724:	e09a      	b.n	800785c <HAL_UART_IRQHandler+0x518>
 8007726:	bf00      	nop
 8007728:	08007f8b 	.word	0x08007f8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007734:	b29b      	uxth	r3, r3
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	f000 808c 	beq.w	8007860 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8087 	beq.w	8007860 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	330c      	adds	r3, #12
 8007772:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007776:	647a      	str	r2, [r7, #68]	; 0x44
 8007778:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800777c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e3      	bne.n	8007752 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3314      	adds	r3, #20
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	623b      	str	r3, [r7, #32]
   return(result);
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f023 0301 	bic.w	r3, r3, #1
 80077a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3314      	adds	r3, #20
 80077aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077ae:	633a      	str	r2, [r7, #48]	; 0x30
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e3      	bne.n	800778a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	60fb      	str	r3, [r7, #12]
   return(result);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0310 	bic.w	r3, r3, #16
 80077e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077f4:	61fa      	str	r2, [r7, #28]
 80077f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f8:	69b9      	ldr	r1, [r7, #24]
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	e841 2300 	strex	r3, r2, [r1]
 8007800:	617b      	str	r3, [r7, #20]
   return(result);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1e3      	bne.n	80077d0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800780c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8007810:	4611      	mov	r1, r2
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007816:	e023      	b.n	8007860 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <HAL_UART_IRQHandler+0x4f4>
 8007824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fbbf 	bl	8007fb4 <UART_Transmit_IT>
    return;
 8007836:	e014      	b.n	8007862 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00e      	beq.n	8007862 <HAL_UART_IRQHandler+0x51e>
 8007844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fbff 	bl	8008054 <UART_EndTransmit_IT>
    return;
 8007856:	e004      	b.n	8007862 <HAL_UART_IRQHandler+0x51e>
    return;
 8007858:	bf00      	nop
 800785a:	e002      	b.n	8007862 <HAL_UART_IRQHandler+0x51e>
      return;
 800785c:	bf00      	nop
 800785e:	e000      	b.n	8007862 <HAL_UART_IRQHandler+0x51e>
      return;
 8007860:	bf00      	nop
  }
}
 8007862:	37e8      	adds	r7, #232	; 0xe8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a10      	ldr	r2, [pc, #64]	; (8007984 <UART_InitCallbacksToDefault+0x4c>)
 8007944:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a0f      	ldr	r2, [pc, #60]	; (8007988 <UART_InitCallbacksToDefault+0x50>)
 800794a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a0f      	ldr	r2, [pc, #60]	; (800798c <UART_InitCallbacksToDefault+0x54>)
 8007950:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a0e      	ldr	r2, [pc, #56]	; (8007990 <UART_InitCallbacksToDefault+0x58>)
 8007956:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a0e      	ldr	r2, [pc, #56]	; (8007994 <UART_InitCallbacksToDefault+0x5c>)
 800795c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <UART_InitCallbacksToDefault+0x60>)
 8007962:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a0d      	ldr	r2, [pc, #52]	; (800799c <UART_InitCallbacksToDefault+0x64>)
 8007968:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a0c      	ldr	r2, [pc, #48]	; (80079a0 <UART_InitCallbacksToDefault+0x68>)
 800796e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a0c      	ldr	r2, [pc, #48]	; (80079a4 <UART_InitCallbacksToDefault+0x6c>)
 8007974:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	0800787d 	.word	0x0800787d
 8007988:	08007869 	.word	0x08007869
 800798c:	080078a5 	.word	0x080078a5
 8007990:	08007891 	.word	0x08007891
 8007994:	080078b9 	.word	0x080078b9
 8007998:	080078cd 	.word	0x080078cd
 800799c:	080078e1 	.word	0x080078e1
 80079a0:	080078f5 	.word	0x080078f5
 80079a4:	08007909 	.word	0x08007909

080079a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b090      	sub	sp, #64	; 0x40
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d137      	bne.n	8007a34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80079c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c6:	2200      	movs	r2, #0
 80079c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3314      	adds	r3, #20
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	623b      	str	r3, [r7, #32]
   return(result);
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80079e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3314      	adds	r3, #20
 80079e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079ea:	633a      	str	r2, [r7, #48]	; 0x30
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e5      	bne.n	80079ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	330c      	adds	r3, #12
 8007a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a1e:	61fa      	str	r2, [r7, #28]
 8007a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	69b9      	ldr	r1, [r7, #24]
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a32:	e003      	b.n	8007a3c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8007a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a3a:	4798      	blx	r3
}
 8007a3c:	bf00      	nop
 8007a3e:	3740      	adds	r7, #64	; 0x40
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b09c      	sub	sp, #112	; 0x70
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d172      	bne.n	8007b64 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a80:	2200      	movs	r2, #0
 8007a82:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	330c      	adds	r3, #12
 8007a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8e:	e853 3f00 	ldrex	r3, [r3]
 8007a92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	330c      	adds	r3, #12
 8007aa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007aa4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007aa6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e5      	bne.n	8007a84 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3314      	adds	r3, #20
 8007abe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	e853 3f00 	ldrex	r3, [r3]
 8007ac6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	667b      	str	r3, [r7, #100]	; 0x64
 8007ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ad8:	647a      	str	r2, [r7, #68]	; 0x44
 8007ada:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007adc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ade:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ae0:	e841 2300 	strex	r3, r2, [r1]
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1e5      	bne.n	8007ab8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3314      	adds	r3, #20
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	e853 3f00 	ldrex	r3, [r3]
 8007afa:	623b      	str	r3, [r7, #32]
   return(result);
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b02:	663b      	str	r3, [r7, #96]	; 0x60
 8007b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3314      	adds	r3, #20
 8007b0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b0c:	633a      	str	r2, [r7, #48]	; 0x30
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b14:	e841 2300 	strex	r3, r2, [r1]
 8007b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1e5      	bne.n	8007aec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d119      	bne.n	8007b64 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0310 	bic.w	r3, r3, #16
 8007b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b50:	61fa      	str	r2, [r7, #28]
 8007b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	69b9      	ldr	r1, [r7, #24]
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e5      	bne.n	8007b30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d107      	bne.n	8007b7c <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8007b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b72:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007b74:	4611      	mov	r1, r2
 8007b76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b78:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b7a:	e003      	b.n	8007b84 <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 8007b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b82:	4798      	blx	r3
}
 8007b84:	bf00      	nop
 8007b86:	3770      	adds	r7, #112	; 0x70
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d109      	bne.n	8007bb6 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8007baa:	0852      	lsrs	r2, r2, #1
 8007bac:	b292      	uxth	r2, r2
 8007bae:	4611      	mov	r1, r2
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bb4:	e003      	b.n	8007bbe <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	4798      	blx	r3
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	bf0c      	ite	eq
 8007be6:	2301      	moveq	r3, #1
 8007be8:	2300      	movne	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b21      	cmp	r3, #33	; 0x21
 8007bf8:	d108      	bne.n	8007c0c <UART_DMAError+0x46>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2200      	movs	r2, #0
 8007c04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c06:	68b8      	ldr	r0, [r7, #8]
 8007c08:	f000 f934 	bl	8007e74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c16:	2b40      	cmp	r3, #64	; 0x40
 8007c18:	bf0c      	ite	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	2300      	movne	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b22      	cmp	r3, #34	; 0x22
 8007c2c:	d108      	bne.n	8007c40 <UART_DMAError+0x7a>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007c3a:	68b8      	ldr	r0, [r7, #8]
 8007c3c:	f000 f942 	bl	8007ec4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	f043 0210 	orr.w	r2, r3, #16
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	68b8      	ldr	r0, [r7, #8]
 8007c52:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b090      	sub	sp, #64	; 0x40
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c6c:	e050      	b.n	8007d10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c74:	d04c      	beq.n	8007d10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8007c7c:	f7fb faf8 	bl	8003270 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d241      	bcs.n	8007d10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	330c      	adds	r3, #12
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cac:	637a      	str	r2, [r7, #52]	; 0x34
 8007cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3314      	adds	r3, #20
 8007cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ce0:	623a      	str	r2, [r7, #32]
 8007ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69f9      	ldr	r1, [r7, #28]
 8007ce6:	6a3a      	ldr	r2, [r7, #32]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e5      	bne.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e00f      	b.n	8007d30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	bf0c      	ite	eq
 8007d20:	2301      	moveq	r3, #1
 8007d22:	2300      	movne	r3, #0
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	461a      	mov	r2, r3
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d09f      	beq.n	8007c6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3740      	adds	r7, #64	; 0x40
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b098      	sub	sp, #96	; 0x60
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2222      	movs	r2, #34	; 0x22
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	4a40      	ldr	r2, [pc, #256]	; (8007e68 <UART_Start_Receive_DMA+0x130>)
 8007d66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	4a3f      	ldr	r2, [pc, #252]	; (8007e6c <UART_Start_Receive_DMA+0x134>)
 8007d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	4a3e      	ldr	r2, [pc, #248]	; (8007e70 <UART_Start_Receive_DMA+0x138>)
 8007d76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007d80:	f107 0308 	add.w	r3, r7, #8
 8007d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4619      	mov	r1, r3
 8007d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	f7fb fcea 	bl	8003770 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d019      	beq.n	8007df6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	330c      	adds	r3, #12
 8007de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007de2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007de4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e5      	bne.n	8007dc2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3314      	adds	r3, #20
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	f043 0301 	orr.w	r3, r3, #1
 8007e0c:	657b      	str	r3, [r7, #84]	; 0x54
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3314      	adds	r3, #20
 8007e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e16:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3314      	adds	r3, #20
 8007e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	617b      	str	r3, [r7, #20]
   return(result);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e40:	653b      	str	r3, [r7, #80]	; 0x50
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3314      	adds	r3, #20
 8007e48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e4a:	627a      	str	r2, [r7, #36]	; 0x24
 8007e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6a39      	ldr	r1, [r7, #32]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e5      	bne.n	8007e2a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3760      	adds	r7, #96	; 0x60
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	08007a63 	.word	0x08007a63
 8007e6c:	08007b8d 	.word	0x08007b8d
 8007e70:	08007bc7 	.word	0x08007bc7

08007e74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b089      	sub	sp, #36	; 0x24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	330c      	adds	r3, #12
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	61ba      	str	r2, [r7, #24]
 8007e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6979      	ldr	r1, [r7, #20]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e5      	bne.n	8007e7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007eb8:	bf00      	nop
 8007eba:	3724      	adds	r7, #36	; 0x24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b095      	sub	sp, #84	; 0x54
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	330c      	adds	r3, #12
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007eec:	643a      	str	r2, [r7, #64]	; 0x40
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ef4:	e841 2300 	strex	r3, r2, [r1]
 8007ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1e5      	bne.n	8007ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3314      	adds	r3, #20
 8007f06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	e853 3f00 	ldrex	r3, [r3]
 8007f0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f023 0301 	bic.w	r3, r3, #1
 8007f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3314      	adds	r3, #20
 8007f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e5      	bne.n	8007f00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d119      	bne.n	8007f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f023 0310 	bic.w	r3, r3, #16
 8007f52:	647b      	str	r3, [r7, #68]	; 0x44
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f5c:	61ba      	str	r2, [r7, #24]
 8007f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6979      	ldr	r1, [r7, #20]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	613b      	str	r3, [r7, #16]
   return(result);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e5      	bne.n	8007f3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007f7e:	bf00      	nop
 8007f80:	3754      	adds	r7, #84	; 0x54
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b21      	cmp	r3, #33	; 0x21
 8007fc6:	d13e      	bne.n	8008046 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd0:	d114      	bne.n	8007ffc <UART_Transmit_IT+0x48>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d110      	bne.n	8007ffc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	1c9a      	adds	r2, r3, #2
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	621a      	str	r2, [r3, #32]
 8007ffa:	e008      	b.n	800800e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	1c59      	adds	r1, r3, #1
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6211      	str	r1, [r2, #32]
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	b29b      	uxth	r3, r3
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	4619      	mov	r1, r3
 800801c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10f      	bne.n	8008042 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008030:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008040:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	e000      	b.n	8008048 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008046:	2302      	movs	r3, #2
  }
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b08c      	sub	sp, #48	; 0x30
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b22      	cmp	r3, #34	; 0x22
 8008098:	f040 80ad 	bne.w	80081f6 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a4:	d117      	bne.n	80080d6 <UART_Receive_IT+0x50>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d113      	bne.n	80080d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	1c9a      	adds	r2, r3, #2
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	629a      	str	r2, [r3, #40]	; 0x28
 80080d4:	e026      	b.n	8008124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e8:	d007      	beq.n	80080fa <UART_Receive_IT+0x74>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10a      	bne.n	8008108 <UART_Receive_IT+0x82>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d106      	bne.n	8008108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	e008      	b.n	800811a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008114:	b2da      	uxtb	r2, r3
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b29b      	uxth	r3, r3
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	4619      	mov	r1, r3
 8008132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008134:	2b00      	cmp	r3, #0
 8008136:	d15c      	bne.n	80081f2 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f022 0220 	bic.w	r2, r2, #32
 8008146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695a      	ldr	r2, [r3, #20]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0201 	bic.w	r2, r2, #1
 8008166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	2b01      	cmp	r3, #1
 8008176:	d136      	bne.n	80081e6 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	613b      	str	r3, [r7, #16]
   return(result);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	f023 0310 	bic.w	r3, r3, #16
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800819e:	623a      	str	r2, [r7, #32]
 80081a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	69f9      	ldr	r1, [r7, #28]
 80081a4:	6a3a      	ldr	r2, [r7, #32]
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e5      	bne.n	800817e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b10      	cmp	r3, #16
 80081be:	d10a      	bne.n	80081d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80081de:	4611      	mov	r1, r2
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
 80081e4:	e003      	b.n	80081ee <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e002      	b.n	80081f8 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e000      	b.n	80081f8 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 80081f6:	2302      	movs	r3, #2
  }
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3730      	adds	r7, #48	; 0x30
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008204:	b0c0      	sub	sp, #256	; 0x100
 8008206:	af00      	add	r7, sp, #0
 8008208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800821c:	68d9      	ldr	r1, [r3, #12]
 800821e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	ea40 0301 	orr.w	r3, r0, r1
 8008228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800822a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	431a      	orrs	r2, r3
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	431a      	orrs	r2, r3
 8008240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	4313      	orrs	r3, r2
 8008248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008258:	f021 010c 	bic.w	r1, r1, #12
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008266:	430b      	orrs	r3, r1
 8008268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800826a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800827a:	6999      	ldr	r1, [r3, #24]
 800827c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	ea40 0301 	orr.w	r3, r0, r1
 8008286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	4b8f      	ldr	r3, [pc, #572]	; (80084cc <UART_SetConfig+0x2cc>)
 8008290:	429a      	cmp	r2, r3
 8008292:	d005      	beq.n	80082a0 <UART_SetConfig+0xa0>
 8008294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b8d      	ldr	r3, [pc, #564]	; (80084d0 <UART_SetConfig+0x2d0>)
 800829c:	429a      	cmp	r2, r3
 800829e:	d104      	bne.n	80082aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a0:	f7fe f924 	bl	80064ec <HAL_RCC_GetPCLK2Freq>
 80082a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082a8:	e003      	b.n	80082b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082aa:	f7fe f90b 	bl	80064c4 <HAL_RCC_GetPCLK1Freq>
 80082ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082bc:	f040 810c 	bne.w	80084d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082d2:	4622      	mov	r2, r4
 80082d4:	462b      	mov	r3, r5
 80082d6:	1891      	adds	r1, r2, r2
 80082d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80082da:	415b      	adcs	r3, r3
 80082dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80082e2:	4621      	mov	r1, r4
 80082e4:	eb12 0801 	adds.w	r8, r2, r1
 80082e8:	4629      	mov	r1, r5
 80082ea:	eb43 0901 	adc.w	r9, r3, r1
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008302:	4690      	mov	r8, r2
 8008304:	4699      	mov	r9, r3
 8008306:	4623      	mov	r3, r4
 8008308:	eb18 0303 	adds.w	r3, r8, r3
 800830c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008310:	462b      	mov	r3, r5
 8008312:	eb49 0303 	adc.w	r3, r9, r3
 8008316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800831a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800832a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800832e:	460b      	mov	r3, r1
 8008330:	18db      	adds	r3, r3, r3
 8008332:	653b      	str	r3, [r7, #80]	; 0x50
 8008334:	4613      	mov	r3, r2
 8008336:	eb42 0303 	adc.w	r3, r2, r3
 800833a:	657b      	str	r3, [r7, #84]	; 0x54
 800833c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008344:	f7f8 fc88 	bl	8000c58 <__aeabi_uldivmod>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4b61      	ldr	r3, [pc, #388]	; (80084d4 <UART_SetConfig+0x2d4>)
 800834e:	fba3 2302 	umull	r2, r3, r3, r2
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	011c      	lsls	r4, r3, #4
 8008356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800835a:	2200      	movs	r2, #0
 800835c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008368:	4642      	mov	r2, r8
 800836a:	464b      	mov	r3, r9
 800836c:	1891      	adds	r1, r2, r2
 800836e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008370:	415b      	adcs	r3, r3
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008378:	4641      	mov	r1, r8
 800837a:	eb12 0a01 	adds.w	sl, r2, r1
 800837e:	4649      	mov	r1, r9
 8008380:	eb43 0b01 	adc.w	fp, r3, r1
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008398:	4692      	mov	sl, r2
 800839a:	469b      	mov	fp, r3
 800839c:	4643      	mov	r3, r8
 800839e:	eb1a 0303 	adds.w	r3, sl, r3
 80083a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083a6:	464b      	mov	r3, r9
 80083a8:	eb4b 0303 	adc.w	r3, fp, r3
 80083ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083c4:	460b      	mov	r3, r1
 80083c6:	18db      	adds	r3, r3, r3
 80083c8:	643b      	str	r3, [r7, #64]	; 0x40
 80083ca:	4613      	mov	r3, r2
 80083cc:	eb42 0303 	adc.w	r3, r2, r3
 80083d0:	647b      	str	r3, [r7, #68]	; 0x44
 80083d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083da:	f7f8 fc3d 	bl	8000c58 <__aeabi_uldivmod>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4611      	mov	r1, r2
 80083e4:	4b3b      	ldr	r3, [pc, #236]	; (80084d4 <UART_SetConfig+0x2d4>)
 80083e6:	fba3 2301 	umull	r2, r3, r3, r1
 80083ea:	095b      	lsrs	r3, r3, #5
 80083ec:	2264      	movs	r2, #100	; 0x64
 80083ee:	fb02 f303 	mul.w	r3, r2, r3
 80083f2:	1acb      	subs	r3, r1, r3
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80083fa:	4b36      	ldr	r3, [pc, #216]	; (80084d4 <UART_SetConfig+0x2d4>)
 80083fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008408:	441c      	add	r4, r3
 800840a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800840e:	2200      	movs	r2, #0
 8008410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800841c:	4642      	mov	r2, r8
 800841e:	464b      	mov	r3, r9
 8008420:	1891      	adds	r1, r2, r2
 8008422:	63b9      	str	r1, [r7, #56]	; 0x38
 8008424:	415b      	adcs	r3, r3
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800842c:	4641      	mov	r1, r8
 800842e:	1851      	adds	r1, r2, r1
 8008430:	6339      	str	r1, [r7, #48]	; 0x30
 8008432:	4649      	mov	r1, r9
 8008434:	414b      	adcs	r3, r1
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008444:	4659      	mov	r1, fp
 8008446:	00cb      	lsls	r3, r1, #3
 8008448:	4651      	mov	r1, sl
 800844a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800844e:	4651      	mov	r1, sl
 8008450:	00ca      	lsls	r2, r1, #3
 8008452:	4610      	mov	r0, r2
 8008454:	4619      	mov	r1, r3
 8008456:	4603      	mov	r3, r0
 8008458:	4642      	mov	r2, r8
 800845a:	189b      	adds	r3, r3, r2
 800845c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008460:	464b      	mov	r3, r9
 8008462:	460a      	mov	r2, r1
 8008464:	eb42 0303 	adc.w	r3, r2, r3
 8008468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800846c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800847c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008480:	460b      	mov	r3, r1
 8008482:	18db      	adds	r3, r3, r3
 8008484:	62bb      	str	r3, [r7, #40]	; 0x28
 8008486:	4613      	mov	r3, r2
 8008488:	eb42 0303 	adc.w	r3, r2, r3
 800848c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800848e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008496:	f7f8 fbdf 	bl	8000c58 <__aeabi_uldivmod>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <UART_SetConfig+0x2d4>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	2164      	movs	r1, #100	; 0x64
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	3332      	adds	r3, #50	; 0x32
 80084b2:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <UART_SetConfig+0x2d4>)
 80084b4:	fba2 2303 	umull	r2, r3, r2, r3
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	f003 0207 	and.w	r2, r3, #7
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4422      	add	r2, r4
 80084c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084c8:	e105      	b.n	80086d6 <UART_SetConfig+0x4d6>
 80084ca:	bf00      	nop
 80084cc:	40011000 	.word	0x40011000
 80084d0:	40011400 	.word	0x40011400
 80084d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80084e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80084e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80084ea:	4642      	mov	r2, r8
 80084ec:	464b      	mov	r3, r9
 80084ee:	1891      	adds	r1, r2, r2
 80084f0:	6239      	str	r1, [r7, #32]
 80084f2:	415b      	adcs	r3, r3
 80084f4:	627b      	str	r3, [r7, #36]	; 0x24
 80084f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084fa:	4641      	mov	r1, r8
 80084fc:	1854      	adds	r4, r2, r1
 80084fe:	4649      	mov	r1, r9
 8008500:	eb43 0501 	adc.w	r5, r3, r1
 8008504:	f04f 0200 	mov.w	r2, #0
 8008508:	f04f 0300 	mov.w	r3, #0
 800850c:	00eb      	lsls	r3, r5, #3
 800850e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008512:	00e2      	lsls	r2, r4, #3
 8008514:	4614      	mov	r4, r2
 8008516:	461d      	mov	r5, r3
 8008518:	4643      	mov	r3, r8
 800851a:	18e3      	adds	r3, r4, r3
 800851c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008520:	464b      	mov	r3, r9
 8008522:	eb45 0303 	adc.w	r3, r5, r3
 8008526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008546:	4629      	mov	r1, r5
 8008548:	008b      	lsls	r3, r1, #2
 800854a:	4621      	mov	r1, r4
 800854c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008550:	4621      	mov	r1, r4
 8008552:	008a      	lsls	r2, r1, #2
 8008554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008558:	f7f8 fb7e 	bl	8000c58 <__aeabi_uldivmod>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4b60      	ldr	r3, [pc, #384]	; (80086e4 <UART_SetConfig+0x4e4>)
 8008562:	fba3 2302 	umull	r2, r3, r3, r2
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	011c      	lsls	r4, r3, #4
 800856a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800856e:	2200      	movs	r2, #0
 8008570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	1891      	adds	r1, r2, r2
 8008582:	61b9      	str	r1, [r7, #24]
 8008584:	415b      	adcs	r3, r3
 8008586:	61fb      	str	r3, [r7, #28]
 8008588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800858c:	4641      	mov	r1, r8
 800858e:	1851      	adds	r1, r2, r1
 8008590:	6139      	str	r1, [r7, #16]
 8008592:	4649      	mov	r1, r9
 8008594:	414b      	adcs	r3, r1
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	f04f 0200 	mov.w	r2, #0
 800859c:	f04f 0300 	mov.w	r3, #0
 80085a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085a4:	4659      	mov	r1, fp
 80085a6:	00cb      	lsls	r3, r1, #3
 80085a8:	4651      	mov	r1, sl
 80085aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ae:	4651      	mov	r1, sl
 80085b0:	00ca      	lsls	r2, r1, #3
 80085b2:	4610      	mov	r0, r2
 80085b4:	4619      	mov	r1, r3
 80085b6:	4603      	mov	r3, r0
 80085b8:	4642      	mov	r2, r8
 80085ba:	189b      	adds	r3, r3, r2
 80085bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085c0:	464b      	mov	r3, r9
 80085c2:	460a      	mov	r2, r1
 80085c4:	eb42 0303 	adc.w	r3, r2, r3
 80085c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80085d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085d8:	f04f 0200 	mov.w	r2, #0
 80085dc:	f04f 0300 	mov.w	r3, #0
 80085e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80085e4:	4649      	mov	r1, r9
 80085e6:	008b      	lsls	r3, r1, #2
 80085e8:	4641      	mov	r1, r8
 80085ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ee:	4641      	mov	r1, r8
 80085f0:	008a      	lsls	r2, r1, #2
 80085f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80085f6:	f7f8 fb2f 	bl	8000c58 <__aeabi_uldivmod>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4b39      	ldr	r3, [pc, #228]	; (80086e4 <UART_SetConfig+0x4e4>)
 8008600:	fba3 1302 	umull	r1, r3, r3, r2
 8008604:	095b      	lsrs	r3, r3, #5
 8008606:	2164      	movs	r1, #100	; 0x64
 8008608:	fb01 f303 	mul.w	r3, r1, r3
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	3332      	adds	r3, #50	; 0x32
 8008612:	4a34      	ldr	r2, [pc, #208]	; (80086e4 <UART_SetConfig+0x4e4>)
 8008614:	fba2 2303 	umull	r2, r3, r2, r3
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800861e:	441c      	add	r4, r3
 8008620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008624:	2200      	movs	r2, #0
 8008626:	673b      	str	r3, [r7, #112]	; 0x70
 8008628:	677a      	str	r2, [r7, #116]	; 0x74
 800862a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800862e:	4642      	mov	r2, r8
 8008630:	464b      	mov	r3, r9
 8008632:	1891      	adds	r1, r2, r2
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	415b      	adcs	r3, r3
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800863e:	4641      	mov	r1, r8
 8008640:	1851      	adds	r1, r2, r1
 8008642:	6039      	str	r1, [r7, #0]
 8008644:	4649      	mov	r1, r9
 8008646:	414b      	adcs	r3, r1
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008656:	4659      	mov	r1, fp
 8008658:	00cb      	lsls	r3, r1, #3
 800865a:	4651      	mov	r1, sl
 800865c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008660:	4651      	mov	r1, sl
 8008662:	00ca      	lsls	r2, r1, #3
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	4603      	mov	r3, r0
 800866a:	4642      	mov	r2, r8
 800866c:	189b      	adds	r3, r3, r2
 800866e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008670:	464b      	mov	r3, r9
 8008672:	460a      	mov	r2, r1
 8008674:	eb42 0303 	adc.w	r3, r2, r3
 8008678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800867a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	663b      	str	r3, [r7, #96]	; 0x60
 8008684:	667a      	str	r2, [r7, #100]	; 0x64
 8008686:	f04f 0200 	mov.w	r2, #0
 800868a:	f04f 0300 	mov.w	r3, #0
 800868e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008692:	4649      	mov	r1, r9
 8008694:	008b      	lsls	r3, r1, #2
 8008696:	4641      	mov	r1, r8
 8008698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800869c:	4641      	mov	r1, r8
 800869e:	008a      	lsls	r2, r1, #2
 80086a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086a4:	f7f8 fad8 	bl	8000c58 <__aeabi_uldivmod>
 80086a8:	4602      	mov	r2, r0
 80086aa:	460b      	mov	r3, r1
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <UART_SetConfig+0x4e4>)
 80086ae:	fba3 1302 	umull	r1, r3, r3, r2
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	2164      	movs	r1, #100	; 0x64
 80086b6:	fb01 f303 	mul.w	r3, r1, r3
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	3332      	adds	r3, #50	; 0x32
 80086c0:	4a08      	ldr	r2, [pc, #32]	; (80086e4 <UART_SetConfig+0x4e4>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	095b      	lsrs	r3, r3, #5
 80086c8:	f003 020f 	and.w	r2, r3, #15
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4422      	add	r2, r4
 80086d4:	609a      	str	r2, [r3, #8]
}
 80086d6:	bf00      	nop
 80086d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086dc:	46bd      	mov	sp, r7
 80086de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086e2:	bf00      	nop
 80086e4:	51eb851f 	.word	0x51eb851f

080086e8 <__errno>:
 80086e8:	4b01      	ldr	r3, [pc, #4]	; (80086f0 <__errno+0x8>)
 80086ea:	6818      	ldr	r0, [r3, #0]
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20000020 	.word	0x20000020

080086f4 <__libc_init_array>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4d0d      	ldr	r5, [pc, #52]	; (800872c <__libc_init_array+0x38>)
 80086f8:	4c0d      	ldr	r4, [pc, #52]	; (8008730 <__libc_init_array+0x3c>)
 80086fa:	1b64      	subs	r4, r4, r5
 80086fc:	10a4      	asrs	r4, r4, #2
 80086fe:	2600      	movs	r6, #0
 8008700:	42a6      	cmp	r6, r4
 8008702:	d109      	bne.n	8008718 <__libc_init_array+0x24>
 8008704:	4d0b      	ldr	r5, [pc, #44]	; (8008734 <__libc_init_array+0x40>)
 8008706:	4c0c      	ldr	r4, [pc, #48]	; (8008738 <__libc_init_array+0x44>)
 8008708:	f002 ff90 	bl	800b62c <_init>
 800870c:	1b64      	subs	r4, r4, r5
 800870e:	10a4      	asrs	r4, r4, #2
 8008710:	2600      	movs	r6, #0
 8008712:	42a6      	cmp	r6, r4
 8008714:	d105      	bne.n	8008722 <__libc_init_array+0x2e>
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	f855 3b04 	ldr.w	r3, [r5], #4
 800871c:	4798      	blx	r3
 800871e:	3601      	adds	r6, #1
 8008720:	e7ee      	b.n	8008700 <__libc_init_array+0xc>
 8008722:	f855 3b04 	ldr.w	r3, [r5], #4
 8008726:	4798      	blx	r3
 8008728:	3601      	adds	r6, #1
 800872a:	e7f2      	b.n	8008712 <__libc_init_array+0x1e>
 800872c:	0800bd5c 	.word	0x0800bd5c
 8008730:	0800bd5c 	.word	0x0800bd5c
 8008734:	0800bd5c 	.word	0x0800bd5c
 8008738:	0800bd60 	.word	0x0800bd60

0800873c <memcpy>:
 800873c:	440a      	add	r2, r1
 800873e:	4291      	cmp	r1, r2
 8008740:	f100 33ff 	add.w	r3, r0, #4294967295
 8008744:	d100      	bne.n	8008748 <memcpy+0xc>
 8008746:	4770      	bx	lr
 8008748:	b510      	push	{r4, lr}
 800874a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800874e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008752:	4291      	cmp	r1, r2
 8008754:	d1f9      	bne.n	800874a <memcpy+0xe>
 8008756:	bd10      	pop	{r4, pc}

08008758 <memset>:
 8008758:	4402      	add	r2, r0
 800875a:	4603      	mov	r3, r0
 800875c:	4293      	cmp	r3, r2
 800875e:	d100      	bne.n	8008762 <memset+0xa>
 8008760:	4770      	bx	lr
 8008762:	f803 1b01 	strb.w	r1, [r3], #1
 8008766:	e7f9      	b.n	800875c <memset+0x4>

08008768 <__cvt>:
 8008768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800876c:	ec55 4b10 	vmov	r4, r5, d0
 8008770:	2d00      	cmp	r5, #0
 8008772:	460e      	mov	r6, r1
 8008774:	4619      	mov	r1, r3
 8008776:	462b      	mov	r3, r5
 8008778:	bfbb      	ittet	lt
 800877a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800877e:	461d      	movlt	r5, r3
 8008780:	2300      	movge	r3, #0
 8008782:	232d      	movlt	r3, #45	; 0x2d
 8008784:	700b      	strb	r3, [r1, #0]
 8008786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008788:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800878c:	4691      	mov	r9, r2
 800878e:	f023 0820 	bic.w	r8, r3, #32
 8008792:	bfbc      	itt	lt
 8008794:	4622      	movlt	r2, r4
 8008796:	4614      	movlt	r4, r2
 8008798:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800879c:	d005      	beq.n	80087aa <__cvt+0x42>
 800879e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087a2:	d100      	bne.n	80087a6 <__cvt+0x3e>
 80087a4:	3601      	adds	r6, #1
 80087a6:	2102      	movs	r1, #2
 80087a8:	e000      	b.n	80087ac <__cvt+0x44>
 80087aa:	2103      	movs	r1, #3
 80087ac:	ab03      	add	r3, sp, #12
 80087ae:	9301      	str	r3, [sp, #4]
 80087b0:	ab02      	add	r3, sp, #8
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	ec45 4b10 	vmov	d0, r4, r5
 80087b8:	4653      	mov	r3, sl
 80087ba:	4632      	mov	r2, r6
 80087bc:	f000 fe38 	bl	8009430 <_dtoa_r>
 80087c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087c4:	4607      	mov	r7, r0
 80087c6:	d102      	bne.n	80087ce <__cvt+0x66>
 80087c8:	f019 0f01 	tst.w	r9, #1
 80087cc:	d022      	beq.n	8008814 <__cvt+0xac>
 80087ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087d2:	eb07 0906 	add.w	r9, r7, r6
 80087d6:	d110      	bne.n	80087fa <__cvt+0x92>
 80087d8:	783b      	ldrb	r3, [r7, #0]
 80087da:	2b30      	cmp	r3, #48	; 0x30
 80087dc:	d10a      	bne.n	80087f4 <__cvt+0x8c>
 80087de:	2200      	movs	r2, #0
 80087e0:	2300      	movs	r3, #0
 80087e2:	4620      	mov	r0, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	f7f8 f977 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ea:	b918      	cbnz	r0, 80087f4 <__cvt+0x8c>
 80087ec:	f1c6 0601 	rsb	r6, r6, #1
 80087f0:	f8ca 6000 	str.w	r6, [sl]
 80087f4:	f8da 3000 	ldr.w	r3, [sl]
 80087f8:	4499      	add	r9, r3
 80087fa:	2200      	movs	r2, #0
 80087fc:	2300      	movs	r3, #0
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8008806:	b108      	cbz	r0, 800880c <__cvt+0xa4>
 8008808:	f8cd 900c 	str.w	r9, [sp, #12]
 800880c:	2230      	movs	r2, #48	; 0x30
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	454b      	cmp	r3, r9
 8008812:	d307      	bcc.n	8008824 <__cvt+0xbc>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008818:	1bdb      	subs	r3, r3, r7
 800881a:	4638      	mov	r0, r7
 800881c:	6013      	str	r3, [r2, #0]
 800881e:	b004      	add	sp, #16
 8008820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008824:	1c59      	adds	r1, r3, #1
 8008826:	9103      	str	r1, [sp, #12]
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	e7f0      	b.n	800880e <__cvt+0xa6>

0800882c <__exponent>:
 800882c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800882e:	4603      	mov	r3, r0
 8008830:	2900      	cmp	r1, #0
 8008832:	bfb8      	it	lt
 8008834:	4249      	neglt	r1, r1
 8008836:	f803 2b02 	strb.w	r2, [r3], #2
 800883a:	bfb4      	ite	lt
 800883c:	222d      	movlt	r2, #45	; 0x2d
 800883e:	222b      	movge	r2, #43	; 0x2b
 8008840:	2909      	cmp	r1, #9
 8008842:	7042      	strb	r2, [r0, #1]
 8008844:	dd2a      	ble.n	800889c <__exponent+0x70>
 8008846:	f10d 0407 	add.w	r4, sp, #7
 800884a:	46a4      	mov	ip, r4
 800884c:	270a      	movs	r7, #10
 800884e:	46a6      	mov	lr, r4
 8008850:	460a      	mov	r2, r1
 8008852:	fb91 f6f7 	sdiv	r6, r1, r7
 8008856:	fb07 1516 	mls	r5, r7, r6, r1
 800885a:	3530      	adds	r5, #48	; 0x30
 800885c:	2a63      	cmp	r2, #99	; 0x63
 800885e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008862:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008866:	4631      	mov	r1, r6
 8008868:	dcf1      	bgt.n	800884e <__exponent+0x22>
 800886a:	3130      	adds	r1, #48	; 0x30
 800886c:	f1ae 0502 	sub.w	r5, lr, #2
 8008870:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008874:	1c44      	adds	r4, r0, #1
 8008876:	4629      	mov	r1, r5
 8008878:	4561      	cmp	r1, ip
 800887a:	d30a      	bcc.n	8008892 <__exponent+0x66>
 800887c:	f10d 0209 	add.w	r2, sp, #9
 8008880:	eba2 020e 	sub.w	r2, r2, lr
 8008884:	4565      	cmp	r5, ip
 8008886:	bf88      	it	hi
 8008888:	2200      	movhi	r2, #0
 800888a:	4413      	add	r3, r2
 800888c:	1a18      	subs	r0, r3, r0
 800888e:	b003      	add	sp, #12
 8008890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008896:	f804 2f01 	strb.w	r2, [r4, #1]!
 800889a:	e7ed      	b.n	8008878 <__exponent+0x4c>
 800889c:	2330      	movs	r3, #48	; 0x30
 800889e:	3130      	adds	r1, #48	; 0x30
 80088a0:	7083      	strb	r3, [r0, #2]
 80088a2:	70c1      	strb	r1, [r0, #3]
 80088a4:	1d03      	adds	r3, r0, #4
 80088a6:	e7f1      	b.n	800888c <__exponent+0x60>

080088a8 <_printf_float>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	ed2d 8b02 	vpush	{d8}
 80088b0:	b08d      	sub	sp, #52	; 0x34
 80088b2:	460c      	mov	r4, r1
 80088b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80088b8:	4616      	mov	r6, r2
 80088ba:	461f      	mov	r7, r3
 80088bc:	4605      	mov	r5, r0
 80088be:	f001 fd5d 	bl	800a37c <_localeconv_r>
 80088c2:	f8d0 a000 	ldr.w	sl, [r0]
 80088c6:	4650      	mov	r0, sl
 80088c8:	f7f7 fc8a 	bl	80001e0 <strlen>
 80088cc:	2300      	movs	r3, #0
 80088ce:	930a      	str	r3, [sp, #40]	; 0x28
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	f8d8 3000 	ldr.w	r3, [r8]
 80088d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80088dc:	3307      	adds	r3, #7
 80088de:	f023 0307 	bic.w	r3, r3, #7
 80088e2:	f103 0208 	add.w	r2, r3, #8
 80088e6:	f8c8 2000 	str.w	r2, [r8]
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80088f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80088f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088fa:	9307      	str	r3, [sp, #28]
 80088fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008900:	ee08 0a10 	vmov	s16, r0
 8008904:	4b9f      	ldr	r3, [pc, #636]	; (8008b84 <_printf_float+0x2dc>)
 8008906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800890a:	f04f 32ff 	mov.w	r2, #4294967295
 800890e:	f7f8 f915 	bl	8000b3c <__aeabi_dcmpun>
 8008912:	bb88      	cbnz	r0, 8008978 <_printf_float+0xd0>
 8008914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008918:	4b9a      	ldr	r3, [pc, #616]	; (8008b84 <_printf_float+0x2dc>)
 800891a:	f04f 32ff 	mov.w	r2, #4294967295
 800891e:	f7f8 f8ef 	bl	8000b00 <__aeabi_dcmple>
 8008922:	bb48      	cbnz	r0, 8008978 <_printf_float+0xd0>
 8008924:	2200      	movs	r2, #0
 8008926:	2300      	movs	r3, #0
 8008928:	4640      	mov	r0, r8
 800892a:	4649      	mov	r1, r9
 800892c:	f7f8 f8de 	bl	8000aec <__aeabi_dcmplt>
 8008930:	b110      	cbz	r0, 8008938 <_printf_float+0x90>
 8008932:	232d      	movs	r3, #45	; 0x2d
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008938:	4b93      	ldr	r3, [pc, #588]	; (8008b88 <_printf_float+0x2e0>)
 800893a:	4894      	ldr	r0, [pc, #592]	; (8008b8c <_printf_float+0x2e4>)
 800893c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008940:	bf94      	ite	ls
 8008942:	4698      	movls	r8, r3
 8008944:	4680      	movhi	r8, r0
 8008946:	2303      	movs	r3, #3
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	9b05      	ldr	r3, [sp, #20]
 800894c:	f023 0204 	bic.w	r2, r3, #4
 8008950:	6022      	str	r2, [r4, #0]
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	9700      	str	r7, [sp, #0]
 8008958:	4633      	mov	r3, r6
 800895a:	aa0b      	add	r2, sp, #44	; 0x2c
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f9d8 	bl	8008d14 <_printf_common>
 8008964:	3001      	adds	r0, #1
 8008966:	f040 8090 	bne.w	8008a8a <_printf_float+0x1e2>
 800896a:	f04f 30ff 	mov.w	r0, #4294967295
 800896e:	b00d      	add	sp, #52	; 0x34
 8008970:	ecbd 8b02 	vpop	{d8}
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	4640      	mov	r0, r8
 800897e:	4649      	mov	r1, r9
 8008980:	f7f8 f8dc 	bl	8000b3c <__aeabi_dcmpun>
 8008984:	b140      	cbz	r0, 8008998 <_printf_float+0xf0>
 8008986:	464b      	mov	r3, r9
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfbc      	itt	lt
 800898c:	232d      	movlt	r3, #45	; 0x2d
 800898e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008992:	487f      	ldr	r0, [pc, #508]	; (8008b90 <_printf_float+0x2e8>)
 8008994:	4b7f      	ldr	r3, [pc, #508]	; (8008b94 <_printf_float+0x2ec>)
 8008996:	e7d1      	b.n	800893c <_printf_float+0x94>
 8008998:	6863      	ldr	r3, [r4, #4]
 800899a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800899e:	9206      	str	r2, [sp, #24]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	d13f      	bne.n	8008a24 <_printf_float+0x17c>
 80089a4:	2306      	movs	r3, #6
 80089a6:	6063      	str	r3, [r4, #4]
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	6861      	ldr	r1, [r4, #4]
 80089ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80089b0:	2300      	movs	r3, #0
 80089b2:	9303      	str	r3, [sp, #12]
 80089b4:	ab0a      	add	r3, sp, #40	; 0x28
 80089b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80089ba:	ab09      	add	r3, sp, #36	; 0x24
 80089bc:	ec49 8b10 	vmov	d0, r8, r9
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	6022      	str	r2, [r4, #0]
 80089c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089c8:	4628      	mov	r0, r5
 80089ca:	f7ff fecd 	bl	8008768 <__cvt>
 80089ce:	9b06      	ldr	r3, [sp, #24]
 80089d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089d2:	2b47      	cmp	r3, #71	; 0x47
 80089d4:	4680      	mov	r8, r0
 80089d6:	d108      	bne.n	80089ea <_printf_float+0x142>
 80089d8:	1cc8      	adds	r0, r1, #3
 80089da:	db02      	blt.n	80089e2 <_printf_float+0x13a>
 80089dc:	6863      	ldr	r3, [r4, #4]
 80089de:	4299      	cmp	r1, r3
 80089e0:	dd41      	ble.n	8008a66 <_printf_float+0x1be>
 80089e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80089e6:	fa5f fb8b 	uxtb.w	fp, fp
 80089ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089ee:	d820      	bhi.n	8008a32 <_printf_float+0x18a>
 80089f0:	3901      	subs	r1, #1
 80089f2:	465a      	mov	r2, fp
 80089f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80089f8:	9109      	str	r1, [sp, #36]	; 0x24
 80089fa:	f7ff ff17 	bl	800882c <__exponent>
 80089fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a00:	1813      	adds	r3, r2, r0
 8008a02:	2a01      	cmp	r2, #1
 8008a04:	4681      	mov	r9, r0
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	dc02      	bgt.n	8008a10 <_printf_float+0x168>
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	07d2      	lsls	r2, r2, #31
 8008a0e:	d501      	bpl.n	8008a14 <_printf_float+0x16c>
 8008a10:	3301      	adds	r3, #1
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d09c      	beq.n	8008956 <_printf_float+0xae>
 8008a1c:	232d      	movs	r3, #45	; 0x2d
 8008a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a22:	e798      	b.n	8008956 <_printf_float+0xae>
 8008a24:	9a06      	ldr	r2, [sp, #24]
 8008a26:	2a47      	cmp	r2, #71	; 0x47
 8008a28:	d1be      	bne.n	80089a8 <_printf_float+0x100>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1bc      	bne.n	80089a8 <_printf_float+0x100>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e7b9      	b.n	80089a6 <_printf_float+0xfe>
 8008a32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008a36:	d118      	bne.n	8008a6a <_printf_float+0x1c2>
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	dd0b      	ble.n	8008a56 <_printf_float+0x1ae>
 8008a3e:	6121      	str	r1, [r4, #16]
 8008a40:	b913      	cbnz	r3, 8008a48 <_printf_float+0x1a0>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	07d0      	lsls	r0, r2, #31
 8008a46:	d502      	bpl.n	8008a4e <_printf_float+0x1a6>
 8008a48:	3301      	adds	r3, #1
 8008a4a:	440b      	add	r3, r1
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a50:	f04f 0900 	mov.w	r9, #0
 8008a54:	e7de      	b.n	8008a14 <_printf_float+0x16c>
 8008a56:	b913      	cbnz	r3, 8008a5e <_printf_float+0x1b6>
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	07d2      	lsls	r2, r2, #31
 8008a5c:	d501      	bpl.n	8008a62 <_printf_float+0x1ba>
 8008a5e:	3302      	adds	r3, #2
 8008a60:	e7f4      	b.n	8008a4c <_printf_float+0x1a4>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e7f2      	b.n	8008a4c <_printf_float+0x1a4>
 8008a66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	db05      	blt.n	8008a7c <_printf_float+0x1d4>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	6121      	str	r1, [r4, #16]
 8008a74:	07d8      	lsls	r0, r3, #31
 8008a76:	d5ea      	bpl.n	8008a4e <_printf_float+0x1a6>
 8008a78:	1c4b      	adds	r3, r1, #1
 8008a7a:	e7e7      	b.n	8008a4c <_printf_float+0x1a4>
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	bfd4      	ite	le
 8008a80:	f1c1 0202 	rsble	r2, r1, #2
 8008a84:	2201      	movgt	r2, #1
 8008a86:	4413      	add	r3, r2
 8008a88:	e7e0      	b.n	8008a4c <_printf_float+0x1a4>
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	055a      	lsls	r2, r3, #21
 8008a8e:	d407      	bmi.n	8008aa0 <_printf_float+0x1f8>
 8008a90:	6923      	ldr	r3, [r4, #16]
 8008a92:	4642      	mov	r2, r8
 8008a94:	4631      	mov	r1, r6
 8008a96:	4628      	mov	r0, r5
 8008a98:	47b8      	blx	r7
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	d12c      	bne.n	8008af8 <_printf_float+0x250>
 8008a9e:	e764      	b.n	800896a <_printf_float+0xc2>
 8008aa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008aa4:	f240 80e0 	bls.w	8008c68 <_printf_float+0x3c0>
 8008aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f7f8 f812 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d034      	beq.n	8008b22 <_printf_float+0x27a>
 8008ab8:	4a37      	ldr	r2, [pc, #220]	; (8008b98 <_printf_float+0x2f0>)
 8008aba:	2301      	movs	r3, #1
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f43f af51 	beq.w	800896a <_printf_float+0xc2>
 8008ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008acc:	429a      	cmp	r2, r3
 8008ace:	db02      	blt.n	8008ad6 <_printf_float+0x22e>
 8008ad0:	6823      	ldr	r3, [r4, #0]
 8008ad2:	07d8      	lsls	r0, r3, #31
 8008ad4:	d510      	bpl.n	8008af8 <_printf_float+0x250>
 8008ad6:	ee18 3a10 	vmov	r3, s16
 8008ada:	4652      	mov	r2, sl
 8008adc:	4631      	mov	r1, r6
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47b8      	blx	r7
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	f43f af41 	beq.w	800896a <_printf_float+0xc2>
 8008ae8:	f04f 0800 	mov.w	r8, #0
 8008aec:	f104 091a 	add.w	r9, r4, #26
 8008af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af2:	3b01      	subs	r3, #1
 8008af4:	4543      	cmp	r3, r8
 8008af6:	dc09      	bgt.n	8008b0c <_printf_float+0x264>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	079b      	lsls	r3, r3, #30
 8008afc:	f100 8105 	bmi.w	8008d0a <_printf_float+0x462>
 8008b00:	68e0      	ldr	r0, [r4, #12]
 8008b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b04:	4298      	cmp	r0, r3
 8008b06:	bfb8      	it	lt
 8008b08:	4618      	movlt	r0, r3
 8008b0a:	e730      	b.n	800896e <_printf_float+0xc6>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	464a      	mov	r2, r9
 8008b10:	4631      	mov	r1, r6
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b8      	blx	r7
 8008b16:	3001      	adds	r0, #1
 8008b18:	f43f af27 	beq.w	800896a <_printf_float+0xc2>
 8008b1c:	f108 0801 	add.w	r8, r8, #1
 8008b20:	e7e6      	b.n	8008af0 <_printf_float+0x248>
 8008b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc39      	bgt.n	8008b9c <_printf_float+0x2f4>
 8008b28:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <_printf_float+0x2f0>)
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	f43f af19 	beq.w	800896a <_printf_float+0xc2>
 8008b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	d102      	bne.n	8008b46 <_printf_float+0x29e>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	07d9      	lsls	r1, r3, #31
 8008b44:	d5d8      	bpl.n	8008af8 <_printf_float+0x250>
 8008b46:	ee18 3a10 	vmov	r3, s16
 8008b4a:	4652      	mov	r2, sl
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4628      	mov	r0, r5
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f af09 	beq.w	800896a <_printf_float+0xc2>
 8008b58:	f04f 0900 	mov.w	r9, #0
 8008b5c:	f104 0a1a 	add.w	sl, r4, #26
 8008b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b62:	425b      	negs	r3, r3
 8008b64:	454b      	cmp	r3, r9
 8008b66:	dc01      	bgt.n	8008b6c <_printf_float+0x2c4>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	e792      	b.n	8008a92 <_printf_float+0x1ea>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f aef7 	beq.w	800896a <_printf_float+0xc2>
 8008b7c:	f109 0901 	add.w	r9, r9, #1
 8008b80:	e7ee      	b.n	8008b60 <_printf_float+0x2b8>
 8008b82:	bf00      	nop
 8008b84:	7fefffff 	.word	0x7fefffff
 8008b88:	0800b980 	.word	0x0800b980
 8008b8c:	0800b984 	.word	0x0800b984
 8008b90:	0800b98c 	.word	0x0800b98c
 8008b94:	0800b988 	.word	0x0800b988
 8008b98:	0800b990 	.word	0x0800b990
 8008b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	bfa8      	it	ge
 8008ba4:	461a      	movge	r2, r3
 8008ba6:	2a00      	cmp	r2, #0
 8008ba8:	4691      	mov	r9, r2
 8008baa:	dc37      	bgt.n	8008c1c <_printf_float+0x374>
 8008bac:	f04f 0b00 	mov.w	fp, #0
 8008bb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bb4:	f104 021a 	add.w	r2, r4, #26
 8008bb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	eba3 0309 	sub.w	r3, r3, r9
 8008bc0:	455b      	cmp	r3, fp
 8008bc2:	dc33      	bgt.n	8008c2c <_printf_float+0x384>
 8008bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	db3b      	blt.n	8008c44 <_printf_float+0x39c>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	07da      	lsls	r2, r3, #31
 8008bd0:	d438      	bmi.n	8008c44 <_printf_float+0x39c>
 8008bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd4:	9a05      	ldr	r2, [sp, #20]
 8008bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bd8:	1a9a      	subs	r2, r3, r2
 8008bda:	eba3 0901 	sub.w	r9, r3, r1
 8008bde:	4591      	cmp	r9, r2
 8008be0:	bfa8      	it	ge
 8008be2:	4691      	movge	r9, r2
 8008be4:	f1b9 0f00 	cmp.w	r9, #0
 8008be8:	dc35      	bgt.n	8008c56 <_printf_float+0x3ae>
 8008bea:	f04f 0800 	mov.w	r8, #0
 8008bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bf2:	f104 0a1a 	add.w	sl, r4, #26
 8008bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	eba3 0309 	sub.w	r3, r3, r9
 8008c00:	4543      	cmp	r3, r8
 8008c02:	f77f af79 	ble.w	8008af8 <_printf_float+0x250>
 8008c06:	2301      	movs	r3, #1
 8008c08:	4652      	mov	r2, sl
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b8      	blx	r7
 8008c10:	3001      	adds	r0, #1
 8008c12:	f43f aeaa 	beq.w	800896a <_printf_float+0xc2>
 8008c16:	f108 0801 	add.w	r8, r8, #1
 8008c1a:	e7ec      	b.n	8008bf6 <_printf_float+0x34e>
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4642      	mov	r2, r8
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	d1c0      	bne.n	8008bac <_printf_float+0x304>
 8008c2a:	e69e      	b.n	800896a <_printf_float+0xc2>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	9205      	str	r2, [sp, #20]
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	f43f ae97 	beq.w	800896a <_printf_float+0xc2>
 8008c3c:	9a05      	ldr	r2, [sp, #20]
 8008c3e:	f10b 0b01 	add.w	fp, fp, #1
 8008c42:	e7b9      	b.n	8008bb8 <_printf_float+0x310>
 8008c44:	ee18 3a10 	vmov	r3, s16
 8008c48:	4652      	mov	r2, sl
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b8      	blx	r7
 8008c50:	3001      	adds	r0, #1
 8008c52:	d1be      	bne.n	8008bd2 <_printf_float+0x32a>
 8008c54:	e689      	b.n	800896a <_printf_float+0xc2>
 8008c56:	9a05      	ldr	r2, [sp, #20]
 8008c58:	464b      	mov	r3, r9
 8008c5a:	4442      	add	r2, r8
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4628      	mov	r0, r5
 8008c60:	47b8      	blx	r7
 8008c62:	3001      	adds	r0, #1
 8008c64:	d1c1      	bne.n	8008bea <_printf_float+0x342>
 8008c66:	e680      	b.n	800896a <_printf_float+0xc2>
 8008c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c6a:	2a01      	cmp	r2, #1
 8008c6c:	dc01      	bgt.n	8008c72 <_printf_float+0x3ca>
 8008c6e:	07db      	lsls	r3, r3, #31
 8008c70:	d538      	bpl.n	8008ce4 <_printf_float+0x43c>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4642      	mov	r2, r8
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b8      	blx	r7
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	f43f ae74 	beq.w	800896a <_printf_float+0xc2>
 8008c82:	ee18 3a10 	vmov	r3, s16
 8008c86:	4652      	mov	r2, sl
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	47b8      	blx	r7
 8008c8e:	3001      	adds	r0, #1
 8008c90:	f43f ae6b 	beq.w	800896a <_printf_float+0xc2>
 8008c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	f7f7 ff1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ca0:	b9d8      	cbnz	r0, 8008cda <_printf_float+0x432>
 8008ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ca4:	f108 0201 	add.w	r2, r8, #1
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d10e      	bne.n	8008cd2 <_printf_float+0x42a>
 8008cb4:	e659      	b.n	800896a <_printf_float+0xc2>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4652      	mov	r2, sl
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b8      	blx	r7
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	f43f ae52 	beq.w	800896a <_printf_float+0xc2>
 8008cc6:	f108 0801 	add.w	r8, r8, #1
 8008cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	4543      	cmp	r3, r8
 8008cd0:	dcf1      	bgt.n	8008cb6 <_printf_float+0x40e>
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008cd8:	e6dc      	b.n	8008a94 <_printf_float+0x1ec>
 8008cda:	f04f 0800 	mov.w	r8, #0
 8008cde:	f104 0a1a 	add.w	sl, r4, #26
 8008ce2:	e7f2      	b.n	8008cca <_printf_float+0x422>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	4642      	mov	r2, r8
 8008ce8:	e7df      	b.n	8008caa <_printf_float+0x402>
 8008cea:	2301      	movs	r3, #1
 8008cec:	464a      	mov	r2, r9
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f43f ae38 	beq.w	800896a <_printf_float+0xc2>
 8008cfa:	f108 0801 	add.w	r8, r8, #1
 8008cfe:	68e3      	ldr	r3, [r4, #12]
 8008d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d02:	1a5b      	subs	r3, r3, r1
 8008d04:	4543      	cmp	r3, r8
 8008d06:	dcf0      	bgt.n	8008cea <_printf_float+0x442>
 8008d08:	e6fa      	b.n	8008b00 <_printf_float+0x258>
 8008d0a:	f04f 0800 	mov.w	r8, #0
 8008d0e:	f104 0919 	add.w	r9, r4, #25
 8008d12:	e7f4      	b.n	8008cfe <_printf_float+0x456>

08008d14 <_printf_common>:
 8008d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d18:	4616      	mov	r6, r2
 8008d1a:	4699      	mov	r9, r3
 8008d1c:	688a      	ldr	r2, [r1, #8]
 8008d1e:	690b      	ldr	r3, [r1, #16]
 8008d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	bfb8      	it	lt
 8008d28:	4613      	movlt	r3, r2
 8008d2a:	6033      	str	r3, [r6, #0]
 8008d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d30:	4607      	mov	r7, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	b10a      	cbz	r2, 8008d3a <_printf_common+0x26>
 8008d36:	3301      	adds	r3, #1
 8008d38:	6033      	str	r3, [r6, #0]
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	0699      	lsls	r1, r3, #26
 8008d3e:	bf42      	ittt	mi
 8008d40:	6833      	ldrmi	r3, [r6, #0]
 8008d42:	3302      	addmi	r3, #2
 8008d44:	6033      	strmi	r3, [r6, #0]
 8008d46:	6825      	ldr	r5, [r4, #0]
 8008d48:	f015 0506 	ands.w	r5, r5, #6
 8008d4c:	d106      	bne.n	8008d5c <_printf_common+0x48>
 8008d4e:	f104 0a19 	add.w	sl, r4, #25
 8008d52:	68e3      	ldr	r3, [r4, #12]
 8008d54:	6832      	ldr	r2, [r6, #0]
 8008d56:	1a9b      	subs	r3, r3, r2
 8008d58:	42ab      	cmp	r3, r5
 8008d5a:	dc26      	bgt.n	8008daa <_printf_common+0x96>
 8008d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d60:	1e13      	subs	r3, r2, #0
 8008d62:	6822      	ldr	r2, [r4, #0]
 8008d64:	bf18      	it	ne
 8008d66:	2301      	movne	r3, #1
 8008d68:	0692      	lsls	r2, r2, #26
 8008d6a:	d42b      	bmi.n	8008dc4 <_printf_common+0xb0>
 8008d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d70:	4649      	mov	r1, r9
 8008d72:	4638      	mov	r0, r7
 8008d74:	47c0      	blx	r8
 8008d76:	3001      	adds	r0, #1
 8008d78:	d01e      	beq.n	8008db8 <_printf_common+0xa4>
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	68e5      	ldr	r5, [r4, #12]
 8008d7e:	6832      	ldr	r2, [r6, #0]
 8008d80:	f003 0306 	and.w	r3, r3, #6
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	bf08      	it	eq
 8008d88:	1aad      	subeq	r5, r5, r2
 8008d8a:	68a3      	ldr	r3, [r4, #8]
 8008d8c:	6922      	ldr	r2, [r4, #16]
 8008d8e:	bf0c      	ite	eq
 8008d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d94:	2500      	movne	r5, #0
 8008d96:	4293      	cmp	r3, r2
 8008d98:	bfc4      	itt	gt
 8008d9a:	1a9b      	subgt	r3, r3, r2
 8008d9c:	18ed      	addgt	r5, r5, r3
 8008d9e:	2600      	movs	r6, #0
 8008da0:	341a      	adds	r4, #26
 8008da2:	42b5      	cmp	r5, r6
 8008da4:	d11a      	bne.n	8008ddc <_printf_common+0xc8>
 8008da6:	2000      	movs	r0, #0
 8008da8:	e008      	b.n	8008dbc <_printf_common+0xa8>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4652      	mov	r2, sl
 8008dae:	4649      	mov	r1, r9
 8008db0:	4638      	mov	r0, r7
 8008db2:	47c0      	blx	r8
 8008db4:	3001      	adds	r0, #1
 8008db6:	d103      	bne.n	8008dc0 <_printf_common+0xac>
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc0:	3501      	adds	r5, #1
 8008dc2:	e7c6      	b.n	8008d52 <_printf_common+0x3e>
 8008dc4:	18e1      	adds	r1, r4, r3
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	2030      	movs	r0, #48	; 0x30
 8008dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dce:	4422      	add	r2, r4
 8008dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008dd8:	3302      	adds	r3, #2
 8008dda:	e7c7      	b.n	8008d6c <_printf_common+0x58>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	4622      	mov	r2, r4
 8008de0:	4649      	mov	r1, r9
 8008de2:	4638      	mov	r0, r7
 8008de4:	47c0      	blx	r8
 8008de6:	3001      	adds	r0, #1
 8008de8:	d0e6      	beq.n	8008db8 <_printf_common+0xa4>
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7d9      	b.n	8008da2 <_printf_common+0x8e>
	...

08008df0 <_printf_i>:
 8008df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df4:	7e0f      	ldrb	r7, [r1, #24]
 8008df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008df8:	2f78      	cmp	r7, #120	; 0x78
 8008dfa:	4691      	mov	r9, r2
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	469a      	mov	sl, r3
 8008e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e06:	d807      	bhi.n	8008e18 <_printf_i+0x28>
 8008e08:	2f62      	cmp	r7, #98	; 0x62
 8008e0a:	d80a      	bhi.n	8008e22 <_printf_i+0x32>
 8008e0c:	2f00      	cmp	r7, #0
 8008e0e:	f000 80d8 	beq.w	8008fc2 <_printf_i+0x1d2>
 8008e12:	2f58      	cmp	r7, #88	; 0x58
 8008e14:	f000 80a3 	beq.w	8008f5e <_printf_i+0x16e>
 8008e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e20:	e03a      	b.n	8008e98 <_printf_i+0xa8>
 8008e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e26:	2b15      	cmp	r3, #21
 8008e28:	d8f6      	bhi.n	8008e18 <_printf_i+0x28>
 8008e2a:	a101      	add	r1, pc, #4	; (adr r1, 8008e30 <_printf_i+0x40>)
 8008e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e30:	08008e89 	.word	0x08008e89
 8008e34:	08008e9d 	.word	0x08008e9d
 8008e38:	08008e19 	.word	0x08008e19
 8008e3c:	08008e19 	.word	0x08008e19
 8008e40:	08008e19 	.word	0x08008e19
 8008e44:	08008e19 	.word	0x08008e19
 8008e48:	08008e9d 	.word	0x08008e9d
 8008e4c:	08008e19 	.word	0x08008e19
 8008e50:	08008e19 	.word	0x08008e19
 8008e54:	08008e19 	.word	0x08008e19
 8008e58:	08008e19 	.word	0x08008e19
 8008e5c:	08008fa9 	.word	0x08008fa9
 8008e60:	08008ecd 	.word	0x08008ecd
 8008e64:	08008f8b 	.word	0x08008f8b
 8008e68:	08008e19 	.word	0x08008e19
 8008e6c:	08008e19 	.word	0x08008e19
 8008e70:	08008fcb 	.word	0x08008fcb
 8008e74:	08008e19 	.word	0x08008e19
 8008e78:	08008ecd 	.word	0x08008ecd
 8008e7c:	08008e19 	.word	0x08008e19
 8008e80:	08008e19 	.word	0x08008e19
 8008e84:	08008f93 	.word	0x08008f93
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	1d1a      	adds	r2, r3, #4
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	602a      	str	r2, [r5, #0]
 8008e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e0a3      	b.n	8008fe4 <_printf_i+0x1f4>
 8008e9c:	6820      	ldr	r0, [r4, #0]
 8008e9e:	6829      	ldr	r1, [r5, #0]
 8008ea0:	0606      	lsls	r6, r0, #24
 8008ea2:	f101 0304 	add.w	r3, r1, #4
 8008ea6:	d50a      	bpl.n	8008ebe <_printf_i+0xce>
 8008ea8:	680e      	ldr	r6, [r1, #0]
 8008eaa:	602b      	str	r3, [r5, #0]
 8008eac:	2e00      	cmp	r6, #0
 8008eae:	da03      	bge.n	8008eb8 <_printf_i+0xc8>
 8008eb0:	232d      	movs	r3, #45	; 0x2d
 8008eb2:	4276      	negs	r6, r6
 8008eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb8:	485e      	ldr	r0, [pc, #376]	; (8009034 <_printf_i+0x244>)
 8008eba:	230a      	movs	r3, #10
 8008ebc:	e019      	b.n	8008ef2 <_printf_i+0x102>
 8008ebe:	680e      	ldr	r6, [r1, #0]
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ec6:	bf18      	it	ne
 8008ec8:	b236      	sxthne	r6, r6
 8008eca:	e7ef      	b.n	8008eac <_printf_i+0xbc>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	6820      	ldr	r0, [r4, #0]
 8008ed0:	1d19      	adds	r1, r3, #4
 8008ed2:	6029      	str	r1, [r5, #0]
 8008ed4:	0601      	lsls	r1, r0, #24
 8008ed6:	d501      	bpl.n	8008edc <_printf_i+0xec>
 8008ed8:	681e      	ldr	r6, [r3, #0]
 8008eda:	e002      	b.n	8008ee2 <_printf_i+0xf2>
 8008edc:	0646      	lsls	r6, r0, #25
 8008ede:	d5fb      	bpl.n	8008ed8 <_printf_i+0xe8>
 8008ee0:	881e      	ldrh	r6, [r3, #0]
 8008ee2:	4854      	ldr	r0, [pc, #336]	; (8009034 <_printf_i+0x244>)
 8008ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ee6:	bf0c      	ite	eq
 8008ee8:	2308      	moveq	r3, #8
 8008eea:	230a      	movne	r3, #10
 8008eec:	2100      	movs	r1, #0
 8008eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ef2:	6865      	ldr	r5, [r4, #4]
 8008ef4:	60a5      	str	r5, [r4, #8]
 8008ef6:	2d00      	cmp	r5, #0
 8008ef8:	bfa2      	ittt	ge
 8008efa:	6821      	ldrge	r1, [r4, #0]
 8008efc:	f021 0104 	bicge.w	r1, r1, #4
 8008f00:	6021      	strge	r1, [r4, #0]
 8008f02:	b90e      	cbnz	r6, 8008f08 <_printf_i+0x118>
 8008f04:	2d00      	cmp	r5, #0
 8008f06:	d04d      	beq.n	8008fa4 <_printf_i+0x1b4>
 8008f08:	4615      	mov	r5, r2
 8008f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008f12:	5dc7      	ldrb	r7, [r0, r7]
 8008f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f18:	4637      	mov	r7, r6
 8008f1a:	42bb      	cmp	r3, r7
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	d9f4      	bls.n	8008f0a <_printf_i+0x11a>
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d10b      	bne.n	8008f3c <_printf_i+0x14c>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	07de      	lsls	r6, r3, #31
 8008f28:	d508      	bpl.n	8008f3c <_printf_i+0x14c>
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	6861      	ldr	r1, [r4, #4]
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	bfde      	ittt	le
 8008f32:	2330      	movle	r3, #48	; 0x30
 8008f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f3c:	1b52      	subs	r2, r2, r5
 8008f3e:	6122      	str	r2, [r4, #16]
 8008f40:	f8cd a000 	str.w	sl, [sp]
 8008f44:	464b      	mov	r3, r9
 8008f46:	aa03      	add	r2, sp, #12
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	f7ff fee2 	bl	8008d14 <_printf_common>
 8008f50:	3001      	adds	r0, #1
 8008f52:	d14c      	bne.n	8008fee <_printf_i+0x1fe>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	b004      	add	sp, #16
 8008f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5e:	4835      	ldr	r0, [pc, #212]	; (8009034 <_printf_i+0x244>)
 8008f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f64:	6829      	ldr	r1, [r5, #0]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f6c:	6029      	str	r1, [r5, #0]
 8008f6e:	061d      	lsls	r5, r3, #24
 8008f70:	d514      	bpl.n	8008f9c <_printf_i+0x1ac>
 8008f72:	07df      	lsls	r7, r3, #31
 8008f74:	bf44      	itt	mi
 8008f76:	f043 0320 	orrmi.w	r3, r3, #32
 8008f7a:	6023      	strmi	r3, [r4, #0]
 8008f7c:	b91e      	cbnz	r6, 8008f86 <_printf_i+0x196>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	f023 0320 	bic.w	r3, r3, #32
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	2310      	movs	r3, #16
 8008f88:	e7b0      	b.n	8008eec <_printf_i+0xfc>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	f043 0320 	orr.w	r3, r3, #32
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	2378      	movs	r3, #120	; 0x78
 8008f94:	4828      	ldr	r0, [pc, #160]	; (8009038 <_printf_i+0x248>)
 8008f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f9a:	e7e3      	b.n	8008f64 <_printf_i+0x174>
 8008f9c:	0659      	lsls	r1, r3, #25
 8008f9e:	bf48      	it	mi
 8008fa0:	b2b6      	uxthmi	r6, r6
 8008fa2:	e7e6      	b.n	8008f72 <_printf_i+0x182>
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	e7bb      	b.n	8008f20 <_printf_i+0x130>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	6826      	ldr	r6, [r4, #0]
 8008fac:	6961      	ldr	r1, [r4, #20]
 8008fae:	1d18      	adds	r0, r3, #4
 8008fb0:	6028      	str	r0, [r5, #0]
 8008fb2:	0635      	lsls	r5, r6, #24
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	d501      	bpl.n	8008fbc <_printf_i+0x1cc>
 8008fb8:	6019      	str	r1, [r3, #0]
 8008fba:	e002      	b.n	8008fc2 <_printf_i+0x1d2>
 8008fbc:	0670      	lsls	r0, r6, #25
 8008fbe:	d5fb      	bpl.n	8008fb8 <_printf_i+0x1c8>
 8008fc0:	8019      	strh	r1, [r3, #0]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	4615      	mov	r5, r2
 8008fc8:	e7ba      	b.n	8008f40 <_printf_i+0x150>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	1d1a      	adds	r2, r3, #4
 8008fce:	602a      	str	r2, [r5, #0]
 8008fd0:	681d      	ldr	r5, [r3, #0]
 8008fd2:	6862      	ldr	r2, [r4, #4]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f7f7 f90a 	bl	80001f0 <memchr>
 8008fdc:	b108      	cbz	r0, 8008fe2 <_printf_i+0x1f2>
 8008fde:	1b40      	subs	r0, r0, r5
 8008fe0:	6060      	str	r0, [r4, #4]
 8008fe2:	6863      	ldr	r3, [r4, #4]
 8008fe4:	6123      	str	r3, [r4, #16]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fec:	e7a8      	b.n	8008f40 <_printf_i+0x150>
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	47d0      	blx	sl
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d0ab      	beq.n	8008f54 <_printf_i+0x164>
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	079b      	lsls	r3, r3, #30
 8009000:	d413      	bmi.n	800902a <_printf_i+0x23a>
 8009002:	68e0      	ldr	r0, [r4, #12]
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	4298      	cmp	r0, r3
 8009008:	bfb8      	it	lt
 800900a:	4618      	movlt	r0, r3
 800900c:	e7a4      	b.n	8008f58 <_printf_i+0x168>
 800900e:	2301      	movs	r3, #1
 8009010:	4632      	mov	r2, r6
 8009012:	4649      	mov	r1, r9
 8009014:	4640      	mov	r0, r8
 8009016:	47d0      	blx	sl
 8009018:	3001      	adds	r0, #1
 800901a:	d09b      	beq.n	8008f54 <_printf_i+0x164>
 800901c:	3501      	adds	r5, #1
 800901e:	68e3      	ldr	r3, [r4, #12]
 8009020:	9903      	ldr	r1, [sp, #12]
 8009022:	1a5b      	subs	r3, r3, r1
 8009024:	42ab      	cmp	r3, r5
 8009026:	dcf2      	bgt.n	800900e <_printf_i+0x21e>
 8009028:	e7eb      	b.n	8009002 <_printf_i+0x212>
 800902a:	2500      	movs	r5, #0
 800902c:	f104 0619 	add.w	r6, r4, #25
 8009030:	e7f5      	b.n	800901e <_printf_i+0x22e>
 8009032:	bf00      	nop
 8009034:	0800b992 	.word	0x0800b992
 8009038:	0800b9a3 	.word	0x0800b9a3

0800903c <iprintf>:
 800903c:	b40f      	push	{r0, r1, r2, r3}
 800903e:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <iprintf+0x2c>)
 8009040:	b513      	push	{r0, r1, r4, lr}
 8009042:	681c      	ldr	r4, [r3, #0]
 8009044:	b124      	cbz	r4, 8009050 <iprintf+0x14>
 8009046:	69a3      	ldr	r3, [r4, #24]
 8009048:	b913      	cbnz	r3, 8009050 <iprintf+0x14>
 800904a:	4620      	mov	r0, r4
 800904c:	f001 f8f8 	bl	800a240 <__sinit>
 8009050:	ab05      	add	r3, sp, #20
 8009052:	9a04      	ldr	r2, [sp, #16]
 8009054:	68a1      	ldr	r1, [r4, #8]
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	4620      	mov	r0, r4
 800905a:	f002 f803 	bl	800b064 <_vfiprintf_r>
 800905e:	b002      	add	sp, #8
 8009060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009064:	b004      	add	sp, #16
 8009066:	4770      	bx	lr
 8009068:	20000020 	.word	0x20000020

0800906c <_puts_r>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	460e      	mov	r6, r1
 8009070:	4605      	mov	r5, r0
 8009072:	b118      	cbz	r0, 800907c <_puts_r+0x10>
 8009074:	6983      	ldr	r3, [r0, #24]
 8009076:	b90b      	cbnz	r3, 800907c <_puts_r+0x10>
 8009078:	f001 f8e2 	bl	800a240 <__sinit>
 800907c:	69ab      	ldr	r3, [r5, #24]
 800907e:	68ac      	ldr	r4, [r5, #8]
 8009080:	b913      	cbnz	r3, 8009088 <_puts_r+0x1c>
 8009082:	4628      	mov	r0, r5
 8009084:	f001 f8dc 	bl	800a240 <__sinit>
 8009088:	4b2c      	ldr	r3, [pc, #176]	; (800913c <_puts_r+0xd0>)
 800908a:	429c      	cmp	r4, r3
 800908c:	d120      	bne.n	80090d0 <_puts_r+0x64>
 800908e:	686c      	ldr	r4, [r5, #4]
 8009090:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009092:	07db      	lsls	r3, r3, #31
 8009094:	d405      	bmi.n	80090a2 <_puts_r+0x36>
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	0598      	lsls	r0, r3, #22
 800909a:	d402      	bmi.n	80090a2 <_puts_r+0x36>
 800909c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800909e:	f001 f972 	bl	800a386 <__retarget_lock_acquire_recursive>
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	0719      	lsls	r1, r3, #28
 80090a6:	d51d      	bpl.n	80090e4 <_puts_r+0x78>
 80090a8:	6923      	ldr	r3, [r4, #16]
 80090aa:	b1db      	cbz	r3, 80090e4 <_puts_r+0x78>
 80090ac:	3e01      	subs	r6, #1
 80090ae:	68a3      	ldr	r3, [r4, #8]
 80090b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80090b4:	3b01      	subs	r3, #1
 80090b6:	60a3      	str	r3, [r4, #8]
 80090b8:	bb39      	cbnz	r1, 800910a <_puts_r+0x9e>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da38      	bge.n	8009130 <_puts_r+0xc4>
 80090be:	4622      	mov	r2, r4
 80090c0:	210a      	movs	r1, #10
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 f868 	bl	8009198 <__swbuf_r>
 80090c8:	3001      	adds	r0, #1
 80090ca:	d011      	beq.n	80090f0 <_puts_r+0x84>
 80090cc:	250a      	movs	r5, #10
 80090ce:	e011      	b.n	80090f4 <_puts_r+0x88>
 80090d0:	4b1b      	ldr	r3, [pc, #108]	; (8009140 <_puts_r+0xd4>)
 80090d2:	429c      	cmp	r4, r3
 80090d4:	d101      	bne.n	80090da <_puts_r+0x6e>
 80090d6:	68ac      	ldr	r4, [r5, #8]
 80090d8:	e7da      	b.n	8009090 <_puts_r+0x24>
 80090da:	4b1a      	ldr	r3, [pc, #104]	; (8009144 <_puts_r+0xd8>)
 80090dc:	429c      	cmp	r4, r3
 80090de:	bf08      	it	eq
 80090e0:	68ec      	ldreq	r4, [r5, #12]
 80090e2:	e7d5      	b.n	8009090 <_puts_r+0x24>
 80090e4:	4621      	mov	r1, r4
 80090e6:	4628      	mov	r0, r5
 80090e8:	f000 f8a8 	bl	800923c <__swsetup_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d0dd      	beq.n	80090ac <_puts_r+0x40>
 80090f0:	f04f 35ff 	mov.w	r5, #4294967295
 80090f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090f6:	07da      	lsls	r2, r3, #31
 80090f8:	d405      	bmi.n	8009106 <_puts_r+0x9a>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	059b      	lsls	r3, r3, #22
 80090fe:	d402      	bmi.n	8009106 <_puts_r+0x9a>
 8009100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009102:	f001 f941 	bl	800a388 <__retarget_lock_release_recursive>
 8009106:	4628      	mov	r0, r5
 8009108:	bd70      	pop	{r4, r5, r6, pc}
 800910a:	2b00      	cmp	r3, #0
 800910c:	da04      	bge.n	8009118 <_puts_r+0xac>
 800910e:	69a2      	ldr	r2, [r4, #24]
 8009110:	429a      	cmp	r2, r3
 8009112:	dc06      	bgt.n	8009122 <_puts_r+0xb6>
 8009114:	290a      	cmp	r1, #10
 8009116:	d004      	beq.n	8009122 <_puts_r+0xb6>
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	7019      	strb	r1, [r3, #0]
 8009120:	e7c5      	b.n	80090ae <_puts_r+0x42>
 8009122:	4622      	mov	r2, r4
 8009124:	4628      	mov	r0, r5
 8009126:	f000 f837 	bl	8009198 <__swbuf_r>
 800912a:	3001      	adds	r0, #1
 800912c:	d1bf      	bne.n	80090ae <_puts_r+0x42>
 800912e:	e7df      	b.n	80090f0 <_puts_r+0x84>
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	250a      	movs	r5, #10
 8009134:	1c5a      	adds	r2, r3, #1
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	701d      	strb	r5, [r3, #0]
 800913a:	e7db      	b.n	80090f4 <_puts_r+0x88>
 800913c:	0800ba64 	.word	0x0800ba64
 8009140:	0800ba84 	.word	0x0800ba84
 8009144:	0800ba44 	.word	0x0800ba44

08009148 <puts>:
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <puts+0xc>)
 800914a:	4601      	mov	r1, r0
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f7ff bf8d 	b.w	800906c <_puts_r>
 8009152:	bf00      	nop
 8009154:	20000020 	.word	0x20000020

08009158 <siprintf>:
 8009158:	b40e      	push	{r1, r2, r3}
 800915a:	b500      	push	{lr}
 800915c:	b09c      	sub	sp, #112	; 0x70
 800915e:	ab1d      	add	r3, sp, #116	; 0x74
 8009160:	9002      	str	r0, [sp, #8]
 8009162:	9006      	str	r0, [sp, #24]
 8009164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009168:	4809      	ldr	r0, [pc, #36]	; (8009190 <siprintf+0x38>)
 800916a:	9107      	str	r1, [sp, #28]
 800916c:	9104      	str	r1, [sp, #16]
 800916e:	4909      	ldr	r1, [pc, #36]	; (8009194 <siprintf+0x3c>)
 8009170:	f853 2b04 	ldr.w	r2, [r3], #4
 8009174:	9105      	str	r1, [sp, #20]
 8009176:	6800      	ldr	r0, [r0, #0]
 8009178:	9301      	str	r3, [sp, #4]
 800917a:	a902      	add	r1, sp, #8
 800917c:	f001 fe48 	bl	800ae10 <_svfiprintf_r>
 8009180:	9b02      	ldr	r3, [sp, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	701a      	strb	r2, [r3, #0]
 8009186:	b01c      	add	sp, #112	; 0x70
 8009188:	f85d eb04 	ldr.w	lr, [sp], #4
 800918c:	b003      	add	sp, #12
 800918e:	4770      	bx	lr
 8009190:	20000020 	.word	0x20000020
 8009194:	ffff0208 	.word	0xffff0208

08009198 <__swbuf_r>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	460e      	mov	r6, r1
 800919c:	4614      	mov	r4, r2
 800919e:	4605      	mov	r5, r0
 80091a0:	b118      	cbz	r0, 80091aa <__swbuf_r+0x12>
 80091a2:	6983      	ldr	r3, [r0, #24]
 80091a4:	b90b      	cbnz	r3, 80091aa <__swbuf_r+0x12>
 80091a6:	f001 f84b 	bl	800a240 <__sinit>
 80091aa:	4b21      	ldr	r3, [pc, #132]	; (8009230 <__swbuf_r+0x98>)
 80091ac:	429c      	cmp	r4, r3
 80091ae:	d12b      	bne.n	8009208 <__swbuf_r+0x70>
 80091b0:	686c      	ldr	r4, [r5, #4]
 80091b2:	69a3      	ldr	r3, [r4, #24]
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	071a      	lsls	r2, r3, #28
 80091ba:	d52f      	bpl.n	800921c <__swbuf_r+0x84>
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	b36b      	cbz	r3, 800921c <__swbuf_r+0x84>
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	6820      	ldr	r0, [r4, #0]
 80091c4:	1ac0      	subs	r0, r0, r3
 80091c6:	6963      	ldr	r3, [r4, #20]
 80091c8:	b2f6      	uxtb	r6, r6
 80091ca:	4283      	cmp	r3, r0
 80091cc:	4637      	mov	r7, r6
 80091ce:	dc04      	bgt.n	80091da <__swbuf_r+0x42>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4628      	mov	r0, r5
 80091d4:	f000 ffa0 	bl	800a118 <_fflush_r>
 80091d8:	bb30      	cbnz	r0, 8009228 <__swbuf_r+0x90>
 80091da:	68a3      	ldr	r3, [r4, #8]
 80091dc:	3b01      	subs	r3, #1
 80091de:	60a3      	str	r3, [r4, #8]
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	701e      	strb	r6, [r3, #0]
 80091e8:	6963      	ldr	r3, [r4, #20]
 80091ea:	3001      	adds	r0, #1
 80091ec:	4283      	cmp	r3, r0
 80091ee:	d004      	beq.n	80091fa <__swbuf_r+0x62>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	07db      	lsls	r3, r3, #31
 80091f4:	d506      	bpl.n	8009204 <__swbuf_r+0x6c>
 80091f6:	2e0a      	cmp	r6, #10
 80091f8:	d104      	bne.n	8009204 <__swbuf_r+0x6c>
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 ff8b 	bl	800a118 <_fflush_r>
 8009202:	b988      	cbnz	r0, 8009228 <__swbuf_r+0x90>
 8009204:	4638      	mov	r0, r7
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	4b0a      	ldr	r3, [pc, #40]	; (8009234 <__swbuf_r+0x9c>)
 800920a:	429c      	cmp	r4, r3
 800920c:	d101      	bne.n	8009212 <__swbuf_r+0x7a>
 800920e:	68ac      	ldr	r4, [r5, #8]
 8009210:	e7cf      	b.n	80091b2 <__swbuf_r+0x1a>
 8009212:	4b09      	ldr	r3, [pc, #36]	; (8009238 <__swbuf_r+0xa0>)
 8009214:	429c      	cmp	r4, r3
 8009216:	bf08      	it	eq
 8009218:	68ec      	ldreq	r4, [r5, #12]
 800921a:	e7ca      	b.n	80091b2 <__swbuf_r+0x1a>
 800921c:	4621      	mov	r1, r4
 800921e:	4628      	mov	r0, r5
 8009220:	f000 f80c 	bl	800923c <__swsetup_r>
 8009224:	2800      	cmp	r0, #0
 8009226:	d0cb      	beq.n	80091c0 <__swbuf_r+0x28>
 8009228:	f04f 37ff 	mov.w	r7, #4294967295
 800922c:	e7ea      	b.n	8009204 <__swbuf_r+0x6c>
 800922e:	bf00      	nop
 8009230:	0800ba64 	.word	0x0800ba64
 8009234:	0800ba84 	.word	0x0800ba84
 8009238:	0800ba44 	.word	0x0800ba44

0800923c <__swsetup_r>:
 800923c:	4b32      	ldr	r3, [pc, #200]	; (8009308 <__swsetup_r+0xcc>)
 800923e:	b570      	push	{r4, r5, r6, lr}
 8009240:	681d      	ldr	r5, [r3, #0]
 8009242:	4606      	mov	r6, r0
 8009244:	460c      	mov	r4, r1
 8009246:	b125      	cbz	r5, 8009252 <__swsetup_r+0x16>
 8009248:	69ab      	ldr	r3, [r5, #24]
 800924a:	b913      	cbnz	r3, 8009252 <__swsetup_r+0x16>
 800924c:	4628      	mov	r0, r5
 800924e:	f000 fff7 	bl	800a240 <__sinit>
 8009252:	4b2e      	ldr	r3, [pc, #184]	; (800930c <__swsetup_r+0xd0>)
 8009254:	429c      	cmp	r4, r3
 8009256:	d10f      	bne.n	8009278 <__swsetup_r+0x3c>
 8009258:	686c      	ldr	r4, [r5, #4]
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009260:	0719      	lsls	r1, r3, #28
 8009262:	d42c      	bmi.n	80092be <__swsetup_r+0x82>
 8009264:	06dd      	lsls	r5, r3, #27
 8009266:	d411      	bmi.n	800928c <__swsetup_r+0x50>
 8009268:	2309      	movs	r3, #9
 800926a:	6033      	str	r3, [r6, #0]
 800926c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009270:	81a3      	strh	r3, [r4, #12]
 8009272:	f04f 30ff 	mov.w	r0, #4294967295
 8009276:	e03e      	b.n	80092f6 <__swsetup_r+0xba>
 8009278:	4b25      	ldr	r3, [pc, #148]	; (8009310 <__swsetup_r+0xd4>)
 800927a:	429c      	cmp	r4, r3
 800927c:	d101      	bne.n	8009282 <__swsetup_r+0x46>
 800927e:	68ac      	ldr	r4, [r5, #8]
 8009280:	e7eb      	b.n	800925a <__swsetup_r+0x1e>
 8009282:	4b24      	ldr	r3, [pc, #144]	; (8009314 <__swsetup_r+0xd8>)
 8009284:	429c      	cmp	r4, r3
 8009286:	bf08      	it	eq
 8009288:	68ec      	ldreq	r4, [r5, #12]
 800928a:	e7e6      	b.n	800925a <__swsetup_r+0x1e>
 800928c:	0758      	lsls	r0, r3, #29
 800928e:	d512      	bpl.n	80092b6 <__swsetup_r+0x7a>
 8009290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009292:	b141      	cbz	r1, 80092a6 <__swsetup_r+0x6a>
 8009294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009298:	4299      	cmp	r1, r3
 800929a:	d002      	beq.n	80092a2 <__swsetup_r+0x66>
 800929c:	4630      	mov	r0, r6
 800929e:	f001 fc7b 	bl	800ab98 <_free_r>
 80092a2:	2300      	movs	r3, #0
 80092a4:	6363      	str	r3, [r4, #52]	; 0x34
 80092a6:	89a3      	ldrh	r3, [r4, #12]
 80092a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	2300      	movs	r3, #0
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	6923      	ldr	r3, [r4, #16]
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f043 0308 	orr.w	r3, r3, #8
 80092bc:	81a3      	strh	r3, [r4, #12]
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	b94b      	cbnz	r3, 80092d6 <__swsetup_r+0x9a>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80092c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092cc:	d003      	beq.n	80092d6 <__swsetup_r+0x9a>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4630      	mov	r0, r6
 80092d2:	f001 f87f 	bl	800a3d4 <__smakebuf_r>
 80092d6:	89a0      	ldrh	r0, [r4, #12]
 80092d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80092dc:	f010 0301 	ands.w	r3, r0, #1
 80092e0:	d00a      	beq.n	80092f8 <__swsetup_r+0xbc>
 80092e2:	2300      	movs	r3, #0
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	6963      	ldr	r3, [r4, #20]
 80092e8:	425b      	negs	r3, r3
 80092ea:	61a3      	str	r3, [r4, #24]
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	b943      	cbnz	r3, 8009302 <__swsetup_r+0xc6>
 80092f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80092f4:	d1ba      	bne.n	800926c <__swsetup_r+0x30>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	0781      	lsls	r1, r0, #30
 80092fa:	bf58      	it	pl
 80092fc:	6963      	ldrpl	r3, [r4, #20]
 80092fe:	60a3      	str	r3, [r4, #8]
 8009300:	e7f4      	b.n	80092ec <__swsetup_r+0xb0>
 8009302:	2000      	movs	r0, #0
 8009304:	e7f7      	b.n	80092f6 <__swsetup_r+0xba>
 8009306:	bf00      	nop
 8009308:	20000020 	.word	0x20000020
 800930c:	0800ba64 	.word	0x0800ba64
 8009310:	0800ba84 	.word	0x0800ba84
 8009314:	0800ba44 	.word	0x0800ba44

08009318 <quorem>:
 8009318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	6903      	ldr	r3, [r0, #16]
 800931e:	690c      	ldr	r4, [r1, #16]
 8009320:	42a3      	cmp	r3, r4
 8009322:	4607      	mov	r7, r0
 8009324:	f2c0 8081 	blt.w	800942a <quorem+0x112>
 8009328:	3c01      	subs	r4, #1
 800932a:	f101 0814 	add.w	r8, r1, #20
 800932e:	f100 0514 	add.w	r5, r0, #20
 8009332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800933c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009340:	3301      	adds	r3, #1
 8009342:	429a      	cmp	r2, r3
 8009344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800934c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009350:	d331      	bcc.n	80093b6 <quorem+0x9e>
 8009352:	f04f 0e00 	mov.w	lr, #0
 8009356:	4640      	mov	r0, r8
 8009358:	46ac      	mov	ip, r5
 800935a:	46f2      	mov	sl, lr
 800935c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009360:	b293      	uxth	r3, r2
 8009362:	fb06 e303 	mla	r3, r6, r3, lr
 8009366:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800936a:	b29b      	uxth	r3, r3
 800936c:	ebaa 0303 	sub.w	r3, sl, r3
 8009370:	f8dc a000 	ldr.w	sl, [ip]
 8009374:	0c12      	lsrs	r2, r2, #16
 8009376:	fa13 f38a 	uxtah	r3, r3, sl
 800937a:	fb06 e202 	mla	r2, r6, r2, lr
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	9b00      	ldr	r3, [sp, #0]
 8009382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009386:	b292      	uxth	r2, r2
 8009388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800938c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009390:	f8bd 3000 	ldrh.w	r3, [sp]
 8009394:	4581      	cmp	r9, r0
 8009396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800939a:	f84c 3b04 	str.w	r3, [ip], #4
 800939e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093a2:	d2db      	bcs.n	800935c <quorem+0x44>
 80093a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80093a8:	b92b      	cbnz	r3, 80093b6 <quorem+0x9e>
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	3b04      	subs	r3, #4
 80093ae:	429d      	cmp	r5, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	d32e      	bcc.n	8009412 <quorem+0xfa>
 80093b4:	613c      	str	r4, [r7, #16]
 80093b6:	4638      	mov	r0, r7
 80093b8:	f001 fad6 	bl	800a968 <__mcmp>
 80093bc:	2800      	cmp	r0, #0
 80093be:	db24      	blt.n	800940a <quorem+0xf2>
 80093c0:	3601      	adds	r6, #1
 80093c2:	4628      	mov	r0, r5
 80093c4:	f04f 0c00 	mov.w	ip, #0
 80093c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80093cc:	f8d0 e000 	ldr.w	lr, [r0]
 80093d0:	b293      	uxth	r3, r2
 80093d2:	ebac 0303 	sub.w	r3, ip, r3
 80093d6:	0c12      	lsrs	r2, r2, #16
 80093d8:	fa13 f38e 	uxtah	r3, r3, lr
 80093dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80093e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ea:	45c1      	cmp	r9, r8
 80093ec:	f840 3b04 	str.w	r3, [r0], #4
 80093f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093f4:	d2e8      	bcs.n	80093c8 <quorem+0xb0>
 80093f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093fe:	b922      	cbnz	r2, 800940a <quorem+0xf2>
 8009400:	3b04      	subs	r3, #4
 8009402:	429d      	cmp	r5, r3
 8009404:	461a      	mov	r2, r3
 8009406:	d30a      	bcc.n	800941e <quorem+0x106>
 8009408:	613c      	str	r4, [r7, #16]
 800940a:	4630      	mov	r0, r6
 800940c:	b003      	add	sp, #12
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	6812      	ldr	r2, [r2, #0]
 8009414:	3b04      	subs	r3, #4
 8009416:	2a00      	cmp	r2, #0
 8009418:	d1cc      	bne.n	80093b4 <quorem+0x9c>
 800941a:	3c01      	subs	r4, #1
 800941c:	e7c7      	b.n	80093ae <quorem+0x96>
 800941e:	6812      	ldr	r2, [r2, #0]
 8009420:	3b04      	subs	r3, #4
 8009422:	2a00      	cmp	r2, #0
 8009424:	d1f0      	bne.n	8009408 <quorem+0xf0>
 8009426:	3c01      	subs	r4, #1
 8009428:	e7eb      	b.n	8009402 <quorem+0xea>
 800942a:	2000      	movs	r0, #0
 800942c:	e7ee      	b.n	800940c <quorem+0xf4>
	...

08009430 <_dtoa_r>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	ed2d 8b04 	vpush	{d8-d9}
 8009438:	ec57 6b10 	vmov	r6, r7, d0
 800943c:	b093      	sub	sp, #76	; 0x4c
 800943e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009444:	9106      	str	r1, [sp, #24]
 8009446:	ee10 aa10 	vmov	sl, s0
 800944a:	4604      	mov	r4, r0
 800944c:	9209      	str	r2, [sp, #36]	; 0x24
 800944e:	930c      	str	r3, [sp, #48]	; 0x30
 8009450:	46bb      	mov	fp, r7
 8009452:	b975      	cbnz	r5, 8009472 <_dtoa_r+0x42>
 8009454:	2010      	movs	r0, #16
 8009456:	f000 fffd 	bl	800a454 <malloc>
 800945a:	4602      	mov	r2, r0
 800945c:	6260      	str	r0, [r4, #36]	; 0x24
 800945e:	b920      	cbnz	r0, 800946a <_dtoa_r+0x3a>
 8009460:	4ba7      	ldr	r3, [pc, #668]	; (8009700 <_dtoa_r+0x2d0>)
 8009462:	21ea      	movs	r1, #234	; 0xea
 8009464:	48a7      	ldr	r0, [pc, #668]	; (8009704 <_dtoa_r+0x2d4>)
 8009466:	f001 ff93 	bl	800b390 <__assert_func>
 800946a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800946e:	6005      	str	r5, [r0, #0]
 8009470:	60c5      	str	r5, [r0, #12]
 8009472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009474:	6819      	ldr	r1, [r3, #0]
 8009476:	b151      	cbz	r1, 800948e <_dtoa_r+0x5e>
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	604a      	str	r2, [r1, #4]
 800947c:	2301      	movs	r3, #1
 800947e:	4093      	lsls	r3, r2
 8009480:	608b      	str	r3, [r1, #8]
 8009482:	4620      	mov	r0, r4
 8009484:	f001 f82e 	bl	800a4e4 <_Bfree>
 8009488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800948a:	2200      	movs	r2, #0
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	1e3b      	subs	r3, r7, #0
 8009490:	bfaa      	itet	ge
 8009492:	2300      	movge	r3, #0
 8009494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009498:	f8c8 3000 	strge.w	r3, [r8]
 800949c:	4b9a      	ldr	r3, [pc, #616]	; (8009708 <_dtoa_r+0x2d8>)
 800949e:	bfbc      	itt	lt
 80094a0:	2201      	movlt	r2, #1
 80094a2:	f8c8 2000 	strlt.w	r2, [r8]
 80094a6:	ea33 030b 	bics.w	r3, r3, fp
 80094aa:	d11b      	bne.n	80094e4 <_dtoa_r+0xb4>
 80094ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094b8:	4333      	orrs	r3, r6
 80094ba:	f000 8592 	beq.w	8009fe2 <_dtoa_r+0xbb2>
 80094be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094c0:	b963      	cbnz	r3, 80094dc <_dtoa_r+0xac>
 80094c2:	4b92      	ldr	r3, [pc, #584]	; (800970c <_dtoa_r+0x2dc>)
 80094c4:	e022      	b.n	800950c <_dtoa_r+0xdc>
 80094c6:	4b92      	ldr	r3, [pc, #584]	; (8009710 <_dtoa_r+0x2e0>)
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	3308      	adds	r3, #8
 80094cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	9801      	ldr	r0, [sp, #4]
 80094d2:	b013      	add	sp, #76	; 0x4c
 80094d4:	ecbd 8b04 	vpop	{d8-d9}
 80094d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094dc:	4b8b      	ldr	r3, [pc, #556]	; (800970c <_dtoa_r+0x2dc>)
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	3303      	adds	r3, #3
 80094e2:	e7f3      	b.n	80094cc <_dtoa_r+0x9c>
 80094e4:	2200      	movs	r2, #0
 80094e6:	2300      	movs	r3, #0
 80094e8:	4650      	mov	r0, sl
 80094ea:	4659      	mov	r1, fp
 80094ec:	f7f7 faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80094f0:	ec4b ab19 	vmov	d9, sl, fp
 80094f4:	4680      	mov	r8, r0
 80094f6:	b158      	cbz	r0, 8009510 <_dtoa_r+0xe0>
 80094f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094fa:	2301      	movs	r3, #1
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 856b 	beq.w	8009fdc <_dtoa_r+0xbac>
 8009506:	4883      	ldr	r0, [pc, #524]	; (8009714 <_dtoa_r+0x2e4>)
 8009508:	6018      	str	r0, [r3, #0]
 800950a:	1e43      	subs	r3, r0, #1
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	e7df      	b.n	80094d0 <_dtoa_r+0xa0>
 8009510:	ec4b ab10 	vmov	d0, sl, fp
 8009514:	aa10      	add	r2, sp, #64	; 0x40
 8009516:	a911      	add	r1, sp, #68	; 0x44
 8009518:	4620      	mov	r0, r4
 800951a:	f001 facb 	bl	800aab4 <__d2b>
 800951e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009522:	ee08 0a10 	vmov	s16, r0
 8009526:	2d00      	cmp	r5, #0
 8009528:	f000 8084 	beq.w	8009634 <_dtoa_r+0x204>
 800952c:	ee19 3a90 	vmov	r3, s19
 8009530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009538:	4656      	mov	r6, sl
 800953a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800953e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009546:	4b74      	ldr	r3, [pc, #464]	; (8009718 <_dtoa_r+0x2e8>)
 8009548:	2200      	movs	r2, #0
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7f6 fea3 	bl	8000298 <__aeabi_dsub>
 8009552:	a365      	add	r3, pc, #404	; (adr r3, 80096e8 <_dtoa_r+0x2b8>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f7 f856 	bl	8000608 <__aeabi_dmul>
 800955c:	a364      	add	r3, pc, #400	; (adr r3, 80096f0 <_dtoa_r+0x2c0>)
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f7f6 fe9b 	bl	800029c <__adddf3>
 8009566:	4606      	mov	r6, r0
 8009568:	4628      	mov	r0, r5
 800956a:	460f      	mov	r7, r1
 800956c:	f7f6 ffe2 	bl	8000534 <__aeabi_i2d>
 8009570:	a361      	add	r3, pc, #388	; (adr r3, 80096f8 <_dtoa_r+0x2c8>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7f7 f847 	bl	8000608 <__aeabi_dmul>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4630      	mov	r0, r6
 8009580:	4639      	mov	r1, r7
 8009582:	f7f6 fe8b 	bl	800029c <__adddf3>
 8009586:	4606      	mov	r6, r0
 8009588:	460f      	mov	r7, r1
 800958a:	f7f7 faed 	bl	8000b68 <__aeabi_d2iz>
 800958e:	2200      	movs	r2, #0
 8009590:	9000      	str	r0, [sp, #0]
 8009592:	2300      	movs	r3, #0
 8009594:	4630      	mov	r0, r6
 8009596:	4639      	mov	r1, r7
 8009598:	f7f7 faa8 	bl	8000aec <__aeabi_dcmplt>
 800959c:	b150      	cbz	r0, 80095b4 <_dtoa_r+0x184>
 800959e:	9800      	ldr	r0, [sp, #0]
 80095a0:	f7f6 ffc8 	bl	8000534 <__aeabi_i2d>
 80095a4:	4632      	mov	r2, r6
 80095a6:	463b      	mov	r3, r7
 80095a8:	f7f7 fa96 	bl	8000ad8 <__aeabi_dcmpeq>
 80095ac:	b910      	cbnz	r0, 80095b4 <_dtoa_r+0x184>
 80095ae:	9b00      	ldr	r3, [sp, #0]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	9b00      	ldr	r3, [sp, #0]
 80095b6:	2b16      	cmp	r3, #22
 80095b8:	d85a      	bhi.n	8009670 <_dtoa_r+0x240>
 80095ba:	9a00      	ldr	r2, [sp, #0]
 80095bc:	4b57      	ldr	r3, [pc, #348]	; (800971c <_dtoa_r+0x2ec>)
 80095be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	ec51 0b19 	vmov	r0, r1, d9
 80095ca:	f7f7 fa8f 	bl	8000aec <__aeabi_dcmplt>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d050      	beq.n	8009674 <_dtoa_r+0x244>
 80095d2:	9b00      	ldr	r3, [sp, #0]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	2300      	movs	r3, #0
 80095da:	930b      	str	r3, [sp, #44]	; 0x2c
 80095dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095de:	1b5d      	subs	r5, r3, r5
 80095e0:	1e6b      	subs	r3, r5, #1
 80095e2:	9305      	str	r3, [sp, #20]
 80095e4:	bf45      	ittet	mi
 80095e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80095ea:	9304      	strmi	r3, [sp, #16]
 80095ec:	2300      	movpl	r3, #0
 80095ee:	2300      	movmi	r3, #0
 80095f0:	bf4c      	ite	mi
 80095f2:	9305      	strmi	r3, [sp, #20]
 80095f4:	9304      	strpl	r3, [sp, #16]
 80095f6:	9b00      	ldr	r3, [sp, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	db3d      	blt.n	8009678 <_dtoa_r+0x248>
 80095fc:	9b05      	ldr	r3, [sp, #20]
 80095fe:	9a00      	ldr	r2, [sp, #0]
 8009600:	920a      	str	r2, [sp, #40]	; 0x28
 8009602:	4413      	add	r3, r2
 8009604:	9305      	str	r3, [sp, #20]
 8009606:	2300      	movs	r3, #0
 8009608:	9307      	str	r3, [sp, #28]
 800960a:	9b06      	ldr	r3, [sp, #24]
 800960c:	2b09      	cmp	r3, #9
 800960e:	f200 8089 	bhi.w	8009724 <_dtoa_r+0x2f4>
 8009612:	2b05      	cmp	r3, #5
 8009614:	bfc4      	itt	gt
 8009616:	3b04      	subgt	r3, #4
 8009618:	9306      	strgt	r3, [sp, #24]
 800961a:	9b06      	ldr	r3, [sp, #24]
 800961c:	f1a3 0302 	sub.w	r3, r3, #2
 8009620:	bfcc      	ite	gt
 8009622:	2500      	movgt	r5, #0
 8009624:	2501      	movle	r5, #1
 8009626:	2b03      	cmp	r3, #3
 8009628:	f200 8087 	bhi.w	800973a <_dtoa_r+0x30a>
 800962c:	e8df f003 	tbb	[pc, r3]
 8009630:	59383a2d 	.word	0x59383a2d
 8009634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009638:	441d      	add	r5, r3
 800963a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800963e:	2b20      	cmp	r3, #32
 8009640:	bfc1      	itttt	gt
 8009642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800964a:	fa0b f303 	lslgt.w	r3, fp, r3
 800964e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009652:	bfda      	itte	le
 8009654:	f1c3 0320 	rsble	r3, r3, #32
 8009658:	fa06 f003 	lslle.w	r0, r6, r3
 800965c:	4318      	orrgt	r0, r3
 800965e:	f7f6 ff59 	bl	8000514 <__aeabi_ui2d>
 8009662:	2301      	movs	r3, #1
 8009664:	4606      	mov	r6, r0
 8009666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800966a:	3d01      	subs	r5, #1
 800966c:	930e      	str	r3, [sp, #56]	; 0x38
 800966e:	e76a      	b.n	8009546 <_dtoa_r+0x116>
 8009670:	2301      	movs	r3, #1
 8009672:	e7b2      	b.n	80095da <_dtoa_r+0x1aa>
 8009674:	900b      	str	r0, [sp, #44]	; 0x2c
 8009676:	e7b1      	b.n	80095dc <_dtoa_r+0x1ac>
 8009678:	9b04      	ldr	r3, [sp, #16]
 800967a:	9a00      	ldr	r2, [sp, #0]
 800967c:	1a9b      	subs	r3, r3, r2
 800967e:	9304      	str	r3, [sp, #16]
 8009680:	4253      	negs	r3, r2
 8009682:	9307      	str	r3, [sp, #28]
 8009684:	2300      	movs	r3, #0
 8009686:	930a      	str	r3, [sp, #40]	; 0x28
 8009688:	e7bf      	b.n	800960a <_dtoa_r+0x1da>
 800968a:	2300      	movs	r3, #0
 800968c:	9308      	str	r3, [sp, #32]
 800968e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	dc55      	bgt.n	8009740 <_dtoa_r+0x310>
 8009694:	2301      	movs	r3, #1
 8009696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800969a:	461a      	mov	r2, r3
 800969c:	9209      	str	r2, [sp, #36]	; 0x24
 800969e:	e00c      	b.n	80096ba <_dtoa_r+0x28a>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e7f3      	b.n	800968c <_dtoa_r+0x25c>
 80096a4:	2300      	movs	r3, #0
 80096a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a8:	9308      	str	r3, [sp, #32]
 80096aa:	9b00      	ldr	r3, [sp, #0]
 80096ac:	4413      	add	r3, r2
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	3301      	adds	r3, #1
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	bfb8      	it	lt
 80096b8:	2301      	movlt	r3, #1
 80096ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096bc:	2200      	movs	r2, #0
 80096be:	6042      	str	r2, [r0, #4]
 80096c0:	2204      	movs	r2, #4
 80096c2:	f102 0614 	add.w	r6, r2, #20
 80096c6:	429e      	cmp	r6, r3
 80096c8:	6841      	ldr	r1, [r0, #4]
 80096ca:	d93d      	bls.n	8009748 <_dtoa_r+0x318>
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 fec9 	bl	800a464 <_Balloc>
 80096d2:	9001      	str	r0, [sp, #4]
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d13b      	bne.n	8009750 <_dtoa_r+0x320>
 80096d8:	4b11      	ldr	r3, [pc, #68]	; (8009720 <_dtoa_r+0x2f0>)
 80096da:	4602      	mov	r2, r0
 80096dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80096e0:	e6c0      	b.n	8009464 <_dtoa_r+0x34>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e7df      	b.n	80096a6 <_dtoa_r+0x276>
 80096e6:	bf00      	nop
 80096e8:	636f4361 	.word	0x636f4361
 80096ec:	3fd287a7 	.word	0x3fd287a7
 80096f0:	8b60c8b3 	.word	0x8b60c8b3
 80096f4:	3fc68a28 	.word	0x3fc68a28
 80096f8:	509f79fb 	.word	0x509f79fb
 80096fc:	3fd34413 	.word	0x3fd34413
 8009700:	0800b9c1 	.word	0x0800b9c1
 8009704:	0800b9d8 	.word	0x0800b9d8
 8009708:	7ff00000 	.word	0x7ff00000
 800970c:	0800b9bd 	.word	0x0800b9bd
 8009710:	0800b9b4 	.word	0x0800b9b4
 8009714:	0800b991 	.word	0x0800b991
 8009718:	3ff80000 	.word	0x3ff80000
 800971c:	0800bb28 	.word	0x0800bb28
 8009720:	0800ba33 	.word	0x0800ba33
 8009724:	2501      	movs	r5, #1
 8009726:	2300      	movs	r3, #0
 8009728:	9306      	str	r3, [sp, #24]
 800972a:	9508      	str	r5, [sp, #32]
 800972c:	f04f 33ff 	mov.w	r3, #4294967295
 8009730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009734:	2200      	movs	r2, #0
 8009736:	2312      	movs	r3, #18
 8009738:	e7b0      	b.n	800969c <_dtoa_r+0x26c>
 800973a:	2301      	movs	r3, #1
 800973c:	9308      	str	r3, [sp, #32]
 800973e:	e7f5      	b.n	800972c <_dtoa_r+0x2fc>
 8009740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009746:	e7b8      	b.n	80096ba <_dtoa_r+0x28a>
 8009748:	3101      	adds	r1, #1
 800974a:	6041      	str	r1, [r0, #4]
 800974c:	0052      	lsls	r2, r2, #1
 800974e:	e7b8      	b.n	80096c2 <_dtoa_r+0x292>
 8009750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009752:	9a01      	ldr	r2, [sp, #4]
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	9b03      	ldr	r3, [sp, #12]
 8009758:	2b0e      	cmp	r3, #14
 800975a:	f200 809d 	bhi.w	8009898 <_dtoa_r+0x468>
 800975e:	2d00      	cmp	r5, #0
 8009760:	f000 809a 	beq.w	8009898 <_dtoa_r+0x468>
 8009764:	9b00      	ldr	r3, [sp, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	dd32      	ble.n	80097d0 <_dtoa_r+0x3a0>
 800976a:	4ab7      	ldr	r2, [pc, #732]	; (8009a48 <_dtoa_r+0x618>)
 800976c:	f003 030f 	and.w	r3, r3, #15
 8009770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009778:	9b00      	ldr	r3, [sp, #0]
 800977a:	05d8      	lsls	r0, r3, #23
 800977c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009780:	d516      	bpl.n	80097b0 <_dtoa_r+0x380>
 8009782:	4bb2      	ldr	r3, [pc, #712]	; (8009a4c <_dtoa_r+0x61c>)
 8009784:	ec51 0b19 	vmov	r0, r1, d9
 8009788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800978c:	f7f7 f866 	bl	800085c <__aeabi_ddiv>
 8009790:	f007 070f 	and.w	r7, r7, #15
 8009794:	4682      	mov	sl, r0
 8009796:	468b      	mov	fp, r1
 8009798:	2503      	movs	r5, #3
 800979a:	4eac      	ldr	r6, [pc, #688]	; (8009a4c <_dtoa_r+0x61c>)
 800979c:	b957      	cbnz	r7, 80097b4 <_dtoa_r+0x384>
 800979e:	4642      	mov	r2, r8
 80097a0:	464b      	mov	r3, r9
 80097a2:	4650      	mov	r0, sl
 80097a4:	4659      	mov	r1, fp
 80097a6:	f7f7 f859 	bl	800085c <__aeabi_ddiv>
 80097aa:	4682      	mov	sl, r0
 80097ac:	468b      	mov	fp, r1
 80097ae:	e028      	b.n	8009802 <_dtoa_r+0x3d2>
 80097b0:	2502      	movs	r5, #2
 80097b2:	e7f2      	b.n	800979a <_dtoa_r+0x36a>
 80097b4:	07f9      	lsls	r1, r7, #31
 80097b6:	d508      	bpl.n	80097ca <_dtoa_r+0x39a>
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097c0:	f7f6 ff22 	bl	8000608 <__aeabi_dmul>
 80097c4:	3501      	adds	r5, #1
 80097c6:	4680      	mov	r8, r0
 80097c8:	4689      	mov	r9, r1
 80097ca:	107f      	asrs	r7, r7, #1
 80097cc:	3608      	adds	r6, #8
 80097ce:	e7e5      	b.n	800979c <_dtoa_r+0x36c>
 80097d0:	f000 809b 	beq.w	800990a <_dtoa_r+0x4da>
 80097d4:	9b00      	ldr	r3, [sp, #0]
 80097d6:	4f9d      	ldr	r7, [pc, #628]	; (8009a4c <_dtoa_r+0x61c>)
 80097d8:	425e      	negs	r6, r3
 80097da:	4b9b      	ldr	r3, [pc, #620]	; (8009a48 <_dtoa_r+0x618>)
 80097dc:	f006 020f 	and.w	r2, r6, #15
 80097e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e8:	ec51 0b19 	vmov	r0, r1, d9
 80097ec:	f7f6 ff0c 	bl	8000608 <__aeabi_dmul>
 80097f0:	1136      	asrs	r6, r6, #4
 80097f2:	4682      	mov	sl, r0
 80097f4:	468b      	mov	fp, r1
 80097f6:	2300      	movs	r3, #0
 80097f8:	2502      	movs	r5, #2
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	d17a      	bne.n	80098f4 <_dtoa_r+0x4c4>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1d3      	bne.n	80097aa <_dtoa_r+0x37a>
 8009802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8082 	beq.w	800990e <_dtoa_r+0x4de>
 800980a:	4b91      	ldr	r3, [pc, #580]	; (8009a50 <_dtoa_r+0x620>)
 800980c:	2200      	movs	r2, #0
 800980e:	4650      	mov	r0, sl
 8009810:	4659      	mov	r1, fp
 8009812:	f7f7 f96b 	bl	8000aec <__aeabi_dcmplt>
 8009816:	2800      	cmp	r0, #0
 8009818:	d079      	beq.n	800990e <_dtoa_r+0x4de>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d076      	beq.n	800990e <_dtoa_r+0x4de>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	dd36      	ble.n	8009894 <_dtoa_r+0x464>
 8009826:	9b00      	ldr	r3, [sp, #0]
 8009828:	4650      	mov	r0, sl
 800982a:	4659      	mov	r1, fp
 800982c:	1e5f      	subs	r7, r3, #1
 800982e:	2200      	movs	r2, #0
 8009830:	4b88      	ldr	r3, [pc, #544]	; (8009a54 <_dtoa_r+0x624>)
 8009832:	f7f6 fee9 	bl	8000608 <__aeabi_dmul>
 8009836:	9e02      	ldr	r6, [sp, #8]
 8009838:	4682      	mov	sl, r0
 800983a:	468b      	mov	fp, r1
 800983c:	3501      	adds	r5, #1
 800983e:	4628      	mov	r0, r5
 8009840:	f7f6 fe78 	bl	8000534 <__aeabi_i2d>
 8009844:	4652      	mov	r2, sl
 8009846:	465b      	mov	r3, fp
 8009848:	f7f6 fede 	bl	8000608 <__aeabi_dmul>
 800984c:	4b82      	ldr	r3, [pc, #520]	; (8009a58 <_dtoa_r+0x628>)
 800984e:	2200      	movs	r2, #0
 8009850:	f7f6 fd24 	bl	800029c <__adddf3>
 8009854:	46d0      	mov	r8, sl
 8009856:	46d9      	mov	r9, fp
 8009858:	4682      	mov	sl, r0
 800985a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800985e:	2e00      	cmp	r6, #0
 8009860:	d158      	bne.n	8009914 <_dtoa_r+0x4e4>
 8009862:	4b7e      	ldr	r3, [pc, #504]	; (8009a5c <_dtoa_r+0x62c>)
 8009864:	2200      	movs	r2, #0
 8009866:	4640      	mov	r0, r8
 8009868:	4649      	mov	r1, r9
 800986a:	f7f6 fd15 	bl	8000298 <__aeabi_dsub>
 800986e:	4652      	mov	r2, sl
 8009870:	465b      	mov	r3, fp
 8009872:	4680      	mov	r8, r0
 8009874:	4689      	mov	r9, r1
 8009876:	f7f7 f957 	bl	8000b28 <__aeabi_dcmpgt>
 800987a:	2800      	cmp	r0, #0
 800987c:	f040 8295 	bne.w	8009daa <_dtoa_r+0x97a>
 8009880:	4652      	mov	r2, sl
 8009882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009886:	4640      	mov	r0, r8
 8009888:	4649      	mov	r1, r9
 800988a:	f7f7 f92f 	bl	8000aec <__aeabi_dcmplt>
 800988e:	2800      	cmp	r0, #0
 8009890:	f040 8289 	bne.w	8009da6 <_dtoa_r+0x976>
 8009894:	ec5b ab19 	vmov	sl, fp, d9
 8009898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800989a:	2b00      	cmp	r3, #0
 800989c:	f2c0 8148 	blt.w	8009b30 <_dtoa_r+0x700>
 80098a0:	9a00      	ldr	r2, [sp, #0]
 80098a2:	2a0e      	cmp	r2, #14
 80098a4:	f300 8144 	bgt.w	8009b30 <_dtoa_r+0x700>
 80098a8:	4b67      	ldr	r3, [pc, #412]	; (8009a48 <_dtoa_r+0x618>)
 80098aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f280 80d5 	bge.w	8009a64 <_dtoa_r+0x634>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f300 80d1 	bgt.w	8009a64 <_dtoa_r+0x634>
 80098c2:	f040 826f 	bne.w	8009da4 <_dtoa_r+0x974>
 80098c6:	4b65      	ldr	r3, [pc, #404]	; (8009a5c <_dtoa_r+0x62c>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	4640      	mov	r0, r8
 80098cc:	4649      	mov	r1, r9
 80098ce:	f7f6 fe9b 	bl	8000608 <__aeabi_dmul>
 80098d2:	4652      	mov	r2, sl
 80098d4:	465b      	mov	r3, fp
 80098d6:	f7f7 f91d 	bl	8000b14 <__aeabi_dcmpge>
 80098da:	9e03      	ldr	r6, [sp, #12]
 80098dc:	4637      	mov	r7, r6
 80098de:	2800      	cmp	r0, #0
 80098e0:	f040 8245 	bne.w	8009d6e <_dtoa_r+0x93e>
 80098e4:	9d01      	ldr	r5, [sp, #4]
 80098e6:	2331      	movs	r3, #49	; 0x31
 80098e8:	f805 3b01 	strb.w	r3, [r5], #1
 80098ec:	9b00      	ldr	r3, [sp, #0]
 80098ee:	3301      	adds	r3, #1
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	e240      	b.n	8009d76 <_dtoa_r+0x946>
 80098f4:	07f2      	lsls	r2, r6, #31
 80098f6:	d505      	bpl.n	8009904 <_dtoa_r+0x4d4>
 80098f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098fc:	f7f6 fe84 	bl	8000608 <__aeabi_dmul>
 8009900:	3501      	adds	r5, #1
 8009902:	2301      	movs	r3, #1
 8009904:	1076      	asrs	r6, r6, #1
 8009906:	3708      	adds	r7, #8
 8009908:	e777      	b.n	80097fa <_dtoa_r+0x3ca>
 800990a:	2502      	movs	r5, #2
 800990c:	e779      	b.n	8009802 <_dtoa_r+0x3d2>
 800990e:	9f00      	ldr	r7, [sp, #0]
 8009910:	9e03      	ldr	r6, [sp, #12]
 8009912:	e794      	b.n	800983e <_dtoa_r+0x40e>
 8009914:	9901      	ldr	r1, [sp, #4]
 8009916:	4b4c      	ldr	r3, [pc, #304]	; (8009a48 <_dtoa_r+0x618>)
 8009918:	4431      	add	r1, r6
 800991a:	910d      	str	r1, [sp, #52]	; 0x34
 800991c:	9908      	ldr	r1, [sp, #32]
 800991e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009926:	2900      	cmp	r1, #0
 8009928:	d043      	beq.n	80099b2 <_dtoa_r+0x582>
 800992a:	494d      	ldr	r1, [pc, #308]	; (8009a60 <_dtoa_r+0x630>)
 800992c:	2000      	movs	r0, #0
 800992e:	f7f6 ff95 	bl	800085c <__aeabi_ddiv>
 8009932:	4652      	mov	r2, sl
 8009934:	465b      	mov	r3, fp
 8009936:	f7f6 fcaf 	bl	8000298 <__aeabi_dsub>
 800993a:	9d01      	ldr	r5, [sp, #4]
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	4649      	mov	r1, r9
 8009942:	4640      	mov	r0, r8
 8009944:	f7f7 f910 	bl	8000b68 <__aeabi_d2iz>
 8009948:	4606      	mov	r6, r0
 800994a:	f7f6 fdf3 	bl	8000534 <__aeabi_i2d>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	4640      	mov	r0, r8
 8009954:	4649      	mov	r1, r9
 8009956:	f7f6 fc9f 	bl	8000298 <__aeabi_dsub>
 800995a:	3630      	adds	r6, #48	; 0x30
 800995c:	f805 6b01 	strb.w	r6, [r5], #1
 8009960:	4652      	mov	r2, sl
 8009962:	465b      	mov	r3, fp
 8009964:	4680      	mov	r8, r0
 8009966:	4689      	mov	r9, r1
 8009968:	f7f7 f8c0 	bl	8000aec <__aeabi_dcmplt>
 800996c:	2800      	cmp	r0, #0
 800996e:	d163      	bne.n	8009a38 <_dtoa_r+0x608>
 8009970:	4642      	mov	r2, r8
 8009972:	464b      	mov	r3, r9
 8009974:	4936      	ldr	r1, [pc, #216]	; (8009a50 <_dtoa_r+0x620>)
 8009976:	2000      	movs	r0, #0
 8009978:	f7f6 fc8e 	bl	8000298 <__aeabi_dsub>
 800997c:	4652      	mov	r2, sl
 800997e:	465b      	mov	r3, fp
 8009980:	f7f7 f8b4 	bl	8000aec <__aeabi_dcmplt>
 8009984:	2800      	cmp	r0, #0
 8009986:	f040 80b5 	bne.w	8009af4 <_dtoa_r+0x6c4>
 800998a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800998c:	429d      	cmp	r5, r3
 800998e:	d081      	beq.n	8009894 <_dtoa_r+0x464>
 8009990:	4b30      	ldr	r3, [pc, #192]	; (8009a54 <_dtoa_r+0x624>)
 8009992:	2200      	movs	r2, #0
 8009994:	4650      	mov	r0, sl
 8009996:	4659      	mov	r1, fp
 8009998:	f7f6 fe36 	bl	8000608 <__aeabi_dmul>
 800999c:	4b2d      	ldr	r3, [pc, #180]	; (8009a54 <_dtoa_r+0x624>)
 800999e:	4682      	mov	sl, r0
 80099a0:	468b      	mov	fp, r1
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	2200      	movs	r2, #0
 80099a8:	f7f6 fe2e 	bl	8000608 <__aeabi_dmul>
 80099ac:	4680      	mov	r8, r0
 80099ae:	4689      	mov	r9, r1
 80099b0:	e7c6      	b.n	8009940 <_dtoa_r+0x510>
 80099b2:	4650      	mov	r0, sl
 80099b4:	4659      	mov	r1, fp
 80099b6:	f7f6 fe27 	bl	8000608 <__aeabi_dmul>
 80099ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099bc:	9d01      	ldr	r5, [sp, #4]
 80099be:	930f      	str	r3, [sp, #60]	; 0x3c
 80099c0:	4682      	mov	sl, r0
 80099c2:	468b      	mov	fp, r1
 80099c4:	4649      	mov	r1, r9
 80099c6:	4640      	mov	r0, r8
 80099c8:	f7f7 f8ce 	bl	8000b68 <__aeabi_d2iz>
 80099cc:	4606      	mov	r6, r0
 80099ce:	f7f6 fdb1 	bl	8000534 <__aeabi_i2d>
 80099d2:	3630      	adds	r6, #48	; 0x30
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	4640      	mov	r0, r8
 80099da:	4649      	mov	r1, r9
 80099dc:	f7f6 fc5c 	bl	8000298 <__aeabi_dsub>
 80099e0:	f805 6b01 	strb.w	r6, [r5], #1
 80099e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099e6:	429d      	cmp	r5, r3
 80099e8:	4680      	mov	r8, r0
 80099ea:	4689      	mov	r9, r1
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	d124      	bne.n	8009a3c <_dtoa_r+0x60c>
 80099f2:	4b1b      	ldr	r3, [pc, #108]	; (8009a60 <_dtoa_r+0x630>)
 80099f4:	4650      	mov	r0, sl
 80099f6:	4659      	mov	r1, fp
 80099f8:	f7f6 fc50 	bl	800029c <__adddf3>
 80099fc:	4602      	mov	r2, r0
 80099fe:	460b      	mov	r3, r1
 8009a00:	4640      	mov	r0, r8
 8009a02:	4649      	mov	r1, r9
 8009a04:	f7f7 f890 	bl	8000b28 <__aeabi_dcmpgt>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d173      	bne.n	8009af4 <_dtoa_r+0x6c4>
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	465b      	mov	r3, fp
 8009a10:	4913      	ldr	r1, [pc, #76]	; (8009a60 <_dtoa_r+0x630>)
 8009a12:	2000      	movs	r0, #0
 8009a14:	f7f6 fc40 	bl	8000298 <__aeabi_dsub>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	4649      	mov	r1, r9
 8009a20:	f7f7 f864 	bl	8000aec <__aeabi_dcmplt>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f43f af35 	beq.w	8009894 <_dtoa_r+0x464>
 8009a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a2c:	1e6b      	subs	r3, r5, #1
 8009a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a34:	2b30      	cmp	r3, #48	; 0x30
 8009a36:	d0f8      	beq.n	8009a2a <_dtoa_r+0x5fa>
 8009a38:	9700      	str	r7, [sp, #0]
 8009a3a:	e049      	b.n	8009ad0 <_dtoa_r+0x6a0>
 8009a3c:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <_dtoa_r+0x624>)
 8009a3e:	f7f6 fde3 	bl	8000608 <__aeabi_dmul>
 8009a42:	4680      	mov	r8, r0
 8009a44:	4689      	mov	r9, r1
 8009a46:	e7bd      	b.n	80099c4 <_dtoa_r+0x594>
 8009a48:	0800bb28 	.word	0x0800bb28
 8009a4c:	0800bb00 	.word	0x0800bb00
 8009a50:	3ff00000 	.word	0x3ff00000
 8009a54:	40240000 	.word	0x40240000
 8009a58:	401c0000 	.word	0x401c0000
 8009a5c:	40140000 	.word	0x40140000
 8009a60:	3fe00000 	.word	0x3fe00000
 8009a64:	9d01      	ldr	r5, [sp, #4]
 8009a66:	4656      	mov	r6, sl
 8009a68:	465f      	mov	r7, fp
 8009a6a:	4642      	mov	r2, r8
 8009a6c:	464b      	mov	r3, r9
 8009a6e:	4630      	mov	r0, r6
 8009a70:	4639      	mov	r1, r7
 8009a72:	f7f6 fef3 	bl	800085c <__aeabi_ddiv>
 8009a76:	f7f7 f877 	bl	8000b68 <__aeabi_d2iz>
 8009a7a:	4682      	mov	sl, r0
 8009a7c:	f7f6 fd5a 	bl	8000534 <__aeabi_i2d>
 8009a80:	4642      	mov	r2, r8
 8009a82:	464b      	mov	r3, r9
 8009a84:	f7f6 fdc0 	bl	8000608 <__aeabi_dmul>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	4639      	mov	r1, r7
 8009a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a94:	f7f6 fc00 	bl	8000298 <__aeabi_dsub>
 8009a98:	f805 6b01 	strb.w	r6, [r5], #1
 8009a9c:	9e01      	ldr	r6, [sp, #4]
 8009a9e:	9f03      	ldr	r7, [sp, #12]
 8009aa0:	1bae      	subs	r6, r5, r6
 8009aa2:	42b7      	cmp	r7, r6
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	d135      	bne.n	8009b16 <_dtoa_r+0x6e6>
 8009aaa:	f7f6 fbf7 	bl	800029c <__adddf3>
 8009aae:	4642      	mov	r2, r8
 8009ab0:	464b      	mov	r3, r9
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	460f      	mov	r7, r1
 8009ab6:	f7f7 f837 	bl	8000b28 <__aeabi_dcmpgt>
 8009aba:	b9d0      	cbnz	r0, 8009af2 <_dtoa_r+0x6c2>
 8009abc:	4642      	mov	r2, r8
 8009abe:	464b      	mov	r3, r9
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	f7f7 f808 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ac8:	b110      	cbz	r0, 8009ad0 <_dtoa_r+0x6a0>
 8009aca:	f01a 0f01 	tst.w	sl, #1
 8009ace:	d110      	bne.n	8009af2 <_dtoa_r+0x6c2>
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	ee18 1a10 	vmov	r1, s16
 8009ad6:	f000 fd05 	bl	800a4e4 <_Bfree>
 8009ada:	2300      	movs	r3, #0
 8009adc:	9800      	ldr	r0, [sp, #0]
 8009ade:	702b      	strb	r3, [r5, #0]
 8009ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	6018      	str	r0, [r3, #0]
 8009ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f43f acf1 	beq.w	80094d0 <_dtoa_r+0xa0>
 8009aee:	601d      	str	r5, [r3, #0]
 8009af0:	e4ee      	b.n	80094d0 <_dtoa_r+0xa0>
 8009af2:	9f00      	ldr	r7, [sp, #0]
 8009af4:	462b      	mov	r3, r5
 8009af6:	461d      	mov	r5, r3
 8009af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009afc:	2a39      	cmp	r2, #57	; 0x39
 8009afe:	d106      	bne.n	8009b0e <_dtoa_r+0x6de>
 8009b00:	9a01      	ldr	r2, [sp, #4]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d1f7      	bne.n	8009af6 <_dtoa_r+0x6c6>
 8009b06:	9901      	ldr	r1, [sp, #4]
 8009b08:	2230      	movs	r2, #48	; 0x30
 8009b0a:	3701      	adds	r7, #1
 8009b0c:	700a      	strb	r2, [r1, #0]
 8009b0e:	781a      	ldrb	r2, [r3, #0]
 8009b10:	3201      	adds	r2, #1
 8009b12:	701a      	strb	r2, [r3, #0]
 8009b14:	e790      	b.n	8009a38 <_dtoa_r+0x608>
 8009b16:	4ba6      	ldr	r3, [pc, #664]	; (8009db0 <_dtoa_r+0x980>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f7f6 fd75 	bl	8000608 <__aeabi_dmul>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	2300      	movs	r3, #0
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	f7f6 ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d09d      	beq.n	8009a6a <_dtoa_r+0x63a>
 8009b2e:	e7cf      	b.n	8009ad0 <_dtoa_r+0x6a0>
 8009b30:	9a08      	ldr	r2, [sp, #32]
 8009b32:	2a00      	cmp	r2, #0
 8009b34:	f000 80d7 	beq.w	8009ce6 <_dtoa_r+0x8b6>
 8009b38:	9a06      	ldr	r2, [sp, #24]
 8009b3a:	2a01      	cmp	r2, #1
 8009b3c:	f300 80ba 	bgt.w	8009cb4 <_dtoa_r+0x884>
 8009b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b42:	2a00      	cmp	r2, #0
 8009b44:	f000 80b2 	beq.w	8009cac <_dtoa_r+0x87c>
 8009b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b4c:	9e07      	ldr	r6, [sp, #28]
 8009b4e:	9d04      	ldr	r5, [sp, #16]
 8009b50:	9a04      	ldr	r2, [sp, #16]
 8009b52:	441a      	add	r2, r3
 8009b54:	9204      	str	r2, [sp, #16]
 8009b56:	9a05      	ldr	r2, [sp, #20]
 8009b58:	2101      	movs	r1, #1
 8009b5a:	441a      	add	r2, r3
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	9205      	str	r2, [sp, #20]
 8009b60:	f000 fd78 	bl	800a654 <__i2b>
 8009b64:	4607      	mov	r7, r0
 8009b66:	2d00      	cmp	r5, #0
 8009b68:	dd0c      	ble.n	8009b84 <_dtoa_r+0x754>
 8009b6a:	9b05      	ldr	r3, [sp, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dd09      	ble.n	8009b84 <_dtoa_r+0x754>
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	9a04      	ldr	r2, [sp, #16]
 8009b74:	bfa8      	it	ge
 8009b76:	462b      	movge	r3, r5
 8009b78:	1ad2      	subs	r2, r2, r3
 8009b7a:	9204      	str	r2, [sp, #16]
 8009b7c:	9a05      	ldr	r2, [sp, #20]
 8009b7e:	1aed      	subs	r5, r5, r3
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	9305      	str	r3, [sp, #20]
 8009b84:	9b07      	ldr	r3, [sp, #28]
 8009b86:	b31b      	cbz	r3, 8009bd0 <_dtoa_r+0x7a0>
 8009b88:	9b08      	ldr	r3, [sp, #32]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80af 	beq.w	8009cee <_dtoa_r+0x8be>
 8009b90:	2e00      	cmp	r6, #0
 8009b92:	dd13      	ble.n	8009bbc <_dtoa_r+0x78c>
 8009b94:	4639      	mov	r1, r7
 8009b96:	4632      	mov	r2, r6
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fe1b 	bl	800a7d4 <__pow5mult>
 8009b9e:	ee18 2a10 	vmov	r2, s16
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 fd6a 	bl	800a680 <__multiply>
 8009bac:	ee18 1a10 	vmov	r1, s16
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 fc96 	bl	800a4e4 <_Bfree>
 8009bb8:	ee08 8a10 	vmov	s16, r8
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	1b9a      	subs	r2, r3, r6
 8009bc0:	d006      	beq.n	8009bd0 <_dtoa_r+0x7a0>
 8009bc2:	ee18 1a10 	vmov	r1, s16
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fe04 	bl	800a7d4 <__pow5mult>
 8009bcc:	ee08 0a10 	vmov	s16, r0
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 fd3e 	bl	800a654 <__i2b>
 8009bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	4606      	mov	r6, r0
 8009bde:	f340 8088 	ble.w	8009cf2 <_dtoa_r+0x8c2>
 8009be2:	461a      	mov	r2, r3
 8009be4:	4601      	mov	r1, r0
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 fdf4 	bl	800a7d4 <__pow5mult>
 8009bec:	9b06      	ldr	r3, [sp, #24]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	f340 8081 	ble.w	8009cf8 <_dtoa_r+0x8c8>
 8009bf6:	f04f 0800 	mov.w	r8, #0
 8009bfa:	6933      	ldr	r3, [r6, #16]
 8009bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c00:	6918      	ldr	r0, [r3, #16]
 8009c02:	f000 fcd7 	bl	800a5b4 <__hi0bits>
 8009c06:	f1c0 0020 	rsb	r0, r0, #32
 8009c0a:	9b05      	ldr	r3, [sp, #20]
 8009c0c:	4418      	add	r0, r3
 8009c0e:	f010 001f 	ands.w	r0, r0, #31
 8009c12:	f000 8092 	beq.w	8009d3a <_dtoa_r+0x90a>
 8009c16:	f1c0 0320 	rsb	r3, r0, #32
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	f340 808a 	ble.w	8009d34 <_dtoa_r+0x904>
 8009c20:	f1c0 001c 	rsb	r0, r0, #28
 8009c24:	9b04      	ldr	r3, [sp, #16]
 8009c26:	4403      	add	r3, r0
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	9b05      	ldr	r3, [sp, #20]
 8009c2c:	4403      	add	r3, r0
 8009c2e:	4405      	add	r5, r0
 8009c30:	9305      	str	r3, [sp, #20]
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	dd07      	ble.n	8009c48 <_dtoa_r+0x818>
 8009c38:	ee18 1a10 	vmov	r1, s16
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 fe22 	bl	800a888 <__lshift>
 8009c44:	ee08 0a10 	vmov	s16, r0
 8009c48:	9b05      	ldr	r3, [sp, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dd05      	ble.n	8009c5a <_dtoa_r+0x82a>
 8009c4e:	4631      	mov	r1, r6
 8009c50:	461a      	mov	r2, r3
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fe18 	bl	800a888 <__lshift>
 8009c58:	4606      	mov	r6, r0
 8009c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d06e      	beq.n	8009d3e <_dtoa_r+0x90e>
 8009c60:	ee18 0a10 	vmov	r0, s16
 8009c64:	4631      	mov	r1, r6
 8009c66:	f000 fe7f 	bl	800a968 <__mcmp>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	da67      	bge.n	8009d3e <_dtoa_r+0x90e>
 8009c6e:	9b00      	ldr	r3, [sp, #0]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	ee18 1a10 	vmov	r1, s16
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	220a      	movs	r2, #10
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fc53 	bl	800a528 <__multadd>
 8009c82:	9b08      	ldr	r3, [sp, #32]
 8009c84:	ee08 0a10 	vmov	s16, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 81b1 	beq.w	8009ff0 <_dtoa_r+0xbc0>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	4639      	mov	r1, r7
 8009c92:	220a      	movs	r2, #10
 8009c94:	4620      	mov	r0, r4
 8009c96:	f000 fc47 	bl	800a528 <__multadd>
 8009c9a:	9b02      	ldr	r3, [sp, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	f300 808e 	bgt.w	8009dc0 <_dtoa_r+0x990>
 8009ca4:	9b06      	ldr	r3, [sp, #24]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	dc51      	bgt.n	8009d4e <_dtoa_r+0x91e>
 8009caa:	e089      	b.n	8009dc0 <_dtoa_r+0x990>
 8009cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cb2:	e74b      	b.n	8009b4c <_dtoa_r+0x71c>
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	1e5e      	subs	r6, r3, #1
 8009cb8:	9b07      	ldr	r3, [sp, #28]
 8009cba:	42b3      	cmp	r3, r6
 8009cbc:	bfbf      	itttt	lt
 8009cbe:	9b07      	ldrlt	r3, [sp, #28]
 8009cc0:	9607      	strlt	r6, [sp, #28]
 8009cc2:	1af2      	sublt	r2, r6, r3
 8009cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009cc6:	bfb6      	itet	lt
 8009cc8:	189b      	addlt	r3, r3, r2
 8009cca:	1b9e      	subge	r6, r3, r6
 8009ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	bfb8      	it	lt
 8009cd2:	2600      	movlt	r6, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bfb7      	itett	lt
 8009cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ce0:	1a9d      	sublt	r5, r3, r2
 8009ce2:	2300      	movlt	r3, #0
 8009ce4:	e734      	b.n	8009b50 <_dtoa_r+0x720>
 8009ce6:	9e07      	ldr	r6, [sp, #28]
 8009ce8:	9d04      	ldr	r5, [sp, #16]
 8009cea:	9f08      	ldr	r7, [sp, #32]
 8009cec:	e73b      	b.n	8009b66 <_dtoa_r+0x736>
 8009cee:	9a07      	ldr	r2, [sp, #28]
 8009cf0:	e767      	b.n	8009bc2 <_dtoa_r+0x792>
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	dc18      	bgt.n	8009d2a <_dtoa_r+0x8fa>
 8009cf8:	f1ba 0f00 	cmp.w	sl, #0
 8009cfc:	d115      	bne.n	8009d2a <_dtoa_r+0x8fa>
 8009cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d02:	b993      	cbnz	r3, 8009d2a <_dtoa_r+0x8fa>
 8009d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d08:	0d1b      	lsrs	r3, r3, #20
 8009d0a:	051b      	lsls	r3, r3, #20
 8009d0c:	b183      	cbz	r3, 8009d30 <_dtoa_r+0x900>
 8009d0e:	9b04      	ldr	r3, [sp, #16]
 8009d10:	3301      	adds	r3, #1
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	9b05      	ldr	r3, [sp, #20]
 8009d16:	3301      	adds	r3, #1
 8009d18:	9305      	str	r3, [sp, #20]
 8009d1a:	f04f 0801 	mov.w	r8, #1
 8009d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f47f af6a 	bne.w	8009bfa <_dtoa_r+0x7ca>
 8009d26:	2001      	movs	r0, #1
 8009d28:	e76f      	b.n	8009c0a <_dtoa_r+0x7da>
 8009d2a:	f04f 0800 	mov.w	r8, #0
 8009d2e:	e7f6      	b.n	8009d1e <_dtoa_r+0x8ee>
 8009d30:	4698      	mov	r8, r3
 8009d32:	e7f4      	b.n	8009d1e <_dtoa_r+0x8ee>
 8009d34:	f43f af7d 	beq.w	8009c32 <_dtoa_r+0x802>
 8009d38:	4618      	mov	r0, r3
 8009d3a:	301c      	adds	r0, #28
 8009d3c:	e772      	b.n	8009c24 <_dtoa_r+0x7f4>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dc37      	bgt.n	8009db4 <_dtoa_r+0x984>
 8009d44:	9b06      	ldr	r3, [sp, #24]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	dd34      	ble.n	8009db4 <_dtoa_r+0x984>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	9302      	str	r3, [sp, #8]
 8009d4e:	9b02      	ldr	r3, [sp, #8]
 8009d50:	b96b      	cbnz	r3, 8009d6e <_dtoa_r+0x93e>
 8009d52:	4631      	mov	r1, r6
 8009d54:	2205      	movs	r2, #5
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 fbe6 	bl	800a528 <__multadd>
 8009d5c:	4601      	mov	r1, r0
 8009d5e:	4606      	mov	r6, r0
 8009d60:	ee18 0a10 	vmov	r0, s16
 8009d64:	f000 fe00 	bl	800a968 <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f73f adbb 	bgt.w	80098e4 <_dtoa_r+0x4b4>
 8009d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d70:	9d01      	ldr	r5, [sp, #4]
 8009d72:	43db      	mvns	r3, r3
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f000 fbb1 	bl	800a4e4 <_Bfree>
 8009d82:	2f00      	cmp	r7, #0
 8009d84:	f43f aea4 	beq.w	8009ad0 <_dtoa_r+0x6a0>
 8009d88:	f1b8 0f00 	cmp.w	r8, #0
 8009d8c:	d005      	beq.n	8009d9a <_dtoa_r+0x96a>
 8009d8e:	45b8      	cmp	r8, r7
 8009d90:	d003      	beq.n	8009d9a <_dtoa_r+0x96a>
 8009d92:	4641      	mov	r1, r8
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 fba5 	bl	800a4e4 <_Bfree>
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fba1 	bl	800a4e4 <_Bfree>
 8009da2:	e695      	b.n	8009ad0 <_dtoa_r+0x6a0>
 8009da4:	2600      	movs	r6, #0
 8009da6:	4637      	mov	r7, r6
 8009da8:	e7e1      	b.n	8009d6e <_dtoa_r+0x93e>
 8009daa:	9700      	str	r7, [sp, #0]
 8009dac:	4637      	mov	r7, r6
 8009dae:	e599      	b.n	80098e4 <_dtoa_r+0x4b4>
 8009db0:	40240000 	.word	0x40240000
 8009db4:	9b08      	ldr	r3, [sp, #32]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 80ca 	beq.w	8009f50 <_dtoa_r+0xb20>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	9302      	str	r3, [sp, #8]
 8009dc0:	2d00      	cmp	r5, #0
 8009dc2:	dd05      	ble.n	8009dd0 <_dtoa_r+0x9a0>
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fd5d 	bl	800a888 <__lshift>
 8009dce:	4607      	mov	r7, r0
 8009dd0:	f1b8 0f00 	cmp.w	r8, #0
 8009dd4:	d05b      	beq.n	8009e8e <_dtoa_r+0xa5e>
 8009dd6:	6879      	ldr	r1, [r7, #4]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 fb43 	bl	800a464 <_Balloc>
 8009dde:	4605      	mov	r5, r0
 8009de0:	b928      	cbnz	r0, 8009dee <_dtoa_r+0x9be>
 8009de2:	4b87      	ldr	r3, [pc, #540]	; (800a000 <_dtoa_r+0xbd0>)
 8009de4:	4602      	mov	r2, r0
 8009de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009dea:	f7ff bb3b 	b.w	8009464 <_dtoa_r+0x34>
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	3202      	adds	r2, #2
 8009df2:	0092      	lsls	r2, r2, #2
 8009df4:	f107 010c 	add.w	r1, r7, #12
 8009df8:	300c      	adds	r0, #12
 8009dfa:	f7fe fc9f 	bl	800873c <memcpy>
 8009dfe:	2201      	movs	r2, #1
 8009e00:	4629      	mov	r1, r5
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fd40 	bl	800a888 <__lshift>
 8009e08:	9b01      	ldr	r3, [sp, #4]
 8009e0a:	f103 0901 	add.w	r9, r3, #1
 8009e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	9305      	str	r3, [sp, #20]
 8009e16:	f00a 0301 	and.w	r3, sl, #1
 8009e1a:	46b8      	mov	r8, r7
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	4607      	mov	r7, r0
 8009e20:	4631      	mov	r1, r6
 8009e22:	ee18 0a10 	vmov	r0, s16
 8009e26:	f7ff fa77 	bl	8009318 <quorem>
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	9002      	str	r0, [sp, #8]
 8009e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e32:	ee18 0a10 	vmov	r0, s16
 8009e36:	f000 fd97 	bl	800a968 <__mcmp>
 8009e3a:	463a      	mov	r2, r7
 8009e3c:	9003      	str	r0, [sp, #12]
 8009e3e:	4631      	mov	r1, r6
 8009e40:	4620      	mov	r0, r4
 8009e42:	f000 fdad 	bl	800a9a0 <__mdiff>
 8009e46:	68c2      	ldr	r2, [r0, #12]
 8009e48:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	bb02      	cbnz	r2, 8009e92 <_dtoa_r+0xa62>
 8009e50:	4601      	mov	r1, r0
 8009e52:	ee18 0a10 	vmov	r0, s16
 8009e56:	f000 fd87 	bl	800a968 <__mcmp>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	4620      	mov	r0, r4
 8009e60:	9207      	str	r2, [sp, #28]
 8009e62:	f000 fb3f 	bl	800a4e4 <_Bfree>
 8009e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009e6a:	ea43 0102 	orr.w	r1, r3, r2
 8009e6e:	9b04      	ldr	r3, [sp, #16]
 8009e70:	430b      	orrs	r3, r1
 8009e72:	464d      	mov	r5, r9
 8009e74:	d10f      	bne.n	8009e96 <_dtoa_r+0xa66>
 8009e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e7a:	d02a      	beq.n	8009ed2 <_dtoa_r+0xaa2>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	dd02      	ble.n	8009e88 <_dtoa_r+0xa58>
 8009e82:	9b02      	ldr	r3, [sp, #8]
 8009e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009e88:	f88b a000 	strb.w	sl, [fp]
 8009e8c:	e775      	b.n	8009d7a <_dtoa_r+0x94a>
 8009e8e:	4638      	mov	r0, r7
 8009e90:	e7ba      	b.n	8009e08 <_dtoa_r+0x9d8>
 8009e92:	2201      	movs	r2, #1
 8009e94:	e7e2      	b.n	8009e5c <_dtoa_r+0xa2c>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	db04      	blt.n	8009ea6 <_dtoa_r+0xa76>
 8009e9c:	9906      	ldr	r1, [sp, #24]
 8009e9e:	430b      	orrs	r3, r1
 8009ea0:	9904      	ldr	r1, [sp, #16]
 8009ea2:	430b      	orrs	r3, r1
 8009ea4:	d122      	bne.n	8009eec <_dtoa_r+0xabc>
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	ddee      	ble.n	8009e88 <_dtoa_r+0xa58>
 8009eaa:	ee18 1a10 	vmov	r1, s16
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 fce9 	bl	800a888 <__lshift>
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	ee08 0a10 	vmov	s16, r0
 8009ebc:	f000 fd54 	bl	800a968 <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	dc03      	bgt.n	8009ecc <_dtoa_r+0xa9c>
 8009ec4:	d1e0      	bne.n	8009e88 <_dtoa_r+0xa58>
 8009ec6:	f01a 0f01 	tst.w	sl, #1
 8009eca:	d0dd      	beq.n	8009e88 <_dtoa_r+0xa58>
 8009ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ed0:	d1d7      	bne.n	8009e82 <_dtoa_r+0xa52>
 8009ed2:	2339      	movs	r3, #57	; 0x39
 8009ed4:	f88b 3000 	strb.w	r3, [fp]
 8009ed8:	462b      	mov	r3, r5
 8009eda:	461d      	mov	r5, r3
 8009edc:	3b01      	subs	r3, #1
 8009ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ee2:	2a39      	cmp	r2, #57	; 0x39
 8009ee4:	d071      	beq.n	8009fca <_dtoa_r+0xb9a>
 8009ee6:	3201      	adds	r2, #1
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	e746      	b.n	8009d7a <_dtoa_r+0x94a>
 8009eec:	2a00      	cmp	r2, #0
 8009eee:	dd07      	ble.n	8009f00 <_dtoa_r+0xad0>
 8009ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ef4:	d0ed      	beq.n	8009ed2 <_dtoa_r+0xaa2>
 8009ef6:	f10a 0301 	add.w	r3, sl, #1
 8009efa:	f88b 3000 	strb.w	r3, [fp]
 8009efe:	e73c      	b.n	8009d7a <_dtoa_r+0x94a>
 8009f00:	9b05      	ldr	r3, [sp, #20]
 8009f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f06:	4599      	cmp	r9, r3
 8009f08:	d047      	beq.n	8009f9a <_dtoa_r+0xb6a>
 8009f0a:	ee18 1a10 	vmov	r1, s16
 8009f0e:	2300      	movs	r3, #0
 8009f10:	220a      	movs	r2, #10
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fb08 	bl	800a528 <__multadd>
 8009f18:	45b8      	cmp	r8, r7
 8009f1a:	ee08 0a10 	vmov	s16, r0
 8009f1e:	f04f 0300 	mov.w	r3, #0
 8009f22:	f04f 020a 	mov.w	r2, #10
 8009f26:	4641      	mov	r1, r8
 8009f28:	4620      	mov	r0, r4
 8009f2a:	d106      	bne.n	8009f3a <_dtoa_r+0xb0a>
 8009f2c:	f000 fafc 	bl	800a528 <__multadd>
 8009f30:	4680      	mov	r8, r0
 8009f32:	4607      	mov	r7, r0
 8009f34:	f109 0901 	add.w	r9, r9, #1
 8009f38:	e772      	b.n	8009e20 <_dtoa_r+0x9f0>
 8009f3a:	f000 faf5 	bl	800a528 <__multadd>
 8009f3e:	4639      	mov	r1, r7
 8009f40:	4680      	mov	r8, r0
 8009f42:	2300      	movs	r3, #0
 8009f44:	220a      	movs	r2, #10
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 faee 	bl	800a528 <__multadd>
 8009f4c:	4607      	mov	r7, r0
 8009f4e:	e7f1      	b.n	8009f34 <_dtoa_r+0xb04>
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	9302      	str	r3, [sp, #8]
 8009f54:	9d01      	ldr	r5, [sp, #4]
 8009f56:	ee18 0a10 	vmov	r0, s16
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	f7ff f9dc 	bl	8009318 <quorem>
 8009f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	f805 ab01 	strb.w	sl, [r5], #1
 8009f6a:	1aea      	subs	r2, r5, r3
 8009f6c:	9b02      	ldr	r3, [sp, #8]
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	dd09      	ble.n	8009f86 <_dtoa_r+0xb56>
 8009f72:	ee18 1a10 	vmov	r1, s16
 8009f76:	2300      	movs	r3, #0
 8009f78:	220a      	movs	r2, #10
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 fad4 	bl	800a528 <__multadd>
 8009f80:	ee08 0a10 	vmov	s16, r0
 8009f84:	e7e7      	b.n	8009f56 <_dtoa_r+0xb26>
 8009f86:	9b02      	ldr	r3, [sp, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	bfc8      	it	gt
 8009f8c:	461d      	movgt	r5, r3
 8009f8e:	9b01      	ldr	r3, [sp, #4]
 8009f90:	bfd8      	it	le
 8009f92:	2501      	movle	r5, #1
 8009f94:	441d      	add	r5, r3
 8009f96:	f04f 0800 	mov.w	r8, #0
 8009f9a:	ee18 1a10 	vmov	r1, s16
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 fc71 	bl	800a888 <__lshift>
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	ee08 0a10 	vmov	s16, r0
 8009fac:	f000 fcdc 	bl	800a968 <__mcmp>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	dc91      	bgt.n	8009ed8 <_dtoa_r+0xaa8>
 8009fb4:	d102      	bne.n	8009fbc <_dtoa_r+0xb8c>
 8009fb6:	f01a 0f01 	tst.w	sl, #1
 8009fba:	d18d      	bne.n	8009ed8 <_dtoa_r+0xaa8>
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	461d      	mov	r5, r3
 8009fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fc4:	2a30      	cmp	r2, #48	; 0x30
 8009fc6:	d0fa      	beq.n	8009fbe <_dtoa_r+0xb8e>
 8009fc8:	e6d7      	b.n	8009d7a <_dtoa_r+0x94a>
 8009fca:	9a01      	ldr	r2, [sp, #4]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d184      	bne.n	8009eda <_dtoa_r+0xaaa>
 8009fd0:	9b00      	ldr	r3, [sp, #0]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	2331      	movs	r3, #49	; 0x31
 8009fd8:	7013      	strb	r3, [r2, #0]
 8009fda:	e6ce      	b.n	8009d7a <_dtoa_r+0x94a>
 8009fdc:	4b09      	ldr	r3, [pc, #36]	; (800a004 <_dtoa_r+0xbd4>)
 8009fde:	f7ff ba95 	b.w	800950c <_dtoa_r+0xdc>
 8009fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f47f aa6e 	bne.w	80094c6 <_dtoa_r+0x96>
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <_dtoa_r+0xbd8>)
 8009fec:	f7ff ba8e 	b.w	800950c <_dtoa_r+0xdc>
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dcae      	bgt.n	8009f54 <_dtoa_r+0xb24>
 8009ff6:	9b06      	ldr	r3, [sp, #24]
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	f73f aea8 	bgt.w	8009d4e <_dtoa_r+0x91e>
 8009ffe:	e7a9      	b.n	8009f54 <_dtoa_r+0xb24>
 800a000:	0800ba33 	.word	0x0800ba33
 800a004:	0800b990 	.word	0x0800b990
 800a008:	0800b9b4 	.word	0x0800b9b4

0800a00c <__sflush_r>:
 800a00c:	898a      	ldrh	r2, [r1, #12]
 800a00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a012:	4605      	mov	r5, r0
 800a014:	0710      	lsls	r0, r2, #28
 800a016:	460c      	mov	r4, r1
 800a018:	d458      	bmi.n	800a0cc <__sflush_r+0xc0>
 800a01a:	684b      	ldr	r3, [r1, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	dc05      	bgt.n	800a02c <__sflush_r+0x20>
 800a020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a022:	2b00      	cmp	r3, #0
 800a024:	dc02      	bgt.n	800a02c <__sflush_r+0x20>
 800a026:	2000      	movs	r0, #0
 800a028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a02e:	2e00      	cmp	r6, #0
 800a030:	d0f9      	beq.n	800a026 <__sflush_r+0x1a>
 800a032:	2300      	movs	r3, #0
 800a034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a038:	682f      	ldr	r7, [r5, #0]
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	d032      	beq.n	800a0a4 <__sflush_r+0x98>
 800a03e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	075a      	lsls	r2, r3, #29
 800a044:	d505      	bpl.n	800a052 <__sflush_r+0x46>
 800a046:	6863      	ldr	r3, [r4, #4]
 800a048:	1ac0      	subs	r0, r0, r3
 800a04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a04c:	b10b      	cbz	r3, 800a052 <__sflush_r+0x46>
 800a04e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a050:	1ac0      	subs	r0, r0, r3
 800a052:	2300      	movs	r3, #0
 800a054:	4602      	mov	r2, r0
 800a056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a058:	6a21      	ldr	r1, [r4, #32]
 800a05a:	4628      	mov	r0, r5
 800a05c:	47b0      	blx	r6
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	d106      	bne.n	800a072 <__sflush_r+0x66>
 800a064:	6829      	ldr	r1, [r5, #0]
 800a066:	291d      	cmp	r1, #29
 800a068:	d82c      	bhi.n	800a0c4 <__sflush_r+0xb8>
 800a06a:	4a2a      	ldr	r2, [pc, #168]	; (800a114 <__sflush_r+0x108>)
 800a06c:	40ca      	lsrs	r2, r1
 800a06e:	07d6      	lsls	r6, r2, #31
 800a070:	d528      	bpl.n	800a0c4 <__sflush_r+0xb8>
 800a072:	2200      	movs	r2, #0
 800a074:	6062      	str	r2, [r4, #4]
 800a076:	04d9      	lsls	r1, r3, #19
 800a078:	6922      	ldr	r2, [r4, #16]
 800a07a:	6022      	str	r2, [r4, #0]
 800a07c:	d504      	bpl.n	800a088 <__sflush_r+0x7c>
 800a07e:	1c42      	adds	r2, r0, #1
 800a080:	d101      	bne.n	800a086 <__sflush_r+0x7a>
 800a082:	682b      	ldr	r3, [r5, #0]
 800a084:	b903      	cbnz	r3, 800a088 <__sflush_r+0x7c>
 800a086:	6560      	str	r0, [r4, #84]	; 0x54
 800a088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a08a:	602f      	str	r7, [r5, #0]
 800a08c:	2900      	cmp	r1, #0
 800a08e:	d0ca      	beq.n	800a026 <__sflush_r+0x1a>
 800a090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a094:	4299      	cmp	r1, r3
 800a096:	d002      	beq.n	800a09e <__sflush_r+0x92>
 800a098:	4628      	mov	r0, r5
 800a09a:	f000 fd7d 	bl	800ab98 <_free_r>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a0a2:	e7c1      	b.n	800a028 <__sflush_r+0x1c>
 800a0a4:	6a21      	ldr	r1, [r4, #32]
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b0      	blx	r6
 800a0ac:	1c41      	adds	r1, r0, #1
 800a0ae:	d1c7      	bne.n	800a040 <__sflush_r+0x34>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0c4      	beq.n	800a040 <__sflush_r+0x34>
 800a0b6:	2b1d      	cmp	r3, #29
 800a0b8:	d001      	beq.n	800a0be <__sflush_r+0xb2>
 800a0ba:	2b16      	cmp	r3, #22
 800a0bc:	d101      	bne.n	800a0c2 <__sflush_r+0xb6>
 800a0be:	602f      	str	r7, [r5, #0]
 800a0c0:	e7b1      	b.n	800a026 <__sflush_r+0x1a>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	e7ad      	b.n	800a028 <__sflush_r+0x1c>
 800a0cc:	690f      	ldr	r7, [r1, #16]
 800a0ce:	2f00      	cmp	r7, #0
 800a0d0:	d0a9      	beq.n	800a026 <__sflush_r+0x1a>
 800a0d2:	0793      	lsls	r3, r2, #30
 800a0d4:	680e      	ldr	r6, [r1, #0]
 800a0d6:	bf08      	it	eq
 800a0d8:	694b      	ldreq	r3, [r1, #20]
 800a0da:	600f      	str	r7, [r1, #0]
 800a0dc:	bf18      	it	ne
 800a0de:	2300      	movne	r3, #0
 800a0e0:	eba6 0807 	sub.w	r8, r6, r7
 800a0e4:	608b      	str	r3, [r1, #8]
 800a0e6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ea:	dd9c      	ble.n	800a026 <__sflush_r+0x1a>
 800a0ec:	6a21      	ldr	r1, [r4, #32]
 800a0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0f0:	4643      	mov	r3, r8
 800a0f2:	463a      	mov	r2, r7
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b0      	blx	r6
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	dc06      	bgt.n	800a10a <__sflush_r+0xfe>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a102:	81a3      	strh	r3, [r4, #12]
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	e78e      	b.n	800a028 <__sflush_r+0x1c>
 800a10a:	4407      	add	r7, r0
 800a10c:	eba8 0800 	sub.w	r8, r8, r0
 800a110:	e7e9      	b.n	800a0e6 <__sflush_r+0xda>
 800a112:	bf00      	nop
 800a114:	20400001 	.word	0x20400001

0800a118 <_fflush_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	690b      	ldr	r3, [r1, #16]
 800a11c:	4605      	mov	r5, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	b913      	cbnz	r3, 800a128 <_fflush_r+0x10>
 800a122:	2500      	movs	r5, #0
 800a124:	4628      	mov	r0, r5
 800a126:	bd38      	pop	{r3, r4, r5, pc}
 800a128:	b118      	cbz	r0, 800a132 <_fflush_r+0x1a>
 800a12a:	6983      	ldr	r3, [r0, #24]
 800a12c:	b90b      	cbnz	r3, 800a132 <_fflush_r+0x1a>
 800a12e:	f000 f887 	bl	800a240 <__sinit>
 800a132:	4b14      	ldr	r3, [pc, #80]	; (800a184 <_fflush_r+0x6c>)
 800a134:	429c      	cmp	r4, r3
 800a136:	d11b      	bne.n	800a170 <_fflush_r+0x58>
 800a138:	686c      	ldr	r4, [r5, #4]
 800a13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0ef      	beq.n	800a122 <_fflush_r+0xa>
 800a142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a144:	07d0      	lsls	r0, r2, #31
 800a146:	d404      	bmi.n	800a152 <_fflush_r+0x3a>
 800a148:	0599      	lsls	r1, r3, #22
 800a14a:	d402      	bmi.n	800a152 <_fflush_r+0x3a>
 800a14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a14e:	f000 f91a 	bl	800a386 <__retarget_lock_acquire_recursive>
 800a152:	4628      	mov	r0, r5
 800a154:	4621      	mov	r1, r4
 800a156:	f7ff ff59 	bl	800a00c <__sflush_r>
 800a15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a15c:	07da      	lsls	r2, r3, #31
 800a15e:	4605      	mov	r5, r0
 800a160:	d4e0      	bmi.n	800a124 <_fflush_r+0xc>
 800a162:	89a3      	ldrh	r3, [r4, #12]
 800a164:	059b      	lsls	r3, r3, #22
 800a166:	d4dd      	bmi.n	800a124 <_fflush_r+0xc>
 800a168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a16a:	f000 f90d 	bl	800a388 <__retarget_lock_release_recursive>
 800a16e:	e7d9      	b.n	800a124 <_fflush_r+0xc>
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <_fflush_r+0x70>)
 800a172:	429c      	cmp	r4, r3
 800a174:	d101      	bne.n	800a17a <_fflush_r+0x62>
 800a176:	68ac      	ldr	r4, [r5, #8]
 800a178:	e7df      	b.n	800a13a <_fflush_r+0x22>
 800a17a:	4b04      	ldr	r3, [pc, #16]	; (800a18c <_fflush_r+0x74>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	bf08      	it	eq
 800a180:	68ec      	ldreq	r4, [r5, #12]
 800a182:	e7da      	b.n	800a13a <_fflush_r+0x22>
 800a184:	0800ba64 	.word	0x0800ba64
 800a188:	0800ba84 	.word	0x0800ba84
 800a18c:	0800ba44 	.word	0x0800ba44

0800a190 <std>:
 800a190:	2300      	movs	r3, #0
 800a192:	b510      	push	{r4, lr}
 800a194:	4604      	mov	r4, r0
 800a196:	e9c0 3300 	strd	r3, r3, [r0]
 800a19a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a19e:	6083      	str	r3, [r0, #8]
 800a1a0:	8181      	strh	r1, [r0, #12]
 800a1a2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1a4:	81c2      	strh	r2, [r0, #14]
 800a1a6:	6183      	str	r3, [r0, #24]
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	2208      	movs	r2, #8
 800a1ac:	305c      	adds	r0, #92	; 0x5c
 800a1ae:	f7fe fad3 	bl	8008758 <memset>
 800a1b2:	4b05      	ldr	r3, [pc, #20]	; (800a1c8 <std+0x38>)
 800a1b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a1b6:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <std+0x3c>)
 800a1b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1ba:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <std+0x40>)
 800a1bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1be:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <std+0x44>)
 800a1c0:	6224      	str	r4, [r4, #32]
 800a1c2:	6323      	str	r3, [r4, #48]	; 0x30
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	bf00      	nop
 800a1c8:	0800b2e5 	.word	0x0800b2e5
 800a1cc:	0800b307 	.word	0x0800b307
 800a1d0:	0800b33f 	.word	0x0800b33f
 800a1d4:	0800b363 	.word	0x0800b363

0800a1d8 <_cleanup_r>:
 800a1d8:	4901      	ldr	r1, [pc, #4]	; (800a1e0 <_cleanup_r+0x8>)
 800a1da:	f000 b8af 	b.w	800a33c <_fwalk_reent>
 800a1de:	bf00      	nop
 800a1e0:	0800a119 	.word	0x0800a119

0800a1e4 <__sfmoreglue>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	2268      	movs	r2, #104	; 0x68
 800a1e8:	1e4d      	subs	r5, r1, #1
 800a1ea:	4355      	muls	r5, r2
 800a1ec:	460e      	mov	r6, r1
 800a1ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1f2:	f000 fd3d 	bl	800ac70 <_malloc_r>
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	b140      	cbz	r0, 800a20c <__sfmoreglue+0x28>
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	e9c0 1600 	strd	r1, r6, [r0]
 800a200:	300c      	adds	r0, #12
 800a202:	60a0      	str	r0, [r4, #8]
 800a204:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a208:	f7fe faa6 	bl	8008758 <memset>
 800a20c:	4620      	mov	r0, r4
 800a20e:	bd70      	pop	{r4, r5, r6, pc}

0800a210 <__sfp_lock_acquire>:
 800a210:	4801      	ldr	r0, [pc, #4]	; (800a218 <__sfp_lock_acquire+0x8>)
 800a212:	f000 b8b8 	b.w	800a386 <__retarget_lock_acquire_recursive>
 800a216:	bf00      	nop
 800a218:	200005e5 	.word	0x200005e5

0800a21c <__sfp_lock_release>:
 800a21c:	4801      	ldr	r0, [pc, #4]	; (800a224 <__sfp_lock_release+0x8>)
 800a21e:	f000 b8b3 	b.w	800a388 <__retarget_lock_release_recursive>
 800a222:	bf00      	nop
 800a224:	200005e5 	.word	0x200005e5

0800a228 <__sinit_lock_acquire>:
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <__sinit_lock_acquire+0x8>)
 800a22a:	f000 b8ac 	b.w	800a386 <__retarget_lock_acquire_recursive>
 800a22e:	bf00      	nop
 800a230:	200005e6 	.word	0x200005e6

0800a234 <__sinit_lock_release>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__sinit_lock_release+0x8>)
 800a236:	f000 b8a7 	b.w	800a388 <__retarget_lock_release_recursive>
 800a23a:	bf00      	nop
 800a23c:	200005e6 	.word	0x200005e6

0800a240 <__sinit>:
 800a240:	b510      	push	{r4, lr}
 800a242:	4604      	mov	r4, r0
 800a244:	f7ff fff0 	bl	800a228 <__sinit_lock_acquire>
 800a248:	69a3      	ldr	r3, [r4, #24]
 800a24a:	b11b      	cbz	r3, 800a254 <__sinit+0x14>
 800a24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a250:	f7ff bff0 	b.w	800a234 <__sinit_lock_release>
 800a254:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a258:	6523      	str	r3, [r4, #80]	; 0x50
 800a25a:	4b13      	ldr	r3, [pc, #76]	; (800a2a8 <__sinit+0x68>)
 800a25c:	4a13      	ldr	r2, [pc, #76]	; (800a2ac <__sinit+0x6c>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	62a2      	str	r2, [r4, #40]	; 0x28
 800a262:	42a3      	cmp	r3, r4
 800a264:	bf04      	itt	eq
 800a266:	2301      	moveq	r3, #1
 800a268:	61a3      	streq	r3, [r4, #24]
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 f820 	bl	800a2b0 <__sfp>
 800a270:	6060      	str	r0, [r4, #4]
 800a272:	4620      	mov	r0, r4
 800a274:	f000 f81c 	bl	800a2b0 <__sfp>
 800a278:	60a0      	str	r0, [r4, #8]
 800a27a:	4620      	mov	r0, r4
 800a27c:	f000 f818 	bl	800a2b0 <__sfp>
 800a280:	2200      	movs	r2, #0
 800a282:	60e0      	str	r0, [r4, #12]
 800a284:	2104      	movs	r1, #4
 800a286:	6860      	ldr	r0, [r4, #4]
 800a288:	f7ff ff82 	bl	800a190 <std>
 800a28c:	68a0      	ldr	r0, [r4, #8]
 800a28e:	2201      	movs	r2, #1
 800a290:	2109      	movs	r1, #9
 800a292:	f7ff ff7d 	bl	800a190 <std>
 800a296:	68e0      	ldr	r0, [r4, #12]
 800a298:	2202      	movs	r2, #2
 800a29a:	2112      	movs	r1, #18
 800a29c:	f7ff ff78 	bl	800a190 <std>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	61a3      	str	r3, [r4, #24]
 800a2a4:	e7d2      	b.n	800a24c <__sinit+0xc>
 800a2a6:	bf00      	nop
 800a2a8:	0800b97c 	.word	0x0800b97c
 800a2ac:	0800a1d9 	.word	0x0800a1d9

0800a2b0 <__sfp>:
 800a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b2:	4607      	mov	r7, r0
 800a2b4:	f7ff ffac 	bl	800a210 <__sfp_lock_acquire>
 800a2b8:	4b1e      	ldr	r3, [pc, #120]	; (800a334 <__sfp+0x84>)
 800a2ba:	681e      	ldr	r6, [r3, #0]
 800a2bc:	69b3      	ldr	r3, [r6, #24]
 800a2be:	b913      	cbnz	r3, 800a2c6 <__sfp+0x16>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff ffbd 	bl	800a240 <__sinit>
 800a2c6:	3648      	adds	r6, #72	; 0x48
 800a2c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	d503      	bpl.n	800a2d8 <__sfp+0x28>
 800a2d0:	6833      	ldr	r3, [r6, #0]
 800a2d2:	b30b      	cbz	r3, 800a318 <__sfp+0x68>
 800a2d4:	6836      	ldr	r6, [r6, #0]
 800a2d6:	e7f7      	b.n	800a2c8 <__sfp+0x18>
 800a2d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a2dc:	b9d5      	cbnz	r5, 800a314 <__sfp+0x64>
 800a2de:	4b16      	ldr	r3, [pc, #88]	; (800a338 <__sfp+0x88>)
 800a2e0:	60e3      	str	r3, [r4, #12]
 800a2e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2e6:	6665      	str	r5, [r4, #100]	; 0x64
 800a2e8:	f000 f84c 	bl	800a384 <__retarget_lock_init_recursive>
 800a2ec:	f7ff ff96 	bl	800a21c <__sfp_lock_release>
 800a2f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2f8:	6025      	str	r5, [r4, #0]
 800a2fa:	61a5      	str	r5, [r4, #24]
 800a2fc:	2208      	movs	r2, #8
 800a2fe:	4629      	mov	r1, r5
 800a300:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a304:	f7fe fa28 	bl	8008758 <memset>
 800a308:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a30c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a310:	4620      	mov	r0, r4
 800a312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a314:	3468      	adds	r4, #104	; 0x68
 800a316:	e7d9      	b.n	800a2cc <__sfp+0x1c>
 800a318:	2104      	movs	r1, #4
 800a31a:	4638      	mov	r0, r7
 800a31c:	f7ff ff62 	bl	800a1e4 <__sfmoreglue>
 800a320:	4604      	mov	r4, r0
 800a322:	6030      	str	r0, [r6, #0]
 800a324:	2800      	cmp	r0, #0
 800a326:	d1d5      	bne.n	800a2d4 <__sfp+0x24>
 800a328:	f7ff ff78 	bl	800a21c <__sfp_lock_release>
 800a32c:	230c      	movs	r3, #12
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	e7ee      	b.n	800a310 <__sfp+0x60>
 800a332:	bf00      	nop
 800a334:	0800b97c 	.word	0x0800b97c
 800a338:	ffff0001 	.word	0xffff0001

0800a33c <_fwalk_reent>:
 800a33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a340:	4606      	mov	r6, r0
 800a342:	4688      	mov	r8, r1
 800a344:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a348:	2700      	movs	r7, #0
 800a34a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a34e:	f1b9 0901 	subs.w	r9, r9, #1
 800a352:	d505      	bpl.n	800a360 <_fwalk_reent+0x24>
 800a354:	6824      	ldr	r4, [r4, #0]
 800a356:	2c00      	cmp	r4, #0
 800a358:	d1f7      	bne.n	800a34a <_fwalk_reent+0xe>
 800a35a:	4638      	mov	r0, r7
 800a35c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a360:	89ab      	ldrh	r3, [r5, #12]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d907      	bls.n	800a376 <_fwalk_reent+0x3a>
 800a366:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a36a:	3301      	adds	r3, #1
 800a36c:	d003      	beq.n	800a376 <_fwalk_reent+0x3a>
 800a36e:	4629      	mov	r1, r5
 800a370:	4630      	mov	r0, r6
 800a372:	47c0      	blx	r8
 800a374:	4307      	orrs	r7, r0
 800a376:	3568      	adds	r5, #104	; 0x68
 800a378:	e7e9      	b.n	800a34e <_fwalk_reent+0x12>
	...

0800a37c <_localeconv_r>:
 800a37c:	4800      	ldr	r0, [pc, #0]	; (800a380 <_localeconv_r+0x4>)
 800a37e:	4770      	bx	lr
 800a380:	20000174 	.word	0x20000174

0800a384 <__retarget_lock_init_recursive>:
 800a384:	4770      	bx	lr

0800a386 <__retarget_lock_acquire_recursive>:
 800a386:	4770      	bx	lr

0800a388 <__retarget_lock_release_recursive>:
 800a388:	4770      	bx	lr

0800a38a <__swhatbuf_r>:
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	460e      	mov	r6, r1
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	2900      	cmp	r1, #0
 800a394:	b096      	sub	sp, #88	; 0x58
 800a396:	4614      	mov	r4, r2
 800a398:	461d      	mov	r5, r3
 800a39a:	da08      	bge.n	800a3ae <__swhatbuf_r+0x24>
 800a39c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	602a      	str	r2, [r5, #0]
 800a3a4:	061a      	lsls	r2, r3, #24
 800a3a6:	d410      	bmi.n	800a3ca <__swhatbuf_r+0x40>
 800a3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ac:	e00e      	b.n	800a3cc <__swhatbuf_r+0x42>
 800a3ae:	466a      	mov	r2, sp
 800a3b0:	f001 f82e 	bl	800b410 <_fstat_r>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	dbf1      	blt.n	800a39c <__swhatbuf_r+0x12>
 800a3b8:	9a01      	ldr	r2, [sp, #4]
 800a3ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3c2:	425a      	negs	r2, r3
 800a3c4:	415a      	adcs	r2, r3
 800a3c6:	602a      	str	r2, [r5, #0]
 800a3c8:	e7ee      	b.n	800a3a8 <__swhatbuf_r+0x1e>
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	b016      	add	sp, #88	; 0x58
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}

0800a3d4 <__smakebuf_r>:
 800a3d4:	898b      	ldrh	r3, [r1, #12]
 800a3d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3d8:	079d      	lsls	r5, r3, #30
 800a3da:	4606      	mov	r6, r0
 800a3dc:	460c      	mov	r4, r1
 800a3de:	d507      	bpl.n	800a3f0 <__smakebuf_r+0x1c>
 800a3e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	6123      	str	r3, [r4, #16]
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	6163      	str	r3, [r4, #20]
 800a3ec:	b002      	add	sp, #8
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	ab01      	add	r3, sp, #4
 800a3f2:	466a      	mov	r2, sp
 800a3f4:	f7ff ffc9 	bl	800a38a <__swhatbuf_r>
 800a3f8:	9900      	ldr	r1, [sp, #0]
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f000 fc37 	bl	800ac70 <_malloc_r>
 800a402:	b948      	cbnz	r0, 800a418 <__smakebuf_r+0x44>
 800a404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a408:	059a      	lsls	r2, r3, #22
 800a40a:	d4ef      	bmi.n	800a3ec <__smakebuf_r+0x18>
 800a40c:	f023 0303 	bic.w	r3, r3, #3
 800a410:	f043 0302 	orr.w	r3, r3, #2
 800a414:	81a3      	strh	r3, [r4, #12]
 800a416:	e7e3      	b.n	800a3e0 <__smakebuf_r+0xc>
 800a418:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <__smakebuf_r+0x7c>)
 800a41a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	6020      	str	r0, [r4, #0]
 800a420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	9b00      	ldr	r3, [sp, #0]
 800a428:	6163      	str	r3, [r4, #20]
 800a42a:	9b01      	ldr	r3, [sp, #4]
 800a42c:	6120      	str	r0, [r4, #16]
 800a42e:	b15b      	cbz	r3, 800a448 <__smakebuf_r+0x74>
 800a430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a434:	4630      	mov	r0, r6
 800a436:	f000 fffd 	bl	800b434 <_isatty_r>
 800a43a:	b128      	cbz	r0, 800a448 <__smakebuf_r+0x74>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	f023 0303 	bic.w	r3, r3, #3
 800a442:	f043 0301 	orr.w	r3, r3, #1
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	89a0      	ldrh	r0, [r4, #12]
 800a44a:	4305      	orrs	r5, r0
 800a44c:	81a5      	strh	r5, [r4, #12]
 800a44e:	e7cd      	b.n	800a3ec <__smakebuf_r+0x18>
 800a450:	0800a1d9 	.word	0x0800a1d9

0800a454 <malloc>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <malloc+0xc>)
 800a456:	4601      	mov	r1, r0
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f000 bc09 	b.w	800ac70 <_malloc_r>
 800a45e:	bf00      	nop
 800a460:	20000020 	.word	0x20000020

0800a464 <_Balloc>:
 800a464:	b570      	push	{r4, r5, r6, lr}
 800a466:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a468:	4604      	mov	r4, r0
 800a46a:	460d      	mov	r5, r1
 800a46c:	b976      	cbnz	r6, 800a48c <_Balloc+0x28>
 800a46e:	2010      	movs	r0, #16
 800a470:	f7ff fff0 	bl	800a454 <malloc>
 800a474:	4602      	mov	r2, r0
 800a476:	6260      	str	r0, [r4, #36]	; 0x24
 800a478:	b920      	cbnz	r0, 800a484 <_Balloc+0x20>
 800a47a:	4b18      	ldr	r3, [pc, #96]	; (800a4dc <_Balloc+0x78>)
 800a47c:	4818      	ldr	r0, [pc, #96]	; (800a4e0 <_Balloc+0x7c>)
 800a47e:	2166      	movs	r1, #102	; 0x66
 800a480:	f000 ff86 	bl	800b390 <__assert_func>
 800a484:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a488:	6006      	str	r6, [r0, #0]
 800a48a:	60c6      	str	r6, [r0, #12]
 800a48c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a48e:	68f3      	ldr	r3, [r6, #12]
 800a490:	b183      	cbz	r3, 800a4b4 <_Balloc+0x50>
 800a492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a49a:	b9b8      	cbnz	r0, 800a4cc <_Balloc+0x68>
 800a49c:	2101      	movs	r1, #1
 800a49e:	fa01 f605 	lsl.w	r6, r1, r5
 800a4a2:	1d72      	adds	r2, r6, #5
 800a4a4:	0092      	lsls	r2, r2, #2
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f000 fb60 	bl	800ab6c <_calloc_r>
 800a4ac:	b160      	cbz	r0, 800a4c8 <_Balloc+0x64>
 800a4ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4b2:	e00e      	b.n	800a4d2 <_Balloc+0x6e>
 800a4b4:	2221      	movs	r2, #33	; 0x21
 800a4b6:	2104      	movs	r1, #4
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 fb57 	bl	800ab6c <_calloc_r>
 800a4be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4c0:	60f0      	str	r0, [r6, #12]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1e4      	bne.n	800a492 <_Balloc+0x2e>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
 800a4cc:	6802      	ldr	r2, [r0, #0]
 800a4ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4d8:	e7f7      	b.n	800a4ca <_Balloc+0x66>
 800a4da:	bf00      	nop
 800a4dc:	0800b9c1 	.word	0x0800b9c1
 800a4e0:	0800baa4 	.word	0x0800baa4

0800a4e4 <_Bfree>:
 800a4e4:	b570      	push	{r4, r5, r6, lr}
 800a4e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4e8:	4605      	mov	r5, r0
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	b976      	cbnz	r6, 800a50c <_Bfree+0x28>
 800a4ee:	2010      	movs	r0, #16
 800a4f0:	f7ff ffb0 	bl	800a454 <malloc>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6268      	str	r0, [r5, #36]	; 0x24
 800a4f8:	b920      	cbnz	r0, 800a504 <_Bfree+0x20>
 800a4fa:	4b09      	ldr	r3, [pc, #36]	; (800a520 <_Bfree+0x3c>)
 800a4fc:	4809      	ldr	r0, [pc, #36]	; (800a524 <_Bfree+0x40>)
 800a4fe:	218a      	movs	r1, #138	; 0x8a
 800a500:	f000 ff46 	bl	800b390 <__assert_func>
 800a504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a508:	6006      	str	r6, [r0, #0]
 800a50a:	60c6      	str	r6, [r0, #12]
 800a50c:	b13c      	cbz	r4, 800a51e <_Bfree+0x3a>
 800a50e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a510:	6862      	ldr	r2, [r4, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a518:	6021      	str	r1, [r4, #0]
 800a51a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a51e:	bd70      	pop	{r4, r5, r6, pc}
 800a520:	0800b9c1 	.word	0x0800b9c1
 800a524:	0800baa4 	.word	0x0800baa4

0800a528 <__multadd>:
 800a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	690d      	ldr	r5, [r1, #16]
 800a52e:	4607      	mov	r7, r0
 800a530:	460c      	mov	r4, r1
 800a532:	461e      	mov	r6, r3
 800a534:	f101 0c14 	add.w	ip, r1, #20
 800a538:	2000      	movs	r0, #0
 800a53a:	f8dc 3000 	ldr.w	r3, [ip]
 800a53e:	b299      	uxth	r1, r3
 800a540:	fb02 6101 	mla	r1, r2, r1, r6
 800a544:	0c1e      	lsrs	r6, r3, #16
 800a546:	0c0b      	lsrs	r3, r1, #16
 800a548:	fb02 3306 	mla	r3, r2, r6, r3
 800a54c:	b289      	uxth	r1, r1
 800a54e:	3001      	adds	r0, #1
 800a550:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a554:	4285      	cmp	r5, r0
 800a556:	f84c 1b04 	str.w	r1, [ip], #4
 800a55a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a55e:	dcec      	bgt.n	800a53a <__multadd+0x12>
 800a560:	b30e      	cbz	r6, 800a5a6 <__multadd+0x7e>
 800a562:	68a3      	ldr	r3, [r4, #8]
 800a564:	42ab      	cmp	r3, r5
 800a566:	dc19      	bgt.n	800a59c <__multadd+0x74>
 800a568:	6861      	ldr	r1, [r4, #4]
 800a56a:	4638      	mov	r0, r7
 800a56c:	3101      	adds	r1, #1
 800a56e:	f7ff ff79 	bl	800a464 <_Balloc>
 800a572:	4680      	mov	r8, r0
 800a574:	b928      	cbnz	r0, 800a582 <__multadd+0x5a>
 800a576:	4602      	mov	r2, r0
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <__multadd+0x84>)
 800a57a:	480d      	ldr	r0, [pc, #52]	; (800a5b0 <__multadd+0x88>)
 800a57c:	21b5      	movs	r1, #181	; 0xb5
 800a57e:	f000 ff07 	bl	800b390 <__assert_func>
 800a582:	6922      	ldr	r2, [r4, #16]
 800a584:	3202      	adds	r2, #2
 800a586:	f104 010c 	add.w	r1, r4, #12
 800a58a:	0092      	lsls	r2, r2, #2
 800a58c:	300c      	adds	r0, #12
 800a58e:	f7fe f8d5 	bl	800873c <memcpy>
 800a592:	4621      	mov	r1, r4
 800a594:	4638      	mov	r0, r7
 800a596:	f7ff ffa5 	bl	800a4e4 <_Bfree>
 800a59a:	4644      	mov	r4, r8
 800a59c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	615e      	str	r6, [r3, #20]
 800a5a4:	6125      	str	r5, [r4, #16]
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ac:	0800ba33 	.word	0x0800ba33
 800a5b0:	0800baa4 	.word	0x0800baa4

0800a5b4 <__hi0bits>:
 800a5b4:	0c03      	lsrs	r3, r0, #16
 800a5b6:	041b      	lsls	r3, r3, #16
 800a5b8:	b9d3      	cbnz	r3, 800a5f0 <__hi0bits+0x3c>
 800a5ba:	0400      	lsls	r0, r0, #16
 800a5bc:	2310      	movs	r3, #16
 800a5be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a5c2:	bf04      	itt	eq
 800a5c4:	0200      	lsleq	r0, r0, #8
 800a5c6:	3308      	addeq	r3, #8
 800a5c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a5cc:	bf04      	itt	eq
 800a5ce:	0100      	lsleq	r0, r0, #4
 800a5d0:	3304      	addeq	r3, #4
 800a5d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a5d6:	bf04      	itt	eq
 800a5d8:	0080      	lsleq	r0, r0, #2
 800a5da:	3302      	addeq	r3, #2
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	db05      	blt.n	800a5ec <__hi0bits+0x38>
 800a5e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a5e4:	f103 0301 	add.w	r3, r3, #1
 800a5e8:	bf08      	it	eq
 800a5ea:	2320      	moveq	r3, #32
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	4770      	bx	lr
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e7e4      	b.n	800a5be <__hi0bits+0xa>

0800a5f4 <__lo0bits>:
 800a5f4:	6803      	ldr	r3, [r0, #0]
 800a5f6:	f013 0207 	ands.w	r2, r3, #7
 800a5fa:	4601      	mov	r1, r0
 800a5fc:	d00b      	beq.n	800a616 <__lo0bits+0x22>
 800a5fe:	07da      	lsls	r2, r3, #31
 800a600:	d423      	bmi.n	800a64a <__lo0bits+0x56>
 800a602:	0798      	lsls	r0, r3, #30
 800a604:	bf49      	itett	mi
 800a606:	085b      	lsrmi	r3, r3, #1
 800a608:	089b      	lsrpl	r3, r3, #2
 800a60a:	2001      	movmi	r0, #1
 800a60c:	600b      	strmi	r3, [r1, #0]
 800a60e:	bf5c      	itt	pl
 800a610:	600b      	strpl	r3, [r1, #0]
 800a612:	2002      	movpl	r0, #2
 800a614:	4770      	bx	lr
 800a616:	b298      	uxth	r0, r3
 800a618:	b9a8      	cbnz	r0, 800a646 <__lo0bits+0x52>
 800a61a:	0c1b      	lsrs	r3, r3, #16
 800a61c:	2010      	movs	r0, #16
 800a61e:	b2da      	uxtb	r2, r3
 800a620:	b90a      	cbnz	r2, 800a626 <__lo0bits+0x32>
 800a622:	3008      	adds	r0, #8
 800a624:	0a1b      	lsrs	r3, r3, #8
 800a626:	071a      	lsls	r2, r3, #28
 800a628:	bf04      	itt	eq
 800a62a:	091b      	lsreq	r3, r3, #4
 800a62c:	3004      	addeq	r0, #4
 800a62e:	079a      	lsls	r2, r3, #30
 800a630:	bf04      	itt	eq
 800a632:	089b      	lsreq	r3, r3, #2
 800a634:	3002      	addeq	r0, #2
 800a636:	07da      	lsls	r2, r3, #31
 800a638:	d403      	bmi.n	800a642 <__lo0bits+0x4e>
 800a63a:	085b      	lsrs	r3, r3, #1
 800a63c:	f100 0001 	add.w	r0, r0, #1
 800a640:	d005      	beq.n	800a64e <__lo0bits+0x5a>
 800a642:	600b      	str	r3, [r1, #0]
 800a644:	4770      	bx	lr
 800a646:	4610      	mov	r0, r2
 800a648:	e7e9      	b.n	800a61e <__lo0bits+0x2a>
 800a64a:	2000      	movs	r0, #0
 800a64c:	4770      	bx	lr
 800a64e:	2020      	movs	r0, #32
 800a650:	4770      	bx	lr
	...

0800a654 <__i2b>:
 800a654:	b510      	push	{r4, lr}
 800a656:	460c      	mov	r4, r1
 800a658:	2101      	movs	r1, #1
 800a65a:	f7ff ff03 	bl	800a464 <_Balloc>
 800a65e:	4602      	mov	r2, r0
 800a660:	b928      	cbnz	r0, 800a66e <__i2b+0x1a>
 800a662:	4b05      	ldr	r3, [pc, #20]	; (800a678 <__i2b+0x24>)
 800a664:	4805      	ldr	r0, [pc, #20]	; (800a67c <__i2b+0x28>)
 800a666:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a66a:	f000 fe91 	bl	800b390 <__assert_func>
 800a66e:	2301      	movs	r3, #1
 800a670:	6144      	str	r4, [r0, #20]
 800a672:	6103      	str	r3, [r0, #16]
 800a674:	bd10      	pop	{r4, pc}
 800a676:	bf00      	nop
 800a678:	0800ba33 	.word	0x0800ba33
 800a67c:	0800baa4 	.word	0x0800baa4

0800a680 <__multiply>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	4691      	mov	r9, r2
 800a686:	690a      	ldr	r2, [r1, #16]
 800a688:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	bfb8      	it	lt
 800a690:	460b      	movlt	r3, r1
 800a692:	460c      	mov	r4, r1
 800a694:	bfbc      	itt	lt
 800a696:	464c      	movlt	r4, r9
 800a698:	4699      	movlt	r9, r3
 800a69a:	6927      	ldr	r7, [r4, #16]
 800a69c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6a0:	68a3      	ldr	r3, [r4, #8]
 800a6a2:	6861      	ldr	r1, [r4, #4]
 800a6a4:	eb07 060a 	add.w	r6, r7, sl
 800a6a8:	42b3      	cmp	r3, r6
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	bfb8      	it	lt
 800a6ae:	3101      	addlt	r1, #1
 800a6b0:	f7ff fed8 	bl	800a464 <_Balloc>
 800a6b4:	b930      	cbnz	r0, 800a6c4 <__multiply+0x44>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4b44      	ldr	r3, [pc, #272]	; (800a7cc <__multiply+0x14c>)
 800a6ba:	4845      	ldr	r0, [pc, #276]	; (800a7d0 <__multiply+0x150>)
 800a6bc:	f240 115d 	movw	r1, #349	; 0x15d
 800a6c0:	f000 fe66 	bl	800b390 <__assert_func>
 800a6c4:	f100 0514 	add.w	r5, r0, #20
 800a6c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	4543      	cmp	r3, r8
 800a6d2:	d321      	bcc.n	800a718 <__multiply+0x98>
 800a6d4:	f104 0314 	add.w	r3, r4, #20
 800a6d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a6dc:	f109 0314 	add.w	r3, r9, #20
 800a6e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a6e4:	9202      	str	r2, [sp, #8]
 800a6e6:	1b3a      	subs	r2, r7, r4
 800a6e8:	3a15      	subs	r2, #21
 800a6ea:	f022 0203 	bic.w	r2, r2, #3
 800a6ee:	3204      	adds	r2, #4
 800a6f0:	f104 0115 	add.w	r1, r4, #21
 800a6f4:	428f      	cmp	r7, r1
 800a6f6:	bf38      	it	cc
 800a6f8:	2204      	movcc	r2, #4
 800a6fa:	9201      	str	r2, [sp, #4]
 800a6fc:	9a02      	ldr	r2, [sp, #8]
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	429a      	cmp	r2, r3
 800a702:	d80c      	bhi.n	800a71e <__multiply+0x9e>
 800a704:	2e00      	cmp	r6, #0
 800a706:	dd03      	ble.n	800a710 <__multiply+0x90>
 800a708:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d05a      	beq.n	800a7c6 <__multiply+0x146>
 800a710:	6106      	str	r6, [r0, #16]
 800a712:	b005      	add	sp, #20
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	f843 2b04 	str.w	r2, [r3], #4
 800a71c:	e7d8      	b.n	800a6d0 <__multiply+0x50>
 800a71e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a722:	f1ba 0f00 	cmp.w	sl, #0
 800a726:	d024      	beq.n	800a772 <__multiply+0xf2>
 800a728:	f104 0e14 	add.w	lr, r4, #20
 800a72c:	46a9      	mov	r9, r5
 800a72e:	f04f 0c00 	mov.w	ip, #0
 800a732:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a736:	f8d9 1000 	ldr.w	r1, [r9]
 800a73a:	fa1f fb82 	uxth.w	fp, r2
 800a73e:	b289      	uxth	r1, r1
 800a740:	fb0a 110b 	mla	r1, sl, fp, r1
 800a744:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a748:	f8d9 2000 	ldr.w	r2, [r9]
 800a74c:	4461      	add	r1, ip
 800a74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a752:	fb0a c20b 	mla	r2, sl, fp, ip
 800a756:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a75a:	b289      	uxth	r1, r1
 800a75c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a760:	4577      	cmp	r7, lr
 800a762:	f849 1b04 	str.w	r1, [r9], #4
 800a766:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a76a:	d8e2      	bhi.n	800a732 <__multiply+0xb2>
 800a76c:	9a01      	ldr	r2, [sp, #4]
 800a76e:	f845 c002 	str.w	ip, [r5, r2]
 800a772:	9a03      	ldr	r2, [sp, #12]
 800a774:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a778:	3304      	adds	r3, #4
 800a77a:	f1b9 0f00 	cmp.w	r9, #0
 800a77e:	d020      	beq.n	800a7c2 <__multiply+0x142>
 800a780:	6829      	ldr	r1, [r5, #0]
 800a782:	f104 0c14 	add.w	ip, r4, #20
 800a786:	46ae      	mov	lr, r5
 800a788:	f04f 0a00 	mov.w	sl, #0
 800a78c:	f8bc b000 	ldrh.w	fp, [ip]
 800a790:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a794:	fb09 220b 	mla	r2, r9, fp, r2
 800a798:	4492      	add	sl, r2
 800a79a:	b289      	uxth	r1, r1
 800a79c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7a0:	f84e 1b04 	str.w	r1, [lr], #4
 800a7a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7a8:	f8be 1000 	ldrh.w	r1, [lr]
 800a7ac:	0c12      	lsrs	r2, r2, #16
 800a7ae:	fb09 1102 	mla	r1, r9, r2, r1
 800a7b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a7b6:	4567      	cmp	r7, ip
 800a7b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7bc:	d8e6      	bhi.n	800a78c <__multiply+0x10c>
 800a7be:	9a01      	ldr	r2, [sp, #4]
 800a7c0:	50a9      	str	r1, [r5, r2]
 800a7c2:	3504      	adds	r5, #4
 800a7c4:	e79a      	b.n	800a6fc <__multiply+0x7c>
 800a7c6:	3e01      	subs	r6, #1
 800a7c8:	e79c      	b.n	800a704 <__multiply+0x84>
 800a7ca:	bf00      	nop
 800a7cc:	0800ba33 	.word	0x0800ba33
 800a7d0:	0800baa4 	.word	0x0800baa4

0800a7d4 <__pow5mult>:
 800a7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d8:	4615      	mov	r5, r2
 800a7da:	f012 0203 	ands.w	r2, r2, #3
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	d007      	beq.n	800a7f4 <__pow5mult+0x20>
 800a7e4:	4c25      	ldr	r4, [pc, #148]	; (800a87c <__pow5mult+0xa8>)
 800a7e6:	3a01      	subs	r2, #1
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ee:	f7ff fe9b 	bl	800a528 <__multadd>
 800a7f2:	4607      	mov	r7, r0
 800a7f4:	10ad      	asrs	r5, r5, #2
 800a7f6:	d03d      	beq.n	800a874 <__pow5mult+0xa0>
 800a7f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7fa:	b97c      	cbnz	r4, 800a81c <__pow5mult+0x48>
 800a7fc:	2010      	movs	r0, #16
 800a7fe:	f7ff fe29 	bl	800a454 <malloc>
 800a802:	4602      	mov	r2, r0
 800a804:	6270      	str	r0, [r6, #36]	; 0x24
 800a806:	b928      	cbnz	r0, 800a814 <__pow5mult+0x40>
 800a808:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <__pow5mult+0xac>)
 800a80a:	481e      	ldr	r0, [pc, #120]	; (800a884 <__pow5mult+0xb0>)
 800a80c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a810:	f000 fdbe 	bl	800b390 <__assert_func>
 800a814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a818:	6004      	str	r4, [r0, #0]
 800a81a:	60c4      	str	r4, [r0, #12]
 800a81c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a824:	b94c      	cbnz	r4, 800a83a <__pow5mult+0x66>
 800a826:	f240 2171 	movw	r1, #625	; 0x271
 800a82a:	4630      	mov	r0, r6
 800a82c:	f7ff ff12 	bl	800a654 <__i2b>
 800a830:	2300      	movs	r3, #0
 800a832:	f8c8 0008 	str.w	r0, [r8, #8]
 800a836:	4604      	mov	r4, r0
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	f04f 0900 	mov.w	r9, #0
 800a83e:	07eb      	lsls	r3, r5, #31
 800a840:	d50a      	bpl.n	800a858 <__pow5mult+0x84>
 800a842:	4639      	mov	r1, r7
 800a844:	4622      	mov	r2, r4
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ff1a 	bl	800a680 <__multiply>
 800a84c:	4639      	mov	r1, r7
 800a84e:	4680      	mov	r8, r0
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff fe47 	bl	800a4e4 <_Bfree>
 800a856:	4647      	mov	r7, r8
 800a858:	106d      	asrs	r5, r5, #1
 800a85a:	d00b      	beq.n	800a874 <__pow5mult+0xa0>
 800a85c:	6820      	ldr	r0, [r4, #0]
 800a85e:	b938      	cbnz	r0, 800a870 <__pow5mult+0x9c>
 800a860:	4622      	mov	r2, r4
 800a862:	4621      	mov	r1, r4
 800a864:	4630      	mov	r0, r6
 800a866:	f7ff ff0b 	bl	800a680 <__multiply>
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	f8c0 9000 	str.w	r9, [r0]
 800a870:	4604      	mov	r4, r0
 800a872:	e7e4      	b.n	800a83e <__pow5mult+0x6a>
 800a874:	4638      	mov	r0, r7
 800a876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a87a:	bf00      	nop
 800a87c:	0800bbf0 	.word	0x0800bbf0
 800a880:	0800b9c1 	.word	0x0800b9c1
 800a884:	0800baa4 	.word	0x0800baa4

0800a888 <__lshift>:
 800a888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a88c:	460c      	mov	r4, r1
 800a88e:	6849      	ldr	r1, [r1, #4]
 800a890:	6923      	ldr	r3, [r4, #16]
 800a892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	4607      	mov	r7, r0
 800a89a:	4691      	mov	r9, r2
 800a89c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8a0:	f108 0601 	add.w	r6, r8, #1
 800a8a4:	42b3      	cmp	r3, r6
 800a8a6:	db0b      	blt.n	800a8c0 <__lshift+0x38>
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff fddb 	bl	800a464 <_Balloc>
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	b948      	cbnz	r0, 800a8c6 <__lshift+0x3e>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	4b2a      	ldr	r3, [pc, #168]	; (800a960 <__lshift+0xd8>)
 800a8b6:	482b      	ldr	r0, [pc, #172]	; (800a964 <__lshift+0xdc>)
 800a8b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a8bc:	f000 fd68 	bl	800b390 <__assert_func>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	e7ee      	b.n	800a8a4 <__lshift+0x1c>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f100 0114 	add.w	r1, r0, #20
 800a8cc:	f100 0210 	add.w	r2, r0, #16
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	4553      	cmp	r3, sl
 800a8d4:	db37      	blt.n	800a946 <__lshift+0xbe>
 800a8d6:	6920      	ldr	r0, [r4, #16]
 800a8d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8dc:	f104 0314 	add.w	r3, r4, #20
 800a8e0:	f019 091f 	ands.w	r9, r9, #31
 800a8e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8ec:	d02f      	beq.n	800a94e <__lshift+0xc6>
 800a8ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a8f2:	468a      	mov	sl, r1
 800a8f4:	f04f 0c00 	mov.w	ip, #0
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	fa02 f209 	lsl.w	r2, r2, r9
 800a8fe:	ea42 020c 	orr.w	r2, r2, ip
 800a902:	f84a 2b04 	str.w	r2, [sl], #4
 800a906:	f853 2b04 	ldr.w	r2, [r3], #4
 800a90a:	4298      	cmp	r0, r3
 800a90c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a910:	d8f2      	bhi.n	800a8f8 <__lshift+0x70>
 800a912:	1b03      	subs	r3, r0, r4
 800a914:	3b15      	subs	r3, #21
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	3304      	adds	r3, #4
 800a91c:	f104 0215 	add.w	r2, r4, #21
 800a920:	4290      	cmp	r0, r2
 800a922:	bf38      	it	cc
 800a924:	2304      	movcc	r3, #4
 800a926:	f841 c003 	str.w	ip, [r1, r3]
 800a92a:	f1bc 0f00 	cmp.w	ip, #0
 800a92e:	d001      	beq.n	800a934 <__lshift+0xac>
 800a930:	f108 0602 	add.w	r6, r8, #2
 800a934:	3e01      	subs	r6, #1
 800a936:	4638      	mov	r0, r7
 800a938:	612e      	str	r6, [r5, #16]
 800a93a:	4621      	mov	r1, r4
 800a93c:	f7ff fdd2 	bl	800a4e4 <_Bfree>
 800a940:	4628      	mov	r0, r5
 800a942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a946:	f842 0f04 	str.w	r0, [r2, #4]!
 800a94a:	3301      	adds	r3, #1
 800a94c:	e7c1      	b.n	800a8d2 <__lshift+0x4a>
 800a94e:	3904      	subs	r1, #4
 800a950:	f853 2b04 	ldr.w	r2, [r3], #4
 800a954:	f841 2f04 	str.w	r2, [r1, #4]!
 800a958:	4298      	cmp	r0, r3
 800a95a:	d8f9      	bhi.n	800a950 <__lshift+0xc8>
 800a95c:	e7ea      	b.n	800a934 <__lshift+0xac>
 800a95e:	bf00      	nop
 800a960:	0800ba33 	.word	0x0800ba33
 800a964:	0800baa4 	.word	0x0800baa4

0800a968 <__mcmp>:
 800a968:	b530      	push	{r4, r5, lr}
 800a96a:	6902      	ldr	r2, [r0, #16]
 800a96c:	690c      	ldr	r4, [r1, #16]
 800a96e:	1b12      	subs	r2, r2, r4
 800a970:	d10e      	bne.n	800a990 <__mcmp+0x28>
 800a972:	f100 0314 	add.w	r3, r0, #20
 800a976:	3114      	adds	r1, #20
 800a978:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a97c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a980:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a984:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a988:	42a5      	cmp	r5, r4
 800a98a:	d003      	beq.n	800a994 <__mcmp+0x2c>
 800a98c:	d305      	bcc.n	800a99a <__mcmp+0x32>
 800a98e:	2201      	movs	r2, #1
 800a990:	4610      	mov	r0, r2
 800a992:	bd30      	pop	{r4, r5, pc}
 800a994:	4283      	cmp	r3, r0
 800a996:	d3f3      	bcc.n	800a980 <__mcmp+0x18>
 800a998:	e7fa      	b.n	800a990 <__mcmp+0x28>
 800a99a:	f04f 32ff 	mov.w	r2, #4294967295
 800a99e:	e7f7      	b.n	800a990 <__mcmp+0x28>

0800a9a0 <__mdiff>:
 800a9a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	4690      	mov	r8, r2
 800a9ae:	f7ff ffdb 	bl	800a968 <__mcmp>
 800a9b2:	1e05      	subs	r5, r0, #0
 800a9b4:	d110      	bne.n	800a9d8 <__mdiff+0x38>
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7ff fd53 	bl	800a464 <_Balloc>
 800a9be:	b930      	cbnz	r0, 800a9ce <__mdiff+0x2e>
 800a9c0:	4b3a      	ldr	r3, [pc, #232]	; (800aaac <__mdiff+0x10c>)
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	f240 2132 	movw	r1, #562	; 0x232
 800a9c8:	4839      	ldr	r0, [pc, #228]	; (800aab0 <__mdiff+0x110>)
 800a9ca:	f000 fce1 	bl	800b390 <__assert_func>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d8:	bfa4      	itt	ge
 800a9da:	4643      	movge	r3, r8
 800a9dc:	46a0      	movge	r8, r4
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a9e4:	bfa6      	itte	ge
 800a9e6:	461c      	movge	r4, r3
 800a9e8:	2500      	movge	r5, #0
 800a9ea:	2501      	movlt	r5, #1
 800a9ec:	f7ff fd3a 	bl	800a464 <_Balloc>
 800a9f0:	b920      	cbnz	r0, 800a9fc <__mdiff+0x5c>
 800a9f2:	4b2e      	ldr	r3, [pc, #184]	; (800aaac <__mdiff+0x10c>)
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a9fa:	e7e5      	b.n	800a9c8 <__mdiff+0x28>
 800a9fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa00:	6926      	ldr	r6, [r4, #16]
 800aa02:	60c5      	str	r5, [r0, #12]
 800aa04:	f104 0914 	add.w	r9, r4, #20
 800aa08:	f108 0514 	add.w	r5, r8, #20
 800aa0c:	f100 0e14 	add.w	lr, r0, #20
 800aa10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa18:	f108 0210 	add.w	r2, r8, #16
 800aa1c:	46f2      	mov	sl, lr
 800aa1e:	2100      	movs	r1, #0
 800aa20:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa28:	fa1f f883 	uxth.w	r8, r3
 800aa2c:	fa11 f18b 	uxtah	r1, r1, fp
 800aa30:	0c1b      	lsrs	r3, r3, #16
 800aa32:	eba1 0808 	sub.w	r8, r1, r8
 800aa36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa3e:	fa1f f888 	uxth.w	r8, r8
 800aa42:	1419      	asrs	r1, r3, #16
 800aa44:	454e      	cmp	r6, r9
 800aa46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa4a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa4e:	d8e7      	bhi.n	800aa20 <__mdiff+0x80>
 800aa50:	1b33      	subs	r3, r6, r4
 800aa52:	3b15      	subs	r3, #21
 800aa54:	f023 0303 	bic.w	r3, r3, #3
 800aa58:	3304      	adds	r3, #4
 800aa5a:	3415      	adds	r4, #21
 800aa5c:	42a6      	cmp	r6, r4
 800aa5e:	bf38      	it	cc
 800aa60:	2304      	movcc	r3, #4
 800aa62:	441d      	add	r5, r3
 800aa64:	4473      	add	r3, lr
 800aa66:	469e      	mov	lr, r3
 800aa68:	462e      	mov	r6, r5
 800aa6a:	4566      	cmp	r6, ip
 800aa6c:	d30e      	bcc.n	800aa8c <__mdiff+0xec>
 800aa6e:	f10c 0203 	add.w	r2, ip, #3
 800aa72:	1b52      	subs	r2, r2, r5
 800aa74:	f022 0203 	bic.w	r2, r2, #3
 800aa78:	3d03      	subs	r5, #3
 800aa7a:	45ac      	cmp	ip, r5
 800aa7c:	bf38      	it	cc
 800aa7e:	2200      	movcc	r2, #0
 800aa80:	441a      	add	r2, r3
 800aa82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa86:	b17b      	cbz	r3, 800aaa8 <__mdiff+0x108>
 800aa88:	6107      	str	r7, [r0, #16]
 800aa8a:	e7a3      	b.n	800a9d4 <__mdiff+0x34>
 800aa8c:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa90:	fa11 f288 	uxtah	r2, r1, r8
 800aa94:	1414      	asrs	r4, r2, #16
 800aa96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa9a:	b292      	uxth	r2, r2
 800aa9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aaa0:	f84e 2b04 	str.w	r2, [lr], #4
 800aaa4:	1421      	asrs	r1, r4, #16
 800aaa6:	e7e0      	b.n	800aa6a <__mdiff+0xca>
 800aaa8:	3f01      	subs	r7, #1
 800aaaa:	e7ea      	b.n	800aa82 <__mdiff+0xe2>
 800aaac:	0800ba33 	.word	0x0800ba33
 800aab0:	0800baa4 	.word	0x0800baa4

0800aab4 <__d2b>:
 800aab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aab8:	4689      	mov	r9, r1
 800aaba:	2101      	movs	r1, #1
 800aabc:	ec57 6b10 	vmov	r6, r7, d0
 800aac0:	4690      	mov	r8, r2
 800aac2:	f7ff fccf 	bl	800a464 <_Balloc>
 800aac6:	4604      	mov	r4, r0
 800aac8:	b930      	cbnz	r0, 800aad8 <__d2b+0x24>
 800aaca:	4602      	mov	r2, r0
 800aacc:	4b25      	ldr	r3, [pc, #148]	; (800ab64 <__d2b+0xb0>)
 800aace:	4826      	ldr	r0, [pc, #152]	; (800ab68 <__d2b+0xb4>)
 800aad0:	f240 310a 	movw	r1, #778	; 0x30a
 800aad4:	f000 fc5c 	bl	800b390 <__assert_func>
 800aad8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aadc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aae0:	bb35      	cbnz	r5, 800ab30 <__d2b+0x7c>
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	9301      	str	r3, [sp, #4]
 800aae6:	d028      	beq.n	800ab3a <__d2b+0x86>
 800aae8:	4668      	mov	r0, sp
 800aaea:	9600      	str	r6, [sp, #0]
 800aaec:	f7ff fd82 	bl	800a5f4 <__lo0bits>
 800aaf0:	9900      	ldr	r1, [sp, #0]
 800aaf2:	b300      	cbz	r0, 800ab36 <__d2b+0x82>
 800aaf4:	9a01      	ldr	r2, [sp, #4]
 800aaf6:	f1c0 0320 	rsb	r3, r0, #32
 800aafa:	fa02 f303 	lsl.w	r3, r2, r3
 800aafe:	430b      	orrs	r3, r1
 800ab00:	40c2      	lsrs	r2, r0
 800ab02:	6163      	str	r3, [r4, #20]
 800ab04:	9201      	str	r2, [sp, #4]
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	61a3      	str	r3, [r4, #24]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bf14      	ite	ne
 800ab0e:	2202      	movne	r2, #2
 800ab10:	2201      	moveq	r2, #1
 800ab12:	6122      	str	r2, [r4, #16]
 800ab14:	b1d5      	cbz	r5, 800ab4c <__d2b+0x98>
 800ab16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab1a:	4405      	add	r5, r0
 800ab1c:	f8c9 5000 	str.w	r5, [r9]
 800ab20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab24:	f8c8 0000 	str.w	r0, [r8]
 800ab28:	4620      	mov	r0, r4
 800ab2a:	b003      	add	sp, #12
 800ab2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab34:	e7d5      	b.n	800aae2 <__d2b+0x2e>
 800ab36:	6161      	str	r1, [r4, #20]
 800ab38:	e7e5      	b.n	800ab06 <__d2b+0x52>
 800ab3a:	a801      	add	r0, sp, #4
 800ab3c:	f7ff fd5a 	bl	800a5f4 <__lo0bits>
 800ab40:	9b01      	ldr	r3, [sp, #4]
 800ab42:	6163      	str	r3, [r4, #20]
 800ab44:	2201      	movs	r2, #1
 800ab46:	6122      	str	r2, [r4, #16]
 800ab48:	3020      	adds	r0, #32
 800ab4a:	e7e3      	b.n	800ab14 <__d2b+0x60>
 800ab4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab54:	f8c9 0000 	str.w	r0, [r9]
 800ab58:	6918      	ldr	r0, [r3, #16]
 800ab5a:	f7ff fd2b 	bl	800a5b4 <__hi0bits>
 800ab5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab62:	e7df      	b.n	800ab24 <__d2b+0x70>
 800ab64:	0800ba33 	.word	0x0800ba33
 800ab68:	0800baa4 	.word	0x0800baa4

0800ab6c <_calloc_r>:
 800ab6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab6e:	fba1 2402 	umull	r2, r4, r1, r2
 800ab72:	b94c      	cbnz	r4, 800ab88 <_calloc_r+0x1c>
 800ab74:	4611      	mov	r1, r2
 800ab76:	9201      	str	r2, [sp, #4]
 800ab78:	f000 f87a 	bl	800ac70 <_malloc_r>
 800ab7c:	9a01      	ldr	r2, [sp, #4]
 800ab7e:	4605      	mov	r5, r0
 800ab80:	b930      	cbnz	r0, 800ab90 <_calloc_r+0x24>
 800ab82:	4628      	mov	r0, r5
 800ab84:	b003      	add	sp, #12
 800ab86:	bd30      	pop	{r4, r5, pc}
 800ab88:	220c      	movs	r2, #12
 800ab8a:	6002      	str	r2, [r0, #0]
 800ab8c:	2500      	movs	r5, #0
 800ab8e:	e7f8      	b.n	800ab82 <_calloc_r+0x16>
 800ab90:	4621      	mov	r1, r4
 800ab92:	f7fd fde1 	bl	8008758 <memset>
 800ab96:	e7f4      	b.n	800ab82 <_calloc_r+0x16>

0800ab98 <_free_r>:
 800ab98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab9a:	2900      	cmp	r1, #0
 800ab9c:	d044      	beq.n	800ac28 <_free_r+0x90>
 800ab9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba2:	9001      	str	r0, [sp, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f1a1 0404 	sub.w	r4, r1, #4
 800abaa:	bfb8      	it	lt
 800abac:	18e4      	addlt	r4, r4, r3
 800abae:	f000 fc8f 	bl	800b4d0 <__malloc_lock>
 800abb2:	4a1e      	ldr	r2, [pc, #120]	; (800ac2c <_free_r+0x94>)
 800abb4:	9801      	ldr	r0, [sp, #4]
 800abb6:	6813      	ldr	r3, [r2, #0]
 800abb8:	b933      	cbnz	r3, 800abc8 <_free_r+0x30>
 800abba:	6063      	str	r3, [r4, #4]
 800abbc:	6014      	str	r4, [r2, #0]
 800abbe:	b003      	add	sp, #12
 800abc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abc4:	f000 bc8a 	b.w	800b4dc <__malloc_unlock>
 800abc8:	42a3      	cmp	r3, r4
 800abca:	d908      	bls.n	800abde <_free_r+0x46>
 800abcc:	6825      	ldr	r5, [r4, #0]
 800abce:	1961      	adds	r1, r4, r5
 800abd0:	428b      	cmp	r3, r1
 800abd2:	bf01      	itttt	eq
 800abd4:	6819      	ldreq	r1, [r3, #0]
 800abd6:	685b      	ldreq	r3, [r3, #4]
 800abd8:	1949      	addeq	r1, r1, r5
 800abda:	6021      	streq	r1, [r4, #0]
 800abdc:	e7ed      	b.n	800abba <_free_r+0x22>
 800abde:	461a      	mov	r2, r3
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	b10b      	cbz	r3, 800abe8 <_free_r+0x50>
 800abe4:	42a3      	cmp	r3, r4
 800abe6:	d9fa      	bls.n	800abde <_free_r+0x46>
 800abe8:	6811      	ldr	r1, [r2, #0]
 800abea:	1855      	adds	r5, r2, r1
 800abec:	42a5      	cmp	r5, r4
 800abee:	d10b      	bne.n	800ac08 <_free_r+0x70>
 800abf0:	6824      	ldr	r4, [r4, #0]
 800abf2:	4421      	add	r1, r4
 800abf4:	1854      	adds	r4, r2, r1
 800abf6:	42a3      	cmp	r3, r4
 800abf8:	6011      	str	r1, [r2, #0]
 800abfa:	d1e0      	bne.n	800abbe <_free_r+0x26>
 800abfc:	681c      	ldr	r4, [r3, #0]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	6053      	str	r3, [r2, #4]
 800ac02:	4421      	add	r1, r4
 800ac04:	6011      	str	r1, [r2, #0]
 800ac06:	e7da      	b.n	800abbe <_free_r+0x26>
 800ac08:	d902      	bls.n	800ac10 <_free_r+0x78>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	6003      	str	r3, [r0, #0]
 800ac0e:	e7d6      	b.n	800abbe <_free_r+0x26>
 800ac10:	6825      	ldr	r5, [r4, #0]
 800ac12:	1961      	adds	r1, r4, r5
 800ac14:	428b      	cmp	r3, r1
 800ac16:	bf04      	itt	eq
 800ac18:	6819      	ldreq	r1, [r3, #0]
 800ac1a:	685b      	ldreq	r3, [r3, #4]
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	bf04      	itt	eq
 800ac20:	1949      	addeq	r1, r1, r5
 800ac22:	6021      	streq	r1, [r4, #0]
 800ac24:	6054      	str	r4, [r2, #4]
 800ac26:	e7ca      	b.n	800abbe <_free_r+0x26>
 800ac28:	b003      	add	sp, #12
 800ac2a:	bd30      	pop	{r4, r5, pc}
 800ac2c:	200005e8 	.word	0x200005e8

0800ac30 <sbrk_aligned>:
 800ac30:	b570      	push	{r4, r5, r6, lr}
 800ac32:	4e0e      	ldr	r6, [pc, #56]	; (800ac6c <sbrk_aligned+0x3c>)
 800ac34:	460c      	mov	r4, r1
 800ac36:	6831      	ldr	r1, [r6, #0]
 800ac38:	4605      	mov	r5, r0
 800ac3a:	b911      	cbnz	r1, 800ac42 <sbrk_aligned+0x12>
 800ac3c:	f000 fb42 	bl	800b2c4 <_sbrk_r>
 800ac40:	6030      	str	r0, [r6, #0]
 800ac42:	4621      	mov	r1, r4
 800ac44:	4628      	mov	r0, r5
 800ac46:	f000 fb3d 	bl	800b2c4 <_sbrk_r>
 800ac4a:	1c43      	adds	r3, r0, #1
 800ac4c:	d00a      	beq.n	800ac64 <sbrk_aligned+0x34>
 800ac4e:	1cc4      	adds	r4, r0, #3
 800ac50:	f024 0403 	bic.w	r4, r4, #3
 800ac54:	42a0      	cmp	r0, r4
 800ac56:	d007      	beq.n	800ac68 <sbrk_aligned+0x38>
 800ac58:	1a21      	subs	r1, r4, r0
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	f000 fb32 	bl	800b2c4 <_sbrk_r>
 800ac60:	3001      	adds	r0, #1
 800ac62:	d101      	bne.n	800ac68 <sbrk_aligned+0x38>
 800ac64:	f04f 34ff 	mov.w	r4, #4294967295
 800ac68:	4620      	mov	r0, r4
 800ac6a:	bd70      	pop	{r4, r5, r6, pc}
 800ac6c:	200005ec 	.word	0x200005ec

0800ac70 <_malloc_r>:
 800ac70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac74:	1ccd      	adds	r5, r1, #3
 800ac76:	f025 0503 	bic.w	r5, r5, #3
 800ac7a:	3508      	adds	r5, #8
 800ac7c:	2d0c      	cmp	r5, #12
 800ac7e:	bf38      	it	cc
 800ac80:	250c      	movcc	r5, #12
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	4607      	mov	r7, r0
 800ac86:	db01      	blt.n	800ac8c <_malloc_r+0x1c>
 800ac88:	42a9      	cmp	r1, r5
 800ac8a:	d905      	bls.n	800ac98 <_malloc_r+0x28>
 800ac8c:	230c      	movs	r3, #12
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	2600      	movs	r6, #0
 800ac92:	4630      	mov	r0, r6
 800ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac98:	4e2e      	ldr	r6, [pc, #184]	; (800ad54 <_malloc_r+0xe4>)
 800ac9a:	f000 fc19 	bl	800b4d0 <__malloc_lock>
 800ac9e:	6833      	ldr	r3, [r6, #0]
 800aca0:	461c      	mov	r4, r3
 800aca2:	bb34      	cbnz	r4, 800acf2 <_malloc_r+0x82>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4638      	mov	r0, r7
 800aca8:	f7ff ffc2 	bl	800ac30 <sbrk_aligned>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	4604      	mov	r4, r0
 800acb0:	d14d      	bne.n	800ad4e <_malloc_r+0xde>
 800acb2:	6834      	ldr	r4, [r6, #0]
 800acb4:	4626      	mov	r6, r4
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	d140      	bne.n	800ad3c <_malloc_r+0xcc>
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	4631      	mov	r1, r6
 800acbe:	4638      	mov	r0, r7
 800acc0:	eb04 0803 	add.w	r8, r4, r3
 800acc4:	f000 fafe 	bl	800b2c4 <_sbrk_r>
 800acc8:	4580      	cmp	r8, r0
 800acca:	d13a      	bne.n	800ad42 <_malloc_r+0xd2>
 800accc:	6821      	ldr	r1, [r4, #0]
 800acce:	3503      	adds	r5, #3
 800acd0:	1a6d      	subs	r5, r5, r1
 800acd2:	f025 0503 	bic.w	r5, r5, #3
 800acd6:	3508      	adds	r5, #8
 800acd8:	2d0c      	cmp	r5, #12
 800acda:	bf38      	it	cc
 800acdc:	250c      	movcc	r5, #12
 800acde:	4629      	mov	r1, r5
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff ffa5 	bl	800ac30 <sbrk_aligned>
 800ace6:	3001      	adds	r0, #1
 800ace8:	d02b      	beq.n	800ad42 <_malloc_r+0xd2>
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	442b      	add	r3, r5
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	e00e      	b.n	800ad10 <_malloc_r+0xa0>
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	1b52      	subs	r2, r2, r5
 800acf6:	d41e      	bmi.n	800ad36 <_malloc_r+0xc6>
 800acf8:	2a0b      	cmp	r2, #11
 800acfa:	d916      	bls.n	800ad2a <_malloc_r+0xba>
 800acfc:	1961      	adds	r1, r4, r5
 800acfe:	42a3      	cmp	r3, r4
 800ad00:	6025      	str	r5, [r4, #0]
 800ad02:	bf18      	it	ne
 800ad04:	6059      	strne	r1, [r3, #4]
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	bf08      	it	eq
 800ad0a:	6031      	streq	r1, [r6, #0]
 800ad0c:	5162      	str	r2, [r4, r5]
 800ad0e:	604b      	str	r3, [r1, #4]
 800ad10:	4638      	mov	r0, r7
 800ad12:	f104 060b 	add.w	r6, r4, #11
 800ad16:	f000 fbe1 	bl	800b4dc <__malloc_unlock>
 800ad1a:	f026 0607 	bic.w	r6, r6, #7
 800ad1e:	1d23      	adds	r3, r4, #4
 800ad20:	1af2      	subs	r2, r6, r3
 800ad22:	d0b6      	beq.n	800ac92 <_malloc_r+0x22>
 800ad24:	1b9b      	subs	r3, r3, r6
 800ad26:	50a3      	str	r3, [r4, r2]
 800ad28:	e7b3      	b.n	800ac92 <_malloc_r+0x22>
 800ad2a:	6862      	ldr	r2, [r4, #4]
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	bf0c      	ite	eq
 800ad30:	6032      	streq	r2, [r6, #0]
 800ad32:	605a      	strne	r2, [r3, #4]
 800ad34:	e7ec      	b.n	800ad10 <_malloc_r+0xa0>
 800ad36:	4623      	mov	r3, r4
 800ad38:	6864      	ldr	r4, [r4, #4]
 800ad3a:	e7b2      	b.n	800aca2 <_malloc_r+0x32>
 800ad3c:	4634      	mov	r4, r6
 800ad3e:	6876      	ldr	r6, [r6, #4]
 800ad40:	e7b9      	b.n	800acb6 <_malloc_r+0x46>
 800ad42:	230c      	movs	r3, #12
 800ad44:	603b      	str	r3, [r7, #0]
 800ad46:	4638      	mov	r0, r7
 800ad48:	f000 fbc8 	bl	800b4dc <__malloc_unlock>
 800ad4c:	e7a1      	b.n	800ac92 <_malloc_r+0x22>
 800ad4e:	6025      	str	r5, [r4, #0]
 800ad50:	e7de      	b.n	800ad10 <_malloc_r+0xa0>
 800ad52:	bf00      	nop
 800ad54:	200005e8 	.word	0x200005e8

0800ad58 <__ssputs_r>:
 800ad58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad5c:	688e      	ldr	r6, [r1, #8]
 800ad5e:	429e      	cmp	r6, r3
 800ad60:	4682      	mov	sl, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	4690      	mov	r8, r2
 800ad66:	461f      	mov	r7, r3
 800ad68:	d838      	bhi.n	800addc <__ssputs_r+0x84>
 800ad6a:	898a      	ldrh	r2, [r1, #12]
 800ad6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad70:	d032      	beq.n	800add8 <__ssputs_r+0x80>
 800ad72:	6825      	ldr	r5, [r4, #0]
 800ad74:	6909      	ldr	r1, [r1, #16]
 800ad76:	eba5 0901 	sub.w	r9, r5, r1
 800ad7a:	6965      	ldr	r5, [r4, #20]
 800ad7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad84:	3301      	adds	r3, #1
 800ad86:	444b      	add	r3, r9
 800ad88:	106d      	asrs	r5, r5, #1
 800ad8a:	429d      	cmp	r5, r3
 800ad8c:	bf38      	it	cc
 800ad8e:	461d      	movcc	r5, r3
 800ad90:	0553      	lsls	r3, r2, #21
 800ad92:	d531      	bpl.n	800adf8 <__ssputs_r+0xa0>
 800ad94:	4629      	mov	r1, r5
 800ad96:	f7ff ff6b 	bl	800ac70 <_malloc_r>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	b950      	cbnz	r0, 800adb4 <__ssputs_r+0x5c>
 800ad9e:	230c      	movs	r3, #12
 800ada0:	f8ca 3000 	str.w	r3, [sl]
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adaa:	81a3      	strh	r3, [r4, #12]
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb4:	6921      	ldr	r1, [r4, #16]
 800adb6:	464a      	mov	r2, r9
 800adb8:	f7fd fcc0 	bl	800873c <memcpy>
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	6126      	str	r6, [r4, #16]
 800adca:	6165      	str	r5, [r4, #20]
 800adcc:	444e      	add	r6, r9
 800adce:	eba5 0509 	sub.w	r5, r5, r9
 800add2:	6026      	str	r6, [r4, #0]
 800add4:	60a5      	str	r5, [r4, #8]
 800add6:	463e      	mov	r6, r7
 800add8:	42be      	cmp	r6, r7
 800adda:	d900      	bls.n	800adde <__ssputs_r+0x86>
 800addc:	463e      	mov	r6, r7
 800adde:	6820      	ldr	r0, [r4, #0]
 800ade0:	4632      	mov	r2, r6
 800ade2:	4641      	mov	r1, r8
 800ade4:	f000 fb5a 	bl	800b49c <memmove>
 800ade8:	68a3      	ldr	r3, [r4, #8]
 800adea:	1b9b      	subs	r3, r3, r6
 800adec:	60a3      	str	r3, [r4, #8]
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	4433      	add	r3, r6
 800adf2:	6023      	str	r3, [r4, #0]
 800adf4:	2000      	movs	r0, #0
 800adf6:	e7db      	b.n	800adb0 <__ssputs_r+0x58>
 800adf8:	462a      	mov	r2, r5
 800adfa:	f000 fb75 	bl	800b4e8 <_realloc_r>
 800adfe:	4606      	mov	r6, r0
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d1e1      	bne.n	800adc8 <__ssputs_r+0x70>
 800ae04:	6921      	ldr	r1, [r4, #16]
 800ae06:	4650      	mov	r0, sl
 800ae08:	f7ff fec6 	bl	800ab98 <_free_r>
 800ae0c:	e7c7      	b.n	800ad9e <__ssputs_r+0x46>
	...

0800ae10 <_svfiprintf_r>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	4698      	mov	r8, r3
 800ae16:	898b      	ldrh	r3, [r1, #12]
 800ae18:	061b      	lsls	r3, r3, #24
 800ae1a:	b09d      	sub	sp, #116	; 0x74
 800ae1c:	4607      	mov	r7, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	4614      	mov	r4, r2
 800ae22:	d50e      	bpl.n	800ae42 <_svfiprintf_r+0x32>
 800ae24:	690b      	ldr	r3, [r1, #16]
 800ae26:	b963      	cbnz	r3, 800ae42 <_svfiprintf_r+0x32>
 800ae28:	2140      	movs	r1, #64	; 0x40
 800ae2a:	f7ff ff21 	bl	800ac70 <_malloc_r>
 800ae2e:	6028      	str	r0, [r5, #0]
 800ae30:	6128      	str	r0, [r5, #16]
 800ae32:	b920      	cbnz	r0, 800ae3e <_svfiprintf_r+0x2e>
 800ae34:	230c      	movs	r3, #12
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3c:	e0d1      	b.n	800afe2 <_svfiprintf_r+0x1d2>
 800ae3e:	2340      	movs	r3, #64	; 0x40
 800ae40:	616b      	str	r3, [r5, #20]
 800ae42:	2300      	movs	r3, #0
 800ae44:	9309      	str	r3, [sp, #36]	; 0x24
 800ae46:	2320      	movs	r3, #32
 800ae48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae50:	2330      	movs	r3, #48	; 0x30
 800ae52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800affc <_svfiprintf_r+0x1ec>
 800ae56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae5a:	f04f 0901 	mov.w	r9, #1
 800ae5e:	4623      	mov	r3, r4
 800ae60:	469a      	mov	sl, r3
 800ae62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae66:	b10a      	cbz	r2, 800ae6c <_svfiprintf_r+0x5c>
 800ae68:	2a25      	cmp	r2, #37	; 0x25
 800ae6a:	d1f9      	bne.n	800ae60 <_svfiprintf_r+0x50>
 800ae6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae70:	d00b      	beq.n	800ae8a <_svfiprintf_r+0x7a>
 800ae72:	465b      	mov	r3, fp
 800ae74:	4622      	mov	r2, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	4638      	mov	r0, r7
 800ae7a:	f7ff ff6d 	bl	800ad58 <__ssputs_r>
 800ae7e:	3001      	adds	r0, #1
 800ae80:	f000 80aa 	beq.w	800afd8 <_svfiprintf_r+0x1c8>
 800ae84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae86:	445a      	add	r2, fp
 800ae88:	9209      	str	r2, [sp, #36]	; 0x24
 800ae8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 80a2 	beq.w	800afd8 <_svfiprintf_r+0x1c8>
 800ae94:	2300      	movs	r3, #0
 800ae96:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae9e:	f10a 0a01 	add.w	sl, sl, #1
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	9307      	str	r3, [sp, #28]
 800aea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeaa:	931a      	str	r3, [sp, #104]	; 0x68
 800aeac:	4654      	mov	r4, sl
 800aeae:	2205      	movs	r2, #5
 800aeb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb4:	4851      	ldr	r0, [pc, #324]	; (800affc <_svfiprintf_r+0x1ec>)
 800aeb6:	f7f5 f99b 	bl	80001f0 <memchr>
 800aeba:	9a04      	ldr	r2, [sp, #16]
 800aebc:	b9d8      	cbnz	r0, 800aef6 <_svfiprintf_r+0xe6>
 800aebe:	06d0      	lsls	r0, r2, #27
 800aec0:	bf44      	itt	mi
 800aec2:	2320      	movmi	r3, #32
 800aec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec8:	0711      	lsls	r1, r2, #28
 800aeca:	bf44      	itt	mi
 800aecc:	232b      	movmi	r3, #43	; 0x2b
 800aece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aed2:	f89a 3000 	ldrb.w	r3, [sl]
 800aed6:	2b2a      	cmp	r3, #42	; 0x2a
 800aed8:	d015      	beq.n	800af06 <_svfiprintf_r+0xf6>
 800aeda:	9a07      	ldr	r2, [sp, #28]
 800aedc:	4654      	mov	r4, sl
 800aede:	2000      	movs	r0, #0
 800aee0:	f04f 0c0a 	mov.w	ip, #10
 800aee4:	4621      	mov	r1, r4
 800aee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeea:	3b30      	subs	r3, #48	; 0x30
 800aeec:	2b09      	cmp	r3, #9
 800aeee:	d94e      	bls.n	800af8e <_svfiprintf_r+0x17e>
 800aef0:	b1b0      	cbz	r0, 800af20 <_svfiprintf_r+0x110>
 800aef2:	9207      	str	r2, [sp, #28]
 800aef4:	e014      	b.n	800af20 <_svfiprintf_r+0x110>
 800aef6:	eba0 0308 	sub.w	r3, r0, r8
 800aefa:	fa09 f303 	lsl.w	r3, r9, r3
 800aefe:	4313      	orrs	r3, r2
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	46a2      	mov	sl, r4
 800af04:	e7d2      	b.n	800aeac <_svfiprintf_r+0x9c>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	1d19      	adds	r1, r3, #4
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	9103      	str	r1, [sp, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfbb      	ittet	lt
 800af12:	425b      	neglt	r3, r3
 800af14:	f042 0202 	orrlt.w	r2, r2, #2
 800af18:	9307      	strge	r3, [sp, #28]
 800af1a:	9307      	strlt	r3, [sp, #28]
 800af1c:	bfb8      	it	lt
 800af1e:	9204      	strlt	r2, [sp, #16]
 800af20:	7823      	ldrb	r3, [r4, #0]
 800af22:	2b2e      	cmp	r3, #46	; 0x2e
 800af24:	d10c      	bne.n	800af40 <_svfiprintf_r+0x130>
 800af26:	7863      	ldrb	r3, [r4, #1]
 800af28:	2b2a      	cmp	r3, #42	; 0x2a
 800af2a:	d135      	bne.n	800af98 <_svfiprintf_r+0x188>
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	1d1a      	adds	r2, r3, #4
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	9203      	str	r2, [sp, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfb8      	it	lt
 800af38:	f04f 33ff 	movlt.w	r3, #4294967295
 800af3c:	3402      	adds	r4, #2
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b00c <_svfiprintf_r+0x1fc>
 800af44:	7821      	ldrb	r1, [r4, #0]
 800af46:	2203      	movs	r2, #3
 800af48:	4650      	mov	r0, sl
 800af4a:	f7f5 f951 	bl	80001f0 <memchr>
 800af4e:	b140      	cbz	r0, 800af62 <_svfiprintf_r+0x152>
 800af50:	2340      	movs	r3, #64	; 0x40
 800af52:	eba0 000a 	sub.w	r0, r0, sl
 800af56:	fa03 f000 	lsl.w	r0, r3, r0
 800af5a:	9b04      	ldr	r3, [sp, #16]
 800af5c:	4303      	orrs	r3, r0
 800af5e:	3401      	adds	r4, #1
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af66:	4826      	ldr	r0, [pc, #152]	; (800b000 <_svfiprintf_r+0x1f0>)
 800af68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af6c:	2206      	movs	r2, #6
 800af6e:	f7f5 f93f 	bl	80001f0 <memchr>
 800af72:	2800      	cmp	r0, #0
 800af74:	d038      	beq.n	800afe8 <_svfiprintf_r+0x1d8>
 800af76:	4b23      	ldr	r3, [pc, #140]	; (800b004 <_svfiprintf_r+0x1f4>)
 800af78:	bb1b      	cbnz	r3, 800afc2 <_svfiprintf_r+0x1b2>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	3307      	adds	r3, #7
 800af7e:	f023 0307 	bic.w	r3, r3, #7
 800af82:	3308      	adds	r3, #8
 800af84:	9303      	str	r3, [sp, #12]
 800af86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af88:	4433      	add	r3, r6
 800af8a:	9309      	str	r3, [sp, #36]	; 0x24
 800af8c:	e767      	b.n	800ae5e <_svfiprintf_r+0x4e>
 800af8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af92:	460c      	mov	r4, r1
 800af94:	2001      	movs	r0, #1
 800af96:	e7a5      	b.n	800aee4 <_svfiprintf_r+0xd4>
 800af98:	2300      	movs	r3, #0
 800af9a:	3401      	adds	r4, #1
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	4619      	mov	r1, r3
 800afa0:	f04f 0c0a 	mov.w	ip, #10
 800afa4:	4620      	mov	r0, r4
 800afa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afaa:	3a30      	subs	r2, #48	; 0x30
 800afac:	2a09      	cmp	r2, #9
 800afae:	d903      	bls.n	800afb8 <_svfiprintf_r+0x1a8>
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d0c5      	beq.n	800af40 <_svfiprintf_r+0x130>
 800afb4:	9105      	str	r1, [sp, #20]
 800afb6:	e7c3      	b.n	800af40 <_svfiprintf_r+0x130>
 800afb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afbc:	4604      	mov	r4, r0
 800afbe:	2301      	movs	r3, #1
 800afc0:	e7f0      	b.n	800afa4 <_svfiprintf_r+0x194>
 800afc2:	ab03      	add	r3, sp, #12
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	462a      	mov	r2, r5
 800afc8:	4b0f      	ldr	r3, [pc, #60]	; (800b008 <_svfiprintf_r+0x1f8>)
 800afca:	a904      	add	r1, sp, #16
 800afcc:	4638      	mov	r0, r7
 800afce:	f7fd fc6b 	bl	80088a8 <_printf_float>
 800afd2:	1c42      	adds	r2, r0, #1
 800afd4:	4606      	mov	r6, r0
 800afd6:	d1d6      	bne.n	800af86 <_svfiprintf_r+0x176>
 800afd8:	89ab      	ldrh	r3, [r5, #12]
 800afda:	065b      	lsls	r3, r3, #25
 800afdc:	f53f af2c 	bmi.w	800ae38 <_svfiprintf_r+0x28>
 800afe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afe2:	b01d      	add	sp, #116	; 0x74
 800afe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe8:	ab03      	add	r3, sp, #12
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	462a      	mov	r2, r5
 800afee:	4b06      	ldr	r3, [pc, #24]	; (800b008 <_svfiprintf_r+0x1f8>)
 800aff0:	a904      	add	r1, sp, #16
 800aff2:	4638      	mov	r0, r7
 800aff4:	f7fd fefc 	bl	8008df0 <_printf_i>
 800aff8:	e7eb      	b.n	800afd2 <_svfiprintf_r+0x1c2>
 800affa:	bf00      	nop
 800affc:	0800bbfc 	.word	0x0800bbfc
 800b000:	0800bc06 	.word	0x0800bc06
 800b004:	080088a9 	.word	0x080088a9
 800b008:	0800ad59 	.word	0x0800ad59
 800b00c:	0800bc02 	.word	0x0800bc02

0800b010 <__sfputc_r>:
 800b010:	6893      	ldr	r3, [r2, #8]
 800b012:	3b01      	subs	r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	b410      	push	{r4}
 800b018:	6093      	str	r3, [r2, #8]
 800b01a:	da08      	bge.n	800b02e <__sfputc_r+0x1e>
 800b01c:	6994      	ldr	r4, [r2, #24]
 800b01e:	42a3      	cmp	r3, r4
 800b020:	db01      	blt.n	800b026 <__sfputc_r+0x16>
 800b022:	290a      	cmp	r1, #10
 800b024:	d103      	bne.n	800b02e <__sfputc_r+0x1e>
 800b026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02a:	f7fe b8b5 	b.w	8009198 <__swbuf_r>
 800b02e:	6813      	ldr	r3, [r2, #0]
 800b030:	1c58      	adds	r0, r3, #1
 800b032:	6010      	str	r0, [r2, #0]
 800b034:	7019      	strb	r1, [r3, #0]
 800b036:	4608      	mov	r0, r1
 800b038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <__sfputs_r>:
 800b03e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b040:	4606      	mov	r6, r0
 800b042:	460f      	mov	r7, r1
 800b044:	4614      	mov	r4, r2
 800b046:	18d5      	adds	r5, r2, r3
 800b048:	42ac      	cmp	r4, r5
 800b04a:	d101      	bne.n	800b050 <__sfputs_r+0x12>
 800b04c:	2000      	movs	r0, #0
 800b04e:	e007      	b.n	800b060 <__sfputs_r+0x22>
 800b050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b054:	463a      	mov	r2, r7
 800b056:	4630      	mov	r0, r6
 800b058:	f7ff ffda 	bl	800b010 <__sfputc_r>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d1f3      	bne.n	800b048 <__sfputs_r+0xa>
 800b060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b064 <_vfiprintf_r>:
 800b064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b068:	460d      	mov	r5, r1
 800b06a:	b09d      	sub	sp, #116	; 0x74
 800b06c:	4614      	mov	r4, r2
 800b06e:	4698      	mov	r8, r3
 800b070:	4606      	mov	r6, r0
 800b072:	b118      	cbz	r0, 800b07c <_vfiprintf_r+0x18>
 800b074:	6983      	ldr	r3, [r0, #24]
 800b076:	b90b      	cbnz	r3, 800b07c <_vfiprintf_r+0x18>
 800b078:	f7ff f8e2 	bl	800a240 <__sinit>
 800b07c:	4b89      	ldr	r3, [pc, #548]	; (800b2a4 <_vfiprintf_r+0x240>)
 800b07e:	429d      	cmp	r5, r3
 800b080:	d11b      	bne.n	800b0ba <_vfiprintf_r+0x56>
 800b082:	6875      	ldr	r5, [r6, #4]
 800b084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b086:	07d9      	lsls	r1, r3, #31
 800b088:	d405      	bmi.n	800b096 <_vfiprintf_r+0x32>
 800b08a:	89ab      	ldrh	r3, [r5, #12]
 800b08c:	059a      	lsls	r2, r3, #22
 800b08e:	d402      	bmi.n	800b096 <_vfiprintf_r+0x32>
 800b090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b092:	f7ff f978 	bl	800a386 <__retarget_lock_acquire_recursive>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	071b      	lsls	r3, r3, #28
 800b09a:	d501      	bpl.n	800b0a0 <_vfiprintf_r+0x3c>
 800b09c:	692b      	ldr	r3, [r5, #16]
 800b09e:	b9eb      	cbnz	r3, 800b0dc <_vfiprintf_r+0x78>
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f7fe f8ca 	bl	800923c <__swsetup_r>
 800b0a8:	b1c0      	cbz	r0, 800b0dc <_vfiprintf_r+0x78>
 800b0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ac:	07dc      	lsls	r4, r3, #31
 800b0ae:	d50e      	bpl.n	800b0ce <_vfiprintf_r+0x6a>
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b4:	b01d      	add	sp, #116	; 0x74
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ba:	4b7b      	ldr	r3, [pc, #492]	; (800b2a8 <_vfiprintf_r+0x244>)
 800b0bc:	429d      	cmp	r5, r3
 800b0be:	d101      	bne.n	800b0c4 <_vfiprintf_r+0x60>
 800b0c0:	68b5      	ldr	r5, [r6, #8]
 800b0c2:	e7df      	b.n	800b084 <_vfiprintf_r+0x20>
 800b0c4:	4b79      	ldr	r3, [pc, #484]	; (800b2ac <_vfiprintf_r+0x248>)
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	bf08      	it	eq
 800b0ca:	68f5      	ldreq	r5, [r6, #12]
 800b0cc:	e7da      	b.n	800b084 <_vfiprintf_r+0x20>
 800b0ce:	89ab      	ldrh	r3, [r5, #12]
 800b0d0:	0598      	lsls	r0, r3, #22
 800b0d2:	d4ed      	bmi.n	800b0b0 <_vfiprintf_r+0x4c>
 800b0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0d6:	f7ff f957 	bl	800a388 <__retarget_lock_release_recursive>
 800b0da:	e7e9      	b.n	800b0b0 <_vfiprintf_r+0x4c>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e0:	2320      	movs	r3, #32
 800b0e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ea:	2330      	movs	r3, #48	; 0x30
 800b0ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2b0 <_vfiprintf_r+0x24c>
 800b0f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f4:	f04f 0901 	mov.w	r9, #1
 800b0f8:	4623      	mov	r3, r4
 800b0fa:	469a      	mov	sl, r3
 800b0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b100:	b10a      	cbz	r2, 800b106 <_vfiprintf_r+0xa2>
 800b102:	2a25      	cmp	r2, #37	; 0x25
 800b104:	d1f9      	bne.n	800b0fa <_vfiprintf_r+0x96>
 800b106:	ebba 0b04 	subs.w	fp, sl, r4
 800b10a:	d00b      	beq.n	800b124 <_vfiprintf_r+0xc0>
 800b10c:	465b      	mov	r3, fp
 800b10e:	4622      	mov	r2, r4
 800b110:	4629      	mov	r1, r5
 800b112:	4630      	mov	r0, r6
 800b114:	f7ff ff93 	bl	800b03e <__sfputs_r>
 800b118:	3001      	adds	r0, #1
 800b11a:	f000 80aa 	beq.w	800b272 <_vfiprintf_r+0x20e>
 800b11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b120:	445a      	add	r2, fp
 800b122:	9209      	str	r2, [sp, #36]	; 0x24
 800b124:	f89a 3000 	ldrb.w	r3, [sl]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 80a2 	beq.w	800b272 <_vfiprintf_r+0x20e>
 800b12e:	2300      	movs	r3, #0
 800b130:	f04f 32ff 	mov.w	r2, #4294967295
 800b134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b138:	f10a 0a01 	add.w	sl, sl, #1
 800b13c:	9304      	str	r3, [sp, #16]
 800b13e:	9307      	str	r3, [sp, #28]
 800b140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b144:	931a      	str	r3, [sp, #104]	; 0x68
 800b146:	4654      	mov	r4, sl
 800b148:	2205      	movs	r2, #5
 800b14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14e:	4858      	ldr	r0, [pc, #352]	; (800b2b0 <_vfiprintf_r+0x24c>)
 800b150:	f7f5 f84e 	bl	80001f0 <memchr>
 800b154:	9a04      	ldr	r2, [sp, #16]
 800b156:	b9d8      	cbnz	r0, 800b190 <_vfiprintf_r+0x12c>
 800b158:	06d1      	lsls	r1, r2, #27
 800b15a:	bf44      	itt	mi
 800b15c:	2320      	movmi	r3, #32
 800b15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b162:	0713      	lsls	r3, r2, #28
 800b164:	bf44      	itt	mi
 800b166:	232b      	movmi	r3, #43	; 0x2b
 800b168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b16c:	f89a 3000 	ldrb.w	r3, [sl]
 800b170:	2b2a      	cmp	r3, #42	; 0x2a
 800b172:	d015      	beq.n	800b1a0 <_vfiprintf_r+0x13c>
 800b174:	9a07      	ldr	r2, [sp, #28]
 800b176:	4654      	mov	r4, sl
 800b178:	2000      	movs	r0, #0
 800b17a:	f04f 0c0a 	mov.w	ip, #10
 800b17e:	4621      	mov	r1, r4
 800b180:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b184:	3b30      	subs	r3, #48	; 0x30
 800b186:	2b09      	cmp	r3, #9
 800b188:	d94e      	bls.n	800b228 <_vfiprintf_r+0x1c4>
 800b18a:	b1b0      	cbz	r0, 800b1ba <_vfiprintf_r+0x156>
 800b18c:	9207      	str	r2, [sp, #28]
 800b18e:	e014      	b.n	800b1ba <_vfiprintf_r+0x156>
 800b190:	eba0 0308 	sub.w	r3, r0, r8
 800b194:	fa09 f303 	lsl.w	r3, r9, r3
 800b198:	4313      	orrs	r3, r2
 800b19a:	9304      	str	r3, [sp, #16]
 800b19c:	46a2      	mov	sl, r4
 800b19e:	e7d2      	b.n	800b146 <_vfiprintf_r+0xe2>
 800b1a0:	9b03      	ldr	r3, [sp, #12]
 800b1a2:	1d19      	adds	r1, r3, #4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	9103      	str	r1, [sp, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	bfbb      	ittet	lt
 800b1ac:	425b      	neglt	r3, r3
 800b1ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b2:	9307      	strge	r3, [sp, #28]
 800b1b4:	9307      	strlt	r3, [sp, #28]
 800b1b6:	bfb8      	it	lt
 800b1b8:	9204      	strlt	r2, [sp, #16]
 800b1ba:	7823      	ldrb	r3, [r4, #0]
 800b1bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b1be:	d10c      	bne.n	800b1da <_vfiprintf_r+0x176>
 800b1c0:	7863      	ldrb	r3, [r4, #1]
 800b1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c4:	d135      	bne.n	800b232 <_vfiprintf_r+0x1ce>
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	1d1a      	adds	r2, r3, #4
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	9203      	str	r2, [sp, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	bfb8      	it	lt
 800b1d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1d6:	3402      	adds	r4, #2
 800b1d8:	9305      	str	r3, [sp, #20]
 800b1da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2c0 <_vfiprintf_r+0x25c>
 800b1de:	7821      	ldrb	r1, [r4, #0]
 800b1e0:	2203      	movs	r2, #3
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	f7f5 f804 	bl	80001f0 <memchr>
 800b1e8:	b140      	cbz	r0, 800b1fc <_vfiprintf_r+0x198>
 800b1ea:	2340      	movs	r3, #64	; 0x40
 800b1ec:	eba0 000a 	sub.w	r0, r0, sl
 800b1f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f4:	9b04      	ldr	r3, [sp, #16]
 800b1f6:	4303      	orrs	r3, r0
 800b1f8:	3401      	adds	r4, #1
 800b1fa:	9304      	str	r3, [sp, #16]
 800b1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b200:	482c      	ldr	r0, [pc, #176]	; (800b2b4 <_vfiprintf_r+0x250>)
 800b202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b206:	2206      	movs	r2, #6
 800b208:	f7f4 fff2 	bl	80001f0 <memchr>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d03f      	beq.n	800b290 <_vfiprintf_r+0x22c>
 800b210:	4b29      	ldr	r3, [pc, #164]	; (800b2b8 <_vfiprintf_r+0x254>)
 800b212:	bb1b      	cbnz	r3, 800b25c <_vfiprintf_r+0x1f8>
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	3307      	adds	r3, #7
 800b218:	f023 0307 	bic.w	r3, r3, #7
 800b21c:	3308      	adds	r3, #8
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b222:	443b      	add	r3, r7
 800b224:	9309      	str	r3, [sp, #36]	; 0x24
 800b226:	e767      	b.n	800b0f8 <_vfiprintf_r+0x94>
 800b228:	fb0c 3202 	mla	r2, ip, r2, r3
 800b22c:	460c      	mov	r4, r1
 800b22e:	2001      	movs	r0, #1
 800b230:	e7a5      	b.n	800b17e <_vfiprintf_r+0x11a>
 800b232:	2300      	movs	r3, #0
 800b234:	3401      	adds	r4, #1
 800b236:	9305      	str	r3, [sp, #20]
 800b238:	4619      	mov	r1, r3
 800b23a:	f04f 0c0a 	mov.w	ip, #10
 800b23e:	4620      	mov	r0, r4
 800b240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b244:	3a30      	subs	r2, #48	; 0x30
 800b246:	2a09      	cmp	r2, #9
 800b248:	d903      	bls.n	800b252 <_vfiprintf_r+0x1ee>
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0c5      	beq.n	800b1da <_vfiprintf_r+0x176>
 800b24e:	9105      	str	r1, [sp, #20]
 800b250:	e7c3      	b.n	800b1da <_vfiprintf_r+0x176>
 800b252:	fb0c 2101 	mla	r1, ip, r1, r2
 800b256:	4604      	mov	r4, r0
 800b258:	2301      	movs	r3, #1
 800b25a:	e7f0      	b.n	800b23e <_vfiprintf_r+0x1da>
 800b25c:	ab03      	add	r3, sp, #12
 800b25e:	9300      	str	r3, [sp, #0]
 800b260:	462a      	mov	r2, r5
 800b262:	4b16      	ldr	r3, [pc, #88]	; (800b2bc <_vfiprintf_r+0x258>)
 800b264:	a904      	add	r1, sp, #16
 800b266:	4630      	mov	r0, r6
 800b268:	f7fd fb1e 	bl	80088a8 <_printf_float>
 800b26c:	4607      	mov	r7, r0
 800b26e:	1c78      	adds	r0, r7, #1
 800b270:	d1d6      	bne.n	800b220 <_vfiprintf_r+0x1bc>
 800b272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b274:	07d9      	lsls	r1, r3, #31
 800b276:	d405      	bmi.n	800b284 <_vfiprintf_r+0x220>
 800b278:	89ab      	ldrh	r3, [r5, #12]
 800b27a:	059a      	lsls	r2, r3, #22
 800b27c:	d402      	bmi.n	800b284 <_vfiprintf_r+0x220>
 800b27e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b280:	f7ff f882 	bl	800a388 <__retarget_lock_release_recursive>
 800b284:	89ab      	ldrh	r3, [r5, #12]
 800b286:	065b      	lsls	r3, r3, #25
 800b288:	f53f af12 	bmi.w	800b0b0 <_vfiprintf_r+0x4c>
 800b28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b28e:	e711      	b.n	800b0b4 <_vfiprintf_r+0x50>
 800b290:	ab03      	add	r3, sp, #12
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	462a      	mov	r2, r5
 800b296:	4b09      	ldr	r3, [pc, #36]	; (800b2bc <_vfiprintf_r+0x258>)
 800b298:	a904      	add	r1, sp, #16
 800b29a:	4630      	mov	r0, r6
 800b29c:	f7fd fda8 	bl	8008df0 <_printf_i>
 800b2a0:	e7e4      	b.n	800b26c <_vfiprintf_r+0x208>
 800b2a2:	bf00      	nop
 800b2a4:	0800ba64 	.word	0x0800ba64
 800b2a8:	0800ba84 	.word	0x0800ba84
 800b2ac:	0800ba44 	.word	0x0800ba44
 800b2b0:	0800bbfc 	.word	0x0800bbfc
 800b2b4:	0800bc06 	.word	0x0800bc06
 800b2b8:	080088a9 	.word	0x080088a9
 800b2bc:	0800b03f 	.word	0x0800b03f
 800b2c0:	0800bc02 	.word	0x0800bc02

0800b2c4 <_sbrk_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d06      	ldr	r5, [pc, #24]	; (800b2e0 <_sbrk_r+0x1c>)
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f7 fb64 	bl	800299c <_sbrk>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_sbrk_r+0x1a>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_sbrk_r+0x1a>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	200005f0 	.word	0x200005f0

0800b2e4 <__sread>:
 800b2e4:	b510      	push	{r4, lr}
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ec:	f000 f92c 	bl	800b548 <_read_r>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	bfab      	itete	ge
 800b2f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b2f8:	181b      	addge	r3, r3, r0
 800b2fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2fe:	bfac      	ite	ge
 800b300:	6563      	strge	r3, [r4, #84]	; 0x54
 800b302:	81a3      	strhlt	r3, [r4, #12]
 800b304:	bd10      	pop	{r4, pc}

0800b306 <__swrite>:
 800b306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30a:	461f      	mov	r7, r3
 800b30c:	898b      	ldrh	r3, [r1, #12]
 800b30e:	05db      	lsls	r3, r3, #23
 800b310:	4605      	mov	r5, r0
 800b312:	460c      	mov	r4, r1
 800b314:	4616      	mov	r6, r2
 800b316:	d505      	bpl.n	800b324 <__swrite+0x1e>
 800b318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b31c:	2302      	movs	r3, #2
 800b31e:	2200      	movs	r2, #0
 800b320:	f000 f898 	bl	800b454 <_lseek_r>
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b32a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b32e:	81a3      	strh	r3, [r4, #12]
 800b330:	4632      	mov	r2, r6
 800b332:	463b      	mov	r3, r7
 800b334:	4628      	mov	r0, r5
 800b336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b33a:	f000 b817 	b.w	800b36c <_write_r>

0800b33e <__sseek>:
 800b33e:	b510      	push	{r4, lr}
 800b340:	460c      	mov	r4, r1
 800b342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b346:	f000 f885 	bl	800b454 <_lseek_r>
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	bf15      	itete	ne
 800b350:	6560      	strne	r0, [r4, #84]	; 0x54
 800b352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b35a:	81a3      	strheq	r3, [r4, #12]
 800b35c:	bf18      	it	ne
 800b35e:	81a3      	strhne	r3, [r4, #12]
 800b360:	bd10      	pop	{r4, pc}

0800b362 <__sclose>:
 800b362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b366:	f000 b831 	b.w	800b3cc <_close_r>
	...

0800b36c <_write_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4d07      	ldr	r5, [pc, #28]	; (800b38c <_write_r+0x20>)
 800b370:	4604      	mov	r4, r0
 800b372:	4608      	mov	r0, r1
 800b374:	4611      	mov	r1, r2
 800b376:	2200      	movs	r2, #0
 800b378:	602a      	str	r2, [r5, #0]
 800b37a:	461a      	mov	r2, r3
 800b37c:	f7f7 fabd 	bl	80028fa <_write>
 800b380:	1c43      	adds	r3, r0, #1
 800b382:	d102      	bne.n	800b38a <_write_r+0x1e>
 800b384:	682b      	ldr	r3, [r5, #0]
 800b386:	b103      	cbz	r3, 800b38a <_write_r+0x1e>
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	bd38      	pop	{r3, r4, r5, pc}
 800b38c:	200005f0 	.word	0x200005f0

0800b390 <__assert_func>:
 800b390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b392:	4614      	mov	r4, r2
 800b394:	461a      	mov	r2, r3
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <__assert_func+0x2c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4605      	mov	r5, r0
 800b39c:	68d8      	ldr	r0, [r3, #12]
 800b39e:	b14c      	cbz	r4, 800b3b4 <__assert_func+0x24>
 800b3a0:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <__assert_func+0x30>)
 800b3a2:	9100      	str	r1, [sp, #0]
 800b3a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3a8:	4906      	ldr	r1, [pc, #24]	; (800b3c4 <__assert_func+0x34>)
 800b3aa:	462b      	mov	r3, r5
 800b3ac:	f000 f81e 	bl	800b3ec <fiprintf>
 800b3b0:	f000 f8e9 	bl	800b586 <abort>
 800b3b4:	4b04      	ldr	r3, [pc, #16]	; (800b3c8 <__assert_func+0x38>)
 800b3b6:	461c      	mov	r4, r3
 800b3b8:	e7f3      	b.n	800b3a2 <__assert_func+0x12>
 800b3ba:	bf00      	nop
 800b3bc:	20000020 	.word	0x20000020
 800b3c0:	0800bc0d 	.word	0x0800bc0d
 800b3c4:	0800bc1a 	.word	0x0800bc1a
 800b3c8:	0800bc48 	.word	0x0800bc48

0800b3cc <_close_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	4d06      	ldr	r5, [pc, #24]	; (800b3e8 <_close_r+0x1c>)
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	f7f7 faab 	bl	8002932 <_close>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	d102      	bne.n	800b3e6 <_close_r+0x1a>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	b103      	cbz	r3, 800b3e6 <_close_r+0x1a>
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	200005f0 	.word	0x200005f0

0800b3ec <fiprintf>:
 800b3ec:	b40e      	push	{r1, r2, r3}
 800b3ee:	b503      	push	{r0, r1, lr}
 800b3f0:	4601      	mov	r1, r0
 800b3f2:	ab03      	add	r3, sp, #12
 800b3f4:	4805      	ldr	r0, [pc, #20]	; (800b40c <fiprintf+0x20>)
 800b3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fa:	6800      	ldr	r0, [r0, #0]
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	f7ff fe31 	bl	800b064 <_vfiprintf_r>
 800b402:	b002      	add	sp, #8
 800b404:	f85d eb04 	ldr.w	lr, [sp], #4
 800b408:	b003      	add	sp, #12
 800b40a:	4770      	bx	lr
 800b40c:	20000020 	.word	0x20000020

0800b410 <_fstat_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4d07      	ldr	r5, [pc, #28]	; (800b430 <_fstat_r+0x20>)
 800b414:	2300      	movs	r3, #0
 800b416:	4604      	mov	r4, r0
 800b418:	4608      	mov	r0, r1
 800b41a:	4611      	mov	r1, r2
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	f7f7 fa94 	bl	800294a <_fstat>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	d102      	bne.n	800b42c <_fstat_r+0x1c>
 800b426:	682b      	ldr	r3, [r5, #0]
 800b428:	b103      	cbz	r3, 800b42c <_fstat_r+0x1c>
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	bd38      	pop	{r3, r4, r5, pc}
 800b42e:	bf00      	nop
 800b430:	200005f0 	.word	0x200005f0

0800b434 <_isatty_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d06      	ldr	r5, [pc, #24]	; (800b450 <_isatty_r+0x1c>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	f7f7 fa93 	bl	800296a <_isatty>
 800b444:	1c43      	adds	r3, r0, #1
 800b446:	d102      	bne.n	800b44e <_isatty_r+0x1a>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b103      	cbz	r3, 800b44e <_isatty_r+0x1a>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd38      	pop	{r3, r4, r5, pc}
 800b450:	200005f0 	.word	0x200005f0

0800b454 <_lseek_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d07      	ldr	r5, [pc, #28]	; (800b474 <_lseek_r+0x20>)
 800b458:	4604      	mov	r4, r0
 800b45a:	4608      	mov	r0, r1
 800b45c:	4611      	mov	r1, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	602a      	str	r2, [r5, #0]
 800b462:	461a      	mov	r2, r3
 800b464:	f7f7 fa8c 	bl	8002980 <_lseek>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_lseek_r+0x1e>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_lseek_r+0x1e>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	200005f0 	.word	0x200005f0

0800b478 <__ascii_mbtowc>:
 800b478:	b082      	sub	sp, #8
 800b47a:	b901      	cbnz	r1, 800b47e <__ascii_mbtowc+0x6>
 800b47c:	a901      	add	r1, sp, #4
 800b47e:	b142      	cbz	r2, 800b492 <__ascii_mbtowc+0x1a>
 800b480:	b14b      	cbz	r3, 800b496 <__ascii_mbtowc+0x1e>
 800b482:	7813      	ldrb	r3, [r2, #0]
 800b484:	600b      	str	r3, [r1, #0]
 800b486:	7812      	ldrb	r2, [r2, #0]
 800b488:	1e10      	subs	r0, r2, #0
 800b48a:	bf18      	it	ne
 800b48c:	2001      	movne	r0, #1
 800b48e:	b002      	add	sp, #8
 800b490:	4770      	bx	lr
 800b492:	4610      	mov	r0, r2
 800b494:	e7fb      	b.n	800b48e <__ascii_mbtowc+0x16>
 800b496:	f06f 0001 	mvn.w	r0, #1
 800b49a:	e7f8      	b.n	800b48e <__ascii_mbtowc+0x16>

0800b49c <memmove>:
 800b49c:	4288      	cmp	r0, r1
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	eb01 0402 	add.w	r4, r1, r2
 800b4a4:	d902      	bls.n	800b4ac <memmove+0x10>
 800b4a6:	4284      	cmp	r4, r0
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	d807      	bhi.n	800b4bc <memmove+0x20>
 800b4ac:	1e43      	subs	r3, r0, #1
 800b4ae:	42a1      	cmp	r1, r4
 800b4b0:	d008      	beq.n	800b4c4 <memmove+0x28>
 800b4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ba:	e7f8      	b.n	800b4ae <memmove+0x12>
 800b4bc:	4402      	add	r2, r0
 800b4be:	4601      	mov	r1, r0
 800b4c0:	428a      	cmp	r2, r1
 800b4c2:	d100      	bne.n	800b4c6 <memmove+0x2a>
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ce:	e7f7      	b.n	800b4c0 <memmove+0x24>

0800b4d0 <__malloc_lock>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <__malloc_lock+0x8>)
 800b4d2:	f7fe bf58 	b.w	800a386 <__retarget_lock_acquire_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	200005e4 	.word	0x200005e4

0800b4dc <__malloc_unlock>:
 800b4dc:	4801      	ldr	r0, [pc, #4]	; (800b4e4 <__malloc_unlock+0x8>)
 800b4de:	f7fe bf53 	b.w	800a388 <__retarget_lock_release_recursive>
 800b4e2:	bf00      	nop
 800b4e4:	200005e4 	.word	0x200005e4

0800b4e8 <_realloc_r>:
 800b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ec:	4680      	mov	r8, r0
 800b4ee:	4614      	mov	r4, r2
 800b4f0:	460e      	mov	r6, r1
 800b4f2:	b921      	cbnz	r1, 800b4fe <_realloc_r+0x16>
 800b4f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	f7ff bbb9 	b.w	800ac70 <_malloc_r>
 800b4fe:	b92a      	cbnz	r2, 800b50c <_realloc_r+0x24>
 800b500:	f7ff fb4a 	bl	800ab98 <_free_r>
 800b504:	4625      	mov	r5, r4
 800b506:	4628      	mov	r0, r5
 800b508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b50c:	f000 f842 	bl	800b594 <_malloc_usable_size_r>
 800b510:	4284      	cmp	r4, r0
 800b512:	4607      	mov	r7, r0
 800b514:	d802      	bhi.n	800b51c <_realloc_r+0x34>
 800b516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b51a:	d812      	bhi.n	800b542 <_realloc_r+0x5a>
 800b51c:	4621      	mov	r1, r4
 800b51e:	4640      	mov	r0, r8
 800b520:	f7ff fba6 	bl	800ac70 <_malloc_r>
 800b524:	4605      	mov	r5, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	d0ed      	beq.n	800b506 <_realloc_r+0x1e>
 800b52a:	42bc      	cmp	r4, r7
 800b52c:	4622      	mov	r2, r4
 800b52e:	4631      	mov	r1, r6
 800b530:	bf28      	it	cs
 800b532:	463a      	movcs	r2, r7
 800b534:	f7fd f902 	bl	800873c <memcpy>
 800b538:	4631      	mov	r1, r6
 800b53a:	4640      	mov	r0, r8
 800b53c:	f7ff fb2c 	bl	800ab98 <_free_r>
 800b540:	e7e1      	b.n	800b506 <_realloc_r+0x1e>
 800b542:	4635      	mov	r5, r6
 800b544:	e7df      	b.n	800b506 <_realloc_r+0x1e>
	...

0800b548 <_read_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	4d07      	ldr	r5, [pc, #28]	; (800b568 <_read_r+0x20>)
 800b54c:	4604      	mov	r4, r0
 800b54e:	4608      	mov	r0, r1
 800b550:	4611      	mov	r1, r2
 800b552:	2200      	movs	r2, #0
 800b554:	602a      	str	r2, [r5, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	f7f7 f9b2 	bl	80028c0 <_read>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_read_r+0x1e>
 800b560:	682b      	ldr	r3, [r5, #0]
 800b562:	b103      	cbz	r3, 800b566 <_read_r+0x1e>
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	200005f0 	.word	0x200005f0

0800b56c <__ascii_wctomb>:
 800b56c:	b149      	cbz	r1, 800b582 <__ascii_wctomb+0x16>
 800b56e:	2aff      	cmp	r2, #255	; 0xff
 800b570:	bf85      	ittet	hi
 800b572:	238a      	movhi	r3, #138	; 0x8a
 800b574:	6003      	strhi	r3, [r0, #0]
 800b576:	700a      	strbls	r2, [r1, #0]
 800b578:	f04f 30ff 	movhi.w	r0, #4294967295
 800b57c:	bf98      	it	ls
 800b57e:	2001      	movls	r0, #1
 800b580:	4770      	bx	lr
 800b582:	4608      	mov	r0, r1
 800b584:	4770      	bx	lr

0800b586 <abort>:
 800b586:	b508      	push	{r3, lr}
 800b588:	2006      	movs	r0, #6
 800b58a:	f000 f833 	bl	800b5f4 <raise>
 800b58e:	2001      	movs	r0, #1
 800b590:	f7f7 f98c 	bl	80028ac <_exit>

0800b594 <_malloc_usable_size_r>:
 800b594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b598:	1f18      	subs	r0, r3, #4
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfbc      	itt	lt
 800b59e:	580b      	ldrlt	r3, [r1, r0]
 800b5a0:	18c0      	addlt	r0, r0, r3
 800b5a2:	4770      	bx	lr

0800b5a4 <_raise_r>:
 800b5a4:	291f      	cmp	r1, #31
 800b5a6:	b538      	push	{r3, r4, r5, lr}
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	460d      	mov	r5, r1
 800b5ac:	d904      	bls.n	800b5b8 <_raise_r+0x14>
 800b5ae:	2316      	movs	r3, #22
 800b5b0:	6003      	str	r3, [r0, #0]
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5ba:	b112      	cbz	r2, 800b5c2 <_raise_r+0x1e>
 800b5bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5c0:	b94b      	cbnz	r3, 800b5d6 <_raise_r+0x32>
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 f830 	bl	800b628 <_getpid_r>
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5d2:	f000 b817 	b.w	800b604 <_kill_r>
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d00a      	beq.n	800b5f0 <_raise_r+0x4c>
 800b5da:	1c59      	adds	r1, r3, #1
 800b5dc:	d103      	bne.n	800b5e6 <_raise_r+0x42>
 800b5de:	2316      	movs	r3, #22
 800b5e0:	6003      	str	r3, [r0, #0]
 800b5e2:	2001      	movs	r0, #1
 800b5e4:	e7e7      	b.n	800b5b6 <_raise_r+0x12>
 800b5e6:	2400      	movs	r4, #0
 800b5e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	4798      	blx	r3
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	e7e0      	b.n	800b5b6 <_raise_r+0x12>

0800b5f4 <raise>:
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <raise+0xc>)
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	f7ff bfd3 	b.w	800b5a4 <_raise_r>
 800b5fe:	bf00      	nop
 800b600:	20000020 	.word	0x20000020

0800b604 <_kill_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	4d07      	ldr	r5, [pc, #28]	; (800b624 <_kill_r+0x20>)
 800b608:	2300      	movs	r3, #0
 800b60a:	4604      	mov	r4, r0
 800b60c:	4608      	mov	r0, r1
 800b60e:	4611      	mov	r1, r2
 800b610:	602b      	str	r3, [r5, #0]
 800b612:	f7f7 f93b 	bl	800288c <_kill>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d102      	bne.n	800b620 <_kill_r+0x1c>
 800b61a:	682b      	ldr	r3, [r5, #0]
 800b61c:	b103      	cbz	r3, 800b620 <_kill_r+0x1c>
 800b61e:	6023      	str	r3, [r4, #0]
 800b620:	bd38      	pop	{r3, r4, r5, pc}
 800b622:	bf00      	nop
 800b624:	200005f0 	.word	0x200005f0

0800b628 <_getpid_r>:
 800b628:	f7f7 b928 	b.w	800287c <_getpid>

0800b62c <_init>:
 800b62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62e:	bf00      	nop
 800b630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b632:	bc08      	pop	{r3}
 800b634:	469e      	mov	lr, r3
 800b636:	4770      	bx	lr

0800b638 <_fini>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	bf00      	nop
 800b63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63e:	bc08      	pop	{r3}
 800b640:	469e      	mov	lr, r3
 800b642:	4770      	bx	lr
