
F411_MS5611_I2C_Test_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800c848  0800c848  0001c848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccdc  0800ccdc  000202d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccdc  0800ccdc  0001ccdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cce4  0800cce4  000202d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cce4  0800cce4  0001cce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cce8  0800cce8  0001cce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  0800ccec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  200002d0  0800cfbc  000202d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001fd0  0800cfbc  00021fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181f4  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b59  00000000  00000000  000384f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001acd0  00000000  00000000  0003e860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7eb  00000000  00000000  00059530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938ad  00000000  00000000  00073d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001075c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006848  00000000  00000000  00107618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c830 	.word	0x0800c830

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800c830 	.word	0x0800c830

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b27      	ldr	r3, [pc, #156]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a26      	ldr	r2, [pc, #152]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b24      	ldr	r3, [pc, #144]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a11      	ldr	r2, [pc, #68]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_GPIO_Init+0xb8>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <MX_GPIO_Init+0xbc>)
 8000fea:	f001 fa25 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	4804      	ldr	r0, [pc, #16]	; (8001018 <MX_GPIO_Init+0xbc>)
 8001008:	f001 f892 	bl	8002130 <HAL_GPIO_Init>

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40020800 	.word	0x40020800

0800101c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <MX_I2C3_Init+0x50>)
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <MX_I2C3_Init+0x54>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_I2C3_Init+0x50>)
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <MX_I2C3_Init+0x58>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <MX_I2C3_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_I2C3_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_I2C3_Init+0x50>)
 800103a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800103e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <MX_I2C3_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_I2C3_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <MX_I2C3_Init+0x50>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_I2C3_Init+0x50>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_I2C3_Init+0x50>)
 800105a:	f001 fa21 	bl	80024a0 <HAL_I2C_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001064:	f000 f96e 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200002ec 	.word	0x200002ec
 8001070:	40005c00 	.word	0x40005c00
 8001074:	00061a80 	.word	0x00061a80

08001078 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <HAL_I2C_MspInit+0xc0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d14a      	bne.n	8001130 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_I2C_MspInit+0xc4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a26      	ldr	r2, [pc, #152]	; (800113c <HAL_I2C_MspInit+0xc4>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_I2C_MspInit+0xc4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <HAL_I2C_MspInit+0xc4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_I2C_MspInit+0xc4>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_I2C_MspInit+0xc4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d8:	2312      	movs	r3, #18
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010e4:	2304      	movs	r3, #4
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4619      	mov	r1, r3
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <HAL_I2C_MspInit+0xc8>)
 80010f0:	f001 f81e 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f4:	2310      	movs	r3, #16
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001104:	2309      	movs	r3, #9
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <HAL_I2C_MspInit+0xcc>)
 8001110:	f001 f80e 	bl	8002130 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_I2C_MspInit+0xc4>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_I2C_MspInit+0xc4>)
 800111e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001122:	6413      	str	r3, [r2, #64]	; 0x40
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_I2C_MspInit+0xc4>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	; 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40005c00 	.word	0x40005c00
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f000 fe47 	bl	8001de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f853 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f7ff ff01 	bl	8000f5c <MX_GPIO_Init>
  MX_I2C3_Init();
 800115a:	f7ff ff5f 	bl	800101c <MX_I2C3_Init>
  MX_USB_DEVICE_Init();
 800115e:	f008 f897 	bl	8009290 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8001162:	f000 fd9d 	bl	8001ca0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001166:	481f      	ldr	r0, [pc, #124]	; (80011e4 <main+0x9c>)
 8001168:	f004 f86a 	bl	8005240 <HAL_TIM_Base_Start_IT>

  HAL_Delay(1000);
 800116c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001170:	f000 fea8 	bl	8001ec4 <HAL_Delay>

  ms5611_set_i2c(&hi2c3);
 8001174:	481c      	ldr	r0, [pc, #112]	; (80011e8 <main+0xa0>)
 8001176:	f000 f937 	bl	80013e8 <ms5611_set_i2c>
  ms5611_init();
 800117a:	f000 f979 	bl	8001470 <ms5611_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (IMU_DTRDY) {
 800117e:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <main+0xa4>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0fa      	beq.n	800117e <main+0x36>

	  		ms5611_update();
 8001188:	f000 fa06 	bl	8001598 <ms5611_update>
	  		temp = ms5611_get_temperature();
 800118c:	f000 fa0c 	bl	80015a8 <ms5611_get_temperature>
 8001190:	ec53 2b10 	vmov	r2, r3, d0
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fd0e 	bl	8000bb8 <__aeabi_d2f>
 800119c:	4603      	mov	r3, r0
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <main+0xa8>)
 80011a0:	6013      	str	r3, [r2, #0]
	  		pressure = ms5611_get_pressure();
 80011a2:	f000 fa7d 	bl	80016a0 <ms5611_get_pressure>
 80011a6:	ec53 2b10 	vmov	r2, r3, d0
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd03 	bl	8000bb8 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <main+0xac>)
 80011b6:	6013      	str	r3, [r2, #0]
	  		printf("Temp: %.2f\tPressure: %.2f\n", temp, pressure);
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <main+0xa8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9cb 	bl	8000558 <__aeabi_f2d>
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <main+0xac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9c4 	bl	8000558 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	e9cd 2300 	strd	r2, r3, [sp]
 80011d8:	4622      	mov	r2, r4
 80011da:	462b      	mov	r3, r5
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <main+0xb0>)
 80011de:	f009 fa03 	bl	800a5e8 <iprintf>
	  if (IMU_DTRDY) {
 80011e2:	e7cc      	b.n	800117e <main+0x36>
 80011e4:	20000368 	.word	0x20000368
 80011e8:	200002ec 	.word	0x200002ec
 80011ec:	20000348 	.word	0x20000348
 80011f0:	20000340 	.word	0x20000340
 80011f4:	20000344 	.word	0x20000344
 80011f8:	0800c848 	.word	0x0800c848

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b094      	sub	sp, #80	; 0x50
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0320 	add.w	r3, r7, #32
 8001206:	2230      	movs	r2, #48	; 0x30
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f008 fd7a 	bl	8009d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <SystemClock_Config+0xc8>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	4a26      	ldr	r2, [pc, #152]	; (80012c4 <SystemClock_Config+0xc8>)
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <SystemClock_Config+0xc8>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <SystemClock_Config+0xcc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <SystemClock_Config+0xcc>)
 8001246:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <SystemClock_Config+0xcc>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001258:	2301      	movs	r3, #1
 800125a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800126c:	2319      	movs	r3, #25
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001270:	23c0      	movs	r3, #192	; 0xc0
 8001272:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001274:	2302      	movs	r3, #2
 8001276:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001278:	2304      	movs	r3, #4
 800127a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fb49 	bl	8004918 <HAL_RCC_OscConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800128c:	f000 f85a 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001290:	230f      	movs	r3, #15
 8001292:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001294:	2302      	movs	r3, #2
 8001296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2103      	movs	r1, #3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fdab 	bl	8004e08 <HAL_RCC_ClockConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012b8:	f000 f844 	bl	8001344 <Error_Handler>
  }
}
 80012bc:	bf00      	nop
 80012be:	3750      	adds	r7, #80	; 0x50
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
    static uint8_t rc = USBD_OK;

    do {
        rc = CDC_Transmit_FS( (uint8_t*) ptr, len);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4619      	mov	r1, r3
 80012de:	68b8      	ldr	r0, [r7, #8]
 80012e0:	f008 f894 	bl	800940c <CDC_Transmit_FS>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <_write+0x40>)
 80012ea:	701a      	strb	r2, [r3, #0]
    } while (USBD_BUSY == rc);
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <_write+0x40>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d0f1      	beq.n	80012d8 <_write+0xc>

    if (USBD_FAIL == rc) {
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <_write+0x40>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d101      	bne.n	8001300 <_write+0x34>
        /// NOTE: Should never reach here.
        /// TODO: Handle this error.
        return 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <_write+0x36>
    }
    return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000349 	.word	0x20000349

08001310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

	// 100 ms
  if (htim == &htim4 ){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d107      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x20>

	  IMU_DTRDY = 1;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800132c:	f001 f89d 	bl	800246a <HAL_GPIO_TogglePin>

  }

}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000368 	.word	0x20000368
 800133c:	20000348 	.word	0x20000348
 8001340:	40020800 	.word	0x40020800

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>

0800134e <I2C_read>:
I2C_HandleTypeDef* ms5611_i2cx;
enum MS5611_OSR selected_osr = MS5611_OSR_4096;



uint8_t I2C_read(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* output){
 800134e:	b580      	push	{r7, lr}
 8001350:	b088      	sub	sp, #32
 8001352:	af04      	add	r7, sp, #16
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	4608      	mov	r0, r1
 8001358:	4611      	mov	r1, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4603      	mov	r3, r0
 800135e:	70fb      	strb	r3, [r7, #3]
 8001360:	460b      	mov	r3, r1
 8001362:	70bb      	strb	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
	int state = HAL_I2C_Mem_Read(i2cx,target_address << 1,register_address,sizeof(register_address),output,length,10);
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	b29b      	uxth	r3, r3
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	b299      	uxth	r1, r3
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	b29a      	uxth	r2, r3
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	b29b      	uxth	r3, r3
 8001378:	200a      	movs	r0, #10
 800137a:	9002      	str	r0, [sp, #8]
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f001 fac9 	bl	800291c <HAL_I2C_Mem_Read>
 800138a:	4603      	mov	r3, r0
 800138c:	60fb      	str	r3, [r7, #12]
	if (state != HAL_OK){
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d000      	beq.n	8001396 <I2C_read+0x48>
		__NOP();
 8001394:	bf00      	nop
	}
	return state;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	b2db      	uxtb	r3, r3
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <I2C_write>:

uint8_t I2C_write(I2C_HandleTypeDef* i2cx, uint8_t target_address, uint8_t register_address, uint8_t length, uint8_t* input){
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af04      	add	r7, sp, #16
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	4608      	mov	r0, r1
 80013ac:	4611      	mov	r1, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	70fb      	strb	r3, [r7, #3]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70bb      	strb	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
	return HAL_I2C_Mem_Write(i2cx,target_address << 1,register_address,sizeof(register_address),input,length,10);
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b299      	uxth	r1, r3
 80013c4:	78bb      	ldrb	r3, [r7, #2]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	200a      	movs	r0, #10
 80013ce:	9002      	str	r0, [sp, #8]
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2301      	movs	r3, #1
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f001 f9a5 	bl	8002728 <HAL_I2C_Mem_Write>
 80013de:	4603      	mov	r3, r0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <ms5611_set_i2c>:

/**
 * select a hal I2C to talk to MS5611
 * @param i2cx The i2c port to talk to MS5611
 */
void ms5611_set_i2c(I2C_HandleTypeDef* i2cx){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	ms5611_i2cx = i2cx;
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <ms5611_set_i2c+0x1c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6013      	str	r3, [r2, #0]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000360 	.word	0x20000360

08001408 <ms5611_read_i2c>:
 * @param register_address register/command to request data
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af02      	add	r7, sp, #8
 800140e:	4603      	mov	r3, r0
 8001410:	603a      	str	r2, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
 8001414:	460b      	mov	r3, r1
 8001416:	71bb      	strb	r3, [r7, #6]
	return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <ms5611_read_i2c+0x30>)
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	79b9      	ldrb	r1, [r7, #6]
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	460b      	mov	r3, r1
 8001426:	2177      	movs	r1, #119	; 0x77
 8001428:	f7ff ff91 	bl	800134e <I2C_read>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000360 	.word	0x20000360

0800143c <ms5611_write_i2c>:
 * @param register_address register/command to send
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input){
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af02      	add	r7, sp, #8
 8001442:	4603      	mov	r3, r0
 8001444:	603a      	str	r2, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	460b      	mov	r3, r1
 800144a:	71bb      	strb	r3, [r7, #6]
	return I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <ms5611_write_i2c+0x30>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	79b9      	ldrb	r1, [r7, #6]
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	460b      	mov	r3, r1
 800145a:	2177      	movs	r1, #119	; 0x77
 800145c:	f7ff ffa1 	bl	80013a2 <I2C_write>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000360 	.word	0x20000360

08001470 <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	e01a      	b.n	80014b2 <ms5611_init+0x42>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	3b5e      	subs	r3, #94	; 0x5e
 8001486:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2];
		ms5611_read_i2c(reg_addr,2,buffer);
 8001488:	463a      	mov	r2, r7
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	2102      	movs	r1, #2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ffba 	bl	8001408 <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8001494:	783b      	ldrb	r3, [r7, #0]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	787b      	ldrb	r3, [r7, #1]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	b299      	uxth	r1, r3
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <ms5611_init+0x54>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	dde1      	ble.n	800147c <ms5611_init+0xc>
	}
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000034c 	.word	0x2000034c

080014c8 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <ms5611_update_pressure+0x5c>)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	6812      	ldr	r2, [r2, #0]
 80014d4:	4611      	mov	r1, r2
 80014d6:	8019      	strh	r1, [r3, #0]
 80014d8:	3302      	adds	r3, #2
 80014da:	0c12      	lsrs	r2, r2, #16
 80014dc:	701a      	strb	r2, [r3, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <ms5611_update_pressure+0x60>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	1d3a      	adds	r2, r7, #4
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffa2 	bl	800143c <ms5611_write_i2c>

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80014f8:	200c      	movs	r0, #12
 80014fa:	f000 fce3 	bl	8001ec4 <HAL_Delay>

	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	461a      	mov	r2, r3
 8001502:	2103      	movs	r1, #3
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff ff7f 	bl	8001408 <ms5611_read_i2c>
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 800150a:	793b      	ldrb	r3, [r7, #4]
 800150c:	041a      	lsls	r2, r3, #16
 800150e:	797b      	ldrb	r3, [r7, #5]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	4313      	orrs	r3, r2
 8001514:	79ba      	ldrb	r2, [r7, #6]
 8001516:	4313      	orrs	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <ms5611_update_pressure+0x64>)
 800151a:	6013      	str	r3, [r2, #0]

}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	0800c864 	.word	0x0800c864
 8001528:	20000000 	.word	0x20000000
 800152c:	20000358 	.word	0x20000358

08001530 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <ms5611_update_temperature+0x5c>)
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	4611      	mov	r1, r2
 800153e:	8019      	strh	r1, [r3, #0]
 8001540:	3302      	adds	r3, #2
 8001542:	0c12      	lsrs	r2, r2, #16
 8001544:	701a      	strb	r2, [r3, #0]
	ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <ms5611_update_temperature+0x60>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	b25b      	sxtb	r3, r3
 800154e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001552:	b25b      	sxtb	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	1d3a      	adds	r2, r7, #4
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff6e 	bl	800143c <ms5611_write_i2c>

	HAL_Delay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 8001560:	200c      	movs	r0, #12
 8001562:	f000 fcaf 	bl	8001ec4 <HAL_Delay>

	ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	461a      	mov	r2, r3
 800156a:	2103      	movs	r1, #3
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff ff4b 	bl	8001408 <ms5611_read_i2c>
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8001572:	793b      	ldrb	r3, [r7, #4]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	797b      	ldrb	r3, [r7, #5]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	4313      	orrs	r3, r2
 800157c:	79ba      	ldrb	r2, [r7, #6]
 800157e:	4313      	orrs	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <ms5611_update_temperature+0x64>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	0800c864 	.word	0x0800c864
 8001590:	20000000 	.word	0x20000000
 8001594:	2000035c 	.word	0x2000035c

08001598 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 800159c:	f7ff ffc8 	bl	8001530 <ms5611_update_temperature>
	ms5611_update_pressure();
 80015a0:	f7ff ff92 	bl	80014c8 <ms5611_update_pressure>
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80015ae:	4b36      	ldr	r3, [pc, #216]	; (8001688 <ms5611_get_temperature+0xe0>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <ms5611_get_temperature+0xe4>)
 80015b4:	891b      	ldrh	r3, [r3, #8]
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7fe ffa9 	bl	8000514 <__aeabi_ui2d>
 80015c2:	4604      	mov	r4, r0
 80015c4:	460d      	mov	r5, r1
 80015c6:	4b31      	ldr	r3, [pc, #196]	; (800168c <ms5611_get_temperature+0xe4>)
 80015c8:	895b      	ldrh	r3, [r3, #10]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffb2 	bl	8000534 <__aeabi_i2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <ms5611_get_temperature+0xe8>)
 80015d6:	f7ff f941 	bl	800085c <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7ff f811 	bl	8000608 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <ms5611_get_temperature+0xec>)
 80015f4:	f7fe fe52 	bl	800029c <__adddf3>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <ms5611_get_temperature+0xec>)
 8001612:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001616:	f7ff fa69 	bl	8000aec <__aeabi_dcmplt>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d016      	beq.n	800164e <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7fe ff77 	bl	8000514 <__aeabi_ui2d>
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7fe ff72 	bl	8000514 <__aeabi_ui2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <ms5611_get_temperature+0xf0>)
 8001636:	f7ff f911 	bl	800085c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f7fe ffe1 	bl	8000608 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 800164e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001652:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001656:	f7fe fe1f 	bl	8000298 <__aeabi_dsub>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP / 100;
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <ms5611_get_temperature+0xf4>)
 8001668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800166c:	f7ff f8f6 	bl	800085c <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b17 	vmov	d7, r2, r3
}
 8001678:	eeb0 0a47 	vmov.f32	s0, s14
 800167c:	eef0 0a67 	vmov.f32	s1, s15
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	2000035c 	.word	0x2000035c
 800168c:	2000034c 	.word	0x2000034c
 8001690:	41600000 	.word	0x41600000
 8001694:	409f4000 	.word	0x409f4000
 8001698:	41e00000 	.word	0x41e00000
 800169c:	40590000 	.word	0x40590000

080016a0 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 80016a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016a4:	b090      	sub	sp, #64	; 0x40
 80016a6:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 80016a8:	4bc3      	ldr	r3, [pc, #780]	; (80019b8 <ms5611_get_pressure+0x318>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4bc3      	ldr	r3, [pc, #780]	; (80019bc <ms5611_get_pressure+0x31c>)
 80016ae:	891b      	ldrh	r3, [r3, #8]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 80016b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016b8:	f7fe ff2c 	bl	8000514 <__aeabi_ui2d>
 80016bc:	4604      	mov	r4, r0
 80016be:	460d      	mov	r5, r1
 80016c0:	4bbe      	ldr	r3, [pc, #760]	; (80019bc <ms5611_get_pressure+0x31c>)
 80016c2:	895b      	ldrh	r3, [r3, #10]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff35 	bl	8000534 <__aeabi_i2d>
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	4bbc      	ldr	r3, [pc, #752]	; (80019c0 <ms5611_get_pressure+0x320>)
 80016d0:	f7ff f8c4 	bl	800085c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe ff94 	bl	8000608 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4bb5      	ldr	r3, [pc, #724]	; (80019c4 <ms5611_get_pressure+0x324>)
 80016ee:	f7fe fdd5 	bl	800029c <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 80016fa:	4bb0      	ldr	r3, [pc, #704]	; (80019bc <ms5611_get_pressure+0x31c>)
 80016fc:	885b      	ldrh	r3, [r3, #2]
 80016fe:	041b      	lsls	r3, r3, #16
 8001700:	461a      	mov	r2, r3
 8001702:	4bae      	ldr	r3, [pc, #696]	; (80019bc <ms5611_get_pressure+0x31c>)
 8001704:	88db      	ldrh	r3, [r3, #6]
 8001706:	4619      	mov	r1, r3
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	09db      	lsrs	r3, r3, #7
 8001710:	4413      	add	r3, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fefe 	bl	8000514 <__aeabi_ui2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 8001720:	4ba6      	ldr	r3, [pc, #664]	; (80019bc <ms5611_get_pressure+0x31c>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	03db      	lsls	r3, r3, #15
 8001726:	461a      	mov	r2, r3
 8001728:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <ms5611_get_pressure+0x31c>)
 800172a:	889b      	ldrh	r3, [r3, #4]
 800172c:	4619      	mov	r1, r3
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	4413      	add	r3, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe feeb 	bl	8000514 <__aeabi_ui2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 8001746:	4ba0      	ldr	r3, [pc, #640]	; (80019c8 <ms5611_get_pressure+0x328>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fee2 	bl	8000514 <__aeabi_ui2d>
 8001750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001754:	f7fe ff58 	bl	8000608 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b99      	ldr	r3, [pc, #612]	; (80019cc <ms5611_get_pressure+0x32c>)
 8001766:	f7ff f879 	bl	800085c <__aeabi_ddiv>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001776:	f7fe fd8f 	bl	8000298 <__aeabi_dsub>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <ms5611_get_pressure+0x330>)
 8001788:	f7ff f868 	bl	800085c <__aeabi_ddiv>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <ms5611_get_pressure+0x324>)
 80017be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017c2:	f7ff f993 	bl	8000aec <__aeabi_dcmplt>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80cc 	beq.w	8001966 <ms5611_get_pressure+0x2c6>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	fb03 f303 	mul.w	r3, r3, r3
 80017d4:	0fdb      	lsrs	r3, r3, #31
 80017d6:	2200      	movs	r2, #0
 80017d8:	4698      	mov	r8, r3
 80017da:	4691      	mov	r9, r2
 80017dc:	4640      	mov	r0, r8
 80017de:	4649      	mov	r1, r9
 80017e0:	f7fe fee4 	bl	80005ac <__aeabi_l2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b74      	ldr	r3, [pc, #464]	; (80019c4 <ms5611_get_pressure+0x324>)
 80017f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017f6:	f7fe fd4f 	bl	8000298 <__aeabi_dsub>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b73      	ldr	r3, [pc, #460]	; (80019d4 <ms5611_get_pressure+0x334>)
 8001808:	f7fe fefe 	bl	8000608 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4614      	mov	r4, r2
 8001812:	461d      	mov	r5, r3
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b6a      	ldr	r3, [pc, #424]	; (80019c4 <ms5611_get_pressure+0x324>)
 800181a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800181e:	f7fe fd3b 	bl	8000298 <__aeabi_dsub>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe feed 	bl	8000608 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183e:	f7ff f80d 	bl	800085c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b5d      	ldr	r3, [pc, #372]	; (80019c4 <ms5611_get_pressure+0x324>)
 8001850:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001854:	f7fe fd20 	bl	8000298 <__aeabi_dsub>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <ms5611_get_pressure+0x334>)
 8001866:	f7fe fecf 	bl	8000608 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	461d      	mov	r5, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <ms5611_get_pressure+0x324>)
 8001878:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800187c:	f7fe fd0c 	bl	8000298 <__aeabi_dsub>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7fe febe 	bl	8000608 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <ms5611_get_pressure+0x338>)
 800189a:	f7fe ffdf 	bl	800085c <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 80018a6:	a340      	add	r3, pc, #256	; (adr r3, 80019a8 <ms5611_get_pressure+0x308>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018b0:	f7ff f91c 	bl	8000aec <__aeabi_dcmplt>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d055      	beq.n	8001966 <ms5611_get_pressure+0x2c6>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 80018ba:	a33d      	add	r3, pc, #244	; (adr r3, 80019b0 <ms5611_get_pressure+0x310>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018c4:	f7fe fcea 	bl	800029c <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b41      	ldr	r3, [pc, #260]	; (80019dc <ms5611_get_pressure+0x33c>)
 80018d6:	f7fe fe97 	bl	8000608 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4614      	mov	r4, r2
 80018e0:	461d      	mov	r5, r3
 80018e2:	a333      	add	r3, pc, #204	; (adr r3, 80019b0 <ms5611_get_pressure+0x310>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018ec:	f7fe fcd6 	bl	800029c <__adddf3>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fe86 	bl	8000608 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001904:	f7fe fcca 	bl	800029c <__adddf3>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8001910:	a327      	add	r3, pc, #156	; (adr r3, 80019b0 <ms5611_get_pressure+0x310>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800191a:	f7fe fcbf 	bl	800029c <__adddf3>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <ms5611_get_pressure+0x334>)
 800192c:	f7fe fe6c 	bl	8000608 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	a31d      	add	r3, pc, #116	; (adr r3, 80019b0 <ms5611_get_pressure+0x310>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001942:	f7fe fcab 	bl	800029c <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f7fe fe5b 	bl	8000608 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800195a:	f7fe fc9f 	bl	800029c <__adddf3>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 8001966:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800196a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800196e:	f7fe fc93 	bl	8000298 <__aeabi_dsub>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 800197a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800197e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001982:	f7fe fc89 	bl	8000298 <__aeabi_dsub>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 800198e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001992:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001996:	f7fe fc7f 	bl	8000298 <__aeabi_dsub>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <ms5611_get_pressure+0x328>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	e01b      	b.n	80019e0 <ms5611_get_pressure+0x340>
 80019a8:	00000000 	.word	0x00000000
 80019ac:	c0977000 	.word	0xc0977000
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40977000 	.word	0x40977000
 80019b8:	2000035c 	.word	0x2000035c
 80019bc:	2000034c 	.word	0x2000034c
 80019c0:	41600000 	.word	0x41600000
 80019c4:	409f4000 	.word	0x409f4000
 80019c8:	20000358 	.word	0x20000358
 80019cc:	41400000 	.word	0x41400000
 80019d0:	40e00000 	.word	0x40e00000
 80019d4:	40140000 	.word	0x40140000
 80019d8:	40100000 	.word	0x40100000
 80019dc:	401c0000 	.word	0x401c0000
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd97 	bl	8000514 <__aeabi_ui2d>
 80019e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ea:	f7fe fe0d 	bl	8000608 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <ms5611_get_pressure+0x3b0>)
 80019fc:	f7fe ff2e 	bl	800085c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a0c:	f7fe fc44 	bl	8000298 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <ms5611_get_pressure+0x3b4>)
 8001a1e:	f7fe ff1d 	bl	800085c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <ms5611_get_pressure+0x3b8>)
 8001a30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a34:	f7fe ff12 	bl	800085c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a40:	eeb0 0a47 	vmov.f32	s0, s14
 8001a44:	eef0 0a67 	vmov.f32	s1, s15
 8001a48:	3740      	adds	r7, #64	; 0x40
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a50:	41400000 	.word	0x41400000
 8001a54:	40e00000 	.word	0x40e00000
 8001a58:	40590000 	.word	0x40590000

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af8:	f000 f9c4 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM4_IRQHandler+0x10>)
 8001b06:	f003 fbfd 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000368 	.word	0x20000368

08001b14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <OTG_FS_IRQHandler+0x10>)
 8001b1a:	f001 fdd0 	bl	80036be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20001894 	.word	0x20001894

08001b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	return 1;
 8001b2c:	2301      	movs	r3, #1
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_kill>:

int _kill(int pid, int sig)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b42:	f008 f8b5 	bl	8009cb0 <__errno>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2216      	movs	r2, #22
 8001b4a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_exit>:

void _exit (int status)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ffe7 	bl	8001b38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b6a:	e7fe      	b.n	8001b6a <_exit+0x12>

08001b6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e00a      	b.n	8001b94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b7e:	f3af 8000 	nop.w
 8001b82:	4601      	mov	r1, r0
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	60ba      	str	r2, [r7, #8]
 8001b8a:	b2ca      	uxtb	r2, r1
 8001b8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dbf0      	blt.n	8001b7e <_read+0x12>
	}

return len;
 8001b9c:	687b      	ldr	r3, [r7, #4]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
	return -1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bce:	605a      	str	r2, [r3, #4]
	return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_isatty>:

int _isatty(int file)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
	return 1;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
	return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	; (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f008 f836 	bl	8009cb0 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20020000 	.word	0x20020000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	20000364 	.word	0x20000364
 8001c78:	20001fd0 	.word	0x20001fd0

08001c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <MX_TIM4_Init+0x98>)
 8001cc0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 959;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001cc4:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001cc8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001cd2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001cd6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ce4:	4813      	ldr	r0, [pc, #76]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001ce6:	f003 fa5b 	bl	80051a0 <HAL_TIM_Base_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001cf0:	f7ff fb28 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	4619      	mov	r1, r3
 8001d00:	480c      	ldr	r0, [pc, #48]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001d02:	f003 fc07 	bl	8005514 <HAL_TIM_ConfigClockSource>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001d0c:	f7ff fb1a 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d18:	463b      	mov	r3, r7
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_TIM4_Init+0x94>)
 8001d1e:	f003 fe03 	bl	8005928 <HAL_TIMEx_MasterConfigSynchronization>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001d28:	f7ff fb0c 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000368 	.word	0x20000368
 8001d38:	40000800 	.word	0x40000800

08001d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d115      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_TIM_Base_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_TIM_Base_MspInit+0x4c>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_TIM_Base_MspInit+0x4c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	201e      	movs	r0, #30
 8001d70:	f000 f9a7 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d74:	201e      	movs	r0, #30
 8001d76:	f000 f9c0 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40000800 	.word	0x40000800
 8001d88:	40023800 	.word	0x40023800

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da8:	4c0b      	ldr	r4, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db6:	f7ff ff61 	bl	8001c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f007 ff7f 	bl	8009cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff f9c3 	bl	8001148 <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001dd0:	0800ccec 	.word	0x0800ccec
  ldr r2, =_sbss
 8001dd4:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001dd8:	20001fd0 	.word	0x20001fd0

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_Init+0x40>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_Init+0x40>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_Init+0x40>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f000 f94f 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f000 f808 	bl	8001e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e14:	f7ff fe22 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x54>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_InitTick+0x58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f967 	bl	8002116 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f000 f92f 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_InitTick+0x5c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	2000000c 	.word	0x2000000c
 8001e80:	20000008 	.word	0x20000008

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	200003b0 	.word	0x200003b0

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200003b0 	.word	0x200003b0

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c

08001f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3e:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <__NVIC_SetPriorityGrouping+0x44>)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
}
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <__NVIC_GetPriorityGrouping+0x18>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	f003 0307 	and.w	r3, r3, #7
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0b      	blt.n	8001f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_EnableIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff8e 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff29 	bl	8001f0c <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff3e 	bl	8001f54 <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff8e 	bl	8002000 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5d 	bl	8001fac <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff31 	bl	8001f70 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e159      	b.n	8002400 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8148 	bne.w	80023fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217e:	2b02      	cmp	r3, #2
 8002180:	d130      	bne.n	80021e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0201 	and.w	r2, r3, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d017      	beq.n	8002220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d123      	bne.n	8002274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80a2 	beq.w	80023fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b57      	ldr	r3, [pc, #348]	; (8002418 <HAL_GPIO_Init+0x2e8>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a56      	ldr	r2, [pc, #344]	; (8002418 <HAL_GPIO_Init+0x2e8>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b54      	ldr	r3, [pc, #336]	; (8002418 <HAL_GPIO_Init+0x2e8>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d2:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_GPIO_Init+0x2ec>)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a49      	ldr	r2, [pc, #292]	; (8002420 <HAL_GPIO_Init+0x2f0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d019      	beq.n	8002332 <HAL_GPIO_Init+0x202>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a48      	ldr	r2, [pc, #288]	; (8002424 <HAL_GPIO_Init+0x2f4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <HAL_GPIO_Init+0x1fe>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a47      	ldr	r2, [pc, #284]	; (8002428 <HAL_GPIO_Init+0x2f8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00d      	beq.n	800232a <HAL_GPIO_Init+0x1fa>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a46      	ldr	r2, [pc, #280]	; (800242c <HAL_GPIO_Init+0x2fc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <HAL_GPIO_Init+0x1f6>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a45      	ldr	r2, [pc, #276]	; (8002430 <HAL_GPIO_Init+0x300>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_GPIO_Init+0x1f2>
 800231e:	2304      	movs	r3, #4
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x204>
 8002322:	2307      	movs	r3, #7
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x204>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x204>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x204>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x204>
 8002332:	2300      	movs	r3, #0
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002344:	4935      	ldr	r1, [pc, #212]	; (800241c <HAL_GPIO_Init+0x2ec>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <HAL_GPIO_Init+0x304>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002376:	4a2f      	ldr	r2, [pc, #188]	; (8002434 <HAL_GPIO_Init+0x304>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_GPIO_Init+0x304>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a0:	4a24      	ldr	r2, [pc, #144]	; (8002434 <HAL_GPIO_Init+0x304>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a6:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_GPIO_Init+0x304>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ca:	4a1a      	ldr	r2, [pc, #104]	; (8002434 <HAL_GPIO_Init+0x304>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <HAL_GPIO_Init+0x304>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_GPIO_Init+0x304>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	f67f aea2 	bls.w	800214c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800
 8002420:	40020000 	.word	0x40020000
 8002424:	40020400 	.word	0x40020400
 8002428:	40020800 	.word	0x40020800
 800242c:	40020c00 	.word	0x40020c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43d9      	mvns	r1, r3
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	400b      	ands	r3, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e12b      	b.n	800270a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d106      	bne.n	80024cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7fe fdd6 	bl	8001078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2224      	movs	r2, #36	; 0x24
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0201 	bic.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002504:	f002 fe38 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
 8002508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a81      	ldr	r2, [pc, #516]	; (8002714 <HAL_I2C_Init+0x274>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d807      	bhi.n	8002524 <HAL_I2C_Init+0x84>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a80      	ldr	r2, [pc, #512]	; (8002718 <HAL_I2C_Init+0x278>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e006      	b.n	8002532 <HAL_I2C_Init+0x92>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4a7d      	ldr	r2, [pc, #500]	; (800271c <HAL_I2C_Init+0x27c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	bf94      	ite	ls
 800252c:	2301      	movls	r3, #1
 800252e:	2300      	movhi	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0e7      	b.n	800270a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a78      	ldr	r2, [pc, #480]	; (8002720 <HAL_I2C_Init+0x280>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0c9b      	lsrs	r3, r3, #18
 8002544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <HAL_I2C_Init+0x274>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d802      	bhi.n	8002574 <HAL_I2C_Init+0xd4>
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3301      	adds	r3, #1
 8002572:	e009      	b.n	8002588 <HAL_I2C_Init+0xe8>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	4a69      	ldr	r2, [pc, #420]	; (8002724 <HAL_I2C_Init+0x284>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	3301      	adds	r3, #1
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	430b      	orrs	r3, r1
 800258e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800259a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	495c      	ldr	r1, [pc, #368]	; (8002714 <HAL_I2C_Init+0x274>)
 80025a4:	428b      	cmp	r3, r1
 80025a6:	d819      	bhi.n	80025dc <HAL_I2C_Init+0x13c>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e59      	subs	r1, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025bc:	400b      	ands	r3, r1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_I2C_Init+0x138>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e59      	subs	r1, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d6:	e051      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025d8:	2304      	movs	r3, #4
 80025da:	e04f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d111      	bne.n	8002608 <HAL_I2C_Init+0x168>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1e58      	subs	r0, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e012      	b.n	800262e <HAL_I2C_Init+0x18e>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Init+0x196>
 8002632:	2301      	movs	r3, #1
 8002634:	e022      	b.n	800267c <HAL_I2C_Init+0x1dc>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10e      	bne.n	800265c <HAL_I2C_Init+0x1bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e58      	subs	r0, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265a:	e00f      	b.n	800267c <HAL_I2C_Init+0x1dc>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	0099      	lsls	r1, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002672:	3301      	adds	r3, #1
 8002674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	4313      	orrs	r3, r2
 8002682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6911      	ldr	r1, [r2, #16]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68d2      	ldr	r2, [r2, #12]
 80026b6:	4311      	orrs	r1, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	430b      	orrs	r3, r1
 80026be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	000186a0 	.word	0x000186a0
 8002718:	001e847f 	.word	0x001e847f
 800271c:	003d08ff 	.word	0x003d08ff
 8002720:	431bde83 	.word	0x431bde83
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	817b      	strh	r3, [r7, #10]
 800273a:	460b      	mov	r3, r1
 800273c:	813b      	strh	r3, [r7, #8]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002742:	f7ff fbb3 	bl	8001eac <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	f040 80d9 	bne.w	8002908 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2319      	movs	r3, #25
 800275c:	2201      	movs	r2, #1
 800275e:	496d      	ldr	r1, [pc, #436]	; (8002914 <HAL_I2C_Mem_Write+0x1ec>)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fc7f 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800276c:	2302      	movs	r3, #2
 800276e:	e0cc      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_I2C_Mem_Write+0x56>
 800277a:	2302      	movs	r3, #2
 800277c:	e0c5      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d007      	beq.n	80027a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2221      	movs	r2, #33	; 0x21
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a3a      	ldr	r2, [r7, #32]
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a4d      	ldr	r2, [pc, #308]	; (8002918 <HAL_I2C_Mem_Write+0x1f0>)
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027e6:	88f8      	ldrh	r0, [r7, #6]
 80027e8:	893a      	ldrh	r2, [r7, #8]
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4603      	mov	r3, r0
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fab6 	bl	8002d68 <I2C_RequestMemoryWrite>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d052      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e081      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fd00 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00d      	beq.n	8002832 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b04      	cmp	r3, #4
 800281c:	d107      	bne.n	800282e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e06b      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	781a      	ldrb	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d11b      	bne.n	80028a8 <HAL_I2C_Mem_Write+0x180>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	781a      	ldrb	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1aa      	bne.n	8002806 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fcec 	bl	8003292 <I2C_WaitOnBTFFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d107      	bne.n	80028d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e016      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	; 0x30
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002936:	f7ff fab9 	bl	8001eac <HAL_GetTick>
 800293a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b20      	cmp	r3, #32
 8002946:	f040 8208 	bne.w	8002d5a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2319      	movs	r3, #25
 8002950:	2201      	movs	r2, #1
 8002952:	497b      	ldr	r1, [pc, #492]	; (8002b40 <HAL_I2C_Mem_Read+0x224>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fb85 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
 8002962:	e1fb      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_I2C_Mem_Read+0x56>
 800296e:	2302      	movs	r3, #2
 8002970:	e1f4      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d007      	beq.n	8002998 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2222      	movs	r2, #34	; 0x22
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a5b      	ldr	r2, [pc, #364]	; (8002b44 <HAL_I2C_Mem_Read+0x228>)
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029da:	88f8      	ldrh	r0, [r7, #6]
 80029dc:	893a      	ldrh	r2, [r7, #8]
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	4603      	mov	r3, r0
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa52 	bl	8002e94 <I2C_RequestMemoryRead>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1b0      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d113      	bne.n	8002a2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	623b      	str	r3, [r7, #32]
 8002a16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e184      	b.n	8002d34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d11b      	bne.n	8002a6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	e164      	b.n	8002d34 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11b      	bne.n	8002aaa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	e144      	b.n	8002d34 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ac0:	e138      	b.n	8002d34 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	f200 80f1 	bhi.w	8002cae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d123      	bne.n	8002b1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fc1b 	bl	8003314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e139      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b1a:	e10b      	b.n	8002d34 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d14e      	bne.n	8002bc2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	4906      	ldr	r1, [pc, #24]	; (8002b48 <HAL_I2C_Mem_Read+0x22c>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa98 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d008      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e10e      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
 8002b3e:	bf00      	nop
 8002b40:	00100002 	.word	0x00100002
 8002b44:	ffff0000 	.word	0xffff0000
 8002b48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bc0:	e0b8      	b.n	8002d34 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4966      	ldr	r1, [pc, #408]	; (8002d64 <HAL_I2C_Mem_Read+0x448>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fa49 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0bf      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c24:	2200      	movs	r2, #0
 8002c26:	494f      	ldr	r1, [pc, #316]	; (8002d64 <HAL_I2C_Mem_Read+0x448>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fa1b 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e091      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	1c5a      	adds	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cac:	e042      	b.n	8002d34 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fb2e 	bl	8003314 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e04c      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d118      	bne.n	8002d34 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f aec2 	bne.w	8002ac2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
  }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3728      	adds	r7, #40	; 0x28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	00010004 	.word	0x00010004

08002d68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	4608      	mov	r0, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	817b      	strh	r3, [r7, #10]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	813b      	strh	r3, [r7, #8]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f960 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db8:	d103      	bne.n	8002dc2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e05f      	b.n	8002e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	6a3a      	ldr	r2, [r7, #32]
 8002dda:	492d      	ldr	r1, [pc, #180]	; (8002e90 <I2C_RequestMemoryWrite+0x128>)
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f998 	bl	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e04c      	b.n	8002e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	6a39      	ldr	r1, [r7, #32]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fa02 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d107      	bne.n	8002e2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e02b      	b.n	8002e86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e34:	893b      	ldrh	r3, [r7, #8]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	e021      	b.n	8002e84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e40:	893b      	ldrh	r3, [r7, #8]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	6a39      	ldr	r1, [r7, #32]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f9dc 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d107      	bne.n	8002e76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e005      	b.n	8002e86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e7a:	893b      	ldrh	r3, [r7, #8]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	00010002 	.word	0x00010002

08002e94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	817b      	strh	r3, [r7, #10]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	813b      	strh	r3, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8c2 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d103      	bne.n	8002efe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e0aa      	b.n	8003058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f02:	897b      	ldrh	r3, [r7, #10]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	4952      	ldr	r1, [pc, #328]	; (8003060 <I2C_RequestMemoryRead+0x1cc>)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f8fa 	bl	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e097      	b.n	8003058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f964 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d107      	bne.n	8002f66 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e076      	b.n	8003058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	e021      	b.n	8002fc0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f7c:	893b      	ldrh	r3, [r7, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f93e 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d107      	bne.n	8002fb2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e050      	b.n	8003058 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb6:	893b      	ldrh	r3, [r7, #8]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	6a39      	ldr	r1, [r7, #32]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f923 	bl	8003210 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d107      	bne.n	8002fe8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e035      	b.n	8003058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	2200      	movs	r2, #0
 8003004:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f82b 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003022:	d103      	bne.n	800302c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e013      	b.n	8003058 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003030:	897b      	ldrh	r3, [r7, #10]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	4906      	ldr	r1, [pc, #24]	; (8003060 <I2C_RequestMemoryRead+0x1cc>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f863 	bl	8003112 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	00010002 	.word	0x00010002

08003064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003074:	e025      	b.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d021      	beq.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe ff15 	bl	8001eac <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d116      	bne.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f043 0220 	orr.w	r2, r3, #32
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e023      	b.n	800310a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10d      	bne.n	80030e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	4013      	ands	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	e00c      	b.n	8003102 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d0b6      	beq.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003120:	e051      	b.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d123      	bne.n	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800314a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e046      	b.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d021      	beq.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003182:	f7fe fe93 	bl	8001eac <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d302      	bcc.n	8003198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d116      	bne.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0220 	orr.w	r2, r3, #32
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e020      	b.n	8003208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d10c      	bne.n	80031ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e00b      	b.n	8003202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	43da      	mvns	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	4013      	ands	r3, r2
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d18d      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800321c:	e02d      	b.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f8ce 	bl	80033c0 <I2C_IsAcknowledgeFailed>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e02d      	b.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d021      	beq.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7fe fe39 	bl	8001eac <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d116      	bne.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e007      	b.n	800328a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d1ca      	bne.n	800321e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800329e:	e02d      	b.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f88d 	bl	80033c0 <I2C_IsAcknowledgeFailed>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e02d      	b.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d021      	beq.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b8:	f7fe fdf8 	bl	8001eac <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d302      	bcc.n	80032ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e007      	b.n	800330c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	2b04      	cmp	r3, #4
 8003308:	d1ca      	bne.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003320:	e042      	b.n	80033a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b10      	cmp	r3, #16
 800332e:	d119      	bne.n	8003364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0210 	mvn.w	r2, #16
 8003338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e029      	b.n	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003364:	f7fe fda2 	bl	8001eac <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	429a      	cmp	r2, r3
 8003372:	d302      	bcc.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d116      	bne.n	80033a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e007      	b.n	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d1b5      	bne.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d6:	d11b      	bne.n	8003410 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800341e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003420:	b08f      	sub	sp, #60	; 0x3c
 8003422:	af0a      	add	r7, sp, #40	; 0x28
 8003424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e10f      	b.n	8003650 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f006 f926 	bl	800969c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2203      	movs	r2, #3
 8003454:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f002 fbf1 	bl	8005c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	687e      	ldr	r6, [r7, #4]
 800347c:	466d      	mov	r5, sp
 800347e:	f106 0410 	add.w	r4, r6, #16
 8003482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800348a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800348e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003492:	1d33      	adds	r3, r6, #4
 8003494:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	f002 fac8 	bl	8005a2c <USB_CoreInit>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0d0      	b.n	8003650 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fbdf 	bl	8005c78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
 80034be:	e04a      	b.n	8003556 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	333d      	adds	r3, #61	; 0x3d
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	333c      	adds	r3, #60	; 0x3c
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034e8:	7bfa      	ldrb	r2, [r7, #15]
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	b298      	uxth	r0, r3
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	3344      	adds	r3, #68	; 0x44
 80034fc:	4602      	mov	r2, r0
 80034fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3340      	adds	r3, #64	; 0x40
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3348      	adds	r3, #72	; 0x48
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	334c      	adds	r3, #76	; 0x4c
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800353c:	7bfa      	ldrb	r2, [r7, #15]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3354      	adds	r3, #84	; 0x54
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	3301      	adds	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
 8003556:	7bfa      	ldrb	r2, [r7, #15]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d3af      	bcc.n	80034c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	e044      	b.n	80035f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800357c:	7bfa      	ldrb	r2, [r7, #15]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035a4:	2200      	movs	r2, #0
 80035a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035be:	7bfa      	ldrb	r2, [r7, #15]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	3301      	adds	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d3b5      	bcc.n	8003566 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	687e      	ldr	r6, [r7, #4]
 8003602:	466d      	mov	r5, sp
 8003604:	f106 0410 	add.w	r4, r6, #16
 8003608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800360c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003610:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003614:	e885 0003 	stmia.w	r5, {r0, r1}
 8003618:	1d33      	adds	r3, r6, #4
 800361a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	f002 fb77 	bl	8005d10 <USB_DevInit>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e00d      	b.n	8003650 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 fcc6 	bl	8006fda <USB_DevDisconnect>

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003658 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_PCD_Start+0x1c>
 8003670:	2302      	movs	r3, #2
 8003672:	e020      	b.n	80036b6 <HAL_PCD_Start+0x5e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	2b01      	cmp	r3, #1
 8003682:	d109      	bne.n	8003698 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003688:	2b01      	cmp	r3, #1
 800368a:	d005      	beq.n	8003698 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f002 fac9 	bl	8005c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f003 fc76 	bl	8006f98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036be:	b590      	push	{r4, r7, lr}
 80036c0:	b08d      	sub	sp, #52	; 0x34
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 fd34 	bl	8007142 <USB_GetMode>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f040 848a 	bne.w	8003ff6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fc98 	bl	800701c <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8480 	beq.w	8003ff4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f003 fc85 	bl	800701c <USB_ReadInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d107      	bne.n	800372c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f002 0202 	and.w	r2, r2, #2
 800372a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f003 fc73 	bl	800701c <USB_ReadInterrupts>
 8003736:	4603      	mov	r3, r0
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d161      	bne.n	8003804 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0210 	bic.w	r2, r2, #16
 800374e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	0c5b      	lsrs	r3, r3, #17
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	2b02      	cmp	r3, #2
 800377a:	d124      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d035      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	6a38      	ldr	r0, [r7, #32]
 800379c:	f003 faaa 	bl	8006cf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ac:	441a      	add	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037be:	441a      	add	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	621a      	str	r2, [r3, #32]
 80037c4:	e016      	b.n	80037f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	0c5b      	lsrs	r3, r3, #17
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d110      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d8:	2208      	movs	r2, #8
 80037da:	4619      	mov	r1, r3
 80037dc:	6a38      	ldr	r0, [r7, #32]
 80037de:	f003 fa89 	bl	8006cf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	6a1a      	ldr	r2, [r3, #32]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ee:	441a      	add	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0210 	orr.w	r2, r2, #16
 8003802:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f003 fc07 	bl	800701c <USB_ReadInterrupts>
 800380e:	4603      	mov	r3, r0
 8003810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003814:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003818:	f040 80a7 	bne.w	800396a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f003 fc0c 	bl	8007042 <USB_ReadDevAllOutEpInterrupt>
 800382a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800382c:	e099      	b.n	8003962 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 808e 	beq.w	8003956 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fc30 	bl	80070aa <USB_ReadDevOutEPInterrupt>
 800384a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	2301      	movs	r3, #1
 8003866:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fec2 	bl	80045f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	461a      	mov	r2, r3
 8003888:	2308      	movs	r3, #8
 800388a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800388c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 ff98 	bl	80047c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	2310      	movs	r3, #16
 80038ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d030      	beq.n	800391c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d109      	bne.n	80038da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d108      	bne.n	800390a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2200      	movs	r2, #0
 80038fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f005 ffc5 	bl	8009894 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2302      	movs	r3, #2
 800391a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	461a      	mov	r2, r3
 8003934:	2320      	movs	r3, #32
 8003936:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	461a      	mov	r2, r3
 8003950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003954:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	3301      	adds	r3, #1
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	f47f af62 	bne.w	800382e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f003 fb54 	bl	800701c <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800397e:	f040 80db 	bne.w	8003b38 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f003 fb75 	bl	8007076 <USB_ReadDevAllInEpInterrupt>
 800398c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003992:	e0cd      	b.n	8003b30 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80c2 	beq.w	8003b24 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f003 fb9b 	bl	80070e6 <USB_ReadDevInEPInterrupt>
 80039b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d057      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2201      	movs	r2, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039dc:	4013      	ands	r3, r2
 80039de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ec:	461a      	mov	r2, r3
 80039ee:	2301      	movs	r3, #1
 80039f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d132      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	334c      	adds	r3, #76	; 0x4c
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4403      	add	r3, r0
 8003a1a:	3348      	adds	r3, #72	; 0x48
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4419      	add	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4403      	add	r3, r0
 8003a2e:	334c      	adds	r3, #76	; 0x4c
 8003a30:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x3a2>
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3354      	adds	r3, #84	; 0x54
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f003 fba2 	bl	80071a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f005 fe99 	bl	800979e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a82:	461a      	mov	r2, r3
 8003a84:	2308      	movs	r3, #8
 8003a86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	461a      	mov	r2, r3
 8003abc:	2340      	movs	r3, #64	; 0x40
 8003abe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d023      	beq.n	8003b12 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003acc:	6a38      	ldr	r0, [r7, #32]
 8003ace:	f002 fa83 	bl	8005fd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3338      	adds	r3, #56	; 0x38
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	78db      	ldrb	r3, [r3, #3]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d108      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f005 fedc 	bl	80098b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2302      	movs	r3, #2
 8003b10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fcdb 	bl	80044da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f47f af2e 	bne.w	8003994 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fa6d 	bl	800701c <USB_ReadInterrupts>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4c:	d122      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d108      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b74:	2100      	movs	r1, #0
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fec2 	bl	8004900 <HAL_PCDEx_LPM_Callback>
 8003b7c:	e002      	b.n	8003b84 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f005 fe7a 	bl	8009878 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f003 fa3f 	bl	800701c <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba8:	d112      	bne.n	8003bd0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f005 fe36 	bl	800982c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f003 fa21 	bl	800701c <USB_ReadInterrupts>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	f040 80b7 	bne.w	8003d56 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2110      	movs	r1, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f002 f9e8 	bl	8005fd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0c:	e046      	b.n	8003c9c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	3301      	adds	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d3b3      	bcc.n	8003c0e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cb8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd2:	f043 030b 	orr.w	r3, r3, #11
 8003cd6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce8:	f043 030b 	orr.w	r3, r3, #11
 8003cec:	6453      	str	r3, [r2, #68]	; 0x44
 8003cee:	e015      	b.n	8003d1c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	69fa      	ldr	r2, [r7, #28]
 8003cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d16:	f043 030b 	orr.w	r3, r3, #11
 8003d1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69fa      	ldr	r2, [r7, #28]
 8003d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d40:	461a      	mov	r2, r3
 8003d42:	f003 fa2f 	bl	80071a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 f95e 	bl	800701c <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d124      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f003 f9f4 	bl	800715e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f002 f9a9 	bl	80060d2 <USB_GetDevSpeed>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681c      	ldr	r4, [r3, #0]
 8003d8c:	f001 f9e8 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8003d90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f001 fea8 	bl	8005af0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f005 fd24 	bl	80097ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 f92e 	bl	800701c <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d10a      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f005 fd01 	bl	80097d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f002 0208 	and.w	r2, r2, #8
 8003dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 f919 	bl	800701c <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d122      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e00:	2301      	movs	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e014      	b.n	8003e30 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 fb27 	bl	8004478 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d3e5      	bcc.n	8003e06 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 f8ec 	bl	800701c <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4e:	d13b      	bne.n	8003ec8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e50:	2301      	movs	r3, #1
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e02b      	b.n	8003eae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3340      	adds	r3, #64	; 0x40
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d115      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da12      	bge.n	8003ea8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	333f      	adds	r3, #63	; 0x3f
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fae8 	bl	8004478 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	3301      	adds	r3, #1
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d3ce      	bcc.n	8003e56 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f003 f8a5 	bl	800701c <USB_ReadInterrupts>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003edc:	d155      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ede:	2301      	movs	r3, #1
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee2:	e045      	b.n	8003f70 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	4613      	mov	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d12e      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da2b      	bge.n	8003f6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d121      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f66:	6053      	str	r3, [r2, #4]
            break;
 8003f68:	e007      	b.n	8003f7a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d3b4      	bcc.n	8003ee4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f003 f844 	bl	800701c <USB_ReadInterrupts>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f005 fc9b 	bl	80098dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 f82e 	bl	800701c <USB_ReadInterrupts>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d115      	bne.n	8003ff6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f005 fc8b 	bl	80098f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	e000      	b.n	8003ff6 <HAL_PCD_IRQHandler+0x938>
      return;
 8003ff4:	bf00      	nop
    }
  }
}
 8003ff6:	3734      	adds	r7, #52	; 0x34
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd90      	pop	{r4, r7, pc}

08003ffc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_PCD_SetAddress+0x1a>
 8004012:	2302      	movs	r3, #2
 8004014:	e013      	b.n	800403e <HAL_PCD_SetAddress+0x42>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	78fa      	ldrb	r2, [r7, #3]
 8004022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f002 ff8c 	bl	8006f4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	4608      	mov	r0, r1
 8004050:	4611      	mov	r1, r2
 8004052:	461a      	mov	r2, r3
 8004054:	4603      	mov	r3, r0
 8004056:	70fb      	strb	r3, [r7, #3]
 8004058:	460b      	mov	r3, r1
 800405a:	803b      	strh	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004068:	2b00      	cmp	r3, #0
 800406a:	da0f      	bge.n	800408c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	3338      	adds	r3, #56	; 0x38
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	705a      	strb	r2, [r3, #1]
 800408a:	e00f      	b.n	80040ac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	3304      	adds	r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040b8:	883a      	ldrh	r2, [r7, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	78ba      	ldrb	r2, [r7, #2]
 80040c2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	785b      	ldrb	r3, [r3, #1]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d004      	beq.n	80040d6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040d6:	78bb      	ldrb	r3, [r7, #2]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d102      	bne.n	80040e2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_PCD_EP_Open+0xaa>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e00e      	b.n	800410e <HAL_PCD_EP_Open+0xc8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68f9      	ldr	r1, [r7, #12]
 80040fe:	4618      	mov	r0, r3
 8004100:	f002 f80c 	bl	800611c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800410c:	7afb      	ldrb	r3, [r7, #11]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004126:	2b00      	cmp	r3, #0
 8004128:	da0f      	bge.n	800414a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	f003 020f 	and.w	r2, r3, #15
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	3338      	adds	r3, #56	; 0x38
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	705a      	strb	r2, [r3, #1]
 8004148:	e00f      	b.n	800416a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	3304      	adds	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_PCD_EP_Close+0x6e>
 8004180:	2302      	movs	r3, #2
 8004182:	e00e      	b.n	80041a2 <HAL_PCD_EP_Close+0x8c>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	4618      	mov	r0, r3
 8004194:	f002 f84a 	bl	800622c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	460b      	mov	r3, r1
 80041b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2200      	movs	r2, #0
 80041e4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ec:	7afb      	ldrb	r3, [r7, #11]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d102      	bne.n	8004206 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004206:	7afb      	ldrb	r3, [r7, #11]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	f002 fb29 	bl	8006874 <USB_EP0StartXfer>
 8004222:	e008      	b.n	8004236 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	6979      	ldr	r1, [r7, #20]
 8004232:	f002 f8d7 	bl	80063e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 020f 	and.w	r2, r3, #15
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	460b      	mov	r3, r1
 800427e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	3338      	adds	r3, #56	; 0x38
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	3304      	adds	r3, #4
 8004296:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2200      	movs	r2, #0
 80042a8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2201      	movs	r2, #1
 80042ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042b0:	7afb      	ldrb	r3, [r7, #11]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d102      	bne.n	80042ca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042ca:	7afb      	ldrb	r3, [r7, #11]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d109      	bne.n	80042e8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	f002 fac7 	bl	8006874 <USB_EP0StartXfer>
 80042e6:	e008      	b.n	80042fa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	461a      	mov	r2, r3
 80042f4:	6979      	ldr	r1, [r7, #20]
 80042f6:	f002 f875 	bl	80063e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d901      	bls.n	8004322 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e050      	b.n	80043c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004322:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	da0f      	bge.n	800434a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	f003 020f 	and.w	r2, r3, #15
 8004330:	4613      	mov	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	3338      	adds	r3, #56	; 0x38
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	3304      	adds	r3, #4
 8004340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	705a      	strb	r2, [r3, #1]
 8004348:	e00d      	b.n	8004366 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	3304      	adds	r3, #4
 800435e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_PCD_EP_SetStall+0x82>
 8004382:	2302      	movs	r3, #2
 8004384:	e01e      	b.n	80043c4 <HAL_PCD_EP_SetStall+0xc0>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	4618      	mov	r0, r3
 8004396:	f002 fd05 	bl	8006da4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10a      	bne.n	80043ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	b2d9      	uxtb	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043b4:	461a      	mov	r2, r3
 80043b6:	f002 fef5 	bl	80071a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f003 020f 	and.w	r2, r3, #15
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d901      	bls.n	80043ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e042      	b.n	8004470 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	da0f      	bge.n	8004412 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 020f 	and.w	r2, r3, #15
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	3338      	adds	r3, #56	; 0x38
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	3304      	adds	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	705a      	strb	r2, [r3, #1]
 8004410:	e00f      	b.n	8004432 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	f003 020f 	and.w	r2, r3, #15
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	3304      	adds	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	b2da      	uxtb	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_PCD_EP_ClrStall+0x86>
 800444e:	2302      	movs	r3, #2
 8004450:	e00e      	b.n	8004470 <HAL_PCD_EP_ClrStall+0xa4>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	4618      	mov	r0, r3
 8004462:	f002 fd0d 	bl	8006e80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004488:	2b00      	cmp	r3, #0
 800448a:	da0c      	bge.n	80044a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	f003 020f 	and.w	r2, r3, #15
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3338      	adds	r3, #56	; 0x38
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	3304      	adds	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e00c      	b.n	80044c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	f003 020f 	and.w	r2, r3, #15
 80044ac:	4613      	mov	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4413      	add	r3, r2
 80044bc:	3304      	adds	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f002 fb2c 	bl	8006b24 <USB_EPStopXfer>
 80044cc:	4603      	mov	r3, r0
 80044ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044d0:	7afb      	ldrb	r3, [r7, #11]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	3338      	adds	r3, #56	; 0x38
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	3304      	adds	r3, #4
 8004500:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1a      	ldr	r2, [r3, #32]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	429a      	cmp	r2, r3
 800450c:	d901      	bls.n	8004512 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06c      	b.n	80045ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	429a      	cmp	r2, r3
 8004526:	d902      	bls.n	800452e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3303      	adds	r3, #3
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004536:	e02b      	b.n	8004590 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	429a      	cmp	r2, r3
 800454c:	d902      	bls.n	8004554 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	3303      	adds	r3, #3
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6919      	ldr	r1, [r3, #16]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	b2da      	uxtb	r2, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800456c:	b2db      	uxtb	r3, r3
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	4603      	mov	r3, r0
 8004572:	6978      	ldr	r0, [r7, #20]
 8004574:	f002 fb80 	bl	8006c78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1a      	ldr	r2, [r3, #32]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	441a      	add	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d809      	bhi.n	80045ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d203      	bcs.n	80045ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1be      	bne.n	8004538 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d811      	bhi.n	80045ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	2201      	movs	r2, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	43db      	mvns	r3, r3
 80045e0:	6939      	ldr	r1, [r7, #16]
 80045e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e6:	4013      	ands	r3, r2
 80045e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	333c      	adds	r3, #60	; 0x3c
 800460c:	3304      	adds	r3, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d17b      	bne.n	8004722 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	4a61      	ldr	r2, [pc, #388]	; (80047bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	f240 80b9 	bls.w	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80b3 	beq.w	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465c:	6093      	str	r3, [r2, #8]
 800465e:	e0a7      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	2320      	movs	r3, #32
 800467a:	6093      	str	r3, [r2, #8]
 800467c:	e098      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 8093 	bne.w	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a4b      	ldr	r2, [pc, #300]	; (80047bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d90f      	bls.n	80046b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ae:	6093      	str	r3, [r2, #8]
 80046b0:	e07e      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4413      	add	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	4413      	add	r3, r2
 80046c4:	3304      	adds	r3, #4
 80046c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	0159      	lsls	r1, r3, #5
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	440b      	add	r3, r1
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d114      	bne.n	8004714 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046fc:	461a      	mov	r2, r3
 80046fe:	2101      	movs	r1, #1
 8004700:	f002 fd50 	bl	80071a4 <USB_EP0_OutStart>
 8004704:	e006      	b.n	8004714 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	441a      	add	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f005 f824 	bl	8009768 <HAL_PCD_DataOutStageCallback>
 8004720:	e046      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d124      	bne.n	8004774 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	461a      	mov	r2, r3
 8004742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004746:	6093      	str	r3, [r2, #8]
 8004748:	e032      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	461a      	mov	r2, r3
 8004762:	2320      	movs	r3, #32
 8004764:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f004 fffb 	bl	8009768 <HAL_PCD_DataOutStageCallback>
 8004772:	e01d      	b.n	80047b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d114      	bne.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d108      	bne.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800479c:	461a      	mov	r2, r3
 800479e:	2100      	movs	r1, #0
 80047a0:	f002 fd00 	bl	80071a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f004 ffdc 	bl	8009768 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	4f54300a 	.word	0x4f54300a
 80047c0:	4f54310a 	.word	0x4f54310a

080047c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	333c      	adds	r3, #60	; 0x3c
 80047dc:	3304      	adds	r3, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a15      	ldr	r2, [pc, #84]	; (800484c <PCD_EP_OutSetupPacket_int+0x88>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d90e      	bls.n	8004818 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	461a      	mov	r2, r3
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f004 ff93 	bl	8009744 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <PCD_EP_OutSetupPacket_int+0x88>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d90c      	bls.n	8004840 <PCD_EP_OutSetupPacket_int+0x7c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004838:	461a      	mov	r2, r3
 800483a:	2101      	movs	r1, #1
 800483c:	f002 fcb2 	bl	80071a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	4f54300a 	.word	0x4f54300a

08004850 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	70fb      	strb	r3, [r7, #3]
 800485c:	4613      	mov	r3, r2
 800485e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800486e:	883b      	ldrh	r3, [r7, #0]
 8004870:	0419      	lsls	r1, r3, #16
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	430a      	orrs	r2, r1
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
 800487c:	e028      	b.n	80048d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4413      	add	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]
 8004890:	e00d      	b.n	80048ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	3340      	adds	r3, #64	; 0x40
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
 80048aa:	3301      	adds	r3, #1
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3ec      	bcc.n	8004892 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048b8:	883b      	ldrh	r3, [r7, #0]
 80048ba:	0418      	lsls	r0, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6819      	ldr	r1, [r3, #0]
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	4302      	orrs	r2, r0
 80048c8:	3340      	adds	r3, #64	; 0x40
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	887a      	ldrh	r2, [r7, #2]
 80048f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e267      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d075      	beq.n	8004a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004936:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b04      	cmp	r3, #4
 8004940:	d00c      	beq.n	800495c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b85      	ldr	r3, [pc, #532]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800494a:	2b08      	cmp	r3, #8
 800494c:	d112      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800494e:	4b82      	ldr	r3, [pc, #520]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800495a:	d10b      	bne.n	8004974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	4b7e      	ldr	r3, [pc, #504]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d05b      	beq.n	8004a20 <HAL_RCC_OscConfig+0x108>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d157      	bne.n	8004a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e242      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497c:	d106      	bne.n	800498c <HAL_RCC_OscConfig+0x74>
 800497e:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a75      	ldr	r2, [pc, #468]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e01d      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x98>
 8004996:	4b70      	ldr	r3, [pc, #448]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6f      	ldr	r2, [pc, #444]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 800499c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a6c      	ldr	r2, [pc, #432]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xb0>
 80049b0:	4b69      	ldr	r3, [pc, #420]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a68      	ldr	r2, [pc, #416]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	4b66      	ldr	r3, [pc, #408]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a65      	ldr	r2, [pc, #404]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d013      	beq.n	80049f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fd fa6c 	bl	8001eac <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d8:	f7fd fa68 	bl	8001eac <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	; 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e207      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4b5b      	ldr	r3, [pc, #364]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0xc0>
 80049f6:	e014      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd fa58 	bl	8001eac <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a00:	f7fd fa54 	bl	8001eac <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b64      	cmp	r3, #100	; 0x64
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e1f3      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	4b51      	ldr	r3, [pc, #324]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0xe8>
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d063      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d11c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a46:	4b44      	ldr	r3, [pc, #272]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a52:	4b41      	ldr	r3, [pc, #260]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d001      	beq.n	8004a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e1c7      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	4b3b      	ldr	r3, [pc, #236]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4937      	ldr	r1, [pc, #220]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a7e:	e03a      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	4b34      	ldr	r3, [pc, #208]	; (8004b5c <HAL_RCC_OscConfig+0x244>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fa0d 	bl	8001eac <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a96:	f7fd fa09 	bl	8001eac <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1a8      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa8:	4b2b      	ldr	r3, [pc, #172]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab4:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4925      	ldr	r1, [pc, #148]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	600b      	str	r3, [r1, #0]
 8004ac8:	e015      	b.n	8004af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aca:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <HAL_RCC_OscConfig+0x244>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd f9ec 	bl	8001eac <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad8:	f7fd f9e8 	bl	8001eac <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e187      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aea:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d036      	beq.n	8004b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d016      	beq.n	8004b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <HAL_RCC_OscConfig+0x248>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fd f9cc 	bl	8001eac <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b18:	f7fd f9c8 	bl	8001eac <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e167      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x200>
 8004b36:	e01b      	b.n	8004b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b38:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <HAL_RCC_OscConfig+0x248>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fd f9b5 	bl	8001eac <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	e00e      	b.n	8004b64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b46:	f7fd f9b1 	bl	8001eac <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d907      	bls.n	8004b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e150      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	42470000 	.word	0x42470000
 8004b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b64:	4b88      	ldr	r3, [pc, #544]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ea      	bne.n	8004b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8097 	beq.w	8004cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b82:	4b81      	ldr	r3, [pc, #516]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10f      	bne.n	8004bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	4b7d      	ldr	r3, [pc, #500]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a7c      	ldr	r2, [pc, #496]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	60bb      	str	r3, [r7, #8]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bae:	4b77      	ldr	r3, [pc, #476]	; (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d118      	bne.n	8004bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bba:	4b74      	ldr	r3, [pc, #464]	; (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a73      	ldr	r2, [pc, #460]	; (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc6:	f7fd f971 	bl	8001eac <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fd f96d 	bl	8001eac <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e10c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <HAL_RCC_OscConfig+0x474>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2ea>
 8004bf4:	4b64      	ldr	r3, [pc, #400]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a63      	ldr	r2, [pc, #396]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	e01c      	b.n	8004c3c <HAL_RCC_OscConfig+0x324>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b05      	cmp	r3, #5
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCC_OscConfig+0x30c>
 8004c0a:	4b5f      	ldr	r3, [pc, #380]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	4a5e      	ldr	r2, [pc, #376]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6713      	str	r3, [r2, #112]	; 0x70
 8004c16:	4b5c      	ldr	r3, [pc, #368]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4a5b      	ldr	r2, [pc, #364]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6713      	str	r3, [r2, #112]	; 0x70
 8004c22:	e00b      	b.n	8004c3c <HAL_RCC_OscConfig+0x324>
 8004c24:	4b58      	ldr	r3, [pc, #352]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a57      	ldr	r2, [pc, #348]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c30:	4b55      	ldr	r3, [pc, #340]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	4a54      	ldr	r2, [pc, #336]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c36:	f023 0304 	bic.w	r3, r3, #4
 8004c3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fd f932 	bl	8001eac <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7fd f92e 	bl	8001eac <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e0cb      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c62:	4b49      	ldr	r3, [pc, #292]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0ee      	beq.n	8004c4c <HAL_RCC_OscConfig+0x334>
 8004c6e:	e014      	b.n	8004c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c70:	f7fd f91c 	bl	8001eac <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c78:	f7fd f918 	bl	8001eac <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e0b5      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8e:	4b3e      	ldr	r3, [pc, #248]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ee      	bne.n	8004c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca0:	4b39      	ldr	r3, [pc, #228]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	4a38      	ldr	r2, [pc, #224]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80a1 	beq.w	8004df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb6:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d05c      	beq.n	8004d7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d141      	bne.n	8004d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cca:	4b31      	ldr	r3, [pc, #196]	; (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd0:	f7fd f8ec 	bl	8001eac <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd8:	f7fd f8e8 	bl	8001eac <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e087      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cea:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1f0      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69da      	ldr	r2, [r3, #28]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	491b      	ldr	r1, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fd f8c1 	bl	8001eac <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fd f8bd 	bl	8001eac <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e05c      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d40:	4b11      	ldr	r3, [pc, #68]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x416>
 8004d4c:	e054      	b.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <HAL_RCC_OscConfig+0x478>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d54:	f7fd f8aa 	bl	8001eac <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5c:	f7fd f8a6 	bl	8001eac <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e045      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6e:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <HAL_RCC_OscConfig+0x470>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x444>
 8004d7a:	e03d      	b.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d107      	bne.n	8004d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e038      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d94:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <HAL_RCC_OscConfig+0x4ec>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d028      	beq.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d121      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d11a      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d111      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dda:	085b      	lsrs	r3, r3, #1
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d107      	bne.n	8004df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800

08004e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0cc      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b68      	ldr	r3, [pc, #416]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d90c      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b65      	ldr	r3, [pc, #404]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b63      	ldr	r3, [pc, #396]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0b8      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d020      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a58      	ldr	r2, [pc, #352]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0308 	and.w	r3, r3, #8
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e74:	4b53      	ldr	r3, [pc, #332]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4a52      	ldr	r2, [pc, #328]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e80:	4b50      	ldr	r3, [pc, #320]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	494d      	ldr	r1, [pc, #308]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d044      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea6:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d119      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e07f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d003      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ec2:	2b03      	cmp	r3, #3
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	4b3b      	ldr	r3, [pc, #236]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e067      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4934      	ldr	r1, [pc, #208]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef8:	f7fc ffd8 	bl	8001eac <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fc ffd4 	bl	8001eac <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e04f      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f28:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d20c      	bcs.n	8004f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e032      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f5c:	4b19      	ldr	r3, [pc, #100]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4916      	ldr	r1, [pc, #88]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f7a:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	490e      	ldr	r1, [pc, #56]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f8e:	f000 f821 	bl	8004fd4 <HAL_RCC_GetSysClockFreq>
 8004f92:	4602      	mov	r2, r0
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	490a      	ldr	r1, [pc, #40]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004fa0:	5ccb      	ldrb	r3, [r1, r3]
 8004fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa6:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc ff38 	bl	8001e24 <HAL_InitTick>

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023c00 	.word	0x40023c00
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	0800c8e8 	.word	0x0800c8e8
 8004fcc:	20000004 	.word	0x20000004
 8004fd0:	20000008 	.word	0x20000008

08004fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd8:	b090      	sub	sp, #64	; 0x40
 8004fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fec:	4b59      	ldr	r3, [pc, #356]	; (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d00d      	beq.n	8005014 <HAL_RCC_GetSysClockFreq+0x40>
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	f200 80a1 	bhi.w	8005140 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x34>
 8005002:	2b04      	cmp	r3, #4
 8005004:	d003      	beq.n	800500e <HAL_RCC_GetSysClockFreq+0x3a>
 8005006:	e09b      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005008:	4b53      	ldr	r3, [pc, #332]	; (8005158 <HAL_RCC_GetSysClockFreq+0x184>)
 800500a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800500c:	e09b      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800500e:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 8005010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005012:	e098      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005014:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800501e:	4b4d      	ldr	r3, [pc, #308]	; (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d028      	beq.n	800507c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502a:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	2200      	movs	r2, #0
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	627a      	str	r2, [r7, #36]	; 0x24
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800503c:	2100      	movs	r1, #0
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 8005040:	fb03 f201 	mul.w	r2, r3, r1
 8005044:	2300      	movs	r3, #0
 8005046:	fb00 f303 	mul.w	r3, r0, r3
 800504a:	4413      	add	r3, r2
 800504c:	4a43      	ldr	r2, [pc, #268]	; (800515c <HAL_RCC_GetSysClockFreq+0x188>)
 800504e:	fba0 1202 	umull	r1, r2, r0, r2
 8005052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005054:	460a      	mov	r2, r1
 8005056:	62ba      	str	r2, [r7, #40]	; 0x28
 8005058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505a:	4413      	add	r3, r2
 800505c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	2200      	movs	r2, #0
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	61fa      	str	r2, [r7, #28]
 8005066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800506a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800506e:	f7fb fdf3 	bl	8000c58 <__aeabi_uldivmod>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4613      	mov	r3, r2
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507a:	e053      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507c:	4b35      	ldr	r3, [pc, #212]	; (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	099b      	lsrs	r3, r3, #6
 8005082:	2200      	movs	r2, #0
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	617a      	str	r2, [r7, #20]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800508e:	f04f 0b00 	mov.w	fp, #0
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	f04f 0000 	mov.w	r0, #0
 800509a:	f04f 0100 	mov.w	r1, #0
 800509e:	0159      	lsls	r1, r3, #5
 80050a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a4:	0150      	lsls	r0, r2, #5
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	ebb2 080a 	subs.w	r8, r2, sl
 80050ae:	eb63 090b 	sbc.w	r9, r3, fp
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050c6:	ebb2 0408 	subs.w	r4, r2, r8
 80050ca:	eb63 0509 	sbc.w	r5, r3, r9
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	00eb      	lsls	r3, r5, #3
 80050d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050dc:	00e2      	lsls	r2, r4, #3
 80050de:	4614      	mov	r4, r2
 80050e0:	461d      	mov	r5, r3
 80050e2:	eb14 030a 	adds.w	r3, r4, sl
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	eb45 030b 	adc.w	r3, r5, fp
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050fa:	4629      	mov	r1, r5
 80050fc:	028b      	lsls	r3, r1, #10
 80050fe:	4621      	mov	r1, r4
 8005100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005104:	4621      	mov	r1, r4
 8005106:	028a      	lsls	r2, r1, #10
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510e:	2200      	movs	r2, #0
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	60fa      	str	r2, [r7, #12]
 8005114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005118:	f7fb fd9e 	bl	8000c58 <__aeabi_uldivmod>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4613      	mov	r3, r2
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <HAL_RCC_GetSysClockFreq+0x180>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	3301      	adds	r3, #1
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	fbb2 f3f3 	udiv	r3, r2, r3
 800513c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800513e:	e002      	b.n	8005146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005140:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetSysClockFreq+0x184>)
 8005142:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005148:	4618      	mov	r0, r3
 800514a:	3740      	adds	r7, #64	; 0x40
 800514c:	46bd      	mov	sp, r7
 800514e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	00f42400 	.word	0x00f42400
 800515c:	017d7840 	.word	0x017d7840

08005160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <HAL_RCC_GetHCLKFreq+0x14>)
 8005166:	681b      	ldr	r3, [r3, #0]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000004 	.word	0x20000004

08005178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800517c:	f7ff fff0 	bl	8005160 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b05      	ldr	r3, [pc, #20]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	0a9b      	lsrs	r3, r3, #10
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4903      	ldr	r1, [pc, #12]	; (800519c <HAL_RCC_GetPCLK1Freq+0x24>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40023800 	.word	0x40023800
 800519c:	0800c8f8 	.word	0x0800c8f8

080051a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e041      	b.n	8005236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc fdb8 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f000 fa88 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d001      	beq.n	8005258 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e044      	b.n	80052e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d018      	beq.n	80052ac <HAL_TIM_Base_Start_IT+0x6c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d013      	beq.n	80052ac <HAL_TIM_Base_Start_IT+0x6c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00e      	beq.n	80052ac <HAL_TIM_Base_Start_IT+0x6c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a19      	ldr	r2, [pc, #100]	; (80052f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_TIM_Base_Start_IT+0x6c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a17      	ldr	r2, [pc, #92]	; (80052fc <HAL_TIM_Base_Start_IT+0xbc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_TIM_Base_Start_IT+0x6c>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <HAL_TIM_Base_Start_IT+0xc0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d111      	bne.n	80052d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d010      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	e007      	b.n	80052e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40014000 	.word	0x40014000

08005304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0202 	mvn.w	r2, #2
 8005330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f9b5 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f9a7 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f9b8 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0204 	mvn.w	r2, #4
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f98b 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f97d 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f98e 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0208 	mvn.w	r2, #8
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f961 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f953 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f964 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b10      	cmp	r3, #16
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b10      	cmp	r3, #16
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0210 	mvn.w	r2, #16
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2208      	movs	r2, #8
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f937 	bl	80056b6 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f929 	bl	80056a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f93a 	bl	80056ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10e      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0201 	mvn.w	r2, #1
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb ff44 	bl	8001310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d10e      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d107      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fab2 	bl	8005a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d10e      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d107      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f8ff 	bl	80056de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b20      	cmp	r3, #32
 80054ec:	d10e      	bne.n	800550c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b20      	cmp	r3, #32
 80054fa:	d107      	bne.n	800550c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0220 	mvn.w	r2, #32
 8005504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa7c 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIM_ConfigClockSource+0x1c>
 800552c:	2302      	movs	r3, #2
 800552e:	e0b4      	b.n	800569a <HAL_TIM_ConfigClockSource+0x186>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800554e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005568:	d03e      	beq.n	80055e8 <HAL_TIM_ConfigClockSource+0xd4>
 800556a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556e:	f200 8087 	bhi.w	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	f000 8086 	beq.w	8005686 <HAL_TIM_ConfigClockSource+0x172>
 800557a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557e:	d87f      	bhi.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b70      	cmp	r3, #112	; 0x70
 8005582:	d01a      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0xa6>
 8005584:	2b70      	cmp	r3, #112	; 0x70
 8005586:	d87b      	bhi.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b60      	cmp	r3, #96	; 0x60
 800558a:	d050      	beq.n	800562e <HAL_TIM_ConfigClockSource+0x11a>
 800558c:	2b60      	cmp	r3, #96	; 0x60
 800558e:	d877      	bhi.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b50      	cmp	r3, #80	; 0x50
 8005592:	d03c      	beq.n	800560e <HAL_TIM_ConfigClockSource+0xfa>
 8005594:	2b50      	cmp	r3, #80	; 0x50
 8005596:	d873      	bhi.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d058      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x13a>
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d86f      	bhi.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b30      	cmp	r3, #48	; 0x30
 80055a2:	d064      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x15a>
 80055a4:	2b30      	cmp	r3, #48	; 0x30
 80055a6:	d86b      	bhi.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 80055a8:	2b20      	cmp	r3, #32
 80055aa:	d060      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x15a>
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d867      	bhi.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05c      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x15a>
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d05a      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x15a>
 80055b8:	e062      	b.n	8005680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f000 f98d 	bl	80058e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	609a      	str	r2, [r3, #8]
      break;
 80055e6:	e04f      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	6899      	ldr	r1, [r3, #8]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f000 f976 	bl	80058e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800560a:	609a      	str	r2, [r3, #8]
      break;
 800560c:	e03c      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6859      	ldr	r1, [r3, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	461a      	mov	r2, r3
 800561c:	f000 f8ea 	bl	80057f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2150      	movs	r1, #80	; 0x50
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f943 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800562c:	e02c      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	461a      	mov	r2, r3
 800563c:	f000 f909 	bl	8005852 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2160      	movs	r1, #96	; 0x60
 8005646:	4618      	mov	r0, r3
 8005648:	f000 f933 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800564c:	e01c      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6859      	ldr	r1, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	461a      	mov	r2, r3
 800565c:	f000 f8ca 	bl	80057f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2140      	movs	r1, #64	; 0x40
 8005666:	4618      	mov	r0, r3
 8005668:	f000 f923 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800566c:	e00c      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f000 f91a 	bl	80058b2 <TIM_ITRx_SetConfig>
      break;
 800567e:	e003      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
      break;
 8005684:	e000      	b.n	8005688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a34      	ldr	r2, [pc, #208]	; (80057d8 <TIM_Base_SetConfig+0xe4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00f      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d00b      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a31      	ldr	r2, [pc, #196]	; (80057dc <TIM_Base_SetConfig+0xe8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a30      	ldr	r2, [pc, #192]	; (80057e0 <TIM_Base_SetConfig+0xec>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a2f      	ldr	r2, [pc, #188]	; (80057e4 <TIM_Base_SetConfig+0xf0>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d108      	bne.n	800573e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <TIM_Base_SetConfig+0xe4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01b      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574c:	d017      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a22      	ldr	r2, [pc, #136]	; (80057dc <TIM_Base_SetConfig+0xe8>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a21      	ldr	r2, [pc, #132]	; (80057e0 <TIM_Base_SetConfig+0xec>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00f      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <TIM_Base_SetConfig+0xf0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1f      	ldr	r2, [pc, #124]	; (80057e8 <TIM_Base_SetConfig+0xf4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <TIM_Base_SetConfig+0xf8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_Base_SetConfig+0x8a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <TIM_Base_SetConfig+0xfc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d108      	bne.n	8005790 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a08      	ldr	r2, [pc, #32]	; (80057d8 <TIM_Base_SetConfig+0xe4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d103      	bne.n	80057c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	615a      	str	r2, [r3, #20]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40014400 	.word	0x40014400
 80057f0:	40014800 	.word	0x40014800

080057f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800581e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 030a 	bic.w	r3, r3, #10
 8005830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005852:	b480      	push	{r7}
 8005854:	b087      	sub	sp, #28
 8005856:	af00      	add	r7, sp, #0
 8005858:	60f8      	str	r0, [r7, #12]
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0210 	bic.w	r2, r3, #16
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800587c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800588e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	621a      	str	r2, [r3, #32]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f043 0307 	orr.w	r3, r3, #7
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	021a      	lsls	r2, r3, #8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	431a      	orrs	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	609a      	str	r2, [r3, #8]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800593c:	2302      	movs	r3, #2
 800593e:	e050      	b.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d018      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598c:	d013      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a18      	ldr	r2, [pc, #96]	; (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a15      	ldr	r2, [pc, #84]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10c      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40000400 	.word	0x40000400
 80059f8:	40000800 	.word	0x40000800
 80059fc:	40000c00 	.word	0x40000c00
 8005a00:	40014000 	.word	0x40014000

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	f107 001c 	add.w	r0, r7, #28
 8005a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d122      	bne.n	8005a8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d105      	bne.n	8005a7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fbee 	bl	8007260 <USB_CoreReset>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]
 8005a88:	e01a      	b.n	8005ac0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fbe2 	bl	8007260 <USB_CoreReset>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ab2:	e005      	b.n	8005ac0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10b      	bne.n	8005ade <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f043 0206 	orr.w	r2, r3, #6
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aea:	b004      	add	sp, #16
 8005aec:	4770      	bx	lr
	...

08005af0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d165      	bne.n	8005bd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a41      	ldr	r2, [pc, #260]	; (8005c0c <USB_SetTurnaroundTime+0x11c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d906      	bls.n	8005b1a <USB_SetTurnaroundTime+0x2a>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4a40      	ldr	r2, [pc, #256]	; (8005c10 <USB_SetTurnaroundTime+0x120>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d202      	bcs.n	8005b1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b14:	230f      	movs	r3, #15
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e062      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <USB_SetTurnaroundTime+0x120>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d306      	bcc.n	8005b30 <USB_SetTurnaroundTime+0x40>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <USB_SetTurnaroundTime+0x124>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d202      	bcs.n	8005b30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b2a:	230e      	movs	r3, #14
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e057      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a38      	ldr	r2, [pc, #224]	; (8005c14 <USB_SetTurnaroundTime+0x124>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d306      	bcc.n	8005b46 <USB_SetTurnaroundTime+0x56>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <USB_SetTurnaroundTime+0x128>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d202      	bcs.n	8005b46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b40:	230d      	movs	r3, #13
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e04c      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a33      	ldr	r2, [pc, #204]	; (8005c18 <USB_SetTurnaroundTime+0x128>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d306      	bcc.n	8005b5c <USB_SetTurnaroundTime+0x6c>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4a32      	ldr	r2, [pc, #200]	; (8005c1c <USB_SetTurnaroundTime+0x12c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d802      	bhi.n	8005b5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b56:	230c      	movs	r3, #12
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e041      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <USB_SetTurnaroundTime+0x12c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d906      	bls.n	8005b72 <USB_SetTurnaroundTime+0x82>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4a2e      	ldr	r2, [pc, #184]	; (8005c20 <USB_SetTurnaroundTime+0x130>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d802      	bhi.n	8005b72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b6c:	230b      	movs	r3, #11
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e036      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <USB_SetTurnaroundTime+0x130>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d906      	bls.n	8005b88 <USB_SetTurnaroundTime+0x98>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <USB_SetTurnaroundTime+0x134>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d802      	bhi.n	8005b88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b82:	230a      	movs	r3, #10
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e02b      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4a26      	ldr	r2, [pc, #152]	; (8005c24 <USB_SetTurnaroundTime+0x134>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d906      	bls.n	8005b9e <USB_SetTurnaroundTime+0xae>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <USB_SetTurnaroundTime+0x138>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d202      	bcs.n	8005b9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b98:	2309      	movs	r3, #9
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e020      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <USB_SetTurnaroundTime+0x138>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d306      	bcc.n	8005bb4 <USB_SetTurnaroundTime+0xc4>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <USB_SetTurnaroundTime+0x13c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d802      	bhi.n	8005bb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005bae:	2308      	movs	r3, #8
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e015      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <USB_SetTurnaroundTime+0x13c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d906      	bls.n	8005bca <USB_SetTurnaroundTime+0xda>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <USB_SetTurnaroundTime+0x140>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d202      	bcs.n	8005bca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005bc4:	2307      	movs	r3, #7
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e00a      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005bca:	2306      	movs	r3, #6
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e007      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005bd6:	2309      	movs	r3, #9
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e001      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005bdc:	2309      	movs	r3, #9
 8005bde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	029b      	lsls	r3, r3, #10
 8005bf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	00d8acbf 	.word	0x00d8acbf
 8005c10:	00e4e1c0 	.word	0x00e4e1c0
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	01067380 	.word	0x01067380
 8005c1c:	011a499f 	.word	0x011a499f
 8005c20:	01312cff 	.word	0x01312cff
 8005c24:	014ca43f 	.word	0x014ca43f
 8005c28:	016e3600 	.word	0x016e3600
 8005c2c:	01a6ab1f 	.word	0x01a6ab1f
 8005c30:	01e84800 	.word	0x01e84800

08005c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f043 0201 	orr.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d115      	bne.n	8005cc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	f7fc f90c 	bl	8001ec4 <HAL_Delay>
      ms++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 fa45 	bl	8007142 <USB_GetMode>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d01e      	beq.n	8005cfc <USB_SetCurrentMode+0x84>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b31      	cmp	r3, #49	; 0x31
 8005cc2:	d9f0      	bls.n	8005ca6 <USB_SetCurrentMode+0x2e>
 8005cc4:	e01a      	b.n	8005cfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d115      	bne.n	8005cf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cd8:	2001      	movs	r0, #1
 8005cda:	f7fc f8f3 	bl	8001ec4 <HAL_Delay>
      ms++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fa2c 	bl	8007142 <USB_GetMode>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <USB_SetCurrentMode+0x84>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b31      	cmp	r3, #49	; 0x31
 8005cf4:	d9f0      	bls.n	8005cd8 <USB_SetCurrentMode+0x60>
 8005cf6:	e001      	b.n	8005cfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e005      	b.n	8005d08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b32      	cmp	r3, #50	; 0x32
 8005d00:	d101      	bne.n	8005d06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d10:	b084      	sub	sp, #16
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b086      	sub	sp, #24
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
 8005d2e:	e009      	b.n	8005d44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	3340      	adds	r3, #64	; 0x40
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	3301      	adds	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b0e      	cmp	r3, #14
 8005d48:	d9f2      	bls.n	8005d30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11c      	bne.n	8005d8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	639a      	str	r2, [r3, #56]	; 0x38
 8005d88:	e00b      	b.n	8005da2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005da8:	461a      	mov	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db4:	4619      	mov	r1, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	680b      	ldr	r3, [r1, #0]
 8005dc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10c      	bne.n	8005de2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dce:	2100      	movs	r1, #0
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f965 	bl	80060a0 <USB_SetDevSpeed>
 8005dd6:	e008      	b.n	8005dea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dd8:	2101      	movs	r1, #1
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f960 	bl	80060a0 <USB_SetDevSpeed>
 8005de0:	e003      	b.n	8005dea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005de2:	2103      	movs	r1, #3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f95b 	bl	80060a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dea:	2110      	movs	r1, #16
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8f3 	bl	8005fd8 <USB_FlushTxFifo>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f91f 	bl	8006040 <USB_FlushRxFifo>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1e:	461a      	mov	r2, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	e043      	b.n	8005ebe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e4c:	d118      	bne.n	8005e80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10a      	bne.n	8005e6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	461a      	mov	r2, r3
 8005e62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e013      	b.n	8005e92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	461a      	mov	r2, r3
 8005e78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	e008      	b.n	8005e92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eb6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3b7      	bcc.n	8005e36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e043      	b.n	8005f54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee2:	d118      	bne.n	8005f16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	e013      	b.n	8005f28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	e008      	b.n	8005f28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	461a      	mov	r2, r3
 8005f24:	2300      	movs	r3, #0
 8005f26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	461a      	mov	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f46:	461a      	mov	r2, r3
 8005f48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	3301      	adds	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d3b7      	bcc.n	8005ecc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f043 0210 	orr.w	r2, r3, #16
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <USB_DevInit+0x2c4>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f043 0208 	orr.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d107      	bne.n	8005fc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	f043 0304 	orr.w	r3, r3, #4
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fd0:	b004      	add	sp, #16
 8005fd2:	4770      	bx	lr
 8005fd4:	803c3800 	.word	0x803c3800

08005fd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a13      	ldr	r2, [pc, #76]	; (800603c <USB_FlushTxFifo+0x64>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e01b      	b.n	8006030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	daf2      	bge.n	8005fe6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	019b      	lsls	r3, r3, #6
 8006008:	f043 0220 	orr.w	r2, r3, #32
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a08      	ldr	r2, [pc, #32]	; (800603c <USB_FlushTxFifo+0x64>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d901      	bls.n	8006022 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e006      	b.n	8006030 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b20      	cmp	r3, #32
 800602c:	d0f0      	beq.n	8006010 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	00030d40 	.word	0x00030d40

08006040 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a11      	ldr	r2, [pc, #68]	; (800609c <USB_FlushRxFifo+0x5c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d901      	bls.n	800605e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e018      	b.n	8006090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	daf2      	bge.n	800604c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2210      	movs	r2, #16
 800606e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3301      	adds	r3, #1
 8006074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a08      	ldr	r2, [pc, #32]	; (800609c <USB_FlushRxFifo+0x5c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d901      	bls.n	8006082 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e006      	b.n	8006090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0310 	and.w	r3, r3, #16
 800608a:	2b10      	cmp	r3, #16
 800608c:	d0f0      	beq.n	8006070 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	00030d40 	.word	0x00030d40

080060a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	78fb      	ldrb	r3, [r7, #3]
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060c0:	4313      	orrs	r3, r2
 80060c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b087      	sub	sp, #28
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0306 	and.w	r3, r3, #6
 80060ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d102      	bne.n	80060f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]
 80060f6:	e00a      	b.n	800610e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d002      	beq.n	8006104 <USB_GetDevSpeed+0x32>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b06      	cmp	r3, #6
 8006102:	d102      	bne.n	800610a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006104:	2302      	movs	r3, #2
 8006106:	75fb      	strb	r3, [r7, #23]
 8006108:	e001      	b.n	800610e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800610a:	230f      	movs	r3, #15
 800610c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800610e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006110:	4618      	mov	r0, r3
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d13a      	bne.n	80061ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	69da      	ldr	r2, [r3, #28]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	2101      	movs	r1, #1
 800614a:	fa01 f303 	lsl.w	r3, r1, r3
 800614e:	b29b      	uxth	r3, r3
 8006150:	68f9      	ldr	r1, [r7, #12]
 8006152:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006156:	4313      	orrs	r3, r2
 8006158:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d155      	bne.n	800621c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	791b      	ldrb	r3, [r3, #4]
 800618a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800618c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	059b      	lsls	r3, r3, #22
 8006192:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006194:	4313      	orrs	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	e036      	b.n	800621c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b4:	69da      	ldr	r2, [r3, #28]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	2101      	movs	r1, #1
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	041b      	lsls	r3, r3, #16
 80061c6:	68f9      	ldr	r1, [r7, #12]
 80061c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d11a      	bne.n	800621c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	791b      	ldrb	r3, [r3, #4]
 8006200:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006202:	430b      	orrs	r3, r1
 8006204:	4313      	orrs	r3, r2
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d161      	bne.n	800630c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800625a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800625e:	d11f      	bne.n	80062a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800627e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800629e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	2101      	movs	r1, #1
 80062b2:	fa01 f303 	lsl.w	r3, r1, r3
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	43db      	mvns	r3, r3
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062c0:	4013      	ands	r3, r2
 80062c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	69da      	ldr	r2, [r3, #28]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	2101      	movs	r1, #1
 80062d6:	fa01 f303 	lsl.w	r3, r1, r3
 80062da:	b29b      	uxth	r3, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e4:	4013      	ands	r3, r2
 80062e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	0159      	lsls	r1, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	440b      	add	r3, r1
 80062fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006302:	4619      	mov	r1, r3
 8006304:	4b35      	ldr	r3, [pc, #212]	; (80063dc <USB_DeactivateEndpoint+0x1b0>)
 8006306:	4013      	ands	r3, r2
 8006308:	600b      	str	r3, [r1, #0]
 800630a:	e060      	b.n	80063ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800631e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006322:	d11f      	bne.n	8006364 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006342:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	2101      	movs	r1, #1
 8006376:	fa01 f303 	lsl.w	r3, r1, r3
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	43db      	mvns	r3, r3
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006384:	4013      	ands	r3, r2
 8006386:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f303 	lsl.w	r3, r1, r3
 800639e:	041b      	lsls	r3, r3, #16
 80063a0:	43db      	mvns	r3, r3
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a8:	4013      	ands	r3, r2
 80063aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	0159      	lsls	r1, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	440b      	add	r3, r1
 80063c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c6:	4619      	mov	r1, r3
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <USB_DeactivateEndpoint+0x1b4>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	ec337800 	.word	0xec337800
 80063e0:	eff37800 	.word	0xeff37800

080063e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	2b01      	cmp	r3, #1
 8006402:	f040 815c 	bne.w	80066be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d132      	bne.n	8006474 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800642c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646c:	0cdb      	lsrs	r3, r3, #19
 800646e:	04db      	lsls	r3, r3, #19
 8006470:	6113      	str	r3, [r2, #16]
 8006472:	e074      	b.n	800655e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648e:	0cdb      	lsrs	r3, r3, #19
 8006490:	04db      	lsls	r3, r3, #19
 8006492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	440b      	add	r3, r1
 80064d0:	1e59      	subs	r1, r3, #1
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80064da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80064dc:	4b9d      	ldr	r3, [pc, #628]	; (8006754 <USB_EPStartXfer+0x370>)
 80064de:	400b      	ands	r3, r1
 80064e0:	69b9      	ldr	r1, [r7, #24]
 80064e2:	0148      	lsls	r0, r1, #5
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	4401      	add	r1, r0
 80064e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006506:	69b9      	ldr	r1, [r7, #24]
 8006508:	0148      	lsls	r0, r1, #5
 800650a:	69f9      	ldr	r1, [r7, #28]
 800650c:	4401      	add	r1, r0
 800650e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006512:	4313      	orrs	r3, r2
 8006514:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d11f      	bne.n	800655e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006538:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800653c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	69fa      	ldr	r2, [r7, #28]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800655c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d14b      	bne.n	80065fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006578:	461a      	mov	r2, r3
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	791b      	ldrb	r3, [r3, #4]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d128      	bne.n	80065da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d110      	bne.n	80065ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	e00f      	b.n	80065da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	e133      	b.n	8006864 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800661a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	791b      	ldrb	r3, [r3, #4]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d015      	beq.n	8006650 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 811b 	beq.w	8006864 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	2101      	movs	r1, #1
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	69f9      	ldr	r1, [r7, #28]
 8006646:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800664a:	4313      	orrs	r3, r2
 800664c:	634b      	str	r3, [r1, #52]	; 0x34
 800664e:	e109      	b.n	8006864 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d110      	bne.n	8006682 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	e00f      	b.n	80066a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6919      	ldr	r1, [r3, #16]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	b298      	uxth	r0, r3
 80066b0:	79fb      	ldrb	r3, [r7, #7]
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	4603      	mov	r3, r0
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fade 	bl	8006c78 <USB_WritePacket>
 80066bc:	e0d2      	b.n	8006864 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d8:	0cdb      	lsrs	r3, r3, #19
 80066da:	04db      	lsls	r3, r3, #19
 80066dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006700:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d126      	bne.n	8006758 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	691a      	ldr	r2, [r3, #16]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006720:	69b9      	ldr	r1, [r7, #24]
 8006722:	0148      	lsls	r0, r1, #5
 8006724:	69f9      	ldr	r1, [r7, #28]
 8006726:	4401      	add	r1, r0
 8006728:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800672c:	4313      	orrs	r3, r2
 800672e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	015a      	lsls	r2, r3, #5
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	0151      	lsls	r1, r2, #5
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	440a      	add	r2, r1
 8006746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800674e:	6113      	str	r3, [r2, #16]
 8006750:	e03a      	b.n	80067c8 <USB_EPStartXfer+0x3e4>
 8006752:	bf00      	nop
 8006754:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	699a      	ldr	r2, [r3, #24]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4413      	add	r3, r2
 8006762:	1e5a      	subs	r2, r3, #1
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	fbb2 f3f3 	udiv	r3, r2, r3
 800676c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	8afa      	ldrh	r2, [r7, #22]
 8006774:	fb03 f202 	mul.w	r2, r3, r2
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	8afb      	ldrh	r3, [r7, #22]
 800678c:	04d9      	lsls	r1, r3, #19
 800678e:	4b38      	ldr	r3, [pc, #224]	; (8006870 <USB_EPStartXfer+0x48c>)
 8006790:	400b      	ands	r3, r1
 8006792:	69b9      	ldr	r1, [r7, #24]
 8006794:	0148      	lsls	r0, r1, #5
 8006796:	69f9      	ldr	r1, [r7, #28]
 8006798:	4401      	add	r1, r0
 800679a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800679e:	4313      	orrs	r3, r2
 80067a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	0148      	lsls	r0, r1, #5
 80067bc:	69f9      	ldr	r1, [r7, #28]
 80067be:	4401      	add	r1, r0
 80067c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80067c4:	4313      	orrs	r3, r2
 80067c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10d      	bne.n	80067ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d009      	beq.n	80067ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6919      	ldr	r1, [r3, #16]
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	460a      	mov	r2, r1
 80067e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	791b      	ldrb	r3, [r3, #4]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d128      	bne.n	8006844 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d110      	bne.n	8006824 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	0151      	lsls	r1, r2, #5
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	440a      	add	r2, r1
 8006818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800681c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	e00f      	b.n	8006844 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	69fa      	ldr	r2, [r7, #28]
 8006838:	440a      	add	r2, r1
 800683a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800683e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006842:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006862:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	1ff80000 	.word	0x1ff80000

08006874 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b01      	cmp	r3, #1
 8006892:	f040 80ce 	bne.w	8006a32 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d132      	bne.n	8006904 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	0151      	lsls	r1, r2, #5
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	440a      	add	r2, r1
 80068f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068fc:	0cdb      	lsrs	r3, r3, #19
 80068fe:	04db      	lsls	r3, r3, #19
 8006900:	6113      	str	r3, [r2, #16]
 8006902:	e04e      	b.n	80069a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691e:	0cdb      	lsrs	r3, r3, #19
 8006920:	04db      	lsls	r3, r3, #19
 8006922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006942:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006946:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	429a      	cmp	r2, r3
 8006952:	d903      	bls.n	800695c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006976:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800697a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006992:	6939      	ldr	r1, [r7, #16]
 8006994:	0148      	lsls	r0, r1, #5
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	4401      	add	r1, r0
 800699a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800699e:	4313      	orrs	r3, r2
 80069a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d11e      	bne.n	80069e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d009      	beq.n	80069c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069bc:	461a      	mov	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069e2:	6013      	str	r3, [r2, #0]
 80069e4:	e097      	b.n	8006b16 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8083 	beq.w	8006b16 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	2101      	movs	r1, #1
 8006a22:	fa01 f303 	lsl.w	r3, r1, r3
 8006a26:	6979      	ldr	r1, [r7, #20]
 8006a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	634b      	str	r3, [r1, #52]	; 0x34
 8006a30:	e071      	b.n	8006b16 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	0151      	lsls	r1, r2, #5
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	440a      	add	r2, r1
 8006a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4c:	0cdb      	lsrs	r3, r3, #19
 8006a4e:	04db      	lsls	r3, r3, #19
 8006a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ac4:	6939      	ldr	r1, [r7, #16]
 8006ac6:	0148      	lsls	r0, r1, #5
 8006ac8:	6979      	ldr	r1, [r7, #20]
 8006aca:	4401      	add	r1, r0
 8006acc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d10d      	bne.n	8006af6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d009      	beq.n	8006af6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	6919      	ldr	r1, [r3, #16]
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	460a      	mov	r2, r1
 8006af4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d14a      	bne.n	8006bd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5a:	f040 8086 	bne.w	8006c6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	7812      	ldrb	r2, [r2, #0]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	7812      	ldrb	r2, [r2, #0]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d902      	bls.n	8006bbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bba:	e056      	b.n	8006c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bd4:	d0e7      	beq.n	8006ba6 <USB_EPStopXfer+0x82>
 8006bd6:	e048      	b.n	8006c6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf0:	d13b      	bne.n	8006c6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	0151      	lsls	r1, r2, #5
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	440a      	add	r2, r1
 8006c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	7812      	ldrb	r2, [r2, #0]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d902      	bls.n	8006c50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c4e:	e00c      	b.n	8006c6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c68:	d0e7      	beq.n	8006c3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b089      	sub	sp, #36	; 0x24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4611      	mov	r1, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	460b      	mov	r3, r1
 8006c88:	71fb      	strb	r3, [r7, #7]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d123      	bne.n	8006ce6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c9e:	88bb      	ldrh	r3, [r7, #4]
 8006ca0:	3303      	adds	r3, #3
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	e018      	b.n	8006cde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	031a      	lsls	r2, r3, #12
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cb8:	461a      	mov	r2, r3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d3e2      	bcc.n	8006cac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3724      	adds	r7, #36	; 0x24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b08b      	sub	sp, #44	; 0x2c
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	089b      	lsrs	r3, r3, #2
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	623b      	str	r3, [r7, #32]
 8006d1e:	e014      	b.n	8006d4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	3301      	adds	r3, #1
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	3301      	adds	r3, #1
 8006d36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	3301      	adds	r3, #1
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	3301      	adds	r3, #1
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	6a3a      	ldr	r2, [r7, #32]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d3e6      	bcc.n	8006d20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d52:	8bfb      	ldrh	r3, [r7, #30]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01e      	beq.n	8006d96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d62:	461a      	mov	r2, r3
 8006d64:	f107 0310 	add.w	r3, r7, #16
 8006d68:	6812      	ldr	r2, [r2, #0]
 8006d6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	701a      	strb	r2, [r3, #0]
      i++;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	3301      	adds	r3, #1
 8006d82:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d86:	3301      	adds	r3, #1
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d8a:	8bfb      	ldrh	r3, [r7, #30]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d90:	8bfb      	ldrh	r3, [r7, #30]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1ea      	bne.n	8006d6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	372c      	adds	r7, #44	; 0x2c
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d12c      	bne.n	8006e1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	db12      	blt.n	8006df8 <USB_EPSetStall+0x54>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006df6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	e02b      	b.n	8006e72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db12      	blt.n	8006e52 <USB_EPSetStall+0xae>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	785b      	ldrb	r3, [r3, #1]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d128      	bne.n	8006eee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006eba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	791b      	ldrb	r3, [r3, #4]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d003      	beq.n	8006ecc <USB_EPClearStall+0x4c>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	791b      	ldrb	r3, [r3, #4]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d138      	bne.n	8006f3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e027      	b.n	8006f3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d003      	beq.n	8006f1e <USB_EPClearStall+0x9e>
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	791b      	ldrb	r3, [r3, #4]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d10f      	bne.n	8006f3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f80:	68f9      	ldr	r1, [r7, #12]
 8006f82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f86:	4313      	orrs	r3, r2
 8006f88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc6:	f023 0302 	bic.w	r3, r3, #2
 8006fca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3714      	adds	r7, #20
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ff4:	f023 0303 	bic.w	r3, r3, #3
 8006ff8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007008:	f043 0302 	orr.w	r3, r3, #2
 800700c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4013      	ands	r3, r2
 8007032:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	4013      	ands	r3, r2
 8007064:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	0c1b      	lsrs	r3, r3, #16
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	4013      	ands	r3, r2
 8007098:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	b29b      	uxth	r3, r3
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070ba:	78fb      	ldrb	r3, [r7, #3]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	4013      	ands	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070d8:	68bb      	ldr	r3, [r7, #8]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b087      	sub	sp, #28
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007108:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	01db      	lsls	r3, r3, #7
 8007118:	b2db      	uxtb	r3, r3
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4013      	ands	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007134:	68bb      	ldr	r3, [r7, #8]
}
 8007136:	4618      	mov	r0, r3
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f003 0301 	and.w	r3, r3, #1
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007178:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800717c:	f023 0307 	bic.w	r3, r3, #7
 8007180:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007194:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	460b      	mov	r3, r1
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	333c      	adds	r3, #60	; 0x3c
 80071ba:	3304      	adds	r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4a26      	ldr	r2, [pc, #152]	; (800725c <USB_EP0_OutStart+0xb8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d90a      	bls.n	80071de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071d8:	d101      	bne.n	80071de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	e037      	b.n	800724e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e4:	461a      	mov	r2, r3
 80071e6:	2300      	movs	r3, #0
 80071e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720c:	f043 0318 	orr.w	r3, r3, #24
 8007210:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007220:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007224:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10f      	bne.n	800724c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007232:	461a      	mov	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007246:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800724a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	4f54300a 	.word	0x4f54300a

08007260 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <USB_CoreReset+0x64>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e01b      	b.n	80072b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	daf2      	bge.n	800726c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f043 0201 	orr.w	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <USB_CoreReset+0x64>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d901      	bls.n	80072a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e006      	b.n	80072b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d0f0      	beq.n	8007296 <USB_CoreReset+0x36>

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	00030d40 	.word	0x00030d40

080072c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80072d8:	f002 fca6 	bl	8009c28 <USBD_static_malloc>
 80072dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d109      	bne.n	80072f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32b0      	adds	r2, #176	; 0xb0
 80072ee:	2100      	movs	r1, #0
 80072f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80072f4:	2302      	movs	r3, #2
 80072f6:	e0d4      	b.n	80074a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80072f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80072fc:	2100      	movs	r1, #0
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f002 fd00 	bl	8009d04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32b0      	adds	r2, #176	; 0xb0
 800730e:	68f9      	ldr	r1, [r7, #12]
 8007310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32b0      	adds	r2, #176	; 0xb0
 800731e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7c1b      	ldrb	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d138      	bne.n	80073a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007330:	4b5e      	ldr	r3, [pc, #376]	; (80074ac <USBD_CDC_Init+0x1e4>)
 8007332:	7819      	ldrb	r1, [r3, #0]
 8007334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007338:	2202      	movs	r2, #2
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f002 fb51 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007340:	4b5a      	ldr	r3, [pc, #360]	; (80074ac <USBD_CDC_Init+0x1e4>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	3324      	adds	r3, #36	; 0x24
 8007356:	2201      	movs	r2, #1
 8007358:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800735a:	4b55      	ldr	r3, [pc, #340]	; (80074b0 <USBD_CDC_Init+0x1e8>)
 800735c:	7819      	ldrb	r1, [r3, #0]
 800735e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007362:	2202      	movs	r2, #2
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f002 fb3c 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800736a:	4b51      	ldr	r3, [pc, #324]	; (80074b0 <USBD_CDC_Init+0x1e8>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 020f 	and.w	r2, r3, #15
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	440b      	add	r3, r1
 800737e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007382:	2201      	movs	r2, #1
 8007384:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007386:	4b4b      	ldr	r3, [pc, #300]	; (80074b4 <USBD_CDC_Init+0x1ec>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	f003 020f 	and.w	r2, r3, #15
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	3326      	adds	r3, #38	; 0x26
 800739c:	2210      	movs	r2, #16
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	e035      	b.n	800740e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80073a2:	4b42      	ldr	r3, [pc, #264]	; (80074ac <USBD_CDC_Init+0x1e4>)
 80073a4:	7819      	ldrb	r1, [r3, #0]
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	2202      	movs	r2, #2
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f002 fb19 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073b0:	4b3e      	ldr	r3, [pc, #248]	; (80074ac <USBD_CDC_Init+0x1e4>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 020f 	and.w	r2, r3, #15
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	3324      	adds	r3, #36	; 0x24
 80073c6:	2201      	movs	r2, #1
 80073c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073ca:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <USBD_CDC_Init+0x1e8>)
 80073cc:	7819      	ldrb	r1, [r3, #0]
 80073ce:	2340      	movs	r3, #64	; 0x40
 80073d0:	2202      	movs	r2, #2
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f002 fb05 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073d8:	4b35      	ldr	r3, [pc, #212]	; (80074b0 <USBD_CDC_Init+0x1e8>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f003 020f 	and.w	r2, r3, #15
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073f0:	2201      	movs	r2, #1
 80073f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80073f4:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <USBD_CDC_Init+0x1ec>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	3326      	adds	r3, #38	; 0x26
 800740a:	2210      	movs	r2, #16
 800740c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800740e:	4b29      	ldr	r3, [pc, #164]	; (80074b4 <USBD_CDC_Init+0x1ec>)
 8007410:	7819      	ldrb	r1, [r3, #0]
 8007412:	2308      	movs	r3, #8
 8007414:	2203      	movs	r2, #3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f002 fae3 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <USBD_CDC_Init+0x1ec>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 020f 	and.w	r2, r3, #15
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	440b      	add	r3, r1
 8007430:	3324      	adds	r3, #36	; 0x24
 8007432:	2201      	movs	r2, #1
 8007434:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	33b0      	adds	r3, #176	; 0xb0
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800746c:	2302      	movs	r3, #2
 800746e:	e018      	b.n	80074a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	7c1b      	ldrb	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10a      	bne.n	800748e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007478:	4b0d      	ldr	r3, [pc, #52]	; (80074b0 <USBD_CDC_Init+0x1e8>)
 800747a:	7819      	ldrb	r1, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f002 fb9a 	bl	8009bc0 <USBD_LL_PrepareReceive>
 800748c:	e008      	b.n	80074a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800748e:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <USBD_CDC_Init+0x1e8>)
 8007490:	7819      	ldrb	r1, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f002 fb90 	bl	8009bc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000097 	.word	0x20000097
 80074b0:	20000098 	.word	0x20000098
 80074b4:	20000099 	.word	0x20000099

080074b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80074c4:	4b3a      	ldr	r3, [pc, #232]	; (80075b0 <USBD_CDC_DeInit+0xf8>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f002 faaf 	bl	8009a2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80074d0:	4b37      	ldr	r3, [pc, #220]	; (80075b0 <USBD_CDC_DeInit+0xf8>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f003 020f 	and.w	r2, r3, #15
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	3324      	adds	r3, #36	; 0x24
 80074e6:	2200      	movs	r2, #0
 80074e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80074ea:	4b32      	ldr	r3, [pc, #200]	; (80075b4 <USBD_CDC_DeInit+0xfc>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f002 fa9c 	bl	8009a2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <USBD_CDC_DeInit+0xfc>)
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	f003 020f 	and.w	r2, r3, #15
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800750e:	2200      	movs	r2, #0
 8007510:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007512:	4b29      	ldr	r3, [pc, #164]	; (80075b8 <USBD_CDC_DeInit+0x100>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f002 fa88 	bl	8009a2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800751e:	4b26      	ldr	r3, [pc, #152]	; (80075b8 <USBD_CDC_DeInit+0x100>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 020f 	and.w	r2, r3, #15
 8007526:	6879      	ldr	r1, [r7, #4]
 8007528:	4613      	mov	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	3324      	adds	r3, #36	; 0x24
 8007534:	2200      	movs	r2, #0
 8007536:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007538:	4b1f      	ldr	r3, [pc, #124]	; (80075b8 <USBD_CDC_DeInit+0x100>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	f003 020f 	and.w	r2, r3, #15
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	3326      	adds	r3, #38	; 0x26
 800754e:	2200      	movs	r2, #0
 8007550:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	32b0      	adds	r2, #176	; 0xb0
 800755c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d01f      	beq.n	80075a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	33b0      	adds	r3, #176	; 0xb0
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	32b0      	adds	r2, #176	; 0xb0
 8007582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007586:	4618      	mov	r0, r3
 8007588:	f002 fb5c 	bl	8009c44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	32b0      	adds	r2, #176	; 0xb0
 8007596:	2100      	movs	r1, #0
 8007598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20000097 	.word	0x20000097
 80075b4:	20000098 	.word	0x20000098
 80075b8:	20000099 	.word	0x20000099

080075bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	32b0      	adds	r2, #176	; 0xb0
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e0bf      	b.n	800776c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d050      	beq.n	800769a <USBD_CDC_Setup+0xde>
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	f040 80af 	bne.w	800775c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	88db      	ldrh	r3, [r3, #6]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d03a      	beq.n	800767c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	b25b      	sxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	da1b      	bge.n	8007648 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	33b0      	adds	r3, #176	; 0xb0
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007626:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	88d2      	ldrh	r2, [r2, #6]
 800762c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	88db      	ldrh	r3, [r3, #6]
 8007632:	2b07      	cmp	r3, #7
 8007634:	bf28      	it	cs
 8007636:	2307      	movcs	r3, #7
 8007638:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	89fa      	ldrh	r2, [r7, #14]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 fda5 	bl	8009190 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007646:	e090      	b.n	800776a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	785a      	ldrb	r2, [r3, #1]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	88db      	ldrh	r3, [r3, #6]
 8007656:	2b3f      	cmp	r3, #63	; 0x3f
 8007658:	d803      	bhi.n	8007662 <USBD_CDC_Setup+0xa6>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	88db      	ldrh	r3, [r3, #6]
 800765e:	b2da      	uxtb	r2, r3
 8007660:	e000      	b.n	8007664 <USBD_CDC_Setup+0xa8>
 8007662:	2240      	movs	r2, #64	; 0x40
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800766a:	6939      	ldr	r1, [r7, #16]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007672:	461a      	mov	r2, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 fdb7 	bl	80091e8 <USBD_CtlPrepareRx>
      break;
 800767a:	e076      	b.n	800776a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	33b0      	adds	r3, #176	; 0xb0
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	7850      	ldrb	r0, [r2, #1]
 8007692:	2200      	movs	r2, #0
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	4798      	blx	r3
      break;
 8007698:	e067      	b.n	800776a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	2b0b      	cmp	r3, #11
 80076a0:	d851      	bhi.n	8007746 <USBD_CDC_Setup+0x18a>
 80076a2:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBD_CDC_Setup+0xec>)
 80076a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a8:	080076d9 	.word	0x080076d9
 80076ac:	08007755 	.word	0x08007755
 80076b0:	08007747 	.word	0x08007747
 80076b4:	08007747 	.word	0x08007747
 80076b8:	08007747 	.word	0x08007747
 80076bc:	08007747 	.word	0x08007747
 80076c0:	08007747 	.word	0x08007747
 80076c4:	08007747 	.word	0x08007747
 80076c8:	08007747 	.word	0x08007747
 80076cc:	08007747 	.word	0x08007747
 80076d0:	08007703 	.word	0x08007703
 80076d4:	0800772d 	.word	0x0800772d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d107      	bne.n	80076f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076e4:	f107 030a 	add.w	r3, r7, #10
 80076e8:	2202      	movs	r2, #2
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f001 fd4f 	bl	8009190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076f2:	e032      	b.n	800775a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f001 fcd9 	bl	80090ae <USBD_CtlError>
            ret = USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007700:	e02b      	b.n	800775a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b03      	cmp	r3, #3
 800770c:	d107      	bne.n	800771e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800770e:	f107 030d 	add.w	r3, r7, #13
 8007712:	2201      	movs	r2, #1
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f001 fd3a 	bl	8009190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800771c:	e01d      	b.n	800775a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fcc4 	bl	80090ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007726:	2303      	movs	r3, #3
 8007728:	75fb      	strb	r3, [r7, #23]
          break;
 800772a:	e016      	b.n	800775a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b03      	cmp	r3, #3
 8007736:	d00f      	beq.n	8007758 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fcb7 	bl	80090ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007744:	e008      	b.n	8007758 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 fcb0 	bl	80090ae <USBD_CtlError>
          ret = USBD_FAIL;
 800774e:	2303      	movs	r3, #3
 8007750:	75fb      	strb	r3, [r7, #23]
          break;
 8007752:	e002      	b.n	800775a <USBD_CDC_Setup+0x19e>
          break;
 8007754:	bf00      	nop
 8007756:	e008      	b.n	800776a <USBD_CDC_Setup+0x1ae>
          break;
 8007758:	bf00      	nop
      }
      break;
 800775a:	e006      	b.n	800776a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fca5 	bl	80090ae <USBD_CtlError>
      ret = USBD_FAIL;
 8007764:	2303      	movs	r3, #3
 8007766:	75fb      	strb	r3, [r7, #23]
      break;
 8007768:	bf00      	nop
  }

  return (uint8_t)ret;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007786:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32b0      	adds	r2, #176	; 0xb0
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800779a:	2303      	movs	r3, #3
 800779c:	e065      	b.n	800786a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	32b0      	adds	r2, #176	; 0xb0
 80077a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	f003 020f 	and.w	r2, r3, #15
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	440b      	add	r3, r1
 80077c0:	3318      	adds	r3, #24
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02f      	beq.n	8007828 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	f003 020f 	and.w	r2, r3, #15
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	440b      	add	r3, r1
 80077da:	3318      	adds	r3, #24
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	78fb      	ldrb	r3, [r7, #3]
 80077e0:	f003 010f 	and.w	r1, r3, #15
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	460b      	mov	r3, r1
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	440b      	add	r3, r1
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4403      	add	r3, r0
 80077f0:	3348      	adds	r3, #72	; 0x48
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80077f8:	fb01 f303 	mul.w	r3, r1, r3
 80077fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d112      	bne.n	8007828 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	f003 020f 	and.w	r2, r3, #15
 8007808:	6879      	ldr	r1, [r7, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	3318      	adds	r3, #24
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800781a:	78f9      	ldrb	r1, [r7, #3]
 800781c:	2300      	movs	r3, #0
 800781e:	2200      	movs	r2, #0
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f002 f9ac 	bl	8009b7e <USBD_LL_Transmit>
 8007826:	e01f      	b.n	8007868 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	33b0      	adds	r3, #176	; 0xb0
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4413      	add	r3, r2
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d010      	beq.n	8007868 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	33b0      	adds	r3, #176	; 0xb0
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007864:	78fa      	ldrb	r2, [r7, #3]
 8007866:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	460b      	mov	r3, r1
 800787c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	32b0      	adds	r2, #176	; 0xb0
 8007888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	32b0      	adds	r2, #176	; 0xb0
 8007898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e01a      	b.n	80078da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f002 f9aa 	bl	8009c02 <USBD_LL_GetRxDataSize>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	33b0      	adds	r3, #176	; 0xb0
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80078d4:	4611      	mov	r1, r2
 80078d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b084      	sub	sp, #16
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	32b0      	adds	r2, #176	; 0xb0
 80078f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007900:	2303      	movs	r3, #3
 8007902:	e025      	b.n	8007950 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	33b0      	adds	r3, #176	; 0xb0
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4413      	add	r3, r2
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01a      	beq.n	800794e <USBD_CDC_EP0_RxReady+0x6c>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800791e:	2bff      	cmp	r3, #255	; 0xff
 8007920:	d015      	beq.n	800794e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	33b0      	adds	r3, #176	; 0xb0
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800793a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007942:	b292      	uxth	r2, r2
 8007944:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	22ff      	movs	r2, #255	; 0xff
 800794a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007960:	2182      	movs	r1, #130	; 0x82
 8007962:	4818      	ldr	r0, [pc, #96]	; (80079c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007964:	f000 fd6b 	bl	800843e <USBD_GetEpDesc>
 8007968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800796a:	2101      	movs	r1, #1
 800796c:	4815      	ldr	r0, [pc, #84]	; (80079c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800796e:	f000 fd66 	bl	800843e <USBD_GetEpDesc>
 8007972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007974:	2181      	movs	r1, #129	; 0x81
 8007976:	4813      	ldr	r0, [pc, #76]	; (80079c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007978:	f000 fd61 	bl	800843e <USBD_GetEpDesc>
 800797c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2210      	movs	r2, #16
 8007988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d006      	beq.n	800799e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	2200      	movs	r2, #0
 8007994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007998:	711a      	strb	r2, [r3, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d006      	beq.n	80079b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ac:	711a      	strb	r2, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2243      	movs	r2, #67	; 0x43
 80079b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079b8:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000054 	.word	0x20000054

080079c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80079d0:	2182      	movs	r1, #130	; 0x82
 80079d2:	4818      	ldr	r0, [pc, #96]	; (8007a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079d4:	f000 fd33 	bl	800843e <USBD_GetEpDesc>
 80079d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80079da:	2101      	movs	r1, #1
 80079dc:	4815      	ldr	r0, [pc, #84]	; (8007a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079de:	f000 fd2e 	bl	800843e <USBD_GetEpDesc>
 80079e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079e4:	2181      	movs	r1, #129	; 0x81
 80079e6:	4813      	ldr	r0, [pc, #76]	; (8007a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079e8:	f000 fd29 	bl	800843e <USBD_GetEpDesc>
 80079ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2210      	movs	r2, #16
 80079f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2200      	movs	r2, #0
 8007a04:	711a      	strb	r2, [r3, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f042 0202 	orr.w	r2, r2, #2
 8007a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d006      	beq.n	8007a22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	711a      	strb	r2, [r3, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f042 0202 	orr.w	r2, r2, #2
 8007a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2243      	movs	r2, #67	; 0x43
 8007a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20000054 	.word	0x20000054

08007a38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a40:	2182      	movs	r1, #130	; 0x82
 8007a42:	4818      	ldr	r0, [pc, #96]	; (8007aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a44:	f000 fcfb 	bl	800843e <USBD_GetEpDesc>
 8007a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4815      	ldr	r0, [pc, #84]	; (8007aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a4e:	f000 fcf6 	bl	800843e <USBD_GetEpDesc>
 8007a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a54:	2181      	movs	r1, #129	; 0x81
 8007a56:	4813      	ldr	r0, [pc, #76]	; (8007aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a58:	f000 fcf1 	bl	800843e <USBD_GetEpDesc>
 8007a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2210      	movs	r2, #16
 8007a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d006      	beq.n	8007a7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a78:	711a      	strb	r2, [r3, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a8c:	711a      	strb	r2, [r3, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2243      	movs	r2, #67	; 0x43
 8007a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a98:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000054 	.word	0x20000054

08007aa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	220a      	movs	r2, #10
 8007ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ab6:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	20000010 	.word	0x20000010

08007ac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e009      	b.n	8007af0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	33b0      	adds	r3, #176	; 0xb0
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	32b0      	adds	r2, #176	; 0xb0
 8007b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b16:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e008      	b.n	8007b34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	32b0      	adds	r2, #176	; 0xb0
 8007b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e004      	b.n	8007b6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32b0      	adds	r2, #176	; 0xb0
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007b94:	2301      	movs	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	32b0      	adds	r2, #176	; 0xb0
 8007ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e025      	b.n	8007bfa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d11f      	bne.n	8007bf8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007bc0:	4b10      	ldr	r3, [pc, #64]	; (8007c04 <USBD_CDC_TransmitPacket+0x88>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	f003 020f 	and.w	r2, r3, #15
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4403      	add	r3, r0
 8007bda:	3318      	adds	r3, #24
 8007bdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <USBD_CDC_TransmitPacket+0x88>)
 8007be0:	7819      	ldrb	r1, [r3, #0]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f001 ffc5 	bl	8009b7e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	20000097 	.word	0x20000097

08007c08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	32b0      	adds	r2, #176	; 0xb0
 8007c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	32b0      	adds	r2, #176	; 0xb0
 8007c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e018      	b.n	8007c68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	7c1b      	ldrb	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10a      	bne.n	8007c54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <USBD_CDC_ReceivePacket+0x68>)
 8007c40:	7819      	ldrb	r1, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f001 ffb7 	bl	8009bc0 <USBD_LL_PrepareReceive>
 8007c52:	e008      	b.n	8007c66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <USBD_CDC_ReceivePacket+0x68>)
 8007c56:	7819      	ldrb	r1, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c5e:	2340      	movs	r3, #64	; 0x40
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 ffad 	bl	8009bc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000098 	.word	0x20000098

08007c74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007c88:	4817      	ldr	r0, [pc, #92]	; (8007ce8 <USBD_Init+0x74>)
 8007c8a:	f002 fcad 	bl	800a5e8 <iprintf>
 8007c8e:	4817      	ldr	r0, [pc, #92]	; (8007cec <USBD_Init+0x78>)
 8007c90:	f002 fcaa 	bl	800a5e8 <iprintf>
 8007c94:	200a      	movs	r0, #10
 8007c96:	f002 fcbf 	bl	800a618 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e01f      	b.n	8007cde <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	79fa      	ldrb	r2, [r7, #7]
 8007cd0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f001 fe1e 	bl	8009914 <USBD_LL_Init>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	0800c868 	.word	0x0800c868
 8007cec:	0800c870 	.word	0x0800c870

08007cf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007d04:	481a      	ldr	r0, [pc, #104]	; (8007d70 <USBD_RegisterClass+0x80>)
 8007d06:	f002 fc6f 	bl	800a5e8 <iprintf>
 8007d0a:	481a      	ldr	r0, [pc, #104]	; (8007d74 <USBD_RegisterClass+0x84>)
 8007d0c:	f002 fc6c 	bl	800a5e8 <iprintf>
 8007d10:	200a      	movs	r0, #10
 8007d12:	f002 fc81 	bl	800a618 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e025      	b.n	8007d66 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	32ae      	adds	r2, #174	; 0xae
 8007d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00f      	beq.n	8007d56 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	32ae      	adds	r2, #174	; 0xae
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	f107 020e 	add.w	r2, r7, #14
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	4602      	mov	r2, r0
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	0800c868 	.word	0x0800c868
 8007d74:	0800c888 	.word	0x0800c888

08007d78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fe13 	bl	80099ac <USBD_LL_Start>
 8007d86:	4603      	mov	r3, r0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d009      	beq.n	8007dd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b084      	sub	sp, #16
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	4798      	blx	r3
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f001 f908 	bl	800903a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007e38:	461a      	mov	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e46:	f003 031f 	and.w	r3, r3, #31
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d01a      	beq.n	8007e84 <USBD_LL_SetupStage+0x72>
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d822      	bhi.n	8007e98 <USBD_LL_SetupStage+0x86>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <USBD_LL_SetupStage+0x4a>
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d00a      	beq.n	8007e70 <USBD_LL_SetupStage+0x5e>
 8007e5a:	e01d      	b.n	8007e98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fb5f 	bl	8008528 <USBD_StdDevReq>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e6e:	e020      	b.n	8007eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fbc7 	bl	800860c <USBD_StdItfReq>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
      break;
 8007e82:	e016      	b.n	8007eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc29 	bl	80086e4 <USBD_StdEPReq>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73fb      	strb	r3, [r7, #15]
      break;
 8007e96:	e00c      	b.n	8007eb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007e9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fde0 	bl	8009a6c <USBD_LL_StallEP>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb0:	bf00      	nop
  }

  return ret;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007ece:	7afb      	ldrb	r3, [r7, #11]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d16e      	bne.n	8007fb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007eda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	f040 8098 	bne.w	8008018 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d913      	bls.n	8007f1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	1ad2      	subs	r2, r2, r3
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	bf28      	it	cs
 8007f0e:	4613      	movcs	r3, r2
 8007f10:	461a      	mov	r2, r3
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f001 f984 	bl	8009222 <USBD_CtlContinueRx>
 8007f1a:	e07d      	b.n	8008018 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d014      	beq.n	8007f54 <USBD_LL_DataOutStage+0x98>
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d81d      	bhi.n	8007f6a <USBD_LL_DataOutStage+0xae>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <USBD_LL_DataOutStage+0x7c>
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d003      	beq.n	8007f3e <USBD_LL_DataOutStage+0x82>
 8007f36:	e018      	b.n	8007f6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	75bb      	strb	r3, [r7, #22]
            break;
 8007f3c:	e018      	b.n	8007f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 fa5e 	bl	800840a <USBD_CoreFindIF>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75bb      	strb	r3, [r7, #22]
            break;
 8007f52:	e00d      	b.n	8007f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f000 fa60 	bl	8008424 <USBD_CoreFindEP>
 8007f64:	4603      	mov	r3, r0
 8007f66:	75bb      	strb	r3, [r7, #22]
            break;
 8007f68:	e002      	b.n	8007f70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75bb      	strb	r3, [r7, #22]
            break;
 8007f6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007f70:	7dbb      	ldrb	r3, [r7, #22]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d119      	bne.n	8007faa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d113      	bne.n	8007faa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007f82:	7dba      	ldrb	r2, [r7, #22]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	32ae      	adds	r2, #174	; 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007f92:	7dba      	ldrb	r2, [r7, #22]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007f9a:	7dba      	ldrb	r2, [r7, #22]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	32ae      	adds	r2, #174	; 0xae
 8007fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f001 f94a 	bl	8009244 <USBD_CtlSendStatus>
 8007fb0:	e032      	b.n	8008018 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007fb2:	7afb      	ldrb	r3, [r7, #11]
 8007fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fa31 	bl	8008424 <USBD_CoreFindEP>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fc6:	7dbb      	ldrb	r3, [r7, #22]
 8007fc8:	2bff      	cmp	r3, #255	; 0xff
 8007fca:	d025      	beq.n	8008018 <USBD_LL_DataOutStage+0x15c>
 8007fcc:	7dbb      	ldrb	r3, [r7, #22]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d122      	bne.n	8008018 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d117      	bne.n	800800e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007fde:	7dba      	ldrb	r2, [r7, #22]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	32ae      	adds	r2, #174	; 0xae
 8007fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00f      	beq.n	800800e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007fee:	7dba      	ldrb	r2, [r7, #22]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ff6:	7dba      	ldrb	r2, [r7, #22]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	32ae      	adds	r2, #174	; 0xae
 8007ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	7afa      	ldrb	r2, [r7, #11]
 8008004:	4611      	mov	r1, r2
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	e000      	b.n	800801a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	460b      	mov	r3, r1
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008030:	7afb      	ldrb	r3, [r7, #11]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d16f      	bne.n	8008116 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3314      	adds	r3, #20
 800803a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008042:	2b02      	cmp	r3, #2
 8008044:	d15a      	bne.n	80080fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	429a      	cmp	r2, r3
 8008050:	d914      	bls.n	800807c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	461a      	mov	r2, r3
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f001 f8ac 	bl	80091c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800806e:	2300      	movs	r3, #0
 8008070:	2200      	movs	r2, #0
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f001 fda3 	bl	8009bc0 <USBD_LL_PrepareReceive>
 800807a:	e03f      	b.n	80080fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	429a      	cmp	r2, r3
 8008086:	d11c      	bne.n	80080c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008090:	429a      	cmp	r2, r3
 8008092:	d316      	bcc.n	80080c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800809e:	429a      	cmp	r2, r3
 80080a0:	d20f      	bcs.n	80080c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f001 f88d 	bl	80091c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080b4:	2300      	movs	r3, #0
 80080b6:	2200      	movs	r2, #0
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f001 fd80 	bl	8009bc0 <USBD_LL_PrepareReceive>
 80080c0:	e01c      	b.n	80080fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d10f      	bne.n	80080ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080ee:	2180      	movs	r1, #128	; 0x80
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f001 fcbb 	bl	8009a6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f001 f8b7 	bl	800926a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d03a      	beq.n	800817c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fe42 	bl	8007d90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008114:	e032      	b.n	800817c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800811c:	b2db      	uxtb	r3, r3
 800811e:	4619      	mov	r1, r3
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f97f 	bl	8008424 <USBD_CoreFindEP>
 8008126:	4603      	mov	r3, r0
 8008128:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800812a:	7dfb      	ldrb	r3, [r7, #23]
 800812c:	2bff      	cmp	r3, #255	; 0xff
 800812e:	d025      	beq.n	800817c <USBD_LL_DataInStage+0x15a>
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d122      	bne.n	800817c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b03      	cmp	r3, #3
 8008140:	d11c      	bne.n	800817c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008142:	7dfa      	ldrb	r2, [r7, #23]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	32ae      	adds	r2, #174	; 0xae
 8008148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d014      	beq.n	800817c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008152:	7dfa      	ldrb	r2, [r7, #23]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800815a:	7dfa      	ldrb	r2, [r7, #23]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	32ae      	adds	r2, #174	; 0xae
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	7afa      	ldrb	r2, [r7, #11]
 8008168:	4611      	mov	r1, r2
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	4798      	blx	r3
 800816e:	4603      	mov	r3, r0
 8008170:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008172:	7dbb      	ldrb	r3, [r7, #22]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008178:	7dbb      	ldrb	r3, [r7, #22]
 800817a:	e000      	b.n	800817e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b084      	sub	sp, #16
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d014      	beq.n	80081ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00e      	beq.n	80081ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6852      	ldr	r2, [r2, #4]
 80081da:	b2d2      	uxtb	r2, r2
 80081dc:	4611      	mov	r1, r2
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	4798      	blx	r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081ec:	2340      	movs	r3, #64	; 0x40
 80081ee:	2200      	movs	r2, #0
 80081f0:	2100      	movs	r1, #0
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 fbf5 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2240      	movs	r2, #64	; 0x40
 8008204:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008208:	2340      	movs	r3, #64	; 0x40
 800820a:	2200      	movs	r2, #0
 800820c:	2180      	movs	r1, #128	; 0x80
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 fbe7 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2240      	movs	r2, #64	; 0x40
 800821e:	621a      	str	r2, [r3, #32]

  return ret;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	78fa      	ldrb	r2, [r7, #3]
 800823a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008258:	b2da      	uxtb	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2204      	movs	r2, #4
 8008264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b04      	cmp	r3, #4
 8008288:	d106      	bne.n	8008298 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d110      	bne.n	80082dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00b      	beq.n	80082dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	32ae      	adds	r2, #174	; 0xae
 80082fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008304:	2303      	movs	r3, #3
 8008306:	e01c      	b.n	8008342 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b03      	cmp	r3, #3
 8008312:	d115      	bne.n	8008340 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32ae      	adds	r2, #174	; 0xae
 800831e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	32ae      	adds	r2, #174	; 0xae
 8008332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	78fa      	ldrb	r2, [r7, #3]
 800833a:	4611      	mov	r1, r2
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	460b      	mov	r3, r1
 8008354:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	32ae      	adds	r2, #174	; 0xae
 8008360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	e01c      	b.n	80083a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b03      	cmp	r3, #3
 8008376:	d115      	bne.n	80083a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32ae      	adds	r2, #174	; 0xae
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00b      	beq.n	80083a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	32ae      	adds	r2, #174	; 0xae
 8008396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	4611      	mov	r1, r2
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	6852      	ldr	r2, [r2, #4]
 80083ee:	b2d2      	uxtb	r2, r2
 80083f0:	4611      	mov	r1, r2
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800840a:	b480      	push	{r7}
 800840c:	b083      	sub	sp, #12
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008416:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008418:	4618      	mov	r0, r3
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008430:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b086      	sub	sp, #24
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	885b      	ldrh	r3, [r3, #2]
 800845a:	b29a      	uxth	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	429a      	cmp	r2, r3
 8008464:	d920      	bls.n	80084a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800846e:	e013      	b.n	8008498 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008470:	f107 030a 	add.w	r3, r7, #10
 8008474:	4619      	mov	r1, r3
 8008476:	6978      	ldr	r0, [r7, #20]
 8008478:	f000 f81b 	bl	80084b2 <USBD_GetNextDesc>
 800847c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d108      	bne.n	8008498 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	789b      	ldrb	r3, [r3, #2]
 800848e:	78fa      	ldrb	r2, [r7, #3]
 8008490:	429a      	cmp	r2, r3
 8008492:	d008      	beq.n	80084a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	885b      	ldrh	r3, [r3, #2]
 800849c:	b29a      	uxth	r2, r3
 800849e:	897b      	ldrh	r3, [r7, #10]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d8e5      	bhi.n	8008470 <USBD_GetEpDesc+0x32>
 80084a4:	e000      	b.n	80084a8 <USBD_GetEpDesc+0x6a>
          break;
 80084a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80084a8:	693b      	ldr	r3, [r7, #16]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	881a      	ldrh	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	4413      	add	r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4413      	add	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	3301      	adds	r3, #1
 8008502:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800850a:	8a3b      	ldrh	r3, [r7, #16]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	b21a      	sxth	r2, r3
 8008510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008514:	4313      	orrs	r3, r2
 8008516:	b21b      	sxth	r3, r3
 8008518:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800851a:	89fb      	ldrh	r3, [r7, #14]
}
 800851c:	4618      	mov	r0, r3
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800853e:	2b40      	cmp	r3, #64	; 0x40
 8008540:	d005      	beq.n	800854e <USBD_StdDevReq+0x26>
 8008542:	2b40      	cmp	r3, #64	; 0x40
 8008544:	d857      	bhi.n	80085f6 <USBD_StdDevReq+0xce>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00f      	beq.n	800856a <USBD_StdDevReq+0x42>
 800854a:	2b20      	cmp	r3, #32
 800854c:	d153      	bne.n	80085f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	32ae      	adds	r2, #174	; 0xae
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	4798      	blx	r3
 8008564:	4603      	mov	r3, r0
 8008566:	73fb      	strb	r3, [r7, #15]
      break;
 8008568:	e04a      	b.n	8008600 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	2b09      	cmp	r3, #9
 8008570:	d83b      	bhi.n	80085ea <USBD_StdDevReq+0xc2>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <USBD_StdDevReq+0x50>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085cd 	.word	0x080085cd
 800857c:	080085e1 	.word	0x080085e1
 8008580:	080085eb 	.word	0x080085eb
 8008584:	080085d7 	.word	0x080085d7
 8008588:	080085eb 	.word	0x080085eb
 800858c:	080085ab 	.word	0x080085ab
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085eb 	.word	0x080085eb
 8008598:	080085c3 	.word	0x080085c3
 800859c:	080085b5 	.word	0x080085b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa3c 	bl	8008a20 <USBD_GetDescriptor>
          break;
 80085a8:	e024      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fba1 	bl	8008cf4 <USBD_SetAddress>
          break;
 80085b2:	e01f      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fbe0 	bl	8008d7c <USBD_SetConfig>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
          break;
 80085c0:	e018      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fc83 	bl	8008ed0 <USBD_GetConfig>
          break;
 80085ca:	e013      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fcb4 	bl	8008f3c <USBD_GetStatus>
          break;
 80085d4:	e00e      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fce3 	bl	8008fa4 <USBD_SetFeature>
          break;
 80085de:	e009      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fd07 	bl	8008ff6 <USBD_ClrFeature>
          break;
 80085e8:	e004      	b.n	80085f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fd5e 	bl	80090ae <USBD_CtlError>
          break;
 80085f2:	bf00      	nop
      }
      break;
 80085f4:	e004      	b.n	8008600 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fd58 	bl	80090ae <USBD_CtlError>
      break;
 80085fe:	bf00      	nop
  }

  return ret;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop

0800860c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d005      	beq.n	8008632 <USBD_StdItfReq+0x26>
 8008626:	2b40      	cmp	r3, #64	; 0x40
 8008628:	d852      	bhi.n	80086d0 <USBD_StdItfReq+0xc4>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <USBD_StdItfReq+0x26>
 800862e:	2b20      	cmp	r3, #32
 8008630:	d14e      	bne.n	80086d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b02      	cmp	r3, #2
 800863e:	d840      	bhi.n	80086c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	889b      	ldrh	r3, [r3, #4]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b01      	cmp	r3, #1
 8008648:	d836      	bhi.n	80086b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	889b      	ldrh	r3, [r3, #4]
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff fed9 	bl	800840a <USBD_CoreFindIF>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2bff      	cmp	r3, #255	; 0xff
 8008660:	d01d      	beq.n	800869e <USBD_StdItfReq+0x92>
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d11a      	bne.n	800869e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008668:	7bba      	ldrb	r2, [r7, #14]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	32ae      	adds	r2, #174	; 0xae
 800866e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00f      	beq.n	8008698 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008678:	7bba      	ldrb	r2, [r7, #14]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008680:	7bba      	ldrb	r2, [r7, #14]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	32ae      	adds	r2, #174	; 0xae
 8008686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	4798      	blx	r3
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008696:	e004      	b.n	80086a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800869c:	e001      	b.n	80086a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	88db      	ldrh	r3, [r3, #6]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d110      	bne.n	80086cc <USBD_StdItfReq+0xc0>
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10d      	bne.n	80086cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fdc7 	bl	8009244 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80086b6:	e009      	b.n	80086cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fcf7 	bl	80090ae <USBD_CtlError>
          break;
 80086c0:	e004      	b.n	80086cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fcf2 	bl	80090ae <USBD_CtlError>
          break;
 80086ca:	e000      	b.n	80086ce <USBD_StdItfReq+0xc2>
          break;
 80086cc:	bf00      	nop
      }
      break;
 80086ce:	e004      	b.n	80086da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fceb 	bl	80090ae <USBD_CtlError>
      break;
 80086d8:	bf00      	nop
  }

  return ret;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	889b      	ldrh	r3, [r3, #4]
 80086f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008700:	2b40      	cmp	r3, #64	; 0x40
 8008702:	d007      	beq.n	8008714 <USBD_StdEPReq+0x30>
 8008704:	2b40      	cmp	r3, #64	; 0x40
 8008706:	f200 817f 	bhi.w	8008a08 <USBD_StdEPReq+0x324>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d02a      	beq.n	8008764 <USBD_StdEPReq+0x80>
 800870e:	2b20      	cmp	r3, #32
 8008710:	f040 817a 	bne.w	8008a08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fe83 	bl	8008424 <USBD_CoreFindEP>
 800871e:	4603      	mov	r3, r0
 8008720:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008722:	7b7b      	ldrb	r3, [r7, #13]
 8008724:	2bff      	cmp	r3, #255	; 0xff
 8008726:	f000 8174 	beq.w	8008a12 <USBD_StdEPReq+0x32e>
 800872a:	7b7b      	ldrb	r3, [r7, #13]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 8170 	bne.w	8008a12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008732:	7b7a      	ldrb	r2, [r7, #13]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800873a:	7b7a      	ldrb	r2, [r7, #13]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	32ae      	adds	r2, #174	; 0xae
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 8163 	beq.w	8008a12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800874c:	7b7a      	ldrb	r2, [r7, #13]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	32ae      	adds	r2, #174	; 0xae
 8008752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008762:	e156      	b.n	8008a12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b03      	cmp	r3, #3
 800876a:	d008      	beq.n	800877e <USBD_StdEPReq+0x9a>
 800876c:	2b03      	cmp	r3, #3
 800876e:	f300 8145 	bgt.w	80089fc <USBD_StdEPReq+0x318>
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 809b 	beq.w	80088ae <USBD_StdEPReq+0x1ca>
 8008778:	2b01      	cmp	r3, #1
 800877a:	d03c      	beq.n	80087f6 <USBD_StdEPReq+0x112>
 800877c:	e13e      	b.n	80089fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d002      	beq.n	8008790 <USBD_StdEPReq+0xac>
 800878a:	2b03      	cmp	r3, #3
 800878c:	d016      	beq.n	80087bc <USBD_StdEPReq+0xd8>
 800878e:	e02c      	b.n	80087ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00d      	beq.n	80087b2 <USBD_StdEPReq+0xce>
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b80      	cmp	r3, #128	; 0x80
 800879a:	d00a      	beq.n	80087b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f963 	bl	8009a6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 f95f 	bl	8009a6c <USBD_LL_StallEP>
 80087ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087b0:	e020      	b.n	80087f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fc7a 	bl	80090ae <USBD_CtlError>
              break;
 80087ba:	e01b      	b.n	80087f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	885b      	ldrh	r3, [r3, #2]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10e      	bne.n	80087e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00b      	beq.n	80087e2 <USBD_StdEPReq+0xfe>
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b80      	cmp	r3, #128	; 0x80
 80087ce:	d008      	beq.n	80087e2 <USBD_StdEPReq+0xfe>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	88db      	ldrh	r3, [r3, #6]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d104      	bne.n	80087e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 f945 	bl	8009a6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fd2e 	bl	8009244 <USBD_CtlSendStatus>

              break;
 80087e8:	e004      	b.n	80087f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc5e 	bl	80090ae <USBD_CtlError>
              break;
 80087f2:	bf00      	nop
          }
          break;
 80087f4:	e107      	b.n	8008a06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d002      	beq.n	8008808 <USBD_StdEPReq+0x124>
 8008802:	2b03      	cmp	r3, #3
 8008804:	d016      	beq.n	8008834 <USBD_StdEPReq+0x150>
 8008806:	e04b      	b.n	80088a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00d      	beq.n	800882a <USBD_StdEPReq+0x146>
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	2b80      	cmp	r3, #128	; 0x80
 8008812:	d00a      	beq.n	800882a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 f927 	bl	8009a6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800881e:	2180      	movs	r1, #128	; 0x80
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 f923 	bl	8009a6c <USBD_LL_StallEP>
 8008826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008828:	e040      	b.n	80088ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 fc3e 	bl	80090ae <USBD_CtlError>
              break;
 8008832:	e03b      	b.n	80088ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d136      	bne.n	80088aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008846:	7bbb      	ldrb	r3, [r7, #14]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 f92d 	bl	8009aaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fcf7 	bl	8009244 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fde2 	bl	8008424 <USBD_CoreFindEP>
 8008860:	4603      	mov	r3, r0
 8008862:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008864:	7b7b      	ldrb	r3, [r7, #13]
 8008866:	2bff      	cmp	r3, #255	; 0xff
 8008868:	d01f      	beq.n	80088aa <USBD_StdEPReq+0x1c6>
 800886a:	7b7b      	ldrb	r3, [r7, #13]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d11c      	bne.n	80088aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008870:	7b7a      	ldrb	r2, [r7, #13]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008878:	7b7a      	ldrb	r2, [r7, #13]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	32ae      	adds	r2, #174	; 0xae
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d010      	beq.n	80088aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008888:	7b7a      	ldrb	r2, [r7, #13]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32ae      	adds	r2, #174	; 0xae
 800888e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800889e:	e004      	b.n	80088aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fc03 	bl	80090ae <USBD_CtlError>
              break;
 80088a8:	e000      	b.n	80088ac <USBD_StdEPReq+0x1c8>
              break;
 80088aa:	bf00      	nop
          }
          break;
 80088ac:	e0ab      	b.n	8008a06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d002      	beq.n	80088c0 <USBD_StdEPReq+0x1dc>
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d032      	beq.n	8008924 <USBD_StdEPReq+0x240>
 80088be:	e097      	b.n	80089f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <USBD_StdEPReq+0x1f2>
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b80      	cmp	r3, #128	; 0x80
 80088ca:	d004      	beq.n	80088d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fbed 	bl	80090ae <USBD_CtlError>
                break;
 80088d4:	e091      	b.n	80089fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	da0b      	bge.n	80088f6 <USBD_StdEPReq+0x212>
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	3310      	adds	r3, #16
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	4413      	add	r3, r2
 80088f2:	3304      	adds	r3, #4
 80088f4:	e00b      	b.n	800890e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	4413      	add	r3, r2
 800890c:	3304      	adds	r3, #4
 800890e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2202      	movs	r2, #2
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fc37 	bl	8009190 <USBD_CtlSendData>
              break;
 8008922:	e06a      	b.n	80089fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008928:	2b00      	cmp	r3, #0
 800892a:	da11      	bge.n	8008950 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	f003 020f 	and.w	r2, r3, #15
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	3324      	adds	r3, #36	; 0x24
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d117      	bne.n	8008976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fbb0 	bl	80090ae <USBD_CtlError>
                  break;
 800894e:	e054      	b.n	80089fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	f003 020f 	and.w	r2, r3, #15
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d104      	bne.n	8008976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fb9d 	bl	80090ae <USBD_CtlError>
                  break;
 8008974:	e041      	b.n	80089fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800897a:	2b00      	cmp	r3, #0
 800897c:	da0b      	bge.n	8008996 <USBD_StdEPReq+0x2b2>
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	3310      	adds	r3, #16
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	3304      	adds	r3, #4
 8008994:	e00b      	b.n	80089ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <USBD_StdEPReq+0x2d8>
 80089b6:	7bbb      	ldrb	r3, [r7, #14]
 80089b8:	2b80      	cmp	r3, #128	; 0x80
 80089ba:	d103      	bne.n	80089c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e00e      	b.n	80089e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f001 f88d 	bl	8009ae8 <USBD_LL_IsStallEP>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2201      	movs	r2, #1
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	e002      	b.n	80089e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2202      	movs	r2, #2
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbd1 	bl	8009190 <USBD_CtlSendData>
              break;
 80089ee:	e004      	b.n	80089fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fb5b 	bl	80090ae <USBD_CtlError>
              break;
 80089f8:	bf00      	nop
          }
          break;
 80089fa:	e004      	b.n	8008a06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fb55 	bl	80090ae <USBD_CtlError>
          break;
 8008a04:	bf00      	nop
      }
      break;
 8008a06:	e005      	b.n	8008a14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fb4f 	bl	80090ae <USBD_CtlError>
      break;
 8008a10:	e000      	b.n	8008a14 <USBD_StdEPReq+0x330>
      break;
 8008a12:	bf00      	nop
  }

  return ret;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	885b      	ldrh	r3, [r3, #2]
 8008a3a:	0a1b      	lsrs	r3, r3, #8
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	2b06      	cmp	r3, #6
 8008a42:	f200 8128 	bhi.w	8008c96 <USBD_GetDescriptor+0x276>
 8008a46:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <USBD_GetDescriptor+0x2c>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a69 	.word	0x08008a69
 8008a50:	08008a81 	.word	0x08008a81
 8008a54:	08008ac1 	.word	0x08008ac1
 8008a58:	08008c97 	.word	0x08008c97
 8008a5c:	08008c97 	.word	0x08008c97
 8008a60:	08008c37 	.word	0x08008c37
 8008a64:	08008c63 	.word	0x08008c63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	7c12      	ldrb	r2, [r2, #16]
 8008a74:	f107 0108 	add.w	r1, r7, #8
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
 8008a7c:	60f8      	str	r0, [r7, #12]
      break;
 8008a7e:	e112      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	7c1b      	ldrb	r3, [r3, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10d      	bne.n	8008aa4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	f107 0208 	add.w	r2, r7, #8
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008aa2:	e100      	b.n	8008ca6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	f107 0208 	add.w	r2, r7, #8
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	2202      	movs	r2, #2
 8008abc:	701a      	strb	r2, [r3, #0]
      break;
 8008abe:	e0f2      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	885b      	ldrh	r3, [r3, #2]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b05      	cmp	r3, #5
 8008ac8:	f200 80ac 	bhi.w	8008c24 <USBD_GetDescriptor+0x204>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <USBD_GetDescriptor+0xb4>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008aed 	.word	0x08008aed
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b55 	.word	0x08008b55
 8008ae0:	08008b89 	.word	0x08008b89
 8008ae4:	08008bbd 	.word	0x08008bbd
 8008ae8:	08008bf1 	.word	0x08008bf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	7c12      	ldrb	r2, [r2, #16]
 8008b04:	f107 0108 	add.w	r1, r7, #8
 8008b08:	4610      	mov	r0, r2
 8008b0a:	4798      	blx	r3
 8008b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b0e:	e091      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 facb 	bl	80090ae <USBD_CtlError>
            err++;
 8008b18:	7afb      	ldrb	r3, [r7, #11]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b1e:	e089      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7c12      	ldrb	r2, [r2, #16]
 8008b38:	f107 0108 	add.w	r1, r7, #8
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	4798      	blx	r3
 8008b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b42:	e077      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fab1 	bl	80090ae <USBD_CtlError>
            err++;
 8008b4c:	7afb      	ldrb	r3, [r7, #11]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	72fb      	strb	r3, [r7, #11]
          break;
 8008b52:	e06f      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	7c12      	ldrb	r2, [r2, #16]
 8008b6c:	f107 0108 	add.w	r1, r7, #8
 8008b70:	4610      	mov	r0, r2
 8008b72:	4798      	blx	r3
 8008b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b76:	e05d      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fa97 	bl	80090ae <USBD_CtlError>
            err++;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
 8008b82:	3301      	adds	r3, #1
 8008b84:	72fb      	strb	r3, [r7, #11]
          break;
 8008b86:	e055      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7c12      	ldrb	r2, [r2, #16]
 8008ba0:	f107 0108 	add.w	r1, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008baa:	e043      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa7d 	bl	80090ae <USBD_CtlError>
            err++;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bba:	e03b      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00b      	beq.n	8008be0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	7c12      	ldrb	r2, [r2, #16]
 8008bd4:	f107 0108 	add.w	r1, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bde:	e029      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa63 	bl	80090ae <USBD_CtlError>
            err++;
 8008be8:	7afb      	ldrb	r3, [r7, #11]
 8008bea:	3301      	adds	r3, #1
 8008bec:	72fb      	strb	r3, [r7, #11]
          break;
 8008bee:	e021      	b.n	8008c34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	7c12      	ldrb	r2, [r2, #16]
 8008c08:	f107 0108 	add.w	r1, r7, #8
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c12:	e00f      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa49 	bl	80090ae <USBD_CtlError>
            err++;
 8008c1c:	7afb      	ldrb	r3, [r7, #11]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	72fb      	strb	r3, [r7, #11]
          break;
 8008c22:	e007      	b.n	8008c34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa41 	bl	80090ae <USBD_CtlError>
          err++;
 8008c2c:	7afb      	ldrb	r3, [r7, #11]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c32:	bf00      	nop
      }
      break;
 8008c34:	e037      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	7c1b      	ldrb	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	f107 0208 	add.w	r2, r7, #8
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	4798      	blx	r3
 8008c4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c50:	e029      	b.n	8008ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fa2a 	bl	80090ae <USBD_CtlError>
        err++;
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008c60:	e021      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	7c1b      	ldrb	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10d      	bne.n	8008c86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	f107 0208 	add.w	r2, r7, #8
 8008c76:	4610      	mov	r0, r2
 8008c78:	4798      	blx	r3
 8008c7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	2207      	movs	r2, #7
 8008c82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c84:	e00f      	b.n	8008ca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fa10 	bl	80090ae <USBD_CtlError>
        err++;
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
 8008c90:	3301      	adds	r3, #1
 8008c92:	72fb      	strb	r3, [r7, #11]
      break;
 8008c94:	e007      	b.n	8008ca6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa08 	bl	80090ae <USBD_CtlError>
      err++;
 8008c9e:	7afb      	ldrb	r3, [r7, #11]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ca4:	bf00      	nop
  }

  if (err != 0U)
 8008ca6:	7afb      	ldrb	r3, [r7, #11]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d11e      	bne.n	8008cea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	88db      	ldrh	r3, [r3, #6]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d016      	beq.n	8008ce2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008cb4:	893b      	ldrh	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00e      	beq.n	8008cd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88da      	ldrh	r2, [r3, #6]
 8008cbe:	893b      	ldrh	r3, [r7, #8]
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	bf28      	it	cs
 8008cc4:	4613      	movcs	r3, r2
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cca:	893b      	ldrh	r3, [r7, #8]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fa5d 	bl	8009190 <USBD_CtlSendData>
 8008cd6:	e009      	b.n	8008cec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9e7 	bl	80090ae <USBD_CtlError>
 8008ce0:	e004      	b.n	8008cec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 faae 	bl	8009244 <USBD_CtlSendStatus>
 8008ce8:	e000      	b.n	8008cec <USBD_GetDescriptor+0x2cc>
    return;
 8008cea:	bf00      	nop
  }
}
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	889b      	ldrh	r3, [r3, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d131      	bne.n	8008d6a <USBD_SetAddress+0x76>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d12d      	bne.n	8008d6a <USBD_SetAddress+0x76>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	885b      	ldrh	r3, [r3, #2]
 8008d12:	2b7f      	cmp	r3, #127	; 0x7f
 8008d14:	d829      	bhi.n	8008d6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d104      	bne.n	8008d38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9bc 	bl	80090ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d36:	e01d      	b.n	8008d74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7bfa      	ldrb	r2, [r7, #15]
 8008d3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fefb 	bl	8009b40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa7a 	bl	8009244 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2202      	movs	r2, #2
 8008d5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5e:	e009      	b.n	8008d74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d68:	e004      	b.n	8008d74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f99e 	bl	80090ae <USBD_CtlError>
  }
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	4b4e      	ldr	r3, [pc, #312]	; (8008ecc <USBD_SetConfig+0x150>)
 8008d92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d94:	4b4d      	ldr	r3, [pc, #308]	; (8008ecc <USBD_SetConfig+0x150>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d905      	bls.n	8008da8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f985 	bl	80090ae <USBD_CtlError>
    return USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e08c      	b.n	8008ec2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d002      	beq.n	8008dba <USBD_SetConfig+0x3e>
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d029      	beq.n	8008e0c <USBD_SetConfig+0x90>
 8008db8:	e075      	b.n	8008ea6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008dba:	4b44      	ldr	r3, [pc, #272]	; (8008ecc <USBD_SetConfig+0x150>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d020      	beq.n	8008e04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008dc2:	4b42      	ldr	r3, [pc, #264]	; (8008ecc <USBD_SetConfig+0x150>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008dcc:	4b3f      	ldr	r3, [pc, #252]	; (8008ecc <USBD_SetConfig+0x150>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7fe ffe7 	bl	8007da6 <USBD_SetClassConfig>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d008      	beq.n	8008df4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f962 	bl	80090ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008df2:	e065      	b.n	8008ec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fa25 	bl	8009244 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e02:	e05d      	b.n	8008ec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fa1d 	bl	8009244 <USBD_CtlSendStatus>
      break;
 8008e0a:	e059      	b.n	8008ec0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e0c:	4b2f      	ldr	r3, [pc, #188]	; (8008ecc <USBD_SetConfig+0x150>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d112      	bne.n	8008e3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008e1c:	4b2b      	ldr	r3, [pc, #172]	; (8008ecc <USBD_SetConfig+0x150>)
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e26:	4b29      	ldr	r3, [pc, #164]	; (8008ecc <USBD_SetConfig+0x150>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7fe ffd6 	bl	8007dde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa06 	bl	8009244 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e38:	e042      	b.n	8008ec0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e3a:	4b24      	ldr	r3, [pc, #144]	; (8008ecc <USBD_SetConfig+0x150>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d02a      	beq.n	8008e9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7fe ffc4 	bl	8007dde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008e56:	4b1d      	ldr	r3, [pc, #116]	; (8008ecc <USBD_SetConfig+0x150>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e60:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <USBD_SetConfig+0x150>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7fe ff9d 	bl	8007da6 <USBD_SetClassConfig>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00f      	beq.n	8008e96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f918 	bl	80090ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fe ffa9 	bl	8007dde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008e94:	e014      	b.n	8008ec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f9d4 	bl	8009244 <USBD_CtlSendStatus>
      break;
 8008e9c:	e010      	b.n	8008ec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f9d0 	bl	8009244 <USBD_CtlSendStatus>
      break;
 8008ea4:	e00c      	b.n	8008ec0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f900 	bl	80090ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008eae:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <USBD_SetConfig+0x150>)
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7fe ff92 	bl	8007dde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ebe:	bf00      	nop
  }

  return ret;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	200003b4 	.word	0x200003b4

08008ed0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	88db      	ldrh	r3, [r3, #6]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d004      	beq.n	8008eec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f8e2 	bl	80090ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008eea:	e023      	b.n	8008f34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	dc02      	bgt.n	8008efe <USBD_GetConfig+0x2e>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dc03      	bgt.n	8008f04 <USBD_GetConfig+0x34>
 8008efc:	e015      	b.n	8008f2a <USBD_GetConfig+0x5a>
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d00b      	beq.n	8008f1a <USBD_GetConfig+0x4a>
 8008f02:	e012      	b.n	8008f2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	2201      	movs	r2, #1
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f93c 	bl	8009190 <USBD_CtlSendData>
        break;
 8008f18:	e00c      	b.n	8008f34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f934 	bl	8009190 <USBD_CtlSendData>
        break;
 8008f28:	e004      	b.n	8008f34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f8be 	bl	80090ae <USBD_CtlError>
        break;
 8008f32:	bf00      	nop
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d81e      	bhi.n	8008f92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	88db      	ldrh	r3, [r3, #6]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d004      	beq.n	8008f66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f8a5 	bl	80090ae <USBD_CtlError>
        break;
 8008f64:	e01a      	b.n	8008f9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f043 0202 	orr.w	r2, r3, #2
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	330c      	adds	r3, #12
 8008f86:	2202      	movs	r2, #2
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f900 	bl	8009190 <USBD_CtlSendData>
      break;
 8008f90:	e004      	b.n	8008f9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f88a 	bl	80090ae <USBD_CtlError>
      break;
 8008f9a:	bf00      	nop
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	885b      	ldrh	r3, [r3, #2]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d107      	bne.n	8008fc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f940 	bl	8009244 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008fc4:	e013      	b.n	8008fee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	885b      	ldrh	r3, [r3, #2]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d10b      	bne.n	8008fe6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	889b      	ldrh	r3, [r3, #4]
 8008fd2:	0a1b      	lsrs	r3, r3, #8
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f930 	bl	8009244 <USBD_CtlSendStatus>
}
 8008fe4:	e003      	b.n	8008fee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f860 	bl	80090ae <USBD_CtlError>
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009006:	b2db      	uxtb	r3, r3
 8009008:	3b01      	subs	r3, #1
 800900a:	2b02      	cmp	r3, #2
 800900c:	d80b      	bhi.n	8009026 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d10c      	bne.n	8009030 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f910 	bl	8009244 <USBD_CtlSendStatus>
      }
      break;
 8009024:	e004      	b.n	8009030 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009026:	6839      	ldr	r1, [r7, #0]
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f840 	bl	80090ae <USBD_CtlError>
      break;
 800902e:	e000      	b.n	8009032 <USBD_ClrFeature+0x3c>
      break;
 8009030:	bf00      	nop
  }
}
 8009032:	bf00      	nop
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	781a      	ldrb	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3301      	adds	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7ff fa41 	bl	80084ec <SWAPBYTE>
 800906a:	4603      	mov	r3, r0
 800906c:	461a      	mov	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	3301      	adds	r3, #1
 8009076:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3301      	adds	r3, #1
 800907c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f7ff fa34 	bl	80084ec <SWAPBYTE>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3301      	adds	r3, #1
 8009090:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3301      	adds	r3, #1
 8009096:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7ff fa27 	bl	80084ec <SWAPBYTE>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	80da      	strh	r2, [r3, #6]
}
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80090b8:	2180      	movs	r1, #128	; 0x80
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fcd6 	bl	8009a6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80090c0:	2100      	movs	r1, #0
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fcd2 	bl	8009a6c <USBD_LL_StallEP>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d036      	beq.n	8009154 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80090ea:	6938      	ldr	r0, [r7, #16]
 80090ec:	f000 f836 	bl	800915c <USBD_GetLen>
 80090f0:	4603      	mov	r3, r0
 80090f2:	3301      	adds	r3, #1
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	4413      	add	r3, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	7812      	ldrb	r2, [r2, #0]
 8009108:	701a      	strb	r2, [r3, #0]
  idx++;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	3301      	adds	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	4413      	add	r3, r2
 8009116:	2203      	movs	r2, #3
 8009118:	701a      	strb	r2, [r3, #0]
  idx++;
 800911a:	7dfb      	ldrb	r3, [r7, #23]
 800911c:	3301      	adds	r3, #1
 800911e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009120:	e013      	b.n	800914a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	4413      	add	r3, r2
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	7812      	ldrb	r2, [r2, #0]
 800912c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3301      	adds	r3, #1
 8009132:	613b      	str	r3, [r7, #16]
    idx++;
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	3301      	adds	r3, #1
 8009138:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	4413      	add	r3, r2
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
    idx++;
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	3301      	adds	r3, #1
 8009148:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1e7      	bne.n	8009122 <USBD_GetString+0x52>
 8009152:	e000      	b.n	8009156 <USBD_GetString+0x86>
    return;
 8009154:	bf00      	nop
  }
}
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800916c:	e005      	b.n	800917a <USBD_GetLen+0x1e>
  {
    len++;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	3301      	adds	r3, #1
 8009172:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	3301      	adds	r3, #1
 8009178:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1f5      	bne.n	800916e <USBD_GetLen+0x12>
  }

  return len;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2202      	movs	r2, #2
 80091a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	2100      	movs	r1, #0
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 fce1 	bl	8009b7e <USBD_LL_Transmit>

  return USBD_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	60f8      	str	r0, [r7, #12]
 80091ce:	60b9      	str	r1, [r7, #8]
 80091d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	2100      	movs	r1, #0
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f000 fcd0 	bl	8009b7e <USBD_LL_Transmit>

  return USBD_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2203      	movs	r2, #3
 80091f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	2100      	movs	r1, #0
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fcd4 	bl	8009bc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	2100      	movs	r1, #0
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fcc3 	bl	8009bc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2204      	movs	r2, #4
 8009250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009254:	2300      	movs	r3, #0
 8009256:	2200      	movs	r2, #0
 8009258:	2100      	movs	r1, #0
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fc8f 	bl	8009b7e <USBD_LL_Transmit>

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2205      	movs	r2, #5
 8009276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800927a:	2300      	movs	r3, #0
 800927c:	2200      	movs	r2, #0
 800927e:	2100      	movs	r1, #0
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fc9d 	bl	8009bc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009294:	2200      	movs	r2, #0
 8009296:	4912      	ldr	r1, [pc, #72]	; (80092e0 <MX_USB_DEVICE_Init+0x50>)
 8009298:	4812      	ldr	r0, [pc, #72]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 800929a:	f7fe fceb 	bl	8007c74 <USBD_Init>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80092a4:	f7f8 f84e 	bl	8001344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80092a8:	490f      	ldr	r1, [pc, #60]	; (80092e8 <MX_USB_DEVICE_Init+0x58>)
 80092aa:	480e      	ldr	r0, [pc, #56]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 80092ac:	f7fe fd20 	bl	8007cf0 <USBD_RegisterClass>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80092b6:	f7f8 f845 	bl	8001344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80092ba:	490c      	ldr	r1, [pc, #48]	; (80092ec <MX_USB_DEVICE_Init+0x5c>)
 80092bc:	4809      	ldr	r0, [pc, #36]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 80092be:	f7fe fc03 	bl	8007ac8 <USBD_CDC_RegisterInterface>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80092c8:	f7f8 f83c 	bl	8001344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80092cc:	4805      	ldr	r0, [pc, #20]	; (80092e4 <MX_USB_DEVICE_Init+0x54>)
 80092ce:	f7fe fd53 	bl	8007d78 <USBD_Start>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80092d8:	f7f8 f834 	bl	8001344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80092dc:	bf00      	nop
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	200000b0 	.word	0x200000b0
 80092e4:	200003b8 	.word	0x200003b8
 80092e8:	2000001c 	.word	0x2000001c
 80092ec:	2000009c 	.word	0x2000009c

080092f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80092f4:	2200      	movs	r2, #0
 80092f6:	4905      	ldr	r1, [pc, #20]	; (800930c <CDC_Init_FS+0x1c>)
 80092f8:	4805      	ldr	r0, [pc, #20]	; (8009310 <CDC_Init_FS+0x20>)
 80092fa:	f7fe fbff 	bl	8007afc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80092fe:	4905      	ldr	r1, [pc, #20]	; (8009314 <CDC_Init_FS+0x24>)
 8009300:	4803      	ldr	r0, [pc, #12]	; (8009310 <CDC_Init_FS+0x20>)
 8009302:	f7fe fc1d 	bl	8007b40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009306:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009308:	4618      	mov	r0, r3
 800930a:	bd80      	pop	{r7, pc}
 800930c:	20000e94 	.word	0x20000e94
 8009310:	200003b8 	.word	0x200003b8
 8009314:	20000694 	.word	0x20000694

08009318 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009318:	b480      	push	{r7}
 800931a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800931c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800931e:	4618      	mov	r0, r3
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
 8009334:	4613      	mov	r3, r2
 8009336:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009338:	79fb      	ldrb	r3, [r7, #7]
 800933a:	2b23      	cmp	r3, #35	; 0x23
 800933c:	d84a      	bhi.n	80093d4 <CDC_Control_FS+0xac>
 800933e:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <CDC_Control_FS+0x1c>)
 8009340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009344:	080093d5 	.word	0x080093d5
 8009348:	080093d5 	.word	0x080093d5
 800934c:	080093d5 	.word	0x080093d5
 8009350:	080093d5 	.word	0x080093d5
 8009354:	080093d5 	.word	0x080093d5
 8009358:	080093d5 	.word	0x080093d5
 800935c:	080093d5 	.word	0x080093d5
 8009360:	080093d5 	.word	0x080093d5
 8009364:	080093d5 	.word	0x080093d5
 8009368:	080093d5 	.word	0x080093d5
 800936c:	080093d5 	.word	0x080093d5
 8009370:	080093d5 	.word	0x080093d5
 8009374:	080093d5 	.word	0x080093d5
 8009378:	080093d5 	.word	0x080093d5
 800937c:	080093d5 	.word	0x080093d5
 8009380:	080093d5 	.word	0x080093d5
 8009384:	080093d5 	.word	0x080093d5
 8009388:	080093d5 	.word	0x080093d5
 800938c:	080093d5 	.word	0x080093d5
 8009390:	080093d5 	.word	0x080093d5
 8009394:	080093d5 	.word	0x080093d5
 8009398:	080093d5 	.word	0x080093d5
 800939c:	080093d5 	.word	0x080093d5
 80093a0:	080093d5 	.word	0x080093d5
 80093a4:	080093d5 	.word	0x080093d5
 80093a8:	080093d5 	.word	0x080093d5
 80093ac:	080093d5 	.word	0x080093d5
 80093b0:	080093d5 	.word	0x080093d5
 80093b4:	080093d5 	.word	0x080093d5
 80093b8:	080093d5 	.word	0x080093d5
 80093bc:	080093d5 	.word	0x080093d5
 80093c0:	080093d5 	.word	0x080093d5
 80093c4:	080093d5 	.word	0x080093d5
 80093c8:	080093d5 	.word	0x080093d5
 80093cc:	080093d5 	.word	0x080093d5
 80093d0:	080093d5 	.word	0x080093d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80093d4:	bf00      	nop
  }

  return (USBD_OK);
 80093d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	4805      	ldr	r0, [pc, #20]	; (8009408 <CDC_Receive_FS+0x24>)
 80093f2:	f7fe fba5 	bl	8007b40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80093f6:	4804      	ldr	r0, [pc, #16]	; (8009408 <CDC_Receive_FS+0x24>)
 80093f8:	f7fe fc06 	bl	8007c08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80093fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200003b8 	.word	0x200003b8

0800940c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800941c:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <CDC_Transmit_FS+0x48>)
 800941e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009422:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800942e:	2301      	movs	r3, #1
 8009430:	e00b      	b.n	800944a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009432:	887b      	ldrh	r3, [r7, #2]
 8009434:	461a      	mov	r2, r3
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4806      	ldr	r0, [pc, #24]	; (8009454 <CDC_Transmit_FS+0x48>)
 800943a:	f7fe fb5f 	bl	8007afc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800943e:	4805      	ldr	r0, [pc, #20]	; (8009454 <CDC_Transmit_FS+0x48>)
 8009440:	f7fe fb9c 	bl	8007b7c <USBD_CDC_TransmitPacket>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200003b8 	.word	0x200003b8

08009458 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800946a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800946e:	4618      	mov	r0, r3
 8009470:	371c      	adds	r7, #28
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
	...

0800947c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	6039      	str	r1, [r7, #0]
 8009486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2212      	movs	r2, #18
 800948c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800948e:	4b03      	ldr	r3, [pc, #12]	; (800949c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	200000cc 	.word	0x200000cc

080094a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	6039      	str	r1, [r7, #0]
 80094aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2204      	movs	r2, #4
 80094b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094b2:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	200000e0 	.word	0x200000e0

080094c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	6039      	str	r1, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d105      	bne.n	80094e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	4907      	ldr	r1, [pc, #28]	; (80094f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094da:	4808      	ldr	r0, [pc, #32]	; (80094fc <USBD_FS_ProductStrDescriptor+0x38>)
 80094dc:	f7ff fdf8 	bl	80090d0 <USBD_GetString>
 80094e0:	e004      	b.n	80094ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	4904      	ldr	r1, [pc, #16]	; (80094f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80094e6:	4805      	ldr	r0, [pc, #20]	; (80094fc <USBD_FS_ProductStrDescriptor+0x38>)
 80094e8:	f7ff fdf2 	bl	80090d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094ec:	4b02      	ldr	r3, [pc, #8]	; (80094f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	20001694 	.word	0x20001694
 80094fc:	0800c8a0 	.word	0x0800c8a0

08009500 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	4603      	mov	r3, r0
 8009508:	6039      	str	r1, [r7, #0]
 800950a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	4904      	ldr	r1, [pc, #16]	; (8009520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009510:	4804      	ldr	r0, [pc, #16]	; (8009524 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009512:	f7ff fddd 	bl	80090d0 <USBD_GetString>
  return USBD_StrDesc;
 8009516:	4b02      	ldr	r3, [pc, #8]	; (8009520 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20001694 	.word	0x20001694
 8009524:	0800c8b8 	.word	0x0800c8b8

08009528 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	6039      	str	r1, [r7, #0]
 8009532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	221a      	movs	r2, #26
 8009538:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800953a:	f000 f843 	bl	80095c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800953e:	4b02      	ldr	r3, [pc, #8]	; (8009548 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	200000e4 	.word	0x200000e4

0800954c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	6039      	str	r1, [r7, #0]
 8009556:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	4907      	ldr	r1, [pc, #28]	; (8009580 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009562:	4808      	ldr	r0, [pc, #32]	; (8009584 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009564:	f7ff fdb4 	bl	80090d0 <USBD_GetString>
 8009568:	e004      	b.n	8009574 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	4904      	ldr	r1, [pc, #16]	; (8009580 <USBD_FS_ConfigStrDescriptor+0x34>)
 800956e:	4805      	ldr	r0, [pc, #20]	; (8009584 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009570:	f7ff fdae 	bl	80090d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	20001694 	.word	0x20001694
 8009584:	0800c8cc 	.word	0x0800c8cc

08009588 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	6039      	str	r1, [r7, #0]
 8009592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d105      	bne.n	80095a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800959a:	683a      	ldr	r2, [r7, #0]
 800959c:	4907      	ldr	r1, [pc, #28]	; (80095bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800959e:	4808      	ldr	r0, [pc, #32]	; (80095c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095a0:	f7ff fd96 	bl	80090d0 <USBD_GetString>
 80095a4:	e004      	b.n	80095b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	4904      	ldr	r1, [pc, #16]	; (80095bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095aa:	4805      	ldr	r0, [pc, #20]	; (80095c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095ac:	f7ff fd90 	bl	80090d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095b0:	4b02      	ldr	r3, [pc, #8]	; (80095bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20001694 	.word	0x20001694
 80095c0:	0800c8d8 	.word	0x0800c8d8

080095c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095ca:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <Get_SerialNum+0x44>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095d0:	4b0e      	ldr	r3, [pc, #56]	; (800960c <Get_SerialNum+0x48>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095d6:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <Get_SerialNum+0x4c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4413      	add	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d009      	beq.n	80095fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095ea:	2208      	movs	r2, #8
 80095ec:	4909      	ldr	r1, [pc, #36]	; (8009614 <Get_SerialNum+0x50>)
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f000 f814 	bl	800961c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095f4:	2204      	movs	r2, #4
 80095f6:	4908      	ldr	r1, [pc, #32]	; (8009618 <Get_SerialNum+0x54>)
 80095f8:	68b8      	ldr	r0, [r7, #8]
 80095fa:	f000 f80f 	bl	800961c <IntToUnicode>
  }
}
 80095fe:	bf00      	nop
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	1fff7a10 	.word	0x1fff7a10
 800960c:	1fff7a14 	.word	0x1fff7a14
 8009610:	1fff7a18 	.word	0x1fff7a18
 8009614:	200000e6 	.word	0x200000e6
 8009618:	200000f6 	.word	0x200000f6

0800961c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	4613      	mov	r3, r2
 8009628:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]
 8009632:	e027      	b.n	8009684 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	0f1b      	lsrs	r3, r3, #28
 8009638:	2b09      	cmp	r3, #9
 800963a:	d80b      	bhi.n	8009654 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	0f1b      	lsrs	r3, r3, #28
 8009640:	b2da      	uxtb	r2, r3
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	005b      	lsls	r3, r3, #1
 8009646:	4619      	mov	r1, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	440b      	add	r3, r1
 800964c:	3230      	adds	r2, #48	; 0x30
 800964e:	b2d2      	uxtb	r2, r2
 8009650:	701a      	strb	r2, [r3, #0]
 8009652:	e00a      	b.n	800966a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	0f1b      	lsrs	r3, r3, #28
 8009658:	b2da      	uxtb	r2, r3
 800965a:	7dfb      	ldrb	r3, [r7, #23]
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	4619      	mov	r1, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	440b      	add	r3, r1
 8009664:	3237      	adds	r2, #55	; 0x37
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	011b      	lsls	r3, r3, #4
 800966e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	3301      	adds	r3, #1
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4413      	add	r3, r2
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	3301      	adds	r3, #1
 8009682:	75fb      	strb	r3, [r7, #23]
 8009684:	7dfa      	ldrb	r2, [r7, #23]
 8009686:	79fb      	ldrb	r3, [r7, #7]
 8009688:	429a      	cmp	r2, r3
 800968a:	d3d3      	bcc.n	8009634 <IntToUnicode+0x18>
  }
}
 800968c:	bf00      	nop
 800968e:	bf00      	nop
 8009690:	371c      	adds	r7, #28
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
	...

0800969c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08a      	sub	sp, #40	; 0x28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096a4:	f107 0314 	add.w	r3, r7, #20
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	605a      	str	r2, [r3, #4]
 80096ae:	609a      	str	r2, [r3, #8]
 80096b0:	60da      	str	r2, [r3, #12]
 80096b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096bc:	d13a      	bne.n	8009734 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096be:	2300      	movs	r3, #0
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	4b1e      	ldr	r3, [pc, #120]	; (800973c <HAL_PCD_MspInit+0xa0>)
 80096c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c6:	4a1d      	ldr	r2, [pc, #116]	; (800973c <HAL_PCD_MspInit+0xa0>)
 80096c8:	f043 0301 	orr.w	r3, r3, #1
 80096cc:	6313      	str	r3, [r2, #48]	; 0x30
 80096ce:	4b1b      	ldr	r3, [pc, #108]	; (800973c <HAL_PCD_MspInit+0xa0>)
 80096d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	613b      	str	r3, [r7, #16]
 80096d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80096de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e0:	2302      	movs	r3, #2
 80096e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096e8:	2303      	movs	r3, #3
 80096ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096ec:	230a      	movs	r3, #10
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096f0:	f107 0314 	add.w	r3, r7, #20
 80096f4:	4619      	mov	r1, r3
 80096f6:	4812      	ldr	r0, [pc, #72]	; (8009740 <HAL_PCD_MspInit+0xa4>)
 80096f8:	f7f8 fd1a 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096fc:	4b0f      	ldr	r3, [pc, #60]	; (800973c <HAL_PCD_MspInit+0xa0>)
 80096fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009700:	4a0e      	ldr	r2, [pc, #56]	; (800973c <HAL_PCD_MspInit+0xa0>)
 8009702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009706:	6353      	str	r3, [r2, #52]	; 0x34
 8009708:	2300      	movs	r3, #0
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <HAL_PCD_MspInit+0xa0>)
 800970e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009710:	4a0a      	ldr	r2, [pc, #40]	; (800973c <HAL_PCD_MspInit+0xa0>)
 8009712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009716:	6453      	str	r3, [r2, #68]	; 0x44
 8009718:	4b08      	ldr	r3, [pc, #32]	; (800973c <HAL_PCD_MspInit+0xa0>)
 800971a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800971c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	2043      	movs	r0, #67	; 0x43
 800972a:	f7f8 fcca 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800972e:	2043      	movs	r0, #67	; 0x43
 8009730:	f7f8 fce3 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009734:	bf00      	nop
 8009736:	3728      	adds	r7, #40	; 0x28
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	40023800 	.word	0x40023800
 8009740:	40020000 	.word	0x40020000

08009744 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009758:	4619      	mov	r1, r3
 800975a:	4610      	mov	r0, r2
 800975c:	f7fe fb59 	bl	8007e12 <USBD_LL_SetupStage>
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	460b      	mov	r3, r1
 8009772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	4613      	mov	r3, r2
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	78fb      	ldrb	r3, [r7, #3]
 8009790:	4619      	mov	r1, r3
 8009792:	f7fe fb93 	bl	8007ebc <USBD_LL_DataOutStage>
}
 8009796:	bf00      	nop
 8009798:	3708      	adds	r7, #8
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979e:	b580      	push	{r7, lr}
 80097a0:	b082      	sub	sp, #8
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80097b0:	78fa      	ldrb	r2, [r7, #3]
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	4613      	mov	r3, r2
 80097b6:	00db      	lsls	r3, r3, #3
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	440b      	add	r3, r1
 80097be:	334c      	adds	r3, #76	; 0x4c
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	4619      	mov	r1, r3
 80097c6:	f7fe fc2c 	bl	8008022 <USBD_LL_DataInStage>
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b082      	sub	sp, #8
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fe fd60 	bl	80082a6 <USBD_LL_SOF>
}
 80097e6:	bf00      	nop
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097f6:	2301      	movs	r3, #1
 80097f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d001      	beq.n	8009806 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009802:	f7f7 fd9f 	bl	8001344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800980c:	7bfa      	ldrb	r2, [r7, #15]
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fd0a 	bl	800822a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800981c:	4618      	mov	r0, r3
 800981e:	f7fe fcb2 	bl	8008186 <USBD_LL_Reset>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
	...

0800982c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800983a:	4618      	mov	r0, r3
 800983c:	f7fe fd05 	bl	800824a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6812      	ldr	r2, [r2, #0]
 800984e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009860:	4b04      	ldr	r3, [pc, #16]	; (8009874 <HAL_PCD_SuspendCallback+0x48>)
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	4a03      	ldr	r2, [pc, #12]	; (8009874 <HAL_PCD_SuspendCallback+0x48>)
 8009866:	f043 0306 	orr.w	r3, r3, #6
 800986a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	e000ed00 	.word	0xe000ed00

08009878 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fcf5 	bl	8008276 <USBD_LL_Resume>
}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fd4d 	bl	800834a <USBD_LL_IsoOUTIncomplete>
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ca:	78fa      	ldrb	r2, [r7, #3]
 80098cc:	4611      	mov	r1, r2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fd09 	bl	80082e6 <USBD_LL_IsoINIncomplete>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fd5f 	bl	80083ae <USBD_LL_DevConnected>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fd5c 	bl	80083c4 <USBD_LL_DevDisconnected>
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d13c      	bne.n	800999e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009924:	4a20      	ldr	r2, [pc, #128]	; (80099a8 <USBD_LL_Init+0x94>)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a1e      	ldr	r2, [pc, #120]	; (80099a8 <USBD_LL_Init+0x94>)
 8009930:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009934:	4b1c      	ldr	r3, [pc, #112]	; (80099a8 <USBD_LL_Init+0x94>)
 8009936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800993a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800993c:	4b1a      	ldr	r3, [pc, #104]	; (80099a8 <USBD_LL_Init+0x94>)
 800993e:	2204      	movs	r2, #4
 8009940:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009942:	4b19      	ldr	r3, [pc, #100]	; (80099a8 <USBD_LL_Init+0x94>)
 8009944:	2202      	movs	r2, #2
 8009946:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009948:	4b17      	ldr	r3, [pc, #92]	; (80099a8 <USBD_LL_Init+0x94>)
 800994a:	2200      	movs	r2, #0
 800994c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800994e:	4b16      	ldr	r3, [pc, #88]	; (80099a8 <USBD_LL_Init+0x94>)
 8009950:	2202      	movs	r2, #2
 8009952:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009954:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <USBD_LL_Init+0x94>)
 8009956:	2200      	movs	r2, #0
 8009958:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800995a:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <USBD_LL_Init+0x94>)
 800995c:	2200      	movs	r2, #0
 800995e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009960:	4b11      	ldr	r3, [pc, #68]	; (80099a8 <USBD_LL_Init+0x94>)
 8009962:	2200      	movs	r2, #0
 8009964:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009966:	4b10      	ldr	r3, [pc, #64]	; (80099a8 <USBD_LL_Init+0x94>)
 8009968:	2200      	movs	r2, #0
 800996a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800996c:	4b0e      	ldr	r3, [pc, #56]	; (80099a8 <USBD_LL_Init+0x94>)
 800996e:	2200      	movs	r2, #0
 8009970:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009972:	480d      	ldr	r0, [pc, #52]	; (80099a8 <USBD_LL_Init+0x94>)
 8009974:	f7f9 fd53 	bl	800341e <HAL_PCD_Init>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800997e:	f7f7 fce1 	bl	8001344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009982:	2180      	movs	r1, #128	; 0x80
 8009984:	4808      	ldr	r0, [pc, #32]	; (80099a8 <USBD_LL_Init+0x94>)
 8009986:	f7fa ffaa 	bl	80048de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800998a:	2240      	movs	r2, #64	; 0x40
 800998c:	2100      	movs	r1, #0
 800998e:	4806      	ldr	r0, [pc, #24]	; (80099a8 <USBD_LL_Init+0x94>)
 8009990:	f7fa ff5e 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009994:	2280      	movs	r2, #128	; 0x80
 8009996:	2101      	movs	r1, #1
 8009998:	4803      	ldr	r0, [pc, #12]	; (80099a8 <USBD_LL_Init+0x94>)
 800999a:	f7fa ff59 	bl	8004850 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20001894 	.word	0x20001894

080099ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f9 fe48 	bl	8003658 <HAL_PCD_Start>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f942 	bl	8009c58 <USBD_Get_USB_Status>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	461a      	mov	r2, r3
 80099f0:	4603      	mov	r3, r0
 80099f2:	70fb      	strb	r3, [r7, #3]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70bb      	strb	r3, [r7, #2]
 80099f8:	4613      	mov	r3, r2
 80099fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a0a:	78bb      	ldrb	r3, [r7, #2]
 8009a0c:	883a      	ldrh	r2, [r7, #0]
 8009a0e:	78f9      	ldrb	r1, [r7, #3]
 8009a10:	f7fa fb19 	bl	8004046 <HAL_PCD_EP_Open>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f91c 	bl	8009c58 <USBD_Get_USB_Status>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fa fb62 	bl	8004116 <HAL_PCD_EP_Close>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 f8fd 	bl	8009c58 <USBD_Get_USB_Status>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fa fc3a 	bl	8004304 <HAL_PCD_EP_SetStall>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 f8de 	bl	8009c58 <USBD_Get_USB_Status>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ac4:	78fa      	ldrb	r2, [r7, #3]
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fa fc7f 	bl	80043cc <HAL_PCD_EP_ClrStall>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 f8bf 	bl	8009c58 <USBD_Get_USB_Status>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009afa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	da0b      	bge.n	8009b1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	00db      	lsls	r3, r3, #3
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	333e      	adds	r3, #62	; 0x3e
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	e00b      	b.n	8009b34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b22:	68f9      	ldr	r1, [r7, #12]
 8009b24:	4613      	mov	r3, r2
 8009b26:	00db      	lsls	r3, r3, #3
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	440b      	add	r3, r1
 8009b2e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009b32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b5a:	78fa      	ldrb	r2, [r7, #3]
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fa fa4c 	bl	8003ffc <HAL_PCD_SetAddress>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 f874 	bl	8009c58 <USBD_Get_USB_Status>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b086      	sub	sp, #24
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	603b      	str	r3, [r7, #0]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b9c:	7af9      	ldrb	r1, [r7, #11]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	f7fa fb65 	bl	8004270 <HAL_PCD_EP_Transmit>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 f853 	bl	8009c58 <USBD_Get_USB_Status>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	607a      	str	r2, [r7, #4]
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009bde:	7af9      	ldrb	r1, [r7, #11]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	f7fa fae1 	bl	80041aa <HAL_PCD_EP_Receive>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f832 	bl	8009c58 <USBD_Get_USB_Status>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	4611      	mov	r1, r2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fa fb11 	bl	8004240 <HAL_PCD_EP_GetRxCount>
 8009c1e:	4603      	mov	r3, r0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c30:	4b03      	ldr	r3, [pc, #12]	; (8009c40 <USBD_static_malloc+0x18>)
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20001da0 	.word	0x20001da0

08009c44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]

}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	2b03      	cmp	r3, #3
 8009c6a:	d817      	bhi.n	8009c9c <USBD_Get_USB_Status+0x44>
 8009c6c:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <USBD_Get_USB_Status+0x1c>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c85 	.word	0x08009c85
 8009c78:	08009c8b 	.word	0x08009c8b
 8009c7c:	08009c91 	.word	0x08009c91
 8009c80:	08009c97 	.word	0x08009c97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73fb      	strb	r3, [r7, #15]
    break;
 8009c88:	e00b      	b.n	8009ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8e:	e008      	b.n	8009ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c90:	2301      	movs	r3, #1
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	e005      	b.n	8009ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c96:	2303      	movs	r3, #3
 8009c98:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9a:	e002      	b.n	8009ca2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca0:	bf00      	nop
  }
  return usb_status;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <__errno>:
 8009cb0:	4b01      	ldr	r3, [pc, #4]	; (8009cb8 <__errno+0x8>)
 8009cb2:	6818      	ldr	r0, [r3, #0]
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	20000100 	.word	0x20000100

08009cbc <__libc_init_array>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4d0d      	ldr	r5, [pc, #52]	; (8009cf4 <__libc_init_array+0x38>)
 8009cc0:	4c0d      	ldr	r4, [pc, #52]	; (8009cf8 <__libc_init_array+0x3c>)
 8009cc2:	1b64      	subs	r4, r4, r5
 8009cc4:	10a4      	asrs	r4, r4, #2
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	42a6      	cmp	r6, r4
 8009cca:	d109      	bne.n	8009ce0 <__libc_init_array+0x24>
 8009ccc:	4d0b      	ldr	r5, [pc, #44]	; (8009cfc <__libc_init_array+0x40>)
 8009cce:	4c0c      	ldr	r4, [pc, #48]	; (8009d00 <__libc_init_array+0x44>)
 8009cd0:	f002 fdae 	bl	800c830 <_init>
 8009cd4:	1b64      	subs	r4, r4, r5
 8009cd6:	10a4      	asrs	r4, r4, #2
 8009cd8:	2600      	movs	r6, #0
 8009cda:	42a6      	cmp	r6, r4
 8009cdc:	d105      	bne.n	8009cea <__libc_init_array+0x2e>
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce4:	4798      	blx	r3
 8009ce6:	3601      	adds	r6, #1
 8009ce8:	e7ee      	b.n	8009cc8 <__libc_init_array+0xc>
 8009cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cee:	4798      	blx	r3
 8009cf0:	3601      	adds	r6, #1
 8009cf2:	e7f2      	b.n	8009cda <__libc_init_array+0x1e>
 8009cf4:	0800cce4 	.word	0x0800cce4
 8009cf8:	0800cce4 	.word	0x0800cce4
 8009cfc:	0800cce4 	.word	0x0800cce4
 8009d00:	0800cce8 	.word	0x0800cce8

08009d04 <memset>:
 8009d04:	4402      	add	r2, r0
 8009d06:	4603      	mov	r3, r0
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d100      	bne.n	8009d0e <memset+0xa>
 8009d0c:	4770      	bx	lr
 8009d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d12:	e7f9      	b.n	8009d08 <memset+0x4>

08009d14 <__cvt>:
 8009d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d18:	ec55 4b10 	vmov	r4, r5, d0
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	460e      	mov	r6, r1
 8009d20:	4619      	mov	r1, r3
 8009d22:	462b      	mov	r3, r5
 8009d24:	bfbb      	ittet	lt
 8009d26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009d2a:	461d      	movlt	r5, r3
 8009d2c:	2300      	movge	r3, #0
 8009d2e:	232d      	movlt	r3, #45	; 0x2d
 8009d30:	700b      	strb	r3, [r1, #0]
 8009d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009d38:	4691      	mov	r9, r2
 8009d3a:	f023 0820 	bic.w	r8, r3, #32
 8009d3e:	bfbc      	itt	lt
 8009d40:	4622      	movlt	r2, r4
 8009d42:	4614      	movlt	r4, r2
 8009d44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d48:	d005      	beq.n	8009d56 <__cvt+0x42>
 8009d4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009d4e:	d100      	bne.n	8009d52 <__cvt+0x3e>
 8009d50:	3601      	adds	r6, #1
 8009d52:	2102      	movs	r1, #2
 8009d54:	e000      	b.n	8009d58 <__cvt+0x44>
 8009d56:	2103      	movs	r1, #3
 8009d58:	ab03      	add	r3, sp, #12
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	ab02      	add	r3, sp, #8
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	ec45 4b10 	vmov	d0, r4, r5
 8009d64:	4653      	mov	r3, sl
 8009d66:	4632      	mov	r2, r6
 8009d68:	f000 fcfa 	bl	800a760 <_dtoa_r>
 8009d6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009d70:	4607      	mov	r7, r0
 8009d72:	d102      	bne.n	8009d7a <__cvt+0x66>
 8009d74:	f019 0f01 	tst.w	r9, #1
 8009d78:	d022      	beq.n	8009dc0 <__cvt+0xac>
 8009d7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d7e:	eb07 0906 	add.w	r9, r7, r6
 8009d82:	d110      	bne.n	8009da6 <__cvt+0x92>
 8009d84:	783b      	ldrb	r3, [r7, #0]
 8009d86:	2b30      	cmp	r3, #48	; 0x30
 8009d88:	d10a      	bne.n	8009da0 <__cvt+0x8c>
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fea1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d96:	b918      	cbnz	r0, 8009da0 <__cvt+0x8c>
 8009d98:	f1c6 0601 	rsb	r6, r6, #1
 8009d9c:	f8ca 6000 	str.w	r6, [sl]
 8009da0:	f8da 3000 	ldr.w	r3, [sl]
 8009da4:	4499      	add	r9, r3
 8009da6:	2200      	movs	r2, #0
 8009da8:	2300      	movs	r3, #0
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8009db2:	b108      	cbz	r0, 8009db8 <__cvt+0xa4>
 8009db4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009db8:	2230      	movs	r2, #48	; 0x30
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	454b      	cmp	r3, r9
 8009dbe:	d307      	bcc.n	8009dd0 <__cvt+0xbc>
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dc4:	1bdb      	subs	r3, r3, r7
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	b004      	add	sp, #16
 8009dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd0:	1c59      	adds	r1, r3, #1
 8009dd2:	9103      	str	r1, [sp, #12]
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	e7f0      	b.n	8009dba <__cvt+0xa6>

08009dd8 <__exponent>:
 8009dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	bfb8      	it	lt
 8009de0:	4249      	neglt	r1, r1
 8009de2:	f803 2b02 	strb.w	r2, [r3], #2
 8009de6:	bfb4      	ite	lt
 8009de8:	222d      	movlt	r2, #45	; 0x2d
 8009dea:	222b      	movge	r2, #43	; 0x2b
 8009dec:	2909      	cmp	r1, #9
 8009dee:	7042      	strb	r2, [r0, #1]
 8009df0:	dd2a      	ble.n	8009e48 <__exponent+0x70>
 8009df2:	f10d 0407 	add.w	r4, sp, #7
 8009df6:	46a4      	mov	ip, r4
 8009df8:	270a      	movs	r7, #10
 8009dfa:	46a6      	mov	lr, r4
 8009dfc:	460a      	mov	r2, r1
 8009dfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8009e02:	fb07 1516 	mls	r5, r7, r6, r1
 8009e06:	3530      	adds	r5, #48	; 0x30
 8009e08:	2a63      	cmp	r2, #99	; 0x63
 8009e0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009e0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009e12:	4631      	mov	r1, r6
 8009e14:	dcf1      	bgt.n	8009dfa <__exponent+0x22>
 8009e16:	3130      	adds	r1, #48	; 0x30
 8009e18:	f1ae 0502 	sub.w	r5, lr, #2
 8009e1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009e20:	1c44      	adds	r4, r0, #1
 8009e22:	4629      	mov	r1, r5
 8009e24:	4561      	cmp	r1, ip
 8009e26:	d30a      	bcc.n	8009e3e <__exponent+0x66>
 8009e28:	f10d 0209 	add.w	r2, sp, #9
 8009e2c:	eba2 020e 	sub.w	r2, r2, lr
 8009e30:	4565      	cmp	r5, ip
 8009e32:	bf88      	it	hi
 8009e34:	2200      	movhi	r2, #0
 8009e36:	4413      	add	r3, r2
 8009e38:	1a18      	subs	r0, r3, r0
 8009e3a:	b003      	add	sp, #12
 8009e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009e46:	e7ed      	b.n	8009e24 <__exponent+0x4c>
 8009e48:	2330      	movs	r3, #48	; 0x30
 8009e4a:	3130      	adds	r1, #48	; 0x30
 8009e4c:	7083      	strb	r3, [r0, #2]
 8009e4e:	70c1      	strb	r1, [r0, #3]
 8009e50:	1d03      	adds	r3, r0, #4
 8009e52:	e7f1      	b.n	8009e38 <__exponent+0x60>

08009e54 <_printf_float>:
 8009e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e58:	ed2d 8b02 	vpush	{d8}
 8009e5c:	b08d      	sub	sp, #52	; 0x34
 8009e5e:	460c      	mov	r4, r1
 8009e60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009e64:	4616      	mov	r6, r2
 8009e66:	461f      	mov	r7, r3
 8009e68:	4605      	mov	r5, r0
 8009e6a:	f001 fb5d 	bl	800b528 <_localeconv_r>
 8009e6e:	f8d0 a000 	ldr.w	sl, [r0]
 8009e72:	4650      	mov	r0, sl
 8009e74:	f7f6 f9b4 	bl	80001e0 <strlen>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	9305      	str	r3, [sp, #20]
 8009e80:	f8d8 3000 	ldr.w	r3, [r8]
 8009e84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e88:	3307      	adds	r3, #7
 8009e8a:	f023 0307 	bic.w	r3, r3, #7
 8009e8e:	f103 0208 	add.w	r2, r3, #8
 8009e92:	f8c8 2000 	str.w	r2, [r8]
 8009e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ea2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009eac:	ee08 0a10 	vmov	s16, r0
 8009eb0:	4b9f      	ldr	r3, [pc, #636]	; (800a130 <_printf_float+0x2dc>)
 8009eb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eba:	f7f6 fe3f 	bl	8000b3c <__aeabi_dcmpun>
 8009ebe:	bb88      	cbnz	r0, 8009f24 <_printf_float+0xd0>
 8009ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ec4:	4b9a      	ldr	r3, [pc, #616]	; (800a130 <_printf_float+0x2dc>)
 8009ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eca:	f7f6 fe19 	bl	8000b00 <__aeabi_dcmple>
 8009ece:	bb48      	cbnz	r0, 8009f24 <_printf_float+0xd0>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7f6 fe08 	bl	8000aec <__aeabi_dcmplt>
 8009edc:	b110      	cbz	r0, 8009ee4 <_printf_float+0x90>
 8009ede:	232d      	movs	r3, #45	; 0x2d
 8009ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ee4:	4b93      	ldr	r3, [pc, #588]	; (800a134 <_printf_float+0x2e0>)
 8009ee6:	4894      	ldr	r0, [pc, #592]	; (800a138 <_printf_float+0x2e4>)
 8009ee8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009eec:	bf94      	ite	ls
 8009eee:	4698      	movls	r8, r3
 8009ef0:	4680      	movhi	r8, r0
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	9b05      	ldr	r3, [sp, #20]
 8009ef8:	f023 0204 	bic.w	r2, r3, #4
 8009efc:	6022      	str	r2, [r4, #0]
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	9700      	str	r7, [sp, #0]
 8009f04:	4633      	mov	r3, r6
 8009f06:	aa0b      	add	r2, sp, #44	; 0x2c
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f000 f9d8 	bl	800a2c0 <_printf_common>
 8009f10:	3001      	adds	r0, #1
 8009f12:	f040 8090 	bne.w	800a036 <_printf_float+0x1e2>
 8009f16:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1a:	b00d      	add	sp, #52	; 0x34
 8009f1c:	ecbd 8b02 	vpop	{d8}
 8009f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f24:	4642      	mov	r2, r8
 8009f26:	464b      	mov	r3, r9
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 fe06 	bl	8000b3c <__aeabi_dcmpun>
 8009f30:	b140      	cbz	r0, 8009f44 <_printf_float+0xf0>
 8009f32:	464b      	mov	r3, r9
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bfbc      	itt	lt
 8009f38:	232d      	movlt	r3, #45	; 0x2d
 8009f3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f3e:	487f      	ldr	r0, [pc, #508]	; (800a13c <_printf_float+0x2e8>)
 8009f40:	4b7f      	ldr	r3, [pc, #508]	; (800a140 <_printf_float+0x2ec>)
 8009f42:	e7d1      	b.n	8009ee8 <_printf_float+0x94>
 8009f44:	6863      	ldr	r3, [r4, #4]
 8009f46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009f4a:	9206      	str	r2, [sp, #24]
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	d13f      	bne.n	8009fd0 <_printf_float+0x17c>
 8009f50:	2306      	movs	r3, #6
 8009f52:	6063      	str	r3, [r4, #4]
 8009f54:	9b05      	ldr	r3, [sp, #20]
 8009f56:	6861      	ldr	r1, [r4, #4]
 8009f58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9303      	str	r3, [sp, #12]
 8009f60:	ab0a      	add	r3, sp, #40	; 0x28
 8009f62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009f66:	ab09      	add	r3, sp, #36	; 0x24
 8009f68:	ec49 8b10 	vmov	d0, r8, r9
 8009f6c:	9300      	str	r3, [sp, #0]
 8009f6e:	6022      	str	r2, [r4, #0]
 8009f70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f74:	4628      	mov	r0, r5
 8009f76:	f7ff fecd 	bl	8009d14 <__cvt>
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f7e:	2b47      	cmp	r3, #71	; 0x47
 8009f80:	4680      	mov	r8, r0
 8009f82:	d108      	bne.n	8009f96 <_printf_float+0x142>
 8009f84:	1cc8      	adds	r0, r1, #3
 8009f86:	db02      	blt.n	8009f8e <_printf_float+0x13a>
 8009f88:	6863      	ldr	r3, [r4, #4]
 8009f8a:	4299      	cmp	r1, r3
 8009f8c:	dd41      	ble.n	800a012 <_printf_float+0x1be>
 8009f8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f92:	fa5f fb8b 	uxtb.w	fp, fp
 8009f96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f9a:	d820      	bhi.n	8009fde <_printf_float+0x18a>
 8009f9c:	3901      	subs	r1, #1
 8009f9e:	465a      	mov	r2, fp
 8009fa0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fa4:	9109      	str	r1, [sp, #36]	; 0x24
 8009fa6:	f7ff ff17 	bl	8009dd8 <__exponent>
 8009faa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fac:	1813      	adds	r3, r2, r0
 8009fae:	2a01      	cmp	r2, #1
 8009fb0:	4681      	mov	r9, r0
 8009fb2:	6123      	str	r3, [r4, #16]
 8009fb4:	dc02      	bgt.n	8009fbc <_printf_float+0x168>
 8009fb6:	6822      	ldr	r2, [r4, #0]
 8009fb8:	07d2      	lsls	r2, r2, #31
 8009fba:	d501      	bpl.n	8009fc0 <_printf_float+0x16c>
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	6123      	str	r3, [r4, #16]
 8009fc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d09c      	beq.n	8009f02 <_printf_float+0xae>
 8009fc8:	232d      	movs	r3, #45	; 0x2d
 8009fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fce:	e798      	b.n	8009f02 <_printf_float+0xae>
 8009fd0:	9a06      	ldr	r2, [sp, #24]
 8009fd2:	2a47      	cmp	r2, #71	; 0x47
 8009fd4:	d1be      	bne.n	8009f54 <_printf_float+0x100>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1bc      	bne.n	8009f54 <_printf_float+0x100>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e7b9      	b.n	8009f52 <_printf_float+0xfe>
 8009fde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009fe2:	d118      	bne.n	800a016 <_printf_float+0x1c2>
 8009fe4:	2900      	cmp	r1, #0
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	dd0b      	ble.n	800a002 <_printf_float+0x1ae>
 8009fea:	6121      	str	r1, [r4, #16]
 8009fec:	b913      	cbnz	r3, 8009ff4 <_printf_float+0x1a0>
 8009fee:	6822      	ldr	r2, [r4, #0]
 8009ff0:	07d0      	lsls	r0, r2, #31
 8009ff2:	d502      	bpl.n	8009ffa <_printf_float+0x1a6>
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	440b      	add	r3, r1
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ffc:	f04f 0900 	mov.w	r9, #0
 800a000:	e7de      	b.n	8009fc0 <_printf_float+0x16c>
 800a002:	b913      	cbnz	r3, 800a00a <_printf_float+0x1b6>
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	07d2      	lsls	r2, r2, #31
 800a008:	d501      	bpl.n	800a00e <_printf_float+0x1ba>
 800a00a:	3302      	adds	r3, #2
 800a00c:	e7f4      	b.n	8009ff8 <_printf_float+0x1a4>
 800a00e:	2301      	movs	r3, #1
 800a010:	e7f2      	b.n	8009ff8 <_printf_float+0x1a4>
 800a012:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a018:	4299      	cmp	r1, r3
 800a01a:	db05      	blt.n	800a028 <_printf_float+0x1d4>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	6121      	str	r1, [r4, #16]
 800a020:	07d8      	lsls	r0, r3, #31
 800a022:	d5ea      	bpl.n	8009ffa <_printf_float+0x1a6>
 800a024:	1c4b      	adds	r3, r1, #1
 800a026:	e7e7      	b.n	8009ff8 <_printf_float+0x1a4>
 800a028:	2900      	cmp	r1, #0
 800a02a:	bfd4      	ite	le
 800a02c:	f1c1 0202 	rsble	r2, r1, #2
 800a030:	2201      	movgt	r2, #1
 800a032:	4413      	add	r3, r2
 800a034:	e7e0      	b.n	8009ff8 <_printf_float+0x1a4>
 800a036:	6823      	ldr	r3, [r4, #0]
 800a038:	055a      	lsls	r2, r3, #21
 800a03a:	d407      	bmi.n	800a04c <_printf_float+0x1f8>
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	4642      	mov	r2, r8
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	47b8      	blx	r7
 800a046:	3001      	adds	r0, #1
 800a048:	d12c      	bne.n	800a0a4 <_printf_float+0x250>
 800a04a:	e764      	b.n	8009f16 <_printf_float+0xc2>
 800a04c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a050:	f240 80e0 	bls.w	800a214 <_printf_float+0x3c0>
 800a054:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a058:	2200      	movs	r2, #0
 800a05a:	2300      	movs	r3, #0
 800a05c:	f7f6 fd3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a060:	2800      	cmp	r0, #0
 800a062:	d034      	beq.n	800a0ce <_printf_float+0x27a>
 800a064:	4a37      	ldr	r2, [pc, #220]	; (800a144 <_printf_float+0x2f0>)
 800a066:	2301      	movs	r3, #1
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f af51 	beq.w	8009f16 <_printf_float+0xc2>
 800a074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a078:	429a      	cmp	r2, r3
 800a07a:	db02      	blt.n	800a082 <_printf_float+0x22e>
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	07d8      	lsls	r0, r3, #31
 800a080:	d510      	bpl.n	800a0a4 <_printf_float+0x250>
 800a082:	ee18 3a10 	vmov	r3, s16
 800a086:	4652      	mov	r2, sl
 800a088:	4631      	mov	r1, r6
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b8      	blx	r7
 800a08e:	3001      	adds	r0, #1
 800a090:	f43f af41 	beq.w	8009f16 <_printf_float+0xc2>
 800a094:	f04f 0800 	mov.w	r8, #0
 800a098:	f104 091a 	add.w	r9, r4, #26
 800a09c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	4543      	cmp	r3, r8
 800a0a2:	dc09      	bgt.n	800a0b8 <_printf_float+0x264>
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	079b      	lsls	r3, r3, #30
 800a0a8:	f100 8105 	bmi.w	800a2b6 <_printf_float+0x462>
 800a0ac:	68e0      	ldr	r0, [r4, #12]
 800a0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0b0:	4298      	cmp	r0, r3
 800a0b2:	bfb8      	it	lt
 800a0b4:	4618      	movlt	r0, r3
 800a0b6:	e730      	b.n	8009f1a <_printf_float+0xc6>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	464a      	mov	r2, r9
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	f43f af27 	beq.w	8009f16 <_printf_float+0xc2>
 800a0c8:	f108 0801 	add.w	r8, r8, #1
 800a0cc:	e7e6      	b.n	800a09c <_printf_float+0x248>
 800a0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dc39      	bgt.n	800a148 <_printf_float+0x2f4>
 800a0d4:	4a1b      	ldr	r2, [pc, #108]	; (800a144 <_printf_float+0x2f0>)
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4628      	mov	r0, r5
 800a0dc:	47b8      	blx	r7
 800a0de:	3001      	adds	r0, #1
 800a0e0:	f43f af19 	beq.w	8009f16 <_printf_float+0xc2>
 800a0e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	d102      	bne.n	800a0f2 <_printf_float+0x29e>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	07d9      	lsls	r1, r3, #31
 800a0f0:	d5d8      	bpl.n	800a0a4 <_printf_float+0x250>
 800a0f2:	ee18 3a10 	vmov	r3, s16
 800a0f6:	4652      	mov	r2, sl
 800a0f8:	4631      	mov	r1, r6
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	47b8      	blx	r7
 800a0fe:	3001      	adds	r0, #1
 800a100:	f43f af09 	beq.w	8009f16 <_printf_float+0xc2>
 800a104:	f04f 0900 	mov.w	r9, #0
 800a108:	f104 0a1a 	add.w	sl, r4, #26
 800a10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10e:	425b      	negs	r3, r3
 800a110:	454b      	cmp	r3, r9
 800a112:	dc01      	bgt.n	800a118 <_printf_float+0x2c4>
 800a114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a116:	e792      	b.n	800a03e <_printf_float+0x1ea>
 800a118:	2301      	movs	r3, #1
 800a11a:	4652      	mov	r2, sl
 800a11c:	4631      	mov	r1, r6
 800a11e:	4628      	mov	r0, r5
 800a120:	47b8      	blx	r7
 800a122:	3001      	adds	r0, #1
 800a124:	f43f aef7 	beq.w	8009f16 <_printf_float+0xc2>
 800a128:	f109 0901 	add.w	r9, r9, #1
 800a12c:	e7ee      	b.n	800a10c <_printf_float+0x2b8>
 800a12e:	bf00      	nop
 800a130:	7fefffff 	.word	0x7fefffff
 800a134:	0800c904 	.word	0x0800c904
 800a138:	0800c908 	.word	0x0800c908
 800a13c:	0800c910 	.word	0x0800c910
 800a140:	0800c90c 	.word	0x0800c90c
 800a144:	0800c914 	.word	0x0800c914
 800a148:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a14a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a14c:	429a      	cmp	r2, r3
 800a14e:	bfa8      	it	ge
 800a150:	461a      	movge	r2, r3
 800a152:	2a00      	cmp	r2, #0
 800a154:	4691      	mov	r9, r2
 800a156:	dc37      	bgt.n	800a1c8 <_printf_float+0x374>
 800a158:	f04f 0b00 	mov.w	fp, #0
 800a15c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a160:	f104 021a 	add.w	r2, r4, #26
 800a164:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a166:	9305      	str	r3, [sp, #20]
 800a168:	eba3 0309 	sub.w	r3, r3, r9
 800a16c:	455b      	cmp	r3, fp
 800a16e:	dc33      	bgt.n	800a1d8 <_printf_float+0x384>
 800a170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a174:	429a      	cmp	r2, r3
 800a176:	db3b      	blt.n	800a1f0 <_printf_float+0x39c>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	07da      	lsls	r2, r3, #31
 800a17c:	d438      	bmi.n	800a1f0 <_printf_float+0x39c>
 800a17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a180:	9a05      	ldr	r2, [sp, #20]
 800a182:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a184:	1a9a      	subs	r2, r3, r2
 800a186:	eba3 0901 	sub.w	r9, r3, r1
 800a18a:	4591      	cmp	r9, r2
 800a18c:	bfa8      	it	ge
 800a18e:	4691      	movge	r9, r2
 800a190:	f1b9 0f00 	cmp.w	r9, #0
 800a194:	dc35      	bgt.n	800a202 <_printf_float+0x3ae>
 800a196:	f04f 0800 	mov.w	r8, #0
 800a19a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a19e:	f104 0a1a 	add.w	sl, r4, #26
 800a1a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1a6:	1a9b      	subs	r3, r3, r2
 800a1a8:	eba3 0309 	sub.w	r3, r3, r9
 800a1ac:	4543      	cmp	r3, r8
 800a1ae:	f77f af79 	ble.w	800a0a4 <_printf_float+0x250>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	4652      	mov	r2, sl
 800a1b6:	4631      	mov	r1, r6
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	47b8      	blx	r7
 800a1bc:	3001      	adds	r0, #1
 800a1be:	f43f aeaa 	beq.w	8009f16 <_printf_float+0xc2>
 800a1c2:	f108 0801 	add.w	r8, r8, #1
 800a1c6:	e7ec      	b.n	800a1a2 <_printf_float+0x34e>
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b8      	blx	r7
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	d1c0      	bne.n	800a158 <_printf_float+0x304>
 800a1d6:	e69e      	b.n	8009f16 <_printf_float+0xc2>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4628      	mov	r0, r5
 800a1de:	9205      	str	r2, [sp, #20]
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	f43f ae97 	beq.w	8009f16 <_printf_float+0xc2>
 800a1e8:	9a05      	ldr	r2, [sp, #20]
 800a1ea:	f10b 0b01 	add.w	fp, fp, #1
 800a1ee:	e7b9      	b.n	800a164 <_printf_float+0x310>
 800a1f0:	ee18 3a10 	vmov	r3, s16
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	47b8      	blx	r7
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d1be      	bne.n	800a17e <_printf_float+0x32a>
 800a200:	e689      	b.n	8009f16 <_printf_float+0xc2>
 800a202:	9a05      	ldr	r2, [sp, #20]
 800a204:	464b      	mov	r3, r9
 800a206:	4442      	add	r2, r8
 800a208:	4631      	mov	r1, r6
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	d1c1      	bne.n	800a196 <_printf_float+0x342>
 800a212:	e680      	b.n	8009f16 <_printf_float+0xc2>
 800a214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a216:	2a01      	cmp	r2, #1
 800a218:	dc01      	bgt.n	800a21e <_printf_float+0x3ca>
 800a21a:	07db      	lsls	r3, r3, #31
 800a21c:	d538      	bpl.n	800a290 <_printf_float+0x43c>
 800a21e:	2301      	movs	r3, #1
 800a220:	4642      	mov	r2, r8
 800a222:	4631      	mov	r1, r6
 800a224:	4628      	mov	r0, r5
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	f43f ae74 	beq.w	8009f16 <_printf_float+0xc2>
 800a22e:	ee18 3a10 	vmov	r3, s16
 800a232:	4652      	mov	r2, sl
 800a234:	4631      	mov	r1, r6
 800a236:	4628      	mov	r0, r5
 800a238:	47b8      	blx	r7
 800a23a:	3001      	adds	r0, #1
 800a23c:	f43f ae6b 	beq.w	8009f16 <_printf_float+0xc2>
 800a240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a244:	2200      	movs	r2, #0
 800a246:	2300      	movs	r3, #0
 800a248:	f7f6 fc46 	bl	8000ad8 <__aeabi_dcmpeq>
 800a24c:	b9d8      	cbnz	r0, 800a286 <_printf_float+0x432>
 800a24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a250:	f108 0201 	add.w	r2, r8, #1
 800a254:	3b01      	subs	r3, #1
 800a256:	4631      	mov	r1, r6
 800a258:	4628      	mov	r0, r5
 800a25a:	47b8      	blx	r7
 800a25c:	3001      	adds	r0, #1
 800a25e:	d10e      	bne.n	800a27e <_printf_float+0x42a>
 800a260:	e659      	b.n	8009f16 <_printf_float+0xc2>
 800a262:	2301      	movs	r3, #1
 800a264:	4652      	mov	r2, sl
 800a266:	4631      	mov	r1, r6
 800a268:	4628      	mov	r0, r5
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f ae52 	beq.w	8009f16 <_printf_float+0xc2>
 800a272:	f108 0801 	add.w	r8, r8, #1
 800a276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a278:	3b01      	subs	r3, #1
 800a27a:	4543      	cmp	r3, r8
 800a27c:	dcf1      	bgt.n	800a262 <_printf_float+0x40e>
 800a27e:	464b      	mov	r3, r9
 800a280:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a284:	e6dc      	b.n	800a040 <_printf_float+0x1ec>
 800a286:	f04f 0800 	mov.w	r8, #0
 800a28a:	f104 0a1a 	add.w	sl, r4, #26
 800a28e:	e7f2      	b.n	800a276 <_printf_float+0x422>
 800a290:	2301      	movs	r3, #1
 800a292:	4642      	mov	r2, r8
 800a294:	e7df      	b.n	800a256 <_printf_float+0x402>
 800a296:	2301      	movs	r3, #1
 800a298:	464a      	mov	r2, r9
 800a29a:	4631      	mov	r1, r6
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b8      	blx	r7
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f43f ae38 	beq.w	8009f16 <_printf_float+0xc2>
 800a2a6:	f108 0801 	add.w	r8, r8, #1
 800a2aa:	68e3      	ldr	r3, [r4, #12]
 800a2ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2ae:	1a5b      	subs	r3, r3, r1
 800a2b0:	4543      	cmp	r3, r8
 800a2b2:	dcf0      	bgt.n	800a296 <_printf_float+0x442>
 800a2b4:	e6fa      	b.n	800a0ac <_printf_float+0x258>
 800a2b6:	f04f 0800 	mov.w	r8, #0
 800a2ba:	f104 0919 	add.w	r9, r4, #25
 800a2be:	e7f4      	b.n	800a2aa <_printf_float+0x456>

0800a2c0 <_printf_common>:
 800a2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c4:	4616      	mov	r6, r2
 800a2c6:	4699      	mov	r9, r3
 800a2c8:	688a      	ldr	r2, [r1, #8]
 800a2ca:	690b      	ldr	r3, [r1, #16]
 800a2cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	bfb8      	it	lt
 800a2d4:	4613      	movlt	r3, r2
 800a2d6:	6033      	str	r3, [r6, #0]
 800a2d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2dc:	4607      	mov	r7, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	b10a      	cbz	r2, 800a2e6 <_printf_common+0x26>
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	6033      	str	r3, [r6, #0]
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	0699      	lsls	r1, r3, #26
 800a2ea:	bf42      	ittt	mi
 800a2ec:	6833      	ldrmi	r3, [r6, #0]
 800a2ee:	3302      	addmi	r3, #2
 800a2f0:	6033      	strmi	r3, [r6, #0]
 800a2f2:	6825      	ldr	r5, [r4, #0]
 800a2f4:	f015 0506 	ands.w	r5, r5, #6
 800a2f8:	d106      	bne.n	800a308 <_printf_common+0x48>
 800a2fa:	f104 0a19 	add.w	sl, r4, #25
 800a2fe:	68e3      	ldr	r3, [r4, #12]
 800a300:	6832      	ldr	r2, [r6, #0]
 800a302:	1a9b      	subs	r3, r3, r2
 800a304:	42ab      	cmp	r3, r5
 800a306:	dc26      	bgt.n	800a356 <_printf_common+0x96>
 800a308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a30c:	1e13      	subs	r3, r2, #0
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	bf18      	it	ne
 800a312:	2301      	movne	r3, #1
 800a314:	0692      	lsls	r2, r2, #26
 800a316:	d42b      	bmi.n	800a370 <_printf_common+0xb0>
 800a318:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a31c:	4649      	mov	r1, r9
 800a31e:	4638      	mov	r0, r7
 800a320:	47c0      	blx	r8
 800a322:	3001      	adds	r0, #1
 800a324:	d01e      	beq.n	800a364 <_printf_common+0xa4>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	68e5      	ldr	r5, [r4, #12]
 800a32a:	6832      	ldr	r2, [r6, #0]
 800a32c:	f003 0306 	and.w	r3, r3, #6
 800a330:	2b04      	cmp	r3, #4
 800a332:	bf08      	it	eq
 800a334:	1aad      	subeq	r5, r5, r2
 800a336:	68a3      	ldr	r3, [r4, #8]
 800a338:	6922      	ldr	r2, [r4, #16]
 800a33a:	bf0c      	ite	eq
 800a33c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a340:	2500      	movne	r5, #0
 800a342:	4293      	cmp	r3, r2
 800a344:	bfc4      	itt	gt
 800a346:	1a9b      	subgt	r3, r3, r2
 800a348:	18ed      	addgt	r5, r5, r3
 800a34a:	2600      	movs	r6, #0
 800a34c:	341a      	adds	r4, #26
 800a34e:	42b5      	cmp	r5, r6
 800a350:	d11a      	bne.n	800a388 <_printf_common+0xc8>
 800a352:	2000      	movs	r0, #0
 800a354:	e008      	b.n	800a368 <_printf_common+0xa8>
 800a356:	2301      	movs	r3, #1
 800a358:	4652      	mov	r2, sl
 800a35a:	4649      	mov	r1, r9
 800a35c:	4638      	mov	r0, r7
 800a35e:	47c0      	blx	r8
 800a360:	3001      	adds	r0, #1
 800a362:	d103      	bne.n	800a36c <_printf_common+0xac>
 800a364:	f04f 30ff 	mov.w	r0, #4294967295
 800a368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36c:	3501      	adds	r5, #1
 800a36e:	e7c6      	b.n	800a2fe <_printf_common+0x3e>
 800a370:	18e1      	adds	r1, r4, r3
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	2030      	movs	r0, #48	; 0x30
 800a376:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a37a:	4422      	add	r2, r4
 800a37c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a380:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a384:	3302      	adds	r3, #2
 800a386:	e7c7      	b.n	800a318 <_printf_common+0x58>
 800a388:	2301      	movs	r3, #1
 800a38a:	4622      	mov	r2, r4
 800a38c:	4649      	mov	r1, r9
 800a38e:	4638      	mov	r0, r7
 800a390:	47c0      	blx	r8
 800a392:	3001      	adds	r0, #1
 800a394:	d0e6      	beq.n	800a364 <_printf_common+0xa4>
 800a396:	3601      	adds	r6, #1
 800a398:	e7d9      	b.n	800a34e <_printf_common+0x8e>
	...

0800a39c <_printf_i>:
 800a39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a0:	7e0f      	ldrb	r7, [r1, #24]
 800a3a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3a4:	2f78      	cmp	r7, #120	; 0x78
 800a3a6:	4691      	mov	r9, r2
 800a3a8:	4680      	mov	r8, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	469a      	mov	sl, r3
 800a3ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3b2:	d807      	bhi.n	800a3c4 <_printf_i+0x28>
 800a3b4:	2f62      	cmp	r7, #98	; 0x62
 800a3b6:	d80a      	bhi.n	800a3ce <_printf_i+0x32>
 800a3b8:	2f00      	cmp	r7, #0
 800a3ba:	f000 80d8 	beq.w	800a56e <_printf_i+0x1d2>
 800a3be:	2f58      	cmp	r7, #88	; 0x58
 800a3c0:	f000 80a3 	beq.w	800a50a <_printf_i+0x16e>
 800a3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3cc:	e03a      	b.n	800a444 <_printf_i+0xa8>
 800a3ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3d2:	2b15      	cmp	r3, #21
 800a3d4:	d8f6      	bhi.n	800a3c4 <_printf_i+0x28>
 800a3d6:	a101      	add	r1, pc, #4	; (adr r1, 800a3dc <_printf_i+0x40>)
 800a3d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3dc:	0800a435 	.word	0x0800a435
 800a3e0:	0800a449 	.word	0x0800a449
 800a3e4:	0800a3c5 	.word	0x0800a3c5
 800a3e8:	0800a3c5 	.word	0x0800a3c5
 800a3ec:	0800a3c5 	.word	0x0800a3c5
 800a3f0:	0800a3c5 	.word	0x0800a3c5
 800a3f4:	0800a449 	.word	0x0800a449
 800a3f8:	0800a3c5 	.word	0x0800a3c5
 800a3fc:	0800a3c5 	.word	0x0800a3c5
 800a400:	0800a3c5 	.word	0x0800a3c5
 800a404:	0800a3c5 	.word	0x0800a3c5
 800a408:	0800a555 	.word	0x0800a555
 800a40c:	0800a479 	.word	0x0800a479
 800a410:	0800a537 	.word	0x0800a537
 800a414:	0800a3c5 	.word	0x0800a3c5
 800a418:	0800a3c5 	.word	0x0800a3c5
 800a41c:	0800a577 	.word	0x0800a577
 800a420:	0800a3c5 	.word	0x0800a3c5
 800a424:	0800a479 	.word	0x0800a479
 800a428:	0800a3c5 	.word	0x0800a3c5
 800a42c:	0800a3c5 	.word	0x0800a3c5
 800a430:	0800a53f 	.word	0x0800a53f
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	1d1a      	adds	r2, r3, #4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	602a      	str	r2, [r5, #0]
 800a43c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a440:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a444:	2301      	movs	r3, #1
 800a446:	e0a3      	b.n	800a590 <_printf_i+0x1f4>
 800a448:	6820      	ldr	r0, [r4, #0]
 800a44a:	6829      	ldr	r1, [r5, #0]
 800a44c:	0606      	lsls	r6, r0, #24
 800a44e:	f101 0304 	add.w	r3, r1, #4
 800a452:	d50a      	bpl.n	800a46a <_printf_i+0xce>
 800a454:	680e      	ldr	r6, [r1, #0]
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	2e00      	cmp	r6, #0
 800a45a:	da03      	bge.n	800a464 <_printf_i+0xc8>
 800a45c:	232d      	movs	r3, #45	; 0x2d
 800a45e:	4276      	negs	r6, r6
 800a460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a464:	485e      	ldr	r0, [pc, #376]	; (800a5e0 <_printf_i+0x244>)
 800a466:	230a      	movs	r3, #10
 800a468:	e019      	b.n	800a49e <_printf_i+0x102>
 800a46a:	680e      	ldr	r6, [r1, #0]
 800a46c:	602b      	str	r3, [r5, #0]
 800a46e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a472:	bf18      	it	ne
 800a474:	b236      	sxthne	r6, r6
 800a476:	e7ef      	b.n	800a458 <_printf_i+0xbc>
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	6820      	ldr	r0, [r4, #0]
 800a47c:	1d19      	adds	r1, r3, #4
 800a47e:	6029      	str	r1, [r5, #0]
 800a480:	0601      	lsls	r1, r0, #24
 800a482:	d501      	bpl.n	800a488 <_printf_i+0xec>
 800a484:	681e      	ldr	r6, [r3, #0]
 800a486:	e002      	b.n	800a48e <_printf_i+0xf2>
 800a488:	0646      	lsls	r6, r0, #25
 800a48a:	d5fb      	bpl.n	800a484 <_printf_i+0xe8>
 800a48c:	881e      	ldrh	r6, [r3, #0]
 800a48e:	4854      	ldr	r0, [pc, #336]	; (800a5e0 <_printf_i+0x244>)
 800a490:	2f6f      	cmp	r7, #111	; 0x6f
 800a492:	bf0c      	ite	eq
 800a494:	2308      	moveq	r3, #8
 800a496:	230a      	movne	r3, #10
 800a498:	2100      	movs	r1, #0
 800a49a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a49e:	6865      	ldr	r5, [r4, #4]
 800a4a0:	60a5      	str	r5, [r4, #8]
 800a4a2:	2d00      	cmp	r5, #0
 800a4a4:	bfa2      	ittt	ge
 800a4a6:	6821      	ldrge	r1, [r4, #0]
 800a4a8:	f021 0104 	bicge.w	r1, r1, #4
 800a4ac:	6021      	strge	r1, [r4, #0]
 800a4ae:	b90e      	cbnz	r6, 800a4b4 <_printf_i+0x118>
 800a4b0:	2d00      	cmp	r5, #0
 800a4b2:	d04d      	beq.n	800a550 <_printf_i+0x1b4>
 800a4b4:	4615      	mov	r5, r2
 800a4b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4ba:	fb03 6711 	mls	r7, r3, r1, r6
 800a4be:	5dc7      	ldrb	r7, [r0, r7]
 800a4c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4c4:	4637      	mov	r7, r6
 800a4c6:	42bb      	cmp	r3, r7
 800a4c8:	460e      	mov	r6, r1
 800a4ca:	d9f4      	bls.n	800a4b6 <_printf_i+0x11a>
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d10b      	bne.n	800a4e8 <_printf_i+0x14c>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	07de      	lsls	r6, r3, #31
 800a4d4:	d508      	bpl.n	800a4e8 <_printf_i+0x14c>
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	bfde      	ittt	le
 800a4de:	2330      	movle	r3, #48	; 0x30
 800a4e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4e8:	1b52      	subs	r2, r2, r5
 800a4ea:	6122      	str	r2, [r4, #16]
 800a4ec:	f8cd a000 	str.w	sl, [sp]
 800a4f0:	464b      	mov	r3, r9
 800a4f2:	aa03      	add	r2, sp, #12
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f7ff fee2 	bl	800a2c0 <_printf_common>
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d14c      	bne.n	800a59a <_printf_i+0x1fe>
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	b004      	add	sp, #16
 800a506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a50a:	4835      	ldr	r0, [pc, #212]	; (800a5e0 <_printf_i+0x244>)
 800a50c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a510:	6829      	ldr	r1, [r5, #0]
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	f851 6b04 	ldr.w	r6, [r1], #4
 800a518:	6029      	str	r1, [r5, #0]
 800a51a:	061d      	lsls	r5, r3, #24
 800a51c:	d514      	bpl.n	800a548 <_printf_i+0x1ac>
 800a51e:	07df      	lsls	r7, r3, #31
 800a520:	bf44      	itt	mi
 800a522:	f043 0320 	orrmi.w	r3, r3, #32
 800a526:	6023      	strmi	r3, [r4, #0]
 800a528:	b91e      	cbnz	r6, 800a532 <_printf_i+0x196>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	f023 0320 	bic.w	r3, r3, #32
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	2310      	movs	r3, #16
 800a534:	e7b0      	b.n	800a498 <_printf_i+0xfc>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	f043 0320 	orr.w	r3, r3, #32
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	2378      	movs	r3, #120	; 0x78
 800a540:	4828      	ldr	r0, [pc, #160]	; (800a5e4 <_printf_i+0x248>)
 800a542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a546:	e7e3      	b.n	800a510 <_printf_i+0x174>
 800a548:	0659      	lsls	r1, r3, #25
 800a54a:	bf48      	it	mi
 800a54c:	b2b6      	uxthmi	r6, r6
 800a54e:	e7e6      	b.n	800a51e <_printf_i+0x182>
 800a550:	4615      	mov	r5, r2
 800a552:	e7bb      	b.n	800a4cc <_printf_i+0x130>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	6826      	ldr	r6, [r4, #0]
 800a558:	6961      	ldr	r1, [r4, #20]
 800a55a:	1d18      	adds	r0, r3, #4
 800a55c:	6028      	str	r0, [r5, #0]
 800a55e:	0635      	lsls	r5, r6, #24
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	d501      	bpl.n	800a568 <_printf_i+0x1cc>
 800a564:	6019      	str	r1, [r3, #0]
 800a566:	e002      	b.n	800a56e <_printf_i+0x1d2>
 800a568:	0670      	lsls	r0, r6, #25
 800a56a:	d5fb      	bpl.n	800a564 <_printf_i+0x1c8>
 800a56c:	8019      	strh	r1, [r3, #0]
 800a56e:	2300      	movs	r3, #0
 800a570:	6123      	str	r3, [r4, #16]
 800a572:	4615      	mov	r5, r2
 800a574:	e7ba      	b.n	800a4ec <_printf_i+0x150>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	1d1a      	adds	r2, r3, #4
 800a57a:	602a      	str	r2, [r5, #0]
 800a57c:	681d      	ldr	r5, [r3, #0]
 800a57e:	6862      	ldr	r2, [r4, #4]
 800a580:	2100      	movs	r1, #0
 800a582:	4628      	mov	r0, r5
 800a584:	f7f5 fe34 	bl	80001f0 <memchr>
 800a588:	b108      	cbz	r0, 800a58e <_printf_i+0x1f2>
 800a58a:	1b40      	subs	r0, r0, r5
 800a58c:	6060      	str	r0, [r4, #4]
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	2300      	movs	r3, #0
 800a594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a598:	e7a8      	b.n	800a4ec <_printf_i+0x150>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4649      	mov	r1, r9
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	47d0      	blx	sl
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d0ab      	beq.n	800a500 <_printf_i+0x164>
 800a5a8:	6823      	ldr	r3, [r4, #0]
 800a5aa:	079b      	lsls	r3, r3, #30
 800a5ac:	d413      	bmi.n	800a5d6 <_printf_i+0x23a>
 800a5ae:	68e0      	ldr	r0, [r4, #12]
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	4298      	cmp	r0, r3
 800a5b4:	bfb8      	it	lt
 800a5b6:	4618      	movlt	r0, r3
 800a5b8:	e7a4      	b.n	800a504 <_printf_i+0x168>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4632      	mov	r2, r6
 800a5be:	4649      	mov	r1, r9
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	47d0      	blx	sl
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	d09b      	beq.n	800a500 <_printf_i+0x164>
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	68e3      	ldr	r3, [r4, #12]
 800a5cc:	9903      	ldr	r1, [sp, #12]
 800a5ce:	1a5b      	subs	r3, r3, r1
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	dcf2      	bgt.n	800a5ba <_printf_i+0x21e>
 800a5d4:	e7eb      	b.n	800a5ae <_printf_i+0x212>
 800a5d6:	2500      	movs	r5, #0
 800a5d8:	f104 0619 	add.w	r6, r4, #25
 800a5dc:	e7f5      	b.n	800a5ca <_printf_i+0x22e>
 800a5de:	bf00      	nop
 800a5e0:	0800c916 	.word	0x0800c916
 800a5e4:	0800c927 	.word	0x0800c927

0800a5e8 <iprintf>:
 800a5e8:	b40f      	push	{r0, r1, r2, r3}
 800a5ea:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <iprintf+0x2c>)
 800a5ec:	b513      	push	{r0, r1, r4, lr}
 800a5ee:	681c      	ldr	r4, [r3, #0]
 800a5f0:	b124      	cbz	r4, 800a5fc <iprintf+0x14>
 800a5f2:	69a3      	ldr	r3, [r4, #24]
 800a5f4:	b913      	cbnz	r3, 800a5fc <iprintf+0x14>
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f000 fef8 	bl	800b3ec <__sinit>
 800a5fc:	ab05      	add	r3, sp, #20
 800a5fe:	9a04      	ldr	r2, [sp, #16]
 800a600:	68a1      	ldr	r1, [r4, #8]
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	4620      	mov	r0, r4
 800a606:	f001 fc51 	bl	800beac <_vfiprintf_r>
 800a60a:	b002      	add	sp, #8
 800a60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a610:	b004      	add	sp, #16
 800a612:	4770      	bx	lr
 800a614:	20000100 	.word	0x20000100

0800a618 <putchar>:
 800a618:	4b09      	ldr	r3, [pc, #36]	; (800a640 <putchar+0x28>)
 800a61a:	b513      	push	{r0, r1, r4, lr}
 800a61c:	681c      	ldr	r4, [r3, #0]
 800a61e:	4601      	mov	r1, r0
 800a620:	b134      	cbz	r4, 800a630 <putchar+0x18>
 800a622:	69a3      	ldr	r3, [r4, #24]
 800a624:	b923      	cbnz	r3, 800a630 <putchar+0x18>
 800a626:	9001      	str	r0, [sp, #4]
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fedf 	bl	800b3ec <__sinit>
 800a62e:	9901      	ldr	r1, [sp, #4]
 800a630:	68a2      	ldr	r2, [r4, #8]
 800a632:	4620      	mov	r0, r4
 800a634:	b002      	add	sp, #8
 800a636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a63a:	f001 bd67 	b.w	800c10c <_putc_r>
 800a63e:	bf00      	nop
 800a640:	20000100 	.word	0x20000100

0800a644 <quorem>:
 800a644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a648:	6903      	ldr	r3, [r0, #16]
 800a64a:	690c      	ldr	r4, [r1, #16]
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	4607      	mov	r7, r0
 800a650:	f2c0 8081 	blt.w	800a756 <quorem+0x112>
 800a654:	3c01      	subs	r4, #1
 800a656:	f101 0814 	add.w	r8, r1, #20
 800a65a:	f100 0514 	add.w	r5, r0, #20
 800a65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a66c:	3301      	adds	r3, #1
 800a66e:	429a      	cmp	r2, r3
 800a670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a678:	fbb2 f6f3 	udiv	r6, r2, r3
 800a67c:	d331      	bcc.n	800a6e2 <quorem+0x9e>
 800a67e:	f04f 0e00 	mov.w	lr, #0
 800a682:	4640      	mov	r0, r8
 800a684:	46ac      	mov	ip, r5
 800a686:	46f2      	mov	sl, lr
 800a688:	f850 2b04 	ldr.w	r2, [r0], #4
 800a68c:	b293      	uxth	r3, r2
 800a68e:	fb06 e303 	mla	r3, r6, r3, lr
 800a692:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a696:	b29b      	uxth	r3, r3
 800a698:	ebaa 0303 	sub.w	r3, sl, r3
 800a69c:	f8dc a000 	ldr.w	sl, [ip]
 800a6a0:	0c12      	lsrs	r2, r2, #16
 800a6a2:	fa13 f38a 	uxtah	r3, r3, sl
 800a6a6:	fb06 e202 	mla	r2, r6, r2, lr
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	9b00      	ldr	r3, [sp, #0]
 800a6ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6b2:	b292      	uxth	r2, r2
 800a6b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6c0:	4581      	cmp	r9, r0
 800a6c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c6:	f84c 3b04 	str.w	r3, [ip], #4
 800a6ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6ce:	d2db      	bcs.n	800a688 <quorem+0x44>
 800a6d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6d4:	b92b      	cbnz	r3, 800a6e2 <quorem+0x9e>
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	3b04      	subs	r3, #4
 800a6da:	429d      	cmp	r5, r3
 800a6dc:	461a      	mov	r2, r3
 800a6de:	d32e      	bcc.n	800a73e <quorem+0xfa>
 800a6e0:	613c      	str	r4, [r7, #16]
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	f001 f9c0 	bl	800ba68 <__mcmp>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	db24      	blt.n	800a736 <quorem+0xf2>
 800a6ec:	3601      	adds	r6, #1
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f04f 0c00 	mov.w	ip, #0
 800a6f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6f8:	f8d0 e000 	ldr.w	lr, [r0]
 800a6fc:	b293      	uxth	r3, r2
 800a6fe:	ebac 0303 	sub.w	r3, ip, r3
 800a702:	0c12      	lsrs	r2, r2, #16
 800a704:	fa13 f38e 	uxtah	r3, r3, lr
 800a708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a70c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a710:	b29b      	uxth	r3, r3
 800a712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a716:	45c1      	cmp	r9, r8
 800a718:	f840 3b04 	str.w	r3, [r0], #4
 800a71c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a720:	d2e8      	bcs.n	800a6f4 <quorem+0xb0>
 800a722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a72a:	b922      	cbnz	r2, 800a736 <quorem+0xf2>
 800a72c:	3b04      	subs	r3, #4
 800a72e:	429d      	cmp	r5, r3
 800a730:	461a      	mov	r2, r3
 800a732:	d30a      	bcc.n	800a74a <quorem+0x106>
 800a734:	613c      	str	r4, [r7, #16]
 800a736:	4630      	mov	r0, r6
 800a738:	b003      	add	sp, #12
 800a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73e:	6812      	ldr	r2, [r2, #0]
 800a740:	3b04      	subs	r3, #4
 800a742:	2a00      	cmp	r2, #0
 800a744:	d1cc      	bne.n	800a6e0 <quorem+0x9c>
 800a746:	3c01      	subs	r4, #1
 800a748:	e7c7      	b.n	800a6da <quorem+0x96>
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	3b04      	subs	r3, #4
 800a74e:	2a00      	cmp	r2, #0
 800a750:	d1f0      	bne.n	800a734 <quorem+0xf0>
 800a752:	3c01      	subs	r4, #1
 800a754:	e7eb      	b.n	800a72e <quorem+0xea>
 800a756:	2000      	movs	r0, #0
 800a758:	e7ee      	b.n	800a738 <quorem+0xf4>
 800a75a:	0000      	movs	r0, r0
 800a75c:	0000      	movs	r0, r0
	...

0800a760 <_dtoa_r>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	ed2d 8b04 	vpush	{d8-d9}
 800a768:	ec57 6b10 	vmov	r6, r7, d0
 800a76c:	b093      	sub	sp, #76	; 0x4c
 800a76e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a774:	9106      	str	r1, [sp, #24]
 800a776:	ee10 aa10 	vmov	sl, s0
 800a77a:	4604      	mov	r4, r0
 800a77c:	9209      	str	r2, [sp, #36]	; 0x24
 800a77e:	930c      	str	r3, [sp, #48]	; 0x30
 800a780:	46bb      	mov	fp, r7
 800a782:	b975      	cbnz	r5, 800a7a2 <_dtoa_r+0x42>
 800a784:	2010      	movs	r0, #16
 800a786:	f000 fed7 	bl	800b538 <malloc>
 800a78a:	4602      	mov	r2, r0
 800a78c:	6260      	str	r0, [r4, #36]	; 0x24
 800a78e:	b920      	cbnz	r0, 800a79a <_dtoa_r+0x3a>
 800a790:	4ba7      	ldr	r3, [pc, #668]	; (800aa30 <_dtoa_r+0x2d0>)
 800a792:	21ea      	movs	r1, #234	; 0xea
 800a794:	48a7      	ldr	r0, [pc, #668]	; (800aa34 <_dtoa_r+0x2d4>)
 800a796:	f001 fe27 	bl	800c3e8 <__assert_func>
 800a79a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a79e:	6005      	str	r5, [r0, #0]
 800a7a0:	60c5      	str	r5, [r0, #12]
 800a7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a4:	6819      	ldr	r1, [r3, #0]
 800a7a6:	b151      	cbz	r1, 800a7be <_dtoa_r+0x5e>
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	604a      	str	r2, [r1, #4]
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	4093      	lsls	r3, r2
 800a7b0:	608b      	str	r3, [r1, #8]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 ff16 	bl	800b5e4 <_Bfree>
 800a7b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	1e3b      	subs	r3, r7, #0
 800a7c0:	bfaa      	itet	ge
 800a7c2:	2300      	movge	r3, #0
 800a7c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a7c8:	f8c8 3000 	strge.w	r3, [r8]
 800a7cc:	4b9a      	ldr	r3, [pc, #616]	; (800aa38 <_dtoa_r+0x2d8>)
 800a7ce:	bfbc      	itt	lt
 800a7d0:	2201      	movlt	r2, #1
 800a7d2:	f8c8 2000 	strlt.w	r2, [r8]
 800a7d6:	ea33 030b 	bics.w	r3, r3, fp
 800a7da:	d11b      	bne.n	800a814 <_dtoa_r+0xb4>
 800a7dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7e8:	4333      	orrs	r3, r6
 800a7ea:	f000 8592 	beq.w	800b312 <_dtoa_r+0xbb2>
 800a7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f0:	b963      	cbnz	r3, 800a80c <_dtoa_r+0xac>
 800a7f2:	4b92      	ldr	r3, [pc, #584]	; (800aa3c <_dtoa_r+0x2dc>)
 800a7f4:	e022      	b.n	800a83c <_dtoa_r+0xdc>
 800a7f6:	4b92      	ldr	r3, [pc, #584]	; (800aa40 <_dtoa_r+0x2e0>)
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7fe:	6013      	str	r3, [r2, #0]
 800a800:	9801      	ldr	r0, [sp, #4]
 800a802:	b013      	add	sp, #76	; 0x4c
 800a804:	ecbd 8b04 	vpop	{d8-d9}
 800a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80c:	4b8b      	ldr	r3, [pc, #556]	; (800aa3c <_dtoa_r+0x2dc>)
 800a80e:	9301      	str	r3, [sp, #4]
 800a810:	3303      	adds	r3, #3
 800a812:	e7f3      	b.n	800a7fc <_dtoa_r+0x9c>
 800a814:	2200      	movs	r2, #0
 800a816:	2300      	movs	r3, #0
 800a818:	4650      	mov	r0, sl
 800a81a:	4659      	mov	r1, fp
 800a81c:	f7f6 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a820:	ec4b ab19 	vmov	d9, sl, fp
 800a824:	4680      	mov	r8, r0
 800a826:	b158      	cbz	r0, 800a840 <_dtoa_r+0xe0>
 800a828:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a82a:	2301      	movs	r3, #1
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 856b 	beq.w	800b30c <_dtoa_r+0xbac>
 800a836:	4883      	ldr	r0, [pc, #524]	; (800aa44 <_dtoa_r+0x2e4>)
 800a838:	6018      	str	r0, [r3, #0]
 800a83a:	1e43      	subs	r3, r0, #1
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	e7df      	b.n	800a800 <_dtoa_r+0xa0>
 800a840:	ec4b ab10 	vmov	d0, sl, fp
 800a844:	aa10      	add	r2, sp, #64	; 0x40
 800a846:	a911      	add	r1, sp, #68	; 0x44
 800a848:	4620      	mov	r0, r4
 800a84a:	f001 f9b3 	bl	800bbb4 <__d2b>
 800a84e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a852:	ee08 0a10 	vmov	s16, r0
 800a856:	2d00      	cmp	r5, #0
 800a858:	f000 8084 	beq.w	800a964 <_dtoa_r+0x204>
 800a85c:	ee19 3a90 	vmov	r3, s19
 800a860:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a864:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a868:	4656      	mov	r6, sl
 800a86a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a872:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a876:	4b74      	ldr	r3, [pc, #464]	; (800aa48 <_dtoa_r+0x2e8>)
 800a878:	2200      	movs	r2, #0
 800a87a:	4630      	mov	r0, r6
 800a87c:	4639      	mov	r1, r7
 800a87e:	f7f5 fd0b 	bl	8000298 <__aeabi_dsub>
 800a882:	a365      	add	r3, pc, #404	; (adr r3, 800aa18 <_dtoa_r+0x2b8>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 febe 	bl	8000608 <__aeabi_dmul>
 800a88c:	a364      	add	r3, pc, #400	; (adr r3, 800aa20 <_dtoa_r+0x2c0>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	f7f5 fd03 	bl	800029c <__adddf3>
 800a896:	4606      	mov	r6, r0
 800a898:	4628      	mov	r0, r5
 800a89a:	460f      	mov	r7, r1
 800a89c:	f7f5 fe4a 	bl	8000534 <__aeabi_i2d>
 800a8a0:	a361      	add	r3, pc, #388	; (adr r3, 800aa28 <_dtoa_r+0x2c8>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 feaf 	bl	8000608 <__aeabi_dmul>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 fcf3 	bl	800029c <__adddf3>
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	460f      	mov	r7, r1
 800a8ba:	f7f6 f955 	bl	8000b68 <__aeabi_d2iz>
 800a8be:	2200      	movs	r2, #0
 800a8c0:	9000      	str	r0, [sp, #0]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	f7f6 f910 	bl	8000aec <__aeabi_dcmplt>
 800a8cc:	b150      	cbz	r0, 800a8e4 <_dtoa_r+0x184>
 800a8ce:	9800      	ldr	r0, [sp, #0]
 800a8d0:	f7f5 fe30 	bl	8000534 <__aeabi_i2d>
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	f7f6 f8fe 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8dc:	b910      	cbnz	r0, 800a8e4 <_dtoa_r+0x184>
 800a8de:	9b00      	ldr	r3, [sp, #0]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	9b00      	ldr	r3, [sp, #0]
 800a8e6:	2b16      	cmp	r3, #22
 800a8e8:	d85a      	bhi.n	800a9a0 <_dtoa_r+0x240>
 800a8ea:	9a00      	ldr	r2, [sp, #0]
 800a8ec:	4b57      	ldr	r3, [pc, #348]	; (800aa4c <_dtoa_r+0x2ec>)
 800a8ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	ec51 0b19 	vmov	r0, r1, d9
 800a8fa:	f7f6 f8f7 	bl	8000aec <__aeabi_dcmplt>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d050      	beq.n	800a9a4 <_dtoa_r+0x244>
 800a902:	9b00      	ldr	r3, [sp, #0]
 800a904:	3b01      	subs	r3, #1
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	2300      	movs	r3, #0
 800a90a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a90c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a90e:	1b5d      	subs	r5, r3, r5
 800a910:	1e6b      	subs	r3, r5, #1
 800a912:	9305      	str	r3, [sp, #20]
 800a914:	bf45      	ittet	mi
 800a916:	f1c5 0301 	rsbmi	r3, r5, #1
 800a91a:	9304      	strmi	r3, [sp, #16]
 800a91c:	2300      	movpl	r3, #0
 800a91e:	2300      	movmi	r3, #0
 800a920:	bf4c      	ite	mi
 800a922:	9305      	strmi	r3, [sp, #20]
 800a924:	9304      	strpl	r3, [sp, #16]
 800a926:	9b00      	ldr	r3, [sp, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	db3d      	blt.n	800a9a8 <_dtoa_r+0x248>
 800a92c:	9b05      	ldr	r3, [sp, #20]
 800a92e:	9a00      	ldr	r2, [sp, #0]
 800a930:	920a      	str	r2, [sp, #40]	; 0x28
 800a932:	4413      	add	r3, r2
 800a934:	9305      	str	r3, [sp, #20]
 800a936:	2300      	movs	r3, #0
 800a938:	9307      	str	r3, [sp, #28]
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	f200 8089 	bhi.w	800aa54 <_dtoa_r+0x2f4>
 800a942:	2b05      	cmp	r3, #5
 800a944:	bfc4      	itt	gt
 800a946:	3b04      	subgt	r3, #4
 800a948:	9306      	strgt	r3, [sp, #24]
 800a94a:	9b06      	ldr	r3, [sp, #24]
 800a94c:	f1a3 0302 	sub.w	r3, r3, #2
 800a950:	bfcc      	ite	gt
 800a952:	2500      	movgt	r5, #0
 800a954:	2501      	movle	r5, #1
 800a956:	2b03      	cmp	r3, #3
 800a958:	f200 8087 	bhi.w	800aa6a <_dtoa_r+0x30a>
 800a95c:	e8df f003 	tbb	[pc, r3]
 800a960:	59383a2d 	.word	0x59383a2d
 800a964:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a968:	441d      	add	r5, r3
 800a96a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a96e:	2b20      	cmp	r3, #32
 800a970:	bfc1      	itttt	gt
 800a972:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a976:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a97a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a97e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a982:	bfda      	itte	le
 800a984:	f1c3 0320 	rsble	r3, r3, #32
 800a988:	fa06 f003 	lslle.w	r0, r6, r3
 800a98c:	4318      	orrgt	r0, r3
 800a98e:	f7f5 fdc1 	bl	8000514 <__aeabi_ui2d>
 800a992:	2301      	movs	r3, #1
 800a994:	4606      	mov	r6, r0
 800a996:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a99a:	3d01      	subs	r5, #1
 800a99c:	930e      	str	r3, [sp, #56]	; 0x38
 800a99e:	e76a      	b.n	800a876 <_dtoa_r+0x116>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e7b2      	b.n	800a90a <_dtoa_r+0x1aa>
 800a9a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9a6:	e7b1      	b.n	800a90c <_dtoa_r+0x1ac>
 800a9a8:	9b04      	ldr	r3, [sp, #16]
 800a9aa:	9a00      	ldr	r2, [sp, #0]
 800a9ac:	1a9b      	subs	r3, r3, r2
 800a9ae:	9304      	str	r3, [sp, #16]
 800a9b0:	4253      	negs	r3, r2
 800a9b2:	9307      	str	r3, [sp, #28]
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9b8:	e7bf      	b.n	800a93a <_dtoa_r+0x1da>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	9308      	str	r3, [sp, #32]
 800a9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc55      	bgt.n	800aa70 <_dtoa_r+0x310>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a9ce:	e00c      	b.n	800a9ea <_dtoa_r+0x28a>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e7f3      	b.n	800a9bc <_dtoa_r+0x25c>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d8:	9308      	str	r3, [sp, #32]
 800a9da:	9b00      	ldr	r3, [sp, #0]
 800a9dc:	4413      	add	r3, r2
 800a9de:	9302      	str	r3, [sp, #8]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	9303      	str	r3, [sp, #12]
 800a9e6:	bfb8      	it	lt
 800a9e8:	2301      	movlt	r3, #1
 800a9ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	6042      	str	r2, [r0, #4]
 800a9f0:	2204      	movs	r2, #4
 800a9f2:	f102 0614 	add.w	r6, r2, #20
 800a9f6:	429e      	cmp	r6, r3
 800a9f8:	6841      	ldr	r1, [r0, #4]
 800a9fa:	d93d      	bls.n	800aa78 <_dtoa_r+0x318>
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 fdb1 	bl	800b564 <_Balloc>
 800aa02:	9001      	str	r0, [sp, #4]
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d13b      	bne.n	800aa80 <_dtoa_r+0x320>
 800aa08:	4b11      	ldr	r3, [pc, #68]	; (800aa50 <_dtoa_r+0x2f0>)
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa10:	e6c0      	b.n	800a794 <_dtoa_r+0x34>
 800aa12:	2301      	movs	r3, #1
 800aa14:	e7df      	b.n	800a9d6 <_dtoa_r+0x276>
 800aa16:	bf00      	nop
 800aa18:	636f4361 	.word	0x636f4361
 800aa1c:	3fd287a7 	.word	0x3fd287a7
 800aa20:	8b60c8b3 	.word	0x8b60c8b3
 800aa24:	3fc68a28 	.word	0x3fc68a28
 800aa28:	509f79fb 	.word	0x509f79fb
 800aa2c:	3fd34413 	.word	0x3fd34413
 800aa30:	0800c945 	.word	0x0800c945
 800aa34:	0800c95c 	.word	0x0800c95c
 800aa38:	7ff00000 	.word	0x7ff00000
 800aa3c:	0800c941 	.word	0x0800c941
 800aa40:	0800c938 	.word	0x0800c938
 800aa44:	0800c915 	.word	0x0800c915
 800aa48:	3ff80000 	.word	0x3ff80000
 800aa4c:	0800cab0 	.word	0x0800cab0
 800aa50:	0800c9b7 	.word	0x0800c9b7
 800aa54:	2501      	movs	r5, #1
 800aa56:	2300      	movs	r3, #0
 800aa58:	9306      	str	r3, [sp, #24]
 800aa5a:	9508      	str	r5, [sp, #32]
 800aa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa64:	2200      	movs	r2, #0
 800aa66:	2312      	movs	r3, #18
 800aa68:	e7b0      	b.n	800a9cc <_dtoa_r+0x26c>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	9308      	str	r3, [sp, #32]
 800aa6e:	e7f5      	b.n	800aa5c <_dtoa_r+0x2fc>
 800aa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa76:	e7b8      	b.n	800a9ea <_dtoa_r+0x28a>
 800aa78:	3101      	adds	r1, #1
 800aa7a:	6041      	str	r1, [r0, #4]
 800aa7c:	0052      	lsls	r2, r2, #1
 800aa7e:	e7b8      	b.n	800a9f2 <_dtoa_r+0x292>
 800aa80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa82:	9a01      	ldr	r2, [sp, #4]
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	9b03      	ldr	r3, [sp, #12]
 800aa88:	2b0e      	cmp	r3, #14
 800aa8a:	f200 809d 	bhi.w	800abc8 <_dtoa_r+0x468>
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	f000 809a 	beq.w	800abc8 <_dtoa_r+0x468>
 800aa94:	9b00      	ldr	r3, [sp, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	dd32      	ble.n	800ab00 <_dtoa_r+0x3a0>
 800aa9a:	4ab7      	ldr	r2, [pc, #732]	; (800ad78 <_dtoa_r+0x618>)
 800aa9c:	f003 030f 	and.w	r3, r3, #15
 800aaa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aaa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaa8:	9b00      	ldr	r3, [sp, #0]
 800aaaa:	05d8      	lsls	r0, r3, #23
 800aaac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aab0:	d516      	bpl.n	800aae0 <_dtoa_r+0x380>
 800aab2:	4bb2      	ldr	r3, [pc, #712]	; (800ad7c <_dtoa_r+0x61c>)
 800aab4:	ec51 0b19 	vmov	r0, r1, d9
 800aab8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aabc:	f7f5 fece 	bl	800085c <__aeabi_ddiv>
 800aac0:	f007 070f 	and.w	r7, r7, #15
 800aac4:	4682      	mov	sl, r0
 800aac6:	468b      	mov	fp, r1
 800aac8:	2503      	movs	r5, #3
 800aaca:	4eac      	ldr	r6, [pc, #688]	; (800ad7c <_dtoa_r+0x61c>)
 800aacc:	b957      	cbnz	r7, 800aae4 <_dtoa_r+0x384>
 800aace:	4642      	mov	r2, r8
 800aad0:	464b      	mov	r3, r9
 800aad2:	4650      	mov	r0, sl
 800aad4:	4659      	mov	r1, fp
 800aad6:	f7f5 fec1 	bl	800085c <__aeabi_ddiv>
 800aada:	4682      	mov	sl, r0
 800aadc:	468b      	mov	fp, r1
 800aade:	e028      	b.n	800ab32 <_dtoa_r+0x3d2>
 800aae0:	2502      	movs	r5, #2
 800aae2:	e7f2      	b.n	800aaca <_dtoa_r+0x36a>
 800aae4:	07f9      	lsls	r1, r7, #31
 800aae6:	d508      	bpl.n	800aafa <_dtoa_r+0x39a>
 800aae8:	4640      	mov	r0, r8
 800aaea:	4649      	mov	r1, r9
 800aaec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaf0:	f7f5 fd8a 	bl	8000608 <__aeabi_dmul>
 800aaf4:	3501      	adds	r5, #1
 800aaf6:	4680      	mov	r8, r0
 800aaf8:	4689      	mov	r9, r1
 800aafa:	107f      	asrs	r7, r7, #1
 800aafc:	3608      	adds	r6, #8
 800aafe:	e7e5      	b.n	800aacc <_dtoa_r+0x36c>
 800ab00:	f000 809b 	beq.w	800ac3a <_dtoa_r+0x4da>
 800ab04:	9b00      	ldr	r3, [sp, #0]
 800ab06:	4f9d      	ldr	r7, [pc, #628]	; (800ad7c <_dtoa_r+0x61c>)
 800ab08:	425e      	negs	r6, r3
 800ab0a:	4b9b      	ldr	r3, [pc, #620]	; (800ad78 <_dtoa_r+0x618>)
 800ab0c:	f006 020f 	and.w	r2, r6, #15
 800ab10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	ec51 0b19 	vmov	r0, r1, d9
 800ab1c:	f7f5 fd74 	bl	8000608 <__aeabi_dmul>
 800ab20:	1136      	asrs	r6, r6, #4
 800ab22:	4682      	mov	sl, r0
 800ab24:	468b      	mov	fp, r1
 800ab26:	2300      	movs	r3, #0
 800ab28:	2502      	movs	r5, #2
 800ab2a:	2e00      	cmp	r6, #0
 800ab2c:	d17a      	bne.n	800ac24 <_dtoa_r+0x4c4>
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1d3      	bne.n	800aada <_dtoa_r+0x37a>
 800ab32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f000 8082 	beq.w	800ac3e <_dtoa_r+0x4de>
 800ab3a:	4b91      	ldr	r3, [pc, #580]	; (800ad80 <_dtoa_r+0x620>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	4650      	mov	r0, sl
 800ab40:	4659      	mov	r1, fp
 800ab42:	f7f5 ffd3 	bl	8000aec <__aeabi_dcmplt>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	d079      	beq.n	800ac3e <_dtoa_r+0x4de>
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d076      	beq.n	800ac3e <_dtoa_r+0x4de>
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dd36      	ble.n	800abc4 <_dtoa_r+0x464>
 800ab56:	9b00      	ldr	r3, [sp, #0]
 800ab58:	4650      	mov	r0, sl
 800ab5a:	4659      	mov	r1, fp
 800ab5c:	1e5f      	subs	r7, r3, #1
 800ab5e:	2200      	movs	r2, #0
 800ab60:	4b88      	ldr	r3, [pc, #544]	; (800ad84 <_dtoa_r+0x624>)
 800ab62:	f7f5 fd51 	bl	8000608 <__aeabi_dmul>
 800ab66:	9e02      	ldr	r6, [sp, #8]
 800ab68:	4682      	mov	sl, r0
 800ab6a:	468b      	mov	fp, r1
 800ab6c:	3501      	adds	r5, #1
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f7f5 fce0 	bl	8000534 <__aeabi_i2d>
 800ab74:	4652      	mov	r2, sl
 800ab76:	465b      	mov	r3, fp
 800ab78:	f7f5 fd46 	bl	8000608 <__aeabi_dmul>
 800ab7c:	4b82      	ldr	r3, [pc, #520]	; (800ad88 <_dtoa_r+0x628>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f7f5 fb8c 	bl	800029c <__adddf3>
 800ab84:	46d0      	mov	r8, sl
 800ab86:	46d9      	mov	r9, fp
 800ab88:	4682      	mov	sl, r0
 800ab8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ab8e:	2e00      	cmp	r6, #0
 800ab90:	d158      	bne.n	800ac44 <_dtoa_r+0x4e4>
 800ab92:	4b7e      	ldr	r3, [pc, #504]	; (800ad8c <_dtoa_r+0x62c>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	4640      	mov	r0, r8
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f7f5 fb7d 	bl	8000298 <__aeabi_dsub>
 800ab9e:	4652      	mov	r2, sl
 800aba0:	465b      	mov	r3, fp
 800aba2:	4680      	mov	r8, r0
 800aba4:	4689      	mov	r9, r1
 800aba6:	f7f5 ffbf 	bl	8000b28 <__aeabi_dcmpgt>
 800abaa:	2800      	cmp	r0, #0
 800abac:	f040 8295 	bne.w	800b0da <_dtoa_r+0x97a>
 800abb0:	4652      	mov	r2, sl
 800abb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800abb6:	4640      	mov	r0, r8
 800abb8:	4649      	mov	r1, r9
 800abba:	f7f5 ff97 	bl	8000aec <__aeabi_dcmplt>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f040 8289 	bne.w	800b0d6 <_dtoa_r+0x976>
 800abc4:	ec5b ab19 	vmov	sl, fp, d9
 800abc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f2c0 8148 	blt.w	800ae60 <_dtoa_r+0x700>
 800abd0:	9a00      	ldr	r2, [sp, #0]
 800abd2:	2a0e      	cmp	r2, #14
 800abd4:	f300 8144 	bgt.w	800ae60 <_dtoa_r+0x700>
 800abd8:	4b67      	ldr	r3, [pc, #412]	; (800ad78 <_dtoa_r+0x618>)
 800abda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f280 80d5 	bge.w	800ad94 <_dtoa_r+0x634>
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f300 80d1 	bgt.w	800ad94 <_dtoa_r+0x634>
 800abf2:	f040 826f 	bne.w	800b0d4 <_dtoa_r+0x974>
 800abf6:	4b65      	ldr	r3, [pc, #404]	; (800ad8c <_dtoa_r+0x62c>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	f7f5 fd03 	bl	8000608 <__aeabi_dmul>
 800ac02:	4652      	mov	r2, sl
 800ac04:	465b      	mov	r3, fp
 800ac06:	f7f5 ff85 	bl	8000b14 <__aeabi_dcmpge>
 800ac0a:	9e03      	ldr	r6, [sp, #12]
 800ac0c:	4637      	mov	r7, r6
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	f040 8245 	bne.w	800b09e <_dtoa_r+0x93e>
 800ac14:	9d01      	ldr	r5, [sp, #4]
 800ac16:	2331      	movs	r3, #49	; 0x31
 800ac18:	f805 3b01 	strb.w	r3, [r5], #1
 800ac1c:	9b00      	ldr	r3, [sp, #0]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	e240      	b.n	800b0a6 <_dtoa_r+0x946>
 800ac24:	07f2      	lsls	r2, r6, #31
 800ac26:	d505      	bpl.n	800ac34 <_dtoa_r+0x4d4>
 800ac28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac2c:	f7f5 fcec 	bl	8000608 <__aeabi_dmul>
 800ac30:	3501      	adds	r5, #1
 800ac32:	2301      	movs	r3, #1
 800ac34:	1076      	asrs	r6, r6, #1
 800ac36:	3708      	adds	r7, #8
 800ac38:	e777      	b.n	800ab2a <_dtoa_r+0x3ca>
 800ac3a:	2502      	movs	r5, #2
 800ac3c:	e779      	b.n	800ab32 <_dtoa_r+0x3d2>
 800ac3e:	9f00      	ldr	r7, [sp, #0]
 800ac40:	9e03      	ldr	r6, [sp, #12]
 800ac42:	e794      	b.n	800ab6e <_dtoa_r+0x40e>
 800ac44:	9901      	ldr	r1, [sp, #4]
 800ac46:	4b4c      	ldr	r3, [pc, #304]	; (800ad78 <_dtoa_r+0x618>)
 800ac48:	4431      	add	r1, r6
 800ac4a:	910d      	str	r1, [sp, #52]	; 0x34
 800ac4c:	9908      	ldr	r1, [sp, #32]
 800ac4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d043      	beq.n	800ace2 <_dtoa_r+0x582>
 800ac5a:	494d      	ldr	r1, [pc, #308]	; (800ad90 <_dtoa_r+0x630>)
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	f7f5 fdfd 	bl	800085c <__aeabi_ddiv>
 800ac62:	4652      	mov	r2, sl
 800ac64:	465b      	mov	r3, fp
 800ac66:	f7f5 fb17 	bl	8000298 <__aeabi_dsub>
 800ac6a:	9d01      	ldr	r5, [sp, #4]
 800ac6c:	4682      	mov	sl, r0
 800ac6e:	468b      	mov	fp, r1
 800ac70:	4649      	mov	r1, r9
 800ac72:	4640      	mov	r0, r8
 800ac74:	f7f5 ff78 	bl	8000b68 <__aeabi_d2iz>
 800ac78:	4606      	mov	r6, r0
 800ac7a:	f7f5 fc5b 	bl	8000534 <__aeabi_i2d>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 fb07 	bl	8000298 <__aeabi_dsub>
 800ac8a:	3630      	adds	r6, #48	; 0x30
 800ac8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac90:	4652      	mov	r2, sl
 800ac92:	465b      	mov	r3, fp
 800ac94:	4680      	mov	r8, r0
 800ac96:	4689      	mov	r9, r1
 800ac98:	f7f5 ff28 	bl	8000aec <__aeabi_dcmplt>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d163      	bne.n	800ad68 <_dtoa_r+0x608>
 800aca0:	4642      	mov	r2, r8
 800aca2:	464b      	mov	r3, r9
 800aca4:	4936      	ldr	r1, [pc, #216]	; (800ad80 <_dtoa_r+0x620>)
 800aca6:	2000      	movs	r0, #0
 800aca8:	f7f5 faf6 	bl	8000298 <__aeabi_dsub>
 800acac:	4652      	mov	r2, sl
 800acae:	465b      	mov	r3, fp
 800acb0:	f7f5 ff1c 	bl	8000aec <__aeabi_dcmplt>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f040 80b5 	bne.w	800ae24 <_dtoa_r+0x6c4>
 800acba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acbc:	429d      	cmp	r5, r3
 800acbe:	d081      	beq.n	800abc4 <_dtoa_r+0x464>
 800acc0:	4b30      	ldr	r3, [pc, #192]	; (800ad84 <_dtoa_r+0x624>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	4650      	mov	r0, sl
 800acc6:	4659      	mov	r1, fp
 800acc8:	f7f5 fc9e 	bl	8000608 <__aeabi_dmul>
 800accc:	4b2d      	ldr	r3, [pc, #180]	; (800ad84 <_dtoa_r+0x624>)
 800acce:	4682      	mov	sl, r0
 800acd0:	468b      	mov	fp, r1
 800acd2:	4640      	mov	r0, r8
 800acd4:	4649      	mov	r1, r9
 800acd6:	2200      	movs	r2, #0
 800acd8:	f7f5 fc96 	bl	8000608 <__aeabi_dmul>
 800acdc:	4680      	mov	r8, r0
 800acde:	4689      	mov	r9, r1
 800ace0:	e7c6      	b.n	800ac70 <_dtoa_r+0x510>
 800ace2:	4650      	mov	r0, sl
 800ace4:	4659      	mov	r1, fp
 800ace6:	f7f5 fc8f 	bl	8000608 <__aeabi_dmul>
 800acea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acec:	9d01      	ldr	r5, [sp, #4]
 800acee:	930f      	str	r3, [sp, #60]	; 0x3c
 800acf0:	4682      	mov	sl, r0
 800acf2:	468b      	mov	fp, r1
 800acf4:	4649      	mov	r1, r9
 800acf6:	4640      	mov	r0, r8
 800acf8:	f7f5 ff36 	bl	8000b68 <__aeabi_d2iz>
 800acfc:	4606      	mov	r6, r0
 800acfe:	f7f5 fc19 	bl	8000534 <__aeabi_i2d>
 800ad02:	3630      	adds	r6, #48	; 0x30
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4640      	mov	r0, r8
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	f7f5 fac4 	bl	8000298 <__aeabi_dsub>
 800ad10:	f805 6b01 	strb.w	r6, [r5], #1
 800ad14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad16:	429d      	cmp	r5, r3
 800ad18:	4680      	mov	r8, r0
 800ad1a:	4689      	mov	r9, r1
 800ad1c:	f04f 0200 	mov.w	r2, #0
 800ad20:	d124      	bne.n	800ad6c <_dtoa_r+0x60c>
 800ad22:	4b1b      	ldr	r3, [pc, #108]	; (800ad90 <_dtoa_r+0x630>)
 800ad24:	4650      	mov	r0, sl
 800ad26:	4659      	mov	r1, fp
 800ad28:	f7f5 fab8 	bl	800029c <__adddf3>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4640      	mov	r0, r8
 800ad32:	4649      	mov	r1, r9
 800ad34:	f7f5 fef8 	bl	8000b28 <__aeabi_dcmpgt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d173      	bne.n	800ae24 <_dtoa_r+0x6c4>
 800ad3c:	4652      	mov	r2, sl
 800ad3e:	465b      	mov	r3, fp
 800ad40:	4913      	ldr	r1, [pc, #76]	; (800ad90 <_dtoa_r+0x630>)
 800ad42:	2000      	movs	r0, #0
 800ad44:	f7f5 faa8 	bl	8000298 <__aeabi_dsub>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4640      	mov	r0, r8
 800ad4e:	4649      	mov	r1, r9
 800ad50:	f7f5 fecc 	bl	8000aec <__aeabi_dcmplt>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f43f af35 	beq.w	800abc4 <_dtoa_r+0x464>
 800ad5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad5c:	1e6b      	subs	r3, r5, #1
 800ad5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad64:	2b30      	cmp	r3, #48	; 0x30
 800ad66:	d0f8      	beq.n	800ad5a <_dtoa_r+0x5fa>
 800ad68:	9700      	str	r7, [sp, #0]
 800ad6a:	e049      	b.n	800ae00 <_dtoa_r+0x6a0>
 800ad6c:	4b05      	ldr	r3, [pc, #20]	; (800ad84 <_dtoa_r+0x624>)
 800ad6e:	f7f5 fc4b 	bl	8000608 <__aeabi_dmul>
 800ad72:	4680      	mov	r8, r0
 800ad74:	4689      	mov	r9, r1
 800ad76:	e7bd      	b.n	800acf4 <_dtoa_r+0x594>
 800ad78:	0800cab0 	.word	0x0800cab0
 800ad7c:	0800ca88 	.word	0x0800ca88
 800ad80:	3ff00000 	.word	0x3ff00000
 800ad84:	40240000 	.word	0x40240000
 800ad88:	401c0000 	.word	0x401c0000
 800ad8c:	40140000 	.word	0x40140000
 800ad90:	3fe00000 	.word	0x3fe00000
 800ad94:	9d01      	ldr	r5, [sp, #4]
 800ad96:	4656      	mov	r6, sl
 800ad98:	465f      	mov	r7, fp
 800ad9a:	4642      	mov	r2, r8
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	f7f5 fd5b 	bl	800085c <__aeabi_ddiv>
 800ada6:	f7f5 fedf 	bl	8000b68 <__aeabi_d2iz>
 800adaa:	4682      	mov	sl, r0
 800adac:	f7f5 fbc2 	bl	8000534 <__aeabi_i2d>
 800adb0:	4642      	mov	r2, r8
 800adb2:	464b      	mov	r3, r9
 800adb4:	f7f5 fc28 	bl	8000608 <__aeabi_dmul>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4630      	mov	r0, r6
 800adbe:	4639      	mov	r1, r7
 800adc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800adc4:	f7f5 fa68 	bl	8000298 <__aeabi_dsub>
 800adc8:	f805 6b01 	strb.w	r6, [r5], #1
 800adcc:	9e01      	ldr	r6, [sp, #4]
 800adce:	9f03      	ldr	r7, [sp, #12]
 800add0:	1bae      	subs	r6, r5, r6
 800add2:	42b7      	cmp	r7, r6
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	d135      	bne.n	800ae46 <_dtoa_r+0x6e6>
 800adda:	f7f5 fa5f 	bl	800029c <__adddf3>
 800adde:	4642      	mov	r2, r8
 800ade0:	464b      	mov	r3, r9
 800ade2:	4606      	mov	r6, r0
 800ade4:	460f      	mov	r7, r1
 800ade6:	f7f5 fe9f 	bl	8000b28 <__aeabi_dcmpgt>
 800adea:	b9d0      	cbnz	r0, 800ae22 <_dtoa_r+0x6c2>
 800adec:	4642      	mov	r2, r8
 800adee:	464b      	mov	r3, r9
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fe70 	bl	8000ad8 <__aeabi_dcmpeq>
 800adf8:	b110      	cbz	r0, 800ae00 <_dtoa_r+0x6a0>
 800adfa:	f01a 0f01 	tst.w	sl, #1
 800adfe:	d110      	bne.n	800ae22 <_dtoa_r+0x6c2>
 800ae00:	4620      	mov	r0, r4
 800ae02:	ee18 1a10 	vmov	r1, s16
 800ae06:	f000 fbed 	bl	800b5e4 <_Bfree>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9800      	ldr	r0, [sp, #0]
 800ae0e:	702b      	strb	r3, [r5, #0]
 800ae10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae12:	3001      	adds	r0, #1
 800ae14:	6018      	str	r0, [r3, #0]
 800ae16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f43f acf1 	beq.w	800a800 <_dtoa_r+0xa0>
 800ae1e:	601d      	str	r5, [r3, #0]
 800ae20:	e4ee      	b.n	800a800 <_dtoa_r+0xa0>
 800ae22:	9f00      	ldr	r7, [sp, #0]
 800ae24:	462b      	mov	r3, r5
 800ae26:	461d      	mov	r5, r3
 800ae28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae2c:	2a39      	cmp	r2, #57	; 0x39
 800ae2e:	d106      	bne.n	800ae3e <_dtoa_r+0x6de>
 800ae30:	9a01      	ldr	r2, [sp, #4]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d1f7      	bne.n	800ae26 <_dtoa_r+0x6c6>
 800ae36:	9901      	ldr	r1, [sp, #4]
 800ae38:	2230      	movs	r2, #48	; 0x30
 800ae3a:	3701      	adds	r7, #1
 800ae3c:	700a      	strb	r2, [r1, #0]
 800ae3e:	781a      	ldrb	r2, [r3, #0]
 800ae40:	3201      	adds	r2, #1
 800ae42:	701a      	strb	r2, [r3, #0]
 800ae44:	e790      	b.n	800ad68 <_dtoa_r+0x608>
 800ae46:	4ba6      	ldr	r3, [pc, #664]	; (800b0e0 <_dtoa_r+0x980>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f7f5 fbdd 	bl	8000608 <__aeabi_dmul>
 800ae4e:	2200      	movs	r2, #0
 800ae50:	2300      	movs	r3, #0
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	f7f5 fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d09d      	beq.n	800ad9a <_dtoa_r+0x63a>
 800ae5e:	e7cf      	b.n	800ae00 <_dtoa_r+0x6a0>
 800ae60:	9a08      	ldr	r2, [sp, #32]
 800ae62:	2a00      	cmp	r2, #0
 800ae64:	f000 80d7 	beq.w	800b016 <_dtoa_r+0x8b6>
 800ae68:	9a06      	ldr	r2, [sp, #24]
 800ae6a:	2a01      	cmp	r2, #1
 800ae6c:	f300 80ba 	bgt.w	800afe4 <_dtoa_r+0x884>
 800ae70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae72:	2a00      	cmp	r2, #0
 800ae74:	f000 80b2 	beq.w	800afdc <_dtoa_r+0x87c>
 800ae78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae7c:	9e07      	ldr	r6, [sp, #28]
 800ae7e:	9d04      	ldr	r5, [sp, #16]
 800ae80:	9a04      	ldr	r2, [sp, #16]
 800ae82:	441a      	add	r2, r3
 800ae84:	9204      	str	r2, [sp, #16]
 800ae86:	9a05      	ldr	r2, [sp, #20]
 800ae88:	2101      	movs	r1, #1
 800ae8a:	441a      	add	r2, r3
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	9205      	str	r2, [sp, #20]
 800ae90:	f000 fc60 	bl	800b754 <__i2b>
 800ae94:	4607      	mov	r7, r0
 800ae96:	2d00      	cmp	r5, #0
 800ae98:	dd0c      	ble.n	800aeb4 <_dtoa_r+0x754>
 800ae9a:	9b05      	ldr	r3, [sp, #20]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dd09      	ble.n	800aeb4 <_dtoa_r+0x754>
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	9a04      	ldr	r2, [sp, #16]
 800aea4:	bfa8      	it	ge
 800aea6:	462b      	movge	r3, r5
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	9204      	str	r2, [sp, #16]
 800aeac:	9a05      	ldr	r2, [sp, #20]
 800aeae:	1aed      	subs	r5, r5, r3
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	9305      	str	r3, [sp, #20]
 800aeb4:	9b07      	ldr	r3, [sp, #28]
 800aeb6:	b31b      	cbz	r3, 800af00 <_dtoa_r+0x7a0>
 800aeb8:	9b08      	ldr	r3, [sp, #32]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 80af 	beq.w	800b01e <_dtoa_r+0x8be>
 800aec0:	2e00      	cmp	r6, #0
 800aec2:	dd13      	ble.n	800aeec <_dtoa_r+0x78c>
 800aec4:	4639      	mov	r1, r7
 800aec6:	4632      	mov	r2, r6
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fd03 	bl	800b8d4 <__pow5mult>
 800aece:	ee18 2a10 	vmov	r2, s16
 800aed2:	4601      	mov	r1, r0
 800aed4:	4607      	mov	r7, r0
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fc52 	bl	800b780 <__multiply>
 800aedc:	ee18 1a10 	vmov	r1, s16
 800aee0:	4680      	mov	r8, r0
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 fb7e 	bl	800b5e4 <_Bfree>
 800aee8:	ee08 8a10 	vmov	s16, r8
 800aeec:	9b07      	ldr	r3, [sp, #28]
 800aeee:	1b9a      	subs	r2, r3, r6
 800aef0:	d006      	beq.n	800af00 <_dtoa_r+0x7a0>
 800aef2:	ee18 1a10 	vmov	r1, s16
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 fcec 	bl	800b8d4 <__pow5mult>
 800aefc:	ee08 0a10 	vmov	s16, r0
 800af00:	2101      	movs	r1, #1
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fc26 	bl	800b754 <__i2b>
 800af08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	4606      	mov	r6, r0
 800af0e:	f340 8088 	ble.w	800b022 <_dtoa_r+0x8c2>
 800af12:	461a      	mov	r2, r3
 800af14:	4601      	mov	r1, r0
 800af16:	4620      	mov	r0, r4
 800af18:	f000 fcdc 	bl	800b8d4 <__pow5mult>
 800af1c:	9b06      	ldr	r3, [sp, #24]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	4606      	mov	r6, r0
 800af22:	f340 8081 	ble.w	800b028 <_dtoa_r+0x8c8>
 800af26:	f04f 0800 	mov.w	r8, #0
 800af2a:	6933      	ldr	r3, [r6, #16]
 800af2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af30:	6918      	ldr	r0, [r3, #16]
 800af32:	f000 fbbf 	bl	800b6b4 <__hi0bits>
 800af36:	f1c0 0020 	rsb	r0, r0, #32
 800af3a:	9b05      	ldr	r3, [sp, #20]
 800af3c:	4418      	add	r0, r3
 800af3e:	f010 001f 	ands.w	r0, r0, #31
 800af42:	f000 8092 	beq.w	800b06a <_dtoa_r+0x90a>
 800af46:	f1c0 0320 	rsb	r3, r0, #32
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	f340 808a 	ble.w	800b064 <_dtoa_r+0x904>
 800af50:	f1c0 001c 	rsb	r0, r0, #28
 800af54:	9b04      	ldr	r3, [sp, #16]
 800af56:	4403      	add	r3, r0
 800af58:	9304      	str	r3, [sp, #16]
 800af5a:	9b05      	ldr	r3, [sp, #20]
 800af5c:	4403      	add	r3, r0
 800af5e:	4405      	add	r5, r0
 800af60:	9305      	str	r3, [sp, #20]
 800af62:	9b04      	ldr	r3, [sp, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	dd07      	ble.n	800af78 <_dtoa_r+0x818>
 800af68:	ee18 1a10 	vmov	r1, s16
 800af6c:	461a      	mov	r2, r3
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 fd0a 	bl	800b988 <__lshift>
 800af74:	ee08 0a10 	vmov	s16, r0
 800af78:	9b05      	ldr	r3, [sp, #20]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dd05      	ble.n	800af8a <_dtoa_r+0x82a>
 800af7e:	4631      	mov	r1, r6
 800af80:	461a      	mov	r2, r3
 800af82:	4620      	mov	r0, r4
 800af84:	f000 fd00 	bl	800b988 <__lshift>
 800af88:	4606      	mov	r6, r0
 800af8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d06e      	beq.n	800b06e <_dtoa_r+0x90e>
 800af90:	ee18 0a10 	vmov	r0, s16
 800af94:	4631      	mov	r1, r6
 800af96:	f000 fd67 	bl	800ba68 <__mcmp>
 800af9a:	2800      	cmp	r0, #0
 800af9c:	da67      	bge.n	800b06e <_dtoa_r+0x90e>
 800af9e:	9b00      	ldr	r3, [sp, #0]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	ee18 1a10 	vmov	r1, s16
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	220a      	movs	r2, #10
 800afaa:	2300      	movs	r3, #0
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fb3b 	bl	800b628 <__multadd>
 800afb2:	9b08      	ldr	r3, [sp, #32]
 800afb4:	ee08 0a10 	vmov	s16, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 81b1 	beq.w	800b320 <_dtoa_r+0xbc0>
 800afbe:	2300      	movs	r3, #0
 800afc0:	4639      	mov	r1, r7
 800afc2:	220a      	movs	r2, #10
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 fb2f 	bl	800b628 <__multadd>
 800afca:	9b02      	ldr	r3, [sp, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	4607      	mov	r7, r0
 800afd0:	f300 808e 	bgt.w	800b0f0 <_dtoa_r+0x990>
 800afd4:	9b06      	ldr	r3, [sp, #24]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	dc51      	bgt.n	800b07e <_dtoa_r+0x91e>
 800afda:	e089      	b.n	800b0f0 <_dtoa_r+0x990>
 800afdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afe2:	e74b      	b.n	800ae7c <_dtoa_r+0x71c>
 800afe4:	9b03      	ldr	r3, [sp, #12]
 800afe6:	1e5e      	subs	r6, r3, #1
 800afe8:	9b07      	ldr	r3, [sp, #28]
 800afea:	42b3      	cmp	r3, r6
 800afec:	bfbf      	itttt	lt
 800afee:	9b07      	ldrlt	r3, [sp, #28]
 800aff0:	9607      	strlt	r6, [sp, #28]
 800aff2:	1af2      	sublt	r2, r6, r3
 800aff4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aff6:	bfb6      	itet	lt
 800aff8:	189b      	addlt	r3, r3, r2
 800affa:	1b9e      	subge	r6, r3, r6
 800affc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	bfb8      	it	lt
 800b002:	2600      	movlt	r6, #0
 800b004:	2b00      	cmp	r3, #0
 800b006:	bfb7      	itett	lt
 800b008:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b00c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b010:	1a9d      	sublt	r5, r3, r2
 800b012:	2300      	movlt	r3, #0
 800b014:	e734      	b.n	800ae80 <_dtoa_r+0x720>
 800b016:	9e07      	ldr	r6, [sp, #28]
 800b018:	9d04      	ldr	r5, [sp, #16]
 800b01a:	9f08      	ldr	r7, [sp, #32]
 800b01c:	e73b      	b.n	800ae96 <_dtoa_r+0x736>
 800b01e:	9a07      	ldr	r2, [sp, #28]
 800b020:	e767      	b.n	800aef2 <_dtoa_r+0x792>
 800b022:	9b06      	ldr	r3, [sp, #24]
 800b024:	2b01      	cmp	r3, #1
 800b026:	dc18      	bgt.n	800b05a <_dtoa_r+0x8fa>
 800b028:	f1ba 0f00 	cmp.w	sl, #0
 800b02c:	d115      	bne.n	800b05a <_dtoa_r+0x8fa>
 800b02e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b032:	b993      	cbnz	r3, 800b05a <_dtoa_r+0x8fa>
 800b034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b038:	0d1b      	lsrs	r3, r3, #20
 800b03a:	051b      	lsls	r3, r3, #20
 800b03c:	b183      	cbz	r3, 800b060 <_dtoa_r+0x900>
 800b03e:	9b04      	ldr	r3, [sp, #16]
 800b040:	3301      	adds	r3, #1
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	9b05      	ldr	r3, [sp, #20]
 800b046:	3301      	adds	r3, #1
 800b048:	9305      	str	r3, [sp, #20]
 800b04a:	f04f 0801 	mov.w	r8, #1
 800b04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b050:	2b00      	cmp	r3, #0
 800b052:	f47f af6a 	bne.w	800af2a <_dtoa_r+0x7ca>
 800b056:	2001      	movs	r0, #1
 800b058:	e76f      	b.n	800af3a <_dtoa_r+0x7da>
 800b05a:	f04f 0800 	mov.w	r8, #0
 800b05e:	e7f6      	b.n	800b04e <_dtoa_r+0x8ee>
 800b060:	4698      	mov	r8, r3
 800b062:	e7f4      	b.n	800b04e <_dtoa_r+0x8ee>
 800b064:	f43f af7d 	beq.w	800af62 <_dtoa_r+0x802>
 800b068:	4618      	mov	r0, r3
 800b06a:	301c      	adds	r0, #28
 800b06c:	e772      	b.n	800af54 <_dtoa_r+0x7f4>
 800b06e:	9b03      	ldr	r3, [sp, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	dc37      	bgt.n	800b0e4 <_dtoa_r+0x984>
 800b074:	9b06      	ldr	r3, [sp, #24]
 800b076:	2b02      	cmp	r3, #2
 800b078:	dd34      	ble.n	800b0e4 <_dtoa_r+0x984>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	9302      	str	r3, [sp, #8]
 800b07e:	9b02      	ldr	r3, [sp, #8]
 800b080:	b96b      	cbnz	r3, 800b09e <_dtoa_r+0x93e>
 800b082:	4631      	mov	r1, r6
 800b084:	2205      	movs	r2, #5
 800b086:	4620      	mov	r0, r4
 800b088:	f000 face 	bl	800b628 <__multadd>
 800b08c:	4601      	mov	r1, r0
 800b08e:	4606      	mov	r6, r0
 800b090:	ee18 0a10 	vmov	r0, s16
 800b094:	f000 fce8 	bl	800ba68 <__mcmp>
 800b098:	2800      	cmp	r0, #0
 800b09a:	f73f adbb 	bgt.w	800ac14 <_dtoa_r+0x4b4>
 800b09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a0:	9d01      	ldr	r5, [sp, #4]
 800b0a2:	43db      	mvns	r3, r3
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fa99 	bl	800b5e4 <_Bfree>
 800b0b2:	2f00      	cmp	r7, #0
 800b0b4:	f43f aea4 	beq.w	800ae00 <_dtoa_r+0x6a0>
 800b0b8:	f1b8 0f00 	cmp.w	r8, #0
 800b0bc:	d005      	beq.n	800b0ca <_dtoa_r+0x96a>
 800b0be:	45b8      	cmp	r8, r7
 800b0c0:	d003      	beq.n	800b0ca <_dtoa_r+0x96a>
 800b0c2:	4641      	mov	r1, r8
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fa8d 	bl	800b5e4 <_Bfree>
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f000 fa89 	bl	800b5e4 <_Bfree>
 800b0d2:	e695      	b.n	800ae00 <_dtoa_r+0x6a0>
 800b0d4:	2600      	movs	r6, #0
 800b0d6:	4637      	mov	r7, r6
 800b0d8:	e7e1      	b.n	800b09e <_dtoa_r+0x93e>
 800b0da:	9700      	str	r7, [sp, #0]
 800b0dc:	4637      	mov	r7, r6
 800b0de:	e599      	b.n	800ac14 <_dtoa_r+0x4b4>
 800b0e0:	40240000 	.word	0x40240000
 800b0e4:	9b08      	ldr	r3, [sp, #32]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 80ca 	beq.w	800b280 <_dtoa_r+0xb20>
 800b0ec:	9b03      	ldr	r3, [sp, #12]
 800b0ee:	9302      	str	r3, [sp, #8]
 800b0f0:	2d00      	cmp	r5, #0
 800b0f2:	dd05      	ble.n	800b100 <_dtoa_r+0x9a0>
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 fc45 	bl	800b988 <__lshift>
 800b0fe:	4607      	mov	r7, r0
 800b100:	f1b8 0f00 	cmp.w	r8, #0
 800b104:	d05b      	beq.n	800b1be <_dtoa_r+0xa5e>
 800b106:	6879      	ldr	r1, [r7, #4]
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 fa2b 	bl	800b564 <_Balloc>
 800b10e:	4605      	mov	r5, r0
 800b110:	b928      	cbnz	r0, 800b11e <_dtoa_r+0x9be>
 800b112:	4b87      	ldr	r3, [pc, #540]	; (800b330 <_dtoa_r+0xbd0>)
 800b114:	4602      	mov	r2, r0
 800b116:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b11a:	f7ff bb3b 	b.w	800a794 <_dtoa_r+0x34>
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	3202      	adds	r2, #2
 800b122:	0092      	lsls	r2, r2, #2
 800b124:	f107 010c 	add.w	r1, r7, #12
 800b128:	300c      	adds	r0, #12
 800b12a:	f000 fa0d 	bl	800b548 <memcpy>
 800b12e:	2201      	movs	r2, #1
 800b130:	4629      	mov	r1, r5
 800b132:	4620      	mov	r0, r4
 800b134:	f000 fc28 	bl	800b988 <__lshift>
 800b138:	9b01      	ldr	r3, [sp, #4]
 800b13a:	f103 0901 	add.w	r9, r3, #1
 800b13e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b142:	4413      	add	r3, r2
 800b144:	9305      	str	r3, [sp, #20]
 800b146:	f00a 0301 	and.w	r3, sl, #1
 800b14a:	46b8      	mov	r8, r7
 800b14c:	9304      	str	r3, [sp, #16]
 800b14e:	4607      	mov	r7, r0
 800b150:	4631      	mov	r1, r6
 800b152:	ee18 0a10 	vmov	r0, s16
 800b156:	f7ff fa75 	bl	800a644 <quorem>
 800b15a:	4641      	mov	r1, r8
 800b15c:	9002      	str	r0, [sp, #8]
 800b15e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b162:	ee18 0a10 	vmov	r0, s16
 800b166:	f000 fc7f 	bl	800ba68 <__mcmp>
 800b16a:	463a      	mov	r2, r7
 800b16c:	9003      	str	r0, [sp, #12]
 800b16e:	4631      	mov	r1, r6
 800b170:	4620      	mov	r0, r4
 800b172:	f000 fc95 	bl	800baa0 <__mdiff>
 800b176:	68c2      	ldr	r2, [r0, #12]
 800b178:	f109 3bff 	add.w	fp, r9, #4294967295
 800b17c:	4605      	mov	r5, r0
 800b17e:	bb02      	cbnz	r2, 800b1c2 <_dtoa_r+0xa62>
 800b180:	4601      	mov	r1, r0
 800b182:	ee18 0a10 	vmov	r0, s16
 800b186:	f000 fc6f 	bl	800ba68 <__mcmp>
 800b18a:	4602      	mov	r2, r0
 800b18c:	4629      	mov	r1, r5
 800b18e:	4620      	mov	r0, r4
 800b190:	9207      	str	r2, [sp, #28]
 800b192:	f000 fa27 	bl	800b5e4 <_Bfree>
 800b196:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b19a:	ea43 0102 	orr.w	r1, r3, r2
 800b19e:	9b04      	ldr	r3, [sp, #16]
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	464d      	mov	r5, r9
 800b1a4:	d10f      	bne.n	800b1c6 <_dtoa_r+0xa66>
 800b1a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b1aa:	d02a      	beq.n	800b202 <_dtoa_r+0xaa2>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	dd02      	ble.n	800b1b8 <_dtoa_r+0xa58>
 800b1b2:	9b02      	ldr	r3, [sp, #8]
 800b1b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b1b8:	f88b a000 	strb.w	sl, [fp]
 800b1bc:	e775      	b.n	800b0aa <_dtoa_r+0x94a>
 800b1be:	4638      	mov	r0, r7
 800b1c0:	e7ba      	b.n	800b138 <_dtoa_r+0x9d8>
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	e7e2      	b.n	800b18c <_dtoa_r+0xa2c>
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	db04      	blt.n	800b1d6 <_dtoa_r+0xa76>
 800b1cc:	9906      	ldr	r1, [sp, #24]
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	9904      	ldr	r1, [sp, #16]
 800b1d2:	430b      	orrs	r3, r1
 800b1d4:	d122      	bne.n	800b21c <_dtoa_r+0xabc>
 800b1d6:	2a00      	cmp	r2, #0
 800b1d8:	ddee      	ble.n	800b1b8 <_dtoa_r+0xa58>
 800b1da:	ee18 1a10 	vmov	r1, s16
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 fbd1 	bl	800b988 <__lshift>
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	ee08 0a10 	vmov	s16, r0
 800b1ec:	f000 fc3c 	bl	800ba68 <__mcmp>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	dc03      	bgt.n	800b1fc <_dtoa_r+0xa9c>
 800b1f4:	d1e0      	bne.n	800b1b8 <_dtoa_r+0xa58>
 800b1f6:	f01a 0f01 	tst.w	sl, #1
 800b1fa:	d0dd      	beq.n	800b1b8 <_dtoa_r+0xa58>
 800b1fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b200:	d1d7      	bne.n	800b1b2 <_dtoa_r+0xa52>
 800b202:	2339      	movs	r3, #57	; 0x39
 800b204:	f88b 3000 	strb.w	r3, [fp]
 800b208:	462b      	mov	r3, r5
 800b20a:	461d      	mov	r5, r3
 800b20c:	3b01      	subs	r3, #1
 800b20e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b212:	2a39      	cmp	r2, #57	; 0x39
 800b214:	d071      	beq.n	800b2fa <_dtoa_r+0xb9a>
 800b216:	3201      	adds	r2, #1
 800b218:	701a      	strb	r2, [r3, #0]
 800b21a:	e746      	b.n	800b0aa <_dtoa_r+0x94a>
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	dd07      	ble.n	800b230 <_dtoa_r+0xad0>
 800b220:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b224:	d0ed      	beq.n	800b202 <_dtoa_r+0xaa2>
 800b226:	f10a 0301 	add.w	r3, sl, #1
 800b22a:	f88b 3000 	strb.w	r3, [fp]
 800b22e:	e73c      	b.n	800b0aa <_dtoa_r+0x94a>
 800b230:	9b05      	ldr	r3, [sp, #20]
 800b232:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b236:	4599      	cmp	r9, r3
 800b238:	d047      	beq.n	800b2ca <_dtoa_r+0xb6a>
 800b23a:	ee18 1a10 	vmov	r1, s16
 800b23e:	2300      	movs	r3, #0
 800b240:	220a      	movs	r2, #10
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f9f0 	bl	800b628 <__multadd>
 800b248:	45b8      	cmp	r8, r7
 800b24a:	ee08 0a10 	vmov	s16, r0
 800b24e:	f04f 0300 	mov.w	r3, #0
 800b252:	f04f 020a 	mov.w	r2, #10
 800b256:	4641      	mov	r1, r8
 800b258:	4620      	mov	r0, r4
 800b25a:	d106      	bne.n	800b26a <_dtoa_r+0xb0a>
 800b25c:	f000 f9e4 	bl	800b628 <__multadd>
 800b260:	4680      	mov	r8, r0
 800b262:	4607      	mov	r7, r0
 800b264:	f109 0901 	add.w	r9, r9, #1
 800b268:	e772      	b.n	800b150 <_dtoa_r+0x9f0>
 800b26a:	f000 f9dd 	bl	800b628 <__multadd>
 800b26e:	4639      	mov	r1, r7
 800b270:	4680      	mov	r8, r0
 800b272:	2300      	movs	r3, #0
 800b274:	220a      	movs	r2, #10
 800b276:	4620      	mov	r0, r4
 800b278:	f000 f9d6 	bl	800b628 <__multadd>
 800b27c:	4607      	mov	r7, r0
 800b27e:	e7f1      	b.n	800b264 <_dtoa_r+0xb04>
 800b280:	9b03      	ldr	r3, [sp, #12]
 800b282:	9302      	str	r3, [sp, #8]
 800b284:	9d01      	ldr	r5, [sp, #4]
 800b286:	ee18 0a10 	vmov	r0, s16
 800b28a:	4631      	mov	r1, r6
 800b28c:	f7ff f9da 	bl	800a644 <quorem>
 800b290:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	f805 ab01 	strb.w	sl, [r5], #1
 800b29a:	1aea      	subs	r2, r5, r3
 800b29c:	9b02      	ldr	r3, [sp, #8]
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	dd09      	ble.n	800b2b6 <_dtoa_r+0xb56>
 800b2a2:	ee18 1a10 	vmov	r1, s16
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	220a      	movs	r2, #10
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f000 f9bc 	bl	800b628 <__multadd>
 800b2b0:	ee08 0a10 	vmov	s16, r0
 800b2b4:	e7e7      	b.n	800b286 <_dtoa_r+0xb26>
 800b2b6:	9b02      	ldr	r3, [sp, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfc8      	it	gt
 800b2bc:	461d      	movgt	r5, r3
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	bfd8      	it	le
 800b2c2:	2501      	movle	r5, #1
 800b2c4:	441d      	add	r5, r3
 800b2c6:	f04f 0800 	mov.w	r8, #0
 800b2ca:	ee18 1a10 	vmov	r1, s16
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fb59 	bl	800b988 <__lshift>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	ee08 0a10 	vmov	s16, r0
 800b2dc:	f000 fbc4 	bl	800ba68 <__mcmp>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	dc91      	bgt.n	800b208 <_dtoa_r+0xaa8>
 800b2e4:	d102      	bne.n	800b2ec <_dtoa_r+0xb8c>
 800b2e6:	f01a 0f01 	tst.w	sl, #1
 800b2ea:	d18d      	bne.n	800b208 <_dtoa_r+0xaa8>
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	461d      	mov	r5, r3
 800b2f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2f4:	2a30      	cmp	r2, #48	; 0x30
 800b2f6:	d0fa      	beq.n	800b2ee <_dtoa_r+0xb8e>
 800b2f8:	e6d7      	b.n	800b0aa <_dtoa_r+0x94a>
 800b2fa:	9a01      	ldr	r2, [sp, #4]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d184      	bne.n	800b20a <_dtoa_r+0xaaa>
 800b300:	9b00      	ldr	r3, [sp, #0]
 800b302:	3301      	adds	r3, #1
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	2331      	movs	r3, #49	; 0x31
 800b308:	7013      	strb	r3, [r2, #0]
 800b30a:	e6ce      	b.n	800b0aa <_dtoa_r+0x94a>
 800b30c:	4b09      	ldr	r3, [pc, #36]	; (800b334 <_dtoa_r+0xbd4>)
 800b30e:	f7ff ba95 	b.w	800a83c <_dtoa_r+0xdc>
 800b312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b314:	2b00      	cmp	r3, #0
 800b316:	f47f aa6e 	bne.w	800a7f6 <_dtoa_r+0x96>
 800b31a:	4b07      	ldr	r3, [pc, #28]	; (800b338 <_dtoa_r+0xbd8>)
 800b31c:	f7ff ba8e 	b.w	800a83c <_dtoa_r+0xdc>
 800b320:	9b02      	ldr	r3, [sp, #8]
 800b322:	2b00      	cmp	r3, #0
 800b324:	dcae      	bgt.n	800b284 <_dtoa_r+0xb24>
 800b326:	9b06      	ldr	r3, [sp, #24]
 800b328:	2b02      	cmp	r3, #2
 800b32a:	f73f aea8 	bgt.w	800b07e <_dtoa_r+0x91e>
 800b32e:	e7a9      	b.n	800b284 <_dtoa_r+0xb24>
 800b330:	0800c9b7 	.word	0x0800c9b7
 800b334:	0800c914 	.word	0x0800c914
 800b338:	0800c938 	.word	0x0800c938

0800b33c <std>:
 800b33c:	2300      	movs	r3, #0
 800b33e:	b510      	push	{r4, lr}
 800b340:	4604      	mov	r4, r0
 800b342:	e9c0 3300 	strd	r3, r3, [r0]
 800b346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b34a:	6083      	str	r3, [r0, #8]
 800b34c:	8181      	strh	r1, [r0, #12]
 800b34e:	6643      	str	r3, [r0, #100]	; 0x64
 800b350:	81c2      	strh	r2, [r0, #14]
 800b352:	6183      	str	r3, [r0, #24]
 800b354:	4619      	mov	r1, r3
 800b356:	2208      	movs	r2, #8
 800b358:	305c      	adds	r0, #92	; 0x5c
 800b35a:	f7fe fcd3 	bl	8009d04 <memset>
 800b35e:	4b05      	ldr	r3, [pc, #20]	; (800b374 <std+0x38>)
 800b360:	6263      	str	r3, [r4, #36]	; 0x24
 800b362:	4b05      	ldr	r3, [pc, #20]	; (800b378 <std+0x3c>)
 800b364:	62a3      	str	r3, [r4, #40]	; 0x28
 800b366:	4b05      	ldr	r3, [pc, #20]	; (800b37c <std+0x40>)
 800b368:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b36a:	4b05      	ldr	r3, [pc, #20]	; (800b380 <std+0x44>)
 800b36c:	6224      	str	r4, [r4, #32]
 800b36e:	6323      	str	r3, [r4, #48]	; 0x30
 800b370:	bd10      	pop	{r4, pc}
 800b372:	bf00      	nop
 800b374:	0800c1bd 	.word	0x0800c1bd
 800b378:	0800c1df 	.word	0x0800c1df
 800b37c:	0800c217 	.word	0x0800c217
 800b380:	0800c23b 	.word	0x0800c23b

0800b384 <_cleanup_r>:
 800b384:	4901      	ldr	r1, [pc, #4]	; (800b38c <_cleanup_r+0x8>)
 800b386:	f000 b8af 	b.w	800b4e8 <_fwalk_reent>
 800b38a:	bf00      	nop
 800b38c:	0800c551 	.word	0x0800c551

0800b390 <__sfmoreglue>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	2268      	movs	r2, #104	; 0x68
 800b394:	1e4d      	subs	r5, r1, #1
 800b396:	4355      	muls	r5, r2
 800b398:	460e      	mov	r6, r1
 800b39a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b39e:	f000 fce7 	bl	800bd70 <_malloc_r>
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	b140      	cbz	r0, 800b3b8 <__sfmoreglue+0x28>
 800b3a6:	2100      	movs	r1, #0
 800b3a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b3ac:	300c      	adds	r0, #12
 800b3ae:	60a0      	str	r0, [r4, #8]
 800b3b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b3b4:	f7fe fca6 	bl	8009d04 <memset>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}

0800b3bc <__sfp_lock_acquire>:
 800b3bc:	4801      	ldr	r0, [pc, #4]	; (800b3c4 <__sfp_lock_acquire+0x8>)
 800b3be:	f000 b8b8 	b.w	800b532 <__retarget_lock_acquire_recursive>
 800b3c2:	bf00      	nop
 800b3c4:	20001fc1 	.word	0x20001fc1

0800b3c8 <__sfp_lock_release>:
 800b3c8:	4801      	ldr	r0, [pc, #4]	; (800b3d0 <__sfp_lock_release+0x8>)
 800b3ca:	f000 b8b3 	b.w	800b534 <__retarget_lock_release_recursive>
 800b3ce:	bf00      	nop
 800b3d0:	20001fc1 	.word	0x20001fc1

0800b3d4 <__sinit_lock_acquire>:
 800b3d4:	4801      	ldr	r0, [pc, #4]	; (800b3dc <__sinit_lock_acquire+0x8>)
 800b3d6:	f000 b8ac 	b.w	800b532 <__retarget_lock_acquire_recursive>
 800b3da:	bf00      	nop
 800b3dc:	20001fc2 	.word	0x20001fc2

0800b3e0 <__sinit_lock_release>:
 800b3e0:	4801      	ldr	r0, [pc, #4]	; (800b3e8 <__sinit_lock_release+0x8>)
 800b3e2:	f000 b8a7 	b.w	800b534 <__retarget_lock_release_recursive>
 800b3e6:	bf00      	nop
 800b3e8:	20001fc2 	.word	0x20001fc2

0800b3ec <__sinit>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	f7ff fff0 	bl	800b3d4 <__sinit_lock_acquire>
 800b3f4:	69a3      	ldr	r3, [r4, #24]
 800b3f6:	b11b      	cbz	r3, 800b400 <__sinit+0x14>
 800b3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3fc:	f7ff bff0 	b.w	800b3e0 <__sinit_lock_release>
 800b400:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b404:	6523      	str	r3, [r4, #80]	; 0x50
 800b406:	4b13      	ldr	r3, [pc, #76]	; (800b454 <__sinit+0x68>)
 800b408:	4a13      	ldr	r2, [pc, #76]	; (800b458 <__sinit+0x6c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b40e:	42a3      	cmp	r3, r4
 800b410:	bf04      	itt	eq
 800b412:	2301      	moveq	r3, #1
 800b414:	61a3      	streq	r3, [r4, #24]
 800b416:	4620      	mov	r0, r4
 800b418:	f000 f820 	bl	800b45c <__sfp>
 800b41c:	6060      	str	r0, [r4, #4]
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 f81c 	bl	800b45c <__sfp>
 800b424:	60a0      	str	r0, [r4, #8]
 800b426:	4620      	mov	r0, r4
 800b428:	f000 f818 	bl	800b45c <__sfp>
 800b42c:	2200      	movs	r2, #0
 800b42e:	60e0      	str	r0, [r4, #12]
 800b430:	2104      	movs	r1, #4
 800b432:	6860      	ldr	r0, [r4, #4]
 800b434:	f7ff ff82 	bl	800b33c <std>
 800b438:	68a0      	ldr	r0, [r4, #8]
 800b43a:	2201      	movs	r2, #1
 800b43c:	2109      	movs	r1, #9
 800b43e:	f7ff ff7d 	bl	800b33c <std>
 800b442:	68e0      	ldr	r0, [r4, #12]
 800b444:	2202      	movs	r2, #2
 800b446:	2112      	movs	r1, #18
 800b448:	f7ff ff78 	bl	800b33c <std>
 800b44c:	2301      	movs	r3, #1
 800b44e:	61a3      	str	r3, [r4, #24]
 800b450:	e7d2      	b.n	800b3f8 <__sinit+0xc>
 800b452:	bf00      	nop
 800b454:	0800c900 	.word	0x0800c900
 800b458:	0800b385 	.word	0x0800b385

0800b45c <__sfp>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	4607      	mov	r7, r0
 800b460:	f7ff ffac 	bl	800b3bc <__sfp_lock_acquire>
 800b464:	4b1e      	ldr	r3, [pc, #120]	; (800b4e0 <__sfp+0x84>)
 800b466:	681e      	ldr	r6, [r3, #0]
 800b468:	69b3      	ldr	r3, [r6, #24]
 800b46a:	b913      	cbnz	r3, 800b472 <__sfp+0x16>
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7ff ffbd 	bl	800b3ec <__sinit>
 800b472:	3648      	adds	r6, #72	; 0x48
 800b474:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b478:	3b01      	subs	r3, #1
 800b47a:	d503      	bpl.n	800b484 <__sfp+0x28>
 800b47c:	6833      	ldr	r3, [r6, #0]
 800b47e:	b30b      	cbz	r3, 800b4c4 <__sfp+0x68>
 800b480:	6836      	ldr	r6, [r6, #0]
 800b482:	e7f7      	b.n	800b474 <__sfp+0x18>
 800b484:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b488:	b9d5      	cbnz	r5, 800b4c0 <__sfp+0x64>
 800b48a:	4b16      	ldr	r3, [pc, #88]	; (800b4e4 <__sfp+0x88>)
 800b48c:	60e3      	str	r3, [r4, #12]
 800b48e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b492:	6665      	str	r5, [r4, #100]	; 0x64
 800b494:	f000 f84c 	bl	800b530 <__retarget_lock_init_recursive>
 800b498:	f7ff ff96 	bl	800b3c8 <__sfp_lock_release>
 800b49c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b4a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b4a4:	6025      	str	r5, [r4, #0]
 800b4a6:	61a5      	str	r5, [r4, #24]
 800b4a8:	2208      	movs	r2, #8
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b4b0:	f7fe fc28 	bl	8009d04 <memset>
 800b4b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b4b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b4bc:	4620      	mov	r0, r4
 800b4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c0:	3468      	adds	r4, #104	; 0x68
 800b4c2:	e7d9      	b.n	800b478 <__sfp+0x1c>
 800b4c4:	2104      	movs	r1, #4
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	f7ff ff62 	bl	800b390 <__sfmoreglue>
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	6030      	str	r0, [r6, #0]
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d1d5      	bne.n	800b480 <__sfp+0x24>
 800b4d4:	f7ff ff78 	bl	800b3c8 <__sfp_lock_release>
 800b4d8:	230c      	movs	r3, #12
 800b4da:	603b      	str	r3, [r7, #0]
 800b4dc:	e7ee      	b.n	800b4bc <__sfp+0x60>
 800b4de:	bf00      	nop
 800b4e0:	0800c900 	.word	0x0800c900
 800b4e4:	ffff0001 	.word	0xffff0001

0800b4e8 <_fwalk_reent>:
 800b4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	4688      	mov	r8, r1
 800b4f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4f4:	2700      	movs	r7, #0
 800b4f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b4fe:	d505      	bpl.n	800b50c <_fwalk_reent+0x24>
 800b500:	6824      	ldr	r4, [r4, #0]
 800b502:	2c00      	cmp	r4, #0
 800b504:	d1f7      	bne.n	800b4f6 <_fwalk_reent+0xe>
 800b506:	4638      	mov	r0, r7
 800b508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b50c:	89ab      	ldrh	r3, [r5, #12]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d907      	bls.n	800b522 <_fwalk_reent+0x3a>
 800b512:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b516:	3301      	adds	r3, #1
 800b518:	d003      	beq.n	800b522 <_fwalk_reent+0x3a>
 800b51a:	4629      	mov	r1, r5
 800b51c:	4630      	mov	r0, r6
 800b51e:	47c0      	blx	r8
 800b520:	4307      	orrs	r7, r0
 800b522:	3568      	adds	r5, #104	; 0x68
 800b524:	e7e9      	b.n	800b4fa <_fwalk_reent+0x12>
	...

0800b528 <_localeconv_r>:
 800b528:	4800      	ldr	r0, [pc, #0]	; (800b52c <_localeconv_r+0x4>)
 800b52a:	4770      	bx	lr
 800b52c:	20000254 	.word	0x20000254

0800b530 <__retarget_lock_init_recursive>:
 800b530:	4770      	bx	lr

0800b532 <__retarget_lock_acquire_recursive>:
 800b532:	4770      	bx	lr

0800b534 <__retarget_lock_release_recursive>:
 800b534:	4770      	bx	lr
	...

0800b538 <malloc>:
 800b538:	4b02      	ldr	r3, [pc, #8]	; (800b544 <malloc+0xc>)
 800b53a:	4601      	mov	r1, r0
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	f000 bc17 	b.w	800bd70 <_malloc_r>
 800b542:	bf00      	nop
 800b544:	20000100 	.word	0x20000100

0800b548 <memcpy>:
 800b548:	440a      	add	r2, r1
 800b54a:	4291      	cmp	r1, r2
 800b54c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b550:	d100      	bne.n	800b554 <memcpy+0xc>
 800b552:	4770      	bx	lr
 800b554:	b510      	push	{r4, lr}
 800b556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b55a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b55e:	4291      	cmp	r1, r2
 800b560:	d1f9      	bne.n	800b556 <memcpy+0xe>
 800b562:	bd10      	pop	{r4, pc}

0800b564 <_Balloc>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b568:	4604      	mov	r4, r0
 800b56a:	460d      	mov	r5, r1
 800b56c:	b976      	cbnz	r6, 800b58c <_Balloc+0x28>
 800b56e:	2010      	movs	r0, #16
 800b570:	f7ff ffe2 	bl	800b538 <malloc>
 800b574:	4602      	mov	r2, r0
 800b576:	6260      	str	r0, [r4, #36]	; 0x24
 800b578:	b920      	cbnz	r0, 800b584 <_Balloc+0x20>
 800b57a:	4b18      	ldr	r3, [pc, #96]	; (800b5dc <_Balloc+0x78>)
 800b57c:	4818      	ldr	r0, [pc, #96]	; (800b5e0 <_Balloc+0x7c>)
 800b57e:	2166      	movs	r1, #102	; 0x66
 800b580:	f000 ff32 	bl	800c3e8 <__assert_func>
 800b584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b588:	6006      	str	r6, [r0, #0]
 800b58a:	60c6      	str	r6, [r0, #12]
 800b58c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b58e:	68f3      	ldr	r3, [r6, #12]
 800b590:	b183      	cbz	r3, 800b5b4 <_Balloc+0x50>
 800b592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b59a:	b9b8      	cbnz	r0, 800b5cc <_Balloc+0x68>
 800b59c:	2101      	movs	r1, #1
 800b59e:	fa01 f605 	lsl.w	r6, r1, r5
 800b5a2:	1d72      	adds	r2, r6, #5
 800b5a4:	0092      	lsls	r2, r2, #2
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f000 fb60 	bl	800bc6c <_calloc_r>
 800b5ac:	b160      	cbz	r0, 800b5c8 <_Balloc+0x64>
 800b5ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5b2:	e00e      	b.n	800b5d2 <_Balloc+0x6e>
 800b5b4:	2221      	movs	r2, #33	; 0x21
 800b5b6:	2104      	movs	r1, #4
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 fb57 	bl	800bc6c <_calloc_r>
 800b5be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5c0:	60f0      	str	r0, [r6, #12]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1e4      	bne.n	800b592 <_Balloc+0x2e>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	6802      	ldr	r2, [r0, #0]
 800b5ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5d8:	e7f7      	b.n	800b5ca <_Balloc+0x66>
 800b5da:	bf00      	nop
 800b5dc:	0800c945 	.word	0x0800c945
 800b5e0:	0800ca28 	.word	0x0800ca28

0800b5e4 <_Bfree>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	b976      	cbnz	r6, 800b60c <_Bfree+0x28>
 800b5ee:	2010      	movs	r0, #16
 800b5f0:	f7ff ffa2 	bl	800b538 <malloc>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	6268      	str	r0, [r5, #36]	; 0x24
 800b5f8:	b920      	cbnz	r0, 800b604 <_Bfree+0x20>
 800b5fa:	4b09      	ldr	r3, [pc, #36]	; (800b620 <_Bfree+0x3c>)
 800b5fc:	4809      	ldr	r0, [pc, #36]	; (800b624 <_Bfree+0x40>)
 800b5fe:	218a      	movs	r1, #138	; 0x8a
 800b600:	f000 fef2 	bl	800c3e8 <__assert_func>
 800b604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b608:	6006      	str	r6, [r0, #0]
 800b60a:	60c6      	str	r6, [r0, #12]
 800b60c:	b13c      	cbz	r4, 800b61e <_Bfree+0x3a>
 800b60e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b610:	6862      	ldr	r2, [r4, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b618:	6021      	str	r1, [r4, #0]
 800b61a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	0800c945 	.word	0x0800c945
 800b624:	0800ca28 	.word	0x0800ca28

0800b628 <__multadd>:
 800b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	690d      	ldr	r5, [r1, #16]
 800b62e:	4607      	mov	r7, r0
 800b630:	460c      	mov	r4, r1
 800b632:	461e      	mov	r6, r3
 800b634:	f101 0c14 	add.w	ip, r1, #20
 800b638:	2000      	movs	r0, #0
 800b63a:	f8dc 3000 	ldr.w	r3, [ip]
 800b63e:	b299      	uxth	r1, r3
 800b640:	fb02 6101 	mla	r1, r2, r1, r6
 800b644:	0c1e      	lsrs	r6, r3, #16
 800b646:	0c0b      	lsrs	r3, r1, #16
 800b648:	fb02 3306 	mla	r3, r2, r6, r3
 800b64c:	b289      	uxth	r1, r1
 800b64e:	3001      	adds	r0, #1
 800b650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b654:	4285      	cmp	r5, r0
 800b656:	f84c 1b04 	str.w	r1, [ip], #4
 800b65a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b65e:	dcec      	bgt.n	800b63a <__multadd+0x12>
 800b660:	b30e      	cbz	r6, 800b6a6 <__multadd+0x7e>
 800b662:	68a3      	ldr	r3, [r4, #8]
 800b664:	42ab      	cmp	r3, r5
 800b666:	dc19      	bgt.n	800b69c <__multadd+0x74>
 800b668:	6861      	ldr	r1, [r4, #4]
 800b66a:	4638      	mov	r0, r7
 800b66c:	3101      	adds	r1, #1
 800b66e:	f7ff ff79 	bl	800b564 <_Balloc>
 800b672:	4680      	mov	r8, r0
 800b674:	b928      	cbnz	r0, 800b682 <__multadd+0x5a>
 800b676:	4602      	mov	r2, r0
 800b678:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <__multadd+0x84>)
 800b67a:	480d      	ldr	r0, [pc, #52]	; (800b6b0 <__multadd+0x88>)
 800b67c:	21b5      	movs	r1, #181	; 0xb5
 800b67e:	f000 feb3 	bl	800c3e8 <__assert_func>
 800b682:	6922      	ldr	r2, [r4, #16]
 800b684:	3202      	adds	r2, #2
 800b686:	f104 010c 	add.w	r1, r4, #12
 800b68a:	0092      	lsls	r2, r2, #2
 800b68c:	300c      	adds	r0, #12
 800b68e:	f7ff ff5b 	bl	800b548 <memcpy>
 800b692:	4621      	mov	r1, r4
 800b694:	4638      	mov	r0, r7
 800b696:	f7ff ffa5 	bl	800b5e4 <_Bfree>
 800b69a:	4644      	mov	r4, r8
 800b69c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	615e      	str	r6, [r3, #20]
 800b6a4:	6125      	str	r5, [r4, #16]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ac:	0800c9b7 	.word	0x0800c9b7
 800b6b0:	0800ca28 	.word	0x0800ca28

0800b6b4 <__hi0bits>:
 800b6b4:	0c03      	lsrs	r3, r0, #16
 800b6b6:	041b      	lsls	r3, r3, #16
 800b6b8:	b9d3      	cbnz	r3, 800b6f0 <__hi0bits+0x3c>
 800b6ba:	0400      	lsls	r0, r0, #16
 800b6bc:	2310      	movs	r3, #16
 800b6be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6c2:	bf04      	itt	eq
 800b6c4:	0200      	lsleq	r0, r0, #8
 800b6c6:	3308      	addeq	r3, #8
 800b6c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6cc:	bf04      	itt	eq
 800b6ce:	0100      	lsleq	r0, r0, #4
 800b6d0:	3304      	addeq	r3, #4
 800b6d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6d6:	bf04      	itt	eq
 800b6d8:	0080      	lsleq	r0, r0, #2
 800b6da:	3302      	addeq	r3, #2
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	db05      	blt.n	800b6ec <__hi0bits+0x38>
 800b6e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6e4:	f103 0301 	add.w	r3, r3, #1
 800b6e8:	bf08      	it	eq
 800b6ea:	2320      	moveq	r3, #32
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	4770      	bx	lr
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	e7e4      	b.n	800b6be <__hi0bits+0xa>

0800b6f4 <__lo0bits>:
 800b6f4:	6803      	ldr	r3, [r0, #0]
 800b6f6:	f013 0207 	ands.w	r2, r3, #7
 800b6fa:	4601      	mov	r1, r0
 800b6fc:	d00b      	beq.n	800b716 <__lo0bits+0x22>
 800b6fe:	07da      	lsls	r2, r3, #31
 800b700:	d423      	bmi.n	800b74a <__lo0bits+0x56>
 800b702:	0798      	lsls	r0, r3, #30
 800b704:	bf49      	itett	mi
 800b706:	085b      	lsrmi	r3, r3, #1
 800b708:	089b      	lsrpl	r3, r3, #2
 800b70a:	2001      	movmi	r0, #1
 800b70c:	600b      	strmi	r3, [r1, #0]
 800b70e:	bf5c      	itt	pl
 800b710:	600b      	strpl	r3, [r1, #0]
 800b712:	2002      	movpl	r0, #2
 800b714:	4770      	bx	lr
 800b716:	b298      	uxth	r0, r3
 800b718:	b9a8      	cbnz	r0, 800b746 <__lo0bits+0x52>
 800b71a:	0c1b      	lsrs	r3, r3, #16
 800b71c:	2010      	movs	r0, #16
 800b71e:	b2da      	uxtb	r2, r3
 800b720:	b90a      	cbnz	r2, 800b726 <__lo0bits+0x32>
 800b722:	3008      	adds	r0, #8
 800b724:	0a1b      	lsrs	r3, r3, #8
 800b726:	071a      	lsls	r2, r3, #28
 800b728:	bf04      	itt	eq
 800b72a:	091b      	lsreq	r3, r3, #4
 800b72c:	3004      	addeq	r0, #4
 800b72e:	079a      	lsls	r2, r3, #30
 800b730:	bf04      	itt	eq
 800b732:	089b      	lsreq	r3, r3, #2
 800b734:	3002      	addeq	r0, #2
 800b736:	07da      	lsls	r2, r3, #31
 800b738:	d403      	bmi.n	800b742 <__lo0bits+0x4e>
 800b73a:	085b      	lsrs	r3, r3, #1
 800b73c:	f100 0001 	add.w	r0, r0, #1
 800b740:	d005      	beq.n	800b74e <__lo0bits+0x5a>
 800b742:	600b      	str	r3, [r1, #0]
 800b744:	4770      	bx	lr
 800b746:	4610      	mov	r0, r2
 800b748:	e7e9      	b.n	800b71e <__lo0bits+0x2a>
 800b74a:	2000      	movs	r0, #0
 800b74c:	4770      	bx	lr
 800b74e:	2020      	movs	r0, #32
 800b750:	4770      	bx	lr
	...

0800b754 <__i2b>:
 800b754:	b510      	push	{r4, lr}
 800b756:	460c      	mov	r4, r1
 800b758:	2101      	movs	r1, #1
 800b75a:	f7ff ff03 	bl	800b564 <_Balloc>
 800b75e:	4602      	mov	r2, r0
 800b760:	b928      	cbnz	r0, 800b76e <__i2b+0x1a>
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <__i2b+0x24>)
 800b764:	4805      	ldr	r0, [pc, #20]	; (800b77c <__i2b+0x28>)
 800b766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b76a:	f000 fe3d 	bl	800c3e8 <__assert_func>
 800b76e:	2301      	movs	r3, #1
 800b770:	6144      	str	r4, [r0, #20]
 800b772:	6103      	str	r3, [r0, #16]
 800b774:	bd10      	pop	{r4, pc}
 800b776:	bf00      	nop
 800b778:	0800c9b7 	.word	0x0800c9b7
 800b77c:	0800ca28 	.word	0x0800ca28

0800b780 <__multiply>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	4691      	mov	r9, r2
 800b786:	690a      	ldr	r2, [r1, #16]
 800b788:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	bfb8      	it	lt
 800b790:	460b      	movlt	r3, r1
 800b792:	460c      	mov	r4, r1
 800b794:	bfbc      	itt	lt
 800b796:	464c      	movlt	r4, r9
 800b798:	4699      	movlt	r9, r3
 800b79a:	6927      	ldr	r7, [r4, #16]
 800b79c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7a0:	68a3      	ldr	r3, [r4, #8]
 800b7a2:	6861      	ldr	r1, [r4, #4]
 800b7a4:	eb07 060a 	add.w	r6, r7, sl
 800b7a8:	42b3      	cmp	r3, r6
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	bfb8      	it	lt
 800b7ae:	3101      	addlt	r1, #1
 800b7b0:	f7ff fed8 	bl	800b564 <_Balloc>
 800b7b4:	b930      	cbnz	r0, 800b7c4 <__multiply+0x44>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	4b44      	ldr	r3, [pc, #272]	; (800b8cc <__multiply+0x14c>)
 800b7ba:	4845      	ldr	r0, [pc, #276]	; (800b8d0 <__multiply+0x150>)
 800b7bc:	f240 115d 	movw	r1, #349	; 0x15d
 800b7c0:	f000 fe12 	bl	800c3e8 <__assert_func>
 800b7c4:	f100 0514 	add.w	r5, r0, #20
 800b7c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	4543      	cmp	r3, r8
 800b7d2:	d321      	bcc.n	800b818 <__multiply+0x98>
 800b7d4:	f104 0314 	add.w	r3, r4, #20
 800b7d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7dc:	f109 0314 	add.w	r3, r9, #20
 800b7e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7e4:	9202      	str	r2, [sp, #8]
 800b7e6:	1b3a      	subs	r2, r7, r4
 800b7e8:	3a15      	subs	r2, #21
 800b7ea:	f022 0203 	bic.w	r2, r2, #3
 800b7ee:	3204      	adds	r2, #4
 800b7f0:	f104 0115 	add.w	r1, r4, #21
 800b7f4:	428f      	cmp	r7, r1
 800b7f6:	bf38      	it	cc
 800b7f8:	2204      	movcc	r2, #4
 800b7fa:	9201      	str	r2, [sp, #4]
 800b7fc:	9a02      	ldr	r2, [sp, #8]
 800b7fe:	9303      	str	r3, [sp, #12]
 800b800:	429a      	cmp	r2, r3
 800b802:	d80c      	bhi.n	800b81e <__multiply+0x9e>
 800b804:	2e00      	cmp	r6, #0
 800b806:	dd03      	ble.n	800b810 <__multiply+0x90>
 800b808:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d05a      	beq.n	800b8c6 <__multiply+0x146>
 800b810:	6106      	str	r6, [r0, #16]
 800b812:	b005      	add	sp, #20
 800b814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b818:	f843 2b04 	str.w	r2, [r3], #4
 800b81c:	e7d8      	b.n	800b7d0 <__multiply+0x50>
 800b81e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b822:	f1ba 0f00 	cmp.w	sl, #0
 800b826:	d024      	beq.n	800b872 <__multiply+0xf2>
 800b828:	f104 0e14 	add.w	lr, r4, #20
 800b82c:	46a9      	mov	r9, r5
 800b82e:	f04f 0c00 	mov.w	ip, #0
 800b832:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b836:	f8d9 1000 	ldr.w	r1, [r9]
 800b83a:	fa1f fb82 	uxth.w	fp, r2
 800b83e:	b289      	uxth	r1, r1
 800b840:	fb0a 110b 	mla	r1, sl, fp, r1
 800b844:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b848:	f8d9 2000 	ldr.w	r2, [r9]
 800b84c:	4461      	add	r1, ip
 800b84e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b852:	fb0a c20b 	mla	r2, sl, fp, ip
 800b856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b85a:	b289      	uxth	r1, r1
 800b85c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b860:	4577      	cmp	r7, lr
 800b862:	f849 1b04 	str.w	r1, [r9], #4
 800b866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b86a:	d8e2      	bhi.n	800b832 <__multiply+0xb2>
 800b86c:	9a01      	ldr	r2, [sp, #4]
 800b86e:	f845 c002 	str.w	ip, [r5, r2]
 800b872:	9a03      	ldr	r2, [sp, #12]
 800b874:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b878:	3304      	adds	r3, #4
 800b87a:	f1b9 0f00 	cmp.w	r9, #0
 800b87e:	d020      	beq.n	800b8c2 <__multiply+0x142>
 800b880:	6829      	ldr	r1, [r5, #0]
 800b882:	f104 0c14 	add.w	ip, r4, #20
 800b886:	46ae      	mov	lr, r5
 800b888:	f04f 0a00 	mov.w	sl, #0
 800b88c:	f8bc b000 	ldrh.w	fp, [ip]
 800b890:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b894:	fb09 220b 	mla	r2, r9, fp, r2
 800b898:	4492      	add	sl, r2
 800b89a:	b289      	uxth	r1, r1
 800b89c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b8a0:	f84e 1b04 	str.w	r1, [lr], #4
 800b8a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b8a8:	f8be 1000 	ldrh.w	r1, [lr]
 800b8ac:	0c12      	lsrs	r2, r2, #16
 800b8ae:	fb09 1102 	mla	r1, r9, r2, r1
 800b8b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b8b6:	4567      	cmp	r7, ip
 800b8b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8bc:	d8e6      	bhi.n	800b88c <__multiply+0x10c>
 800b8be:	9a01      	ldr	r2, [sp, #4]
 800b8c0:	50a9      	str	r1, [r5, r2]
 800b8c2:	3504      	adds	r5, #4
 800b8c4:	e79a      	b.n	800b7fc <__multiply+0x7c>
 800b8c6:	3e01      	subs	r6, #1
 800b8c8:	e79c      	b.n	800b804 <__multiply+0x84>
 800b8ca:	bf00      	nop
 800b8cc:	0800c9b7 	.word	0x0800c9b7
 800b8d0:	0800ca28 	.word	0x0800ca28

0800b8d4 <__pow5mult>:
 800b8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d8:	4615      	mov	r5, r2
 800b8da:	f012 0203 	ands.w	r2, r2, #3
 800b8de:	4606      	mov	r6, r0
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	d007      	beq.n	800b8f4 <__pow5mult+0x20>
 800b8e4:	4c25      	ldr	r4, [pc, #148]	; (800b97c <__pow5mult+0xa8>)
 800b8e6:	3a01      	subs	r2, #1
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8ee:	f7ff fe9b 	bl	800b628 <__multadd>
 800b8f2:	4607      	mov	r7, r0
 800b8f4:	10ad      	asrs	r5, r5, #2
 800b8f6:	d03d      	beq.n	800b974 <__pow5mult+0xa0>
 800b8f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b8fa:	b97c      	cbnz	r4, 800b91c <__pow5mult+0x48>
 800b8fc:	2010      	movs	r0, #16
 800b8fe:	f7ff fe1b 	bl	800b538 <malloc>
 800b902:	4602      	mov	r2, r0
 800b904:	6270      	str	r0, [r6, #36]	; 0x24
 800b906:	b928      	cbnz	r0, 800b914 <__pow5mult+0x40>
 800b908:	4b1d      	ldr	r3, [pc, #116]	; (800b980 <__pow5mult+0xac>)
 800b90a:	481e      	ldr	r0, [pc, #120]	; (800b984 <__pow5mult+0xb0>)
 800b90c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b910:	f000 fd6a 	bl	800c3e8 <__assert_func>
 800b914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b918:	6004      	str	r4, [r0, #0]
 800b91a:	60c4      	str	r4, [r0, #12]
 800b91c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b924:	b94c      	cbnz	r4, 800b93a <__pow5mult+0x66>
 800b926:	f240 2171 	movw	r1, #625	; 0x271
 800b92a:	4630      	mov	r0, r6
 800b92c:	f7ff ff12 	bl	800b754 <__i2b>
 800b930:	2300      	movs	r3, #0
 800b932:	f8c8 0008 	str.w	r0, [r8, #8]
 800b936:	4604      	mov	r4, r0
 800b938:	6003      	str	r3, [r0, #0]
 800b93a:	f04f 0900 	mov.w	r9, #0
 800b93e:	07eb      	lsls	r3, r5, #31
 800b940:	d50a      	bpl.n	800b958 <__pow5mult+0x84>
 800b942:	4639      	mov	r1, r7
 800b944:	4622      	mov	r2, r4
 800b946:	4630      	mov	r0, r6
 800b948:	f7ff ff1a 	bl	800b780 <__multiply>
 800b94c:	4639      	mov	r1, r7
 800b94e:	4680      	mov	r8, r0
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff fe47 	bl	800b5e4 <_Bfree>
 800b956:	4647      	mov	r7, r8
 800b958:	106d      	asrs	r5, r5, #1
 800b95a:	d00b      	beq.n	800b974 <__pow5mult+0xa0>
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	b938      	cbnz	r0, 800b970 <__pow5mult+0x9c>
 800b960:	4622      	mov	r2, r4
 800b962:	4621      	mov	r1, r4
 800b964:	4630      	mov	r0, r6
 800b966:	f7ff ff0b 	bl	800b780 <__multiply>
 800b96a:	6020      	str	r0, [r4, #0]
 800b96c:	f8c0 9000 	str.w	r9, [r0]
 800b970:	4604      	mov	r4, r0
 800b972:	e7e4      	b.n	800b93e <__pow5mult+0x6a>
 800b974:	4638      	mov	r0, r7
 800b976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97a:	bf00      	nop
 800b97c:	0800cb78 	.word	0x0800cb78
 800b980:	0800c945 	.word	0x0800c945
 800b984:	0800ca28 	.word	0x0800ca28

0800b988 <__lshift>:
 800b988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b98c:	460c      	mov	r4, r1
 800b98e:	6849      	ldr	r1, [r1, #4]
 800b990:	6923      	ldr	r3, [r4, #16]
 800b992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b996:	68a3      	ldr	r3, [r4, #8]
 800b998:	4607      	mov	r7, r0
 800b99a:	4691      	mov	r9, r2
 800b99c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9a0:	f108 0601 	add.w	r6, r8, #1
 800b9a4:	42b3      	cmp	r3, r6
 800b9a6:	db0b      	blt.n	800b9c0 <__lshift+0x38>
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7ff fddb 	bl	800b564 <_Balloc>
 800b9ae:	4605      	mov	r5, r0
 800b9b0:	b948      	cbnz	r0, 800b9c6 <__lshift+0x3e>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b2a      	ldr	r3, [pc, #168]	; (800ba60 <__lshift+0xd8>)
 800b9b6:	482b      	ldr	r0, [pc, #172]	; (800ba64 <__lshift+0xdc>)
 800b9b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b9bc:	f000 fd14 	bl	800c3e8 <__assert_func>
 800b9c0:	3101      	adds	r1, #1
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	e7ee      	b.n	800b9a4 <__lshift+0x1c>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f100 0114 	add.w	r1, r0, #20
 800b9cc:	f100 0210 	add.w	r2, r0, #16
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	4553      	cmp	r3, sl
 800b9d4:	db37      	blt.n	800ba46 <__lshift+0xbe>
 800b9d6:	6920      	ldr	r0, [r4, #16]
 800b9d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9dc:	f104 0314 	add.w	r3, r4, #20
 800b9e0:	f019 091f 	ands.w	r9, r9, #31
 800b9e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b9ec:	d02f      	beq.n	800ba4e <__lshift+0xc6>
 800b9ee:	f1c9 0e20 	rsb	lr, r9, #32
 800b9f2:	468a      	mov	sl, r1
 800b9f4:	f04f 0c00 	mov.w	ip, #0
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	fa02 f209 	lsl.w	r2, r2, r9
 800b9fe:	ea42 020c 	orr.w	r2, r2, ip
 800ba02:	f84a 2b04 	str.w	r2, [sl], #4
 800ba06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba0a:	4298      	cmp	r0, r3
 800ba0c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ba10:	d8f2      	bhi.n	800b9f8 <__lshift+0x70>
 800ba12:	1b03      	subs	r3, r0, r4
 800ba14:	3b15      	subs	r3, #21
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	f104 0215 	add.w	r2, r4, #21
 800ba20:	4290      	cmp	r0, r2
 800ba22:	bf38      	it	cc
 800ba24:	2304      	movcc	r3, #4
 800ba26:	f841 c003 	str.w	ip, [r1, r3]
 800ba2a:	f1bc 0f00 	cmp.w	ip, #0
 800ba2e:	d001      	beq.n	800ba34 <__lshift+0xac>
 800ba30:	f108 0602 	add.w	r6, r8, #2
 800ba34:	3e01      	subs	r6, #1
 800ba36:	4638      	mov	r0, r7
 800ba38:	612e      	str	r6, [r5, #16]
 800ba3a:	4621      	mov	r1, r4
 800ba3c:	f7ff fdd2 	bl	800b5e4 <_Bfree>
 800ba40:	4628      	mov	r0, r5
 800ba42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba46:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	e7c1      	b.n	800b9d2 <__lshift+0x4a>
 800ba4e:	3904      	subs	r1, #4
 800ba50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba54:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba58:	4298      	cmp	r0, r3
 800ba5a:	d8f9      	bhi.n	800ba50 <__lshift+0xc8>
 800ba5c:	e7ea      	b.n	800ba34 <__lshift+0xac>
 800ba5e:	bf00      	nop
 800ba60:	0800c9b7 	.word	0x0800c9b7
 800ba64:	0800ca28 	.word	0x0800ca28

0800ba68 <__mcmp>:
 800ba68:	b530      	push	{r4, r5, lr}
 800ba6a:	6902      	ldr	r2, [r0, #16]
 800ba6c:	690c      	ldr	r4, [r1, #16]
 800ba6e:	1b12      	subs	r2, r2, r4
 800ba70:	d10e      	bne.n	800ba90 <__mcmp+0x28>
 800ba72:	f100 0314 	add.w	r3, r0, #20
 800ba76:	3114      	adds	r1, #20
 800ba78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba88:	42a5      	cmp	r5, r4
 800ba8a:	d003      	beq.n	800ba94 <__mcmp+0x2c>
 800ba8c:	d305      	bcc.n	800ba9a <__mcmp+0x32>
 800ba8e:	2201      	movs	r2, #1
 800ba90:	4610      	mov	r0, r2
 800ba92:	bd30      	pop	{r4, r5, pc}
 800ba94:	4283      	cmp	r3, r0
 800ba96:	d3f3      	bcc.n	800ba80 <__mcmp+0x18>
 800ba98:	e7fa      	b.n	800ba90 <__mcmp+0x28>
 800ba9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba9e:	e7f7      	b.n	800ba90 <__mcmp+0x28>

0800baa0 <__mdiff>:
 800baa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa4:	460c      	mov	r4, r1
 800baa6:	4606      	mov	r6, r0
 800baa8:	4611      	mov	r1, r2
 800baaa:	4620      	mov	r0, r4
 800baac:	4690      	mov	r8, r2
 800baae:	f7ff ffdb 	bl	800ba68 <__mcmp>
 800bab2:	1e05      	subs	r5, r0, #0
 800bab4:	d110      	bne.n	800bad8 <__mdiff+0x38>
 800bab6:	4629      	mov	r1, r5
 800bab8:	4630      	mov	r0, r6
 800baba:	f7ff fd53 	bl	800b564 <_Balloc>
 800babe:	b930      	cbnz	r0, 800bace <__mdiff+0x2e>
 800bac0:	4b3a      	ldr	r3, [pc, #232]	; (800bbac <__mdiff+0x10c>)
 800bac2:	4602      	mov	r2, r0
 800bac4:	f240 2132 	movw	r1, #562	; 0x232
 800bac8:	4839      	ldr	r0, [pc, #228]	; (800bbb0 <__mdiff+0x110>)
 800baca:	f000 fc8d 	bl	800c3e8 <__assert_func>
 800bace:	2301      	movs	r3, #1
 800bad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad8:	bfa4      	itt	ge
 800bada:	4643      	movge	r3, r8
 800badc:	46a0      	movge	r8, r4
 800bade:	4630      	mov	r0, r6
 800bae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bae4:	bfa6      	itte	ge
 800bae6:	461c      	movge	r4, r3
 800bae8:	2500      	movge	r5, #0
 800baea:	2501      	movlt	r5, #1
 800baec:	f7ff fd3a 	bl	800b564 <_Balloc>
 800baf0:	b920      	cbnz	r0, 800bafc <__mdiff+0x5c>
 800baf2:	4b2e      	ldr	r3, [pc, #184]	; (800bbac <__mdiff+0x10c>)
 800baf4:	4602      	mov	r2, r0
 800baf6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bafa:	e7e5      	b.n	800bac8 <__mdiff+0x28>
 800bafc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb00:	6926      	ldr	r6, [r4, #16]
 800bb02:	60c5      	str	r5, [r0, #12]
 800bb04:	f104 0914 	add.w	r9, r4, #20
 800bb08:	f108 0514 	add.w	r5, r8, #20
 800bb0c:	f100 0e14 	add.w	lr, r0, #20
 800bb10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bb14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bb18:	f108 0210 	add.w	r2, r8, #16
 800bb1c:	46f2      	mov	sl, lr
 800bb1e:	2100      	movs	r1, #0
 800bb20:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb28:	fa1f f883 	uxth.w	r8, r3
 800bb2c:	fa11 f18b 	uxtah	r1, r1, fp
 800bb30:	0c1b      	lsrs	r3, r3, #16
 800bb32:	eba1 0808 	sub.w	r8, r1, r8
 800bb36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb3e:	fa1f f888 	uxth.w	r8, r8
 800bb42:	1419      	asrs	r1, r3, #16
 800bb44:	454e      	cmp	r6, r9
 800bb46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb4a:	f84a 3b04 	str.w	r3, [sl], #4
 800bb4e:	d8e7      	bhi.n	800bb20 <__mdiff+0x80>
 800bb50:	1b33      	subs	r3, r6, r4
 800bb52:	3b15      	subs	r3, #21
 800bb54:	f023 0303 	bic.w	r3, r3, #3
 800bb58:	3304      	adds	r3, #4
 800bb5a:	3415      	adds	r4, #21
 800bb5c:	42a6      	cmp	r6, r4
 800bb5e:	bf38      	it	cc
 800bb60:	2304      	movcc	r3, #4
 800bb62:	441d      	add	r5, r3
 800bb64:	4473      	add	r3, lr
 800bb66:	469e      	mov	lr, r3
 800bb68:	462e      	mov	r6, r5
 800bb6a:	4566      	cmp	r6, ip
 800bb6c:	d30e      	bcc.n	800bb8c <__mdiff+0xec>
 800bb6e:	f10c 0203 	add.w	r2, ip, #3
 800bb72:	1b52      	subs	r2, r2, r5
 800bb74:	f022 0203 	bic.w	r2, r2, #3
 800bb78:	3d03      	subs	r5, #3
 800bb7a:	45ac      	cmp	ip, r5
 800bb7c:	bf38      	it	cc
 800bb7e:	2200      	movcc	r2, #0
 800bb80:	441a      	add	r2, r3
 800bb82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bb86:	b17b      	cbz	r3, 800bba8 <__mdiff+0x108>
 800bb88:	6107      	str	r7, [r0, #16]
 800bb8a:	e7a3      	b.n	800bad4 <__mdiff+0x34>
 800bb8c:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb90:	fa11 f288 	uxtah	r2, r1, r8
 800bb94:	1414      	asrs	r4, r2, #16
 800bb96:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb9a:	b292      	uxth	r2, r2
 800bb9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bba0:	f84e 2b04 	str.w	r2, [lr], #4
 800bba4:	1421      	asrs	r1, r4, #16
 800bba6:	e7e0      	b.n	800bb6a <__mdiff+0xca>
 800bba8:	3f01      	subs	r7, #1
 800bbaa:	e7ea      	b.n	800bb82 <__mdiff+0xe2>
 800bbac:	0800c9b7 	.word	0x0800c9b7
 800bbb0:	0800ca28 	.word	0x0800ca28

0800bbb4 <__d2b>:
 800bbb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bbb8:	4689      	mov	r9, r1
 800bbba:	2101      	movs	r1, #1
 800bbbc:	ec57 6b10 	vmov	r6, r7, d0
 800bbc0:	4690      	mov	r8, r2
 800bbc2:	f7ff fccf 	bl	800b564 <_Balloc>
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	b930      	cbnz	r0, 800bbd8 <__d2b+0x24>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	4b25      	ldr	r3, [pc, #148]	; (800bc64 <__d2b+0xb0>)
 800bbce:	4826      	ldr	r0, [pc, #152]	; (800bc68 <__d2b+0xb4>)
 800bbd0:	f240 310a 	movw	r1, #778	; 0x30a
 800bbd4:	f000 fc08 	bl	800c3e8 <__assert_func>
 800bbd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bbdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bbe0:	bb35      	cbnz	r5, 800bc30 <__d2b+0x7c>
 800bbe2:	2e00      	cmp	r6, #0
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	d028      	beq.n	800bc3a <__d2b+0x86>
 800bbe8:	4668      	mov	r0, sp
 800bbea:	9600      	str	r6, [sp, #0]
 800bbec:	f7ff fd82 	bl	800b6f4 <__lo0bits>
 800bbf0:	9900      	ldr	r1, [sp, #0]
 800bbf2:	b300      	cbz	r0, 800bc36 <__d2b+0x82>
 800bbf4:	9a01      	ldr	r2, [sp, #4]
 800bbf6:	f1c0 0320 	rsb	r3, r0, #32
 800bbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfe:	430b      	orrs	r3, r1
 800bc00:	40c2      	lsrs	r2, r0
 800bc02:	6163      	str	r3, [r4, #20]
 800bc04:	9201      	str	r2, [sp, #4]
 800bc06:	9b01      	ldr	r3, [sp, #4]
 800bc08:	61a3      	str	r3, [r4, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bf14      	ite	ne
 800bc0e:	2202      	movne	r2, #2
 800bc10:	2201      	moveq	r2, #1
 800bc12:	6122      	str	r2, [r4, #16]
 800bc14:	b1d5      	cbz	r5, 800bc4c <__d2b+0x98>
 800bc16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc1a:	4405      	add	r5, r0
 800bc1c:	f8c9 5000 	str.w	r5, [r9]
 800bc20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc24:	f8c8 0000 	str.w	r0, [r8]
 800bc28:	4620      	mov	r0, r4
 800bc2a:	b003      	add	sp, #12
 800bc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc34:	e7d5      	b.n	800bbe2 <__d2b+0x2e>
 800bc36:	6161      	str	r1, [r4, #20]
 800bc38:	e7e5      	b.n	800bc06 <__d2b+0x52>
 800bc3a:	a801      	add	r0, sp, #4
 800bc3c:	f7ff fd5a 	bl	800b6f4 <__lo0bits>
 800bc40:	9b01      	ldr	r3, [sp, #4]
 800bc42:	6163      	str	r3, [r4, #20]
 800bc44:	2201      	movs	r2, #1
 800bc46:	6122      	str	r2, [r4, #16]
 800bc48:	3020      	adds	r0, #32
 800bc4a:	e7e3      	b.n	800bc14 <__d2b+0x60>
 800bc4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc54:	f8c9 0000 	str.w	r0, [r9]
 800bc58:	6918      	ldr	r0, [r3, #16]
 800bc5a:	f7ff fd2b 	bl	800b6b4 <__hi0bits>
 800bc5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc62:	e7df      	b.n	800bc24 <__d2b+0x70>
 800bc64:	0800c9b7 	.word	0x0800c9b7
 800bc68:	0800ca28 	.word	0x0800ca28

0800bc6c <_calloc_r>:
 800bc6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc6e:	fba1 2402 	umull	r2, r4, r1, r2
 800bc72:	b94c      	cbnz	r4, 800bc88 <_calloc_r+0x1c>
 800bc74:	4611      	mov	r1, r2
 800bc76:	9201      	str	r2, [sp, #4]
 800bc78:	f000 f87a 	bl	800bd70 <_malloc_r>
 800bc7c:	9a01      	ldr	r2, [sp, #4]
 800bc7e:	4605      	mov	r5, r0
 800bc80:	b930      	cbnz	r0, 800bc90 <_calloc_r+0x24>
 800bc82:	4628      	mov	r0, r5
 800bc84:	b003      	add	sp, #12
 800bc86:	bd30      	pop	{r4, r5, pc}
 800bc88:	220c      	movs	r2, #12
 800bc8a:	6002      	str	r2, [r0, #0]
 800bc8c:	2500      	movs	r5, #0
 800bc8e:	e7f8      	b.n	800bc82 <_calloc_r+0x16>
 800bc90:	4621      	mov	r1, r4
 800bc92:	f7fe f837 	bl	8009d04 <memset>
 800bc96:	e7f4      	b.n	800bc82 <_calloc_r+0x16>

0800bc98 <_free_r>:
 800bc98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc9a:	2900      	cmp	r1, #0
 800bc9c:	d044      	beq.n	800bd28 <_free_r+0x90>
 800bc9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bca2:	9001      	str	r0, [sp, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f1a1 0404 	sub.w	r4, r1, #4
 800bcaa:	bfb8      	it	lt
 800bcac:	18e4      	addlt	r4, r4, r3
 800bcae:	f000 fd27 	bl	800c700 <__malloc_lock>
 800bcb2:	4a1e      	ldr	r2, [pc, #120]	; (800bd2c <_free_r+0x94>)
 800bcb4:	9801      	ldr	r0, [sp, #4]
 800bcb6:	6813      	ldr	r3, [r2, #0]
 800bcb8:	b933      	cbnz	r3, 800bcc8 <_free_r+0x30>
 800bcba:	6063      	str	r3, [r4, #4]
 800bcbc:	6014      	str	r4, [r2, #0]
 800bcbe:	b003      	add	sp, #12
 800bcc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcc4:	f000 bd22 	b.w	800c70c <__malloc_unlock>
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d908      	bls.n	800bcde <_free_r+0x46>
 800bccc:	6825      	ldr	r5, [r4, #0]
 800bcce:	1961      	adds	r1, r4, r5
 800bcd0:	428b      	cmp	r3, r1
 800bcd2:	bf01      	itttt	eq
 800bcd4:	6819      	ldreq	r1, [r3, #0]
 800bcd6:	685b      	ldreq	r3, [r3, #4]
 800bcd8:	1949      	addeq	r1, r1, r5
 800bcda:	6021      	streq	r1, [r4, #0]
 800bcdc:	e7ed      	b.n	800bcba <_free_r+0x22>
 800bcde:	461a      	mov	r2, r3
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	b10b      	cbz	r3, 800bce8 <_free_r+0x50>
 800bce4:	42a3      	cmp	r3, r4
 800bce6:	d9fa      	bls.n	800bcde <_free_r+0x46>
 800bce8:	6811      	ldr	r1, [r2, #0]
 800bcea:	1855      	adds	r5, r2, r1
 800bcec:	42a5      	cmp	r5, r4
 800bcee:	d10b      	bne.n	800bd08 <_free_r+0x70>
 800bcf0:	6824      	ldr	r4, [r4, #0]
 800bcf2:	4421      	add	r1, r4
 800bcf4:	1854      	adds	r4, r2, r1
 800bcf6:	42a3      	cmp	r3, r4
 800bcf8:	6011      	str	r1, [r2, #0]
 800bcfa:	d1e0      	bne.n	800bcbe <_free_r+0x26>
 800bcfc:	681c      	ldr	r4, [r3, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	6053      	str	r3, [r2, #4]
 800bd02:	4421      	add	r1, r4
 800bd04:	6011      	str	r1, [r2, #0]
 800bd06:	e7da      	b.n	800bcbe <_free_r+0x26>
 800bd08:	d902      	bls.n	800bd10 <_free_r+0x78>
 800bd0a:	230c      	movs	r3, #12
 800bd0c:	6003      	str	r3, [r0, #0]
 800bd0e:	e7d6      	b.n	800bcbe <_free_r+0x26>
 800bd10:	6825      	ldr	r5, [r4, #0]
 800bd12:	1961      	adds	r1, r4, r5
 800bd14:	428b      	cmp	r3, r1
 800bd16:	bf04      	itt	eq
 800bd18:	6819      	ldreq	r1, [r3, #0]
 800bd1a:	685b      	ldreq	r3, [r3, #4]
 800bd1c:	6063      	str	r3, [r4, #4]
 800bd1e:	bf04      	itt	eq
 800bd20:	1949      	addeq	r1, r1, r5
 800bd22:	6021      	streq	r1, [r4, #0]
 800bd24:	6054      	str	r4, [r2, #4]
 800bd26:	e7ca      	b.n	800bcbe <_free_r+0x26>
 800bd28:	b003      	add	sp, #12
 800bd2a:	bd30      	pop	{r4, r5, pc}
 800bd2c:	20001fc4 	.word	0x20001fc4

0800bd30 <sbrk_aligned>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	4e0e      	ldr	r6, [pc, #56]	; (800bd6c <sbrk_aligned+0x3c>)
 800bd34:	460c      	mov	r4, r1
 800bd36:	6831      	ldr	r1, [r6, #0]
 800bd38:	4605      	mov	r5, r0
 800bd3a:	b911      	cbnz	r1, 800bd42 <sbrk_aligned+0x12>
 800bd3c:	f000 fa2e 	bl	800c19c <_sbrk_r>
 800bd40:	6030      	str	r0, [r6, #0]
 800bd42:	4621      	mov	r1, r4
 800bd44:	4628      	mov	r0, r5
 800bd46:	f000 fa29 	bl	800c19c <_sbrk_r>
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	d00a      	beq.n	800bd64 <sbrk_aligned+0x34>
 800bd4e:	1cc4      	adds	r4, r0, #3
 800bd50:	f024 0403 	bic.w	r4, r4, #3
 800bd54:	42a0      	cmp	r0, r4
 800bd56:	d007      	beq.n	800bd68 <sbrk_aligned+0x38>
 800bd58:	1a21      	subs	r1, r4, r0
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 fa1e 	bl	800c19c <_sbrk_r>
 800bd60:	3001      	adds	r0, #1
 800bd62:	d101      	bne.n	800bd68 <sbrk_aligned+0x38>
 800bd64:	f04f 34ff 	mov.w	r4, #4294967295
 800bd68:	4620      	mov	r0, r4
 800bd6a:	bd70      	pop	{r4, r5, r6, pc}
 800bd6c:	20001fc8 	.word	0x20001fc8

0800bd70 <_malloc_r>:
 800bd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd74:	1ccd      	adds	r5, r1, #3
 800bd76:	f025 0503 	bic.w	r5, r5, #3
 800bd7a:	3508      	adds	r5, #8
 800bd7c:	2d0c      	cmp	r5, #12
 800bd7e:	bf38      	it	cc
 800bd80:	250c      	movcc	r5, #12
 800bd82:	2d00      	cmp	r5, #0
 800bd84:	4607      	mov	r7, r0
 800bd86:	db01      	blt.n	800bd8c <_malloc_r+0x1c>
 800bd88:	42a9      	cmp	r1, r5
 800bd8a:	d905      	bls.n	800bd98 <_malloc_r+0x28>
 800bd8c:	230c      	movs	r3, #12
 800bd8e:	603b      	str	r3, [r7, #0]
 800bd90:	2600      	movs	r6, #0
 800bd92:	4630      	mov	r0, r6
 800bd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd98:	4e2e      	ldr	r6, [pc, #184]	; (800be54 <_malloc_r+0xe4>)
 800bd9a:	f000 fcb1 	bl	800c700 <__malloc_lock>
 800bd9e:	6833      	ldr	r3, [r6, #0]
 800bda0:	461c      	mov	r4, r3
 800bda2:	bb34      	cbnz	r4, 800bdf2 <_malloc_r+0x82>
 800bda4:	4629      	mov	r1, r5
 800bda6:	4638      	mov	r0, r7
 800bda8:	f7ff ffc2 	bl	800bd30 <sbrk_aligned>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	4604      	mov	r4, r0
 800bdb0:	d14d      	bne.n	800be4e <_malloc_r+0xde>
 800bdb2:	6834      	ldr	r4, [r6, #0]
 800bdb4:	4626      	mov	r6, r4
 800bdb6:	2e00      	cmp	r6, #0
 800bdb8:	d140      	bne.n	800be3c <_malloc_r+0xcc>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	4631      	mov	r1, r6
 800bdbe:	4638      	mov	r0, r7
 800bdc0:	eb04 0803 	add.w	r8, r4, r3
 800bdc4:	f000 f9ea 	bl	800c19c <_sbrk_r>
 800bdc8:	4580      	cmp	r8, r0
 800bdca:	d13a      	bne.n	800be42 <_malloc_r+0xd2>
 800bdcc:	6821      	ldr	r1, [r4, #0]
 800bdce:	3503      	adds	r5, #3
 800bdd0:	1a6d      	subs	r5, r5, r1
 800bdd2:	f025 0503 	bic.w	r5, r5, #3
 800bdd6:	3508      	adds	r5, #8
 800bdd8:	2d0c      	cmp	r5, #12
 800bdda:	bf38      	it	cc
 800bddc:	250c      	movcc	r5, #12
 800bdde:	4629      	mov	r1, r5
 800bde0:	4638      	mov	r0, r7
 800bde2:	f7ff ffa5 	bl	800bd30 <sbrk_aligned>
 800bde6:	3001      	adds	r0, #1
 800bde8:	d02b      	beq.n	800be42 <_malloc_r+0xd2>
 800bdea:	6823      	ldr	r3, [r4, #0]
 800bdec:	442b      	add	r3, r5
 800bdee:	6023      	str	r3, [r4, #0]
 800bdf0:	e00e      	b.n	800be10 <_malloc_r+0xa0>
 800bdf2:	6822      	ldr	r2, [r4, #0]
 800bdf4:	1b52      	subs	r2, r2, r5
 800bdf6:	d41e      	bmi.n	800be36 <_malloc_r+0xc6>
 800bdf8:	2a0b      	cmp	r2, #11
 800bdfa:	d916      	bls.n	800be2a <_malloc_r+0xba>
 800bdfc:	1961      	adds	r1, r4, r5
 800bdfe:	42a3      	cmp	r3, r4
 800be00:	6025      	str	r5, [r4, #0]
 800be02:	bf18      	it	ne
 800be04:	6059      	strne	r1, [r3, #4]
 800be06:	6863      	ldr	r3, [r4, #4]
 800be08:	bf08      	it	eq
 800be0a:	6031      	streq	r1, [r6, #0]
 800be0c:	5162      	str	r2, [r4, r5]
 800be0e:	604b      	str	r3, [r1, #4]
 800be10:	4638      	mov	r0, r7
 800be12:	f104 060b 	add.w	r6, r4, #11
 800be16:	f000 fc79 	bl	800c70c <__malloc_unlock>
 800be1a:	f026 0607 	bic.w	r6, r6, #7
 800be1e:	1d23      	adds	r3, r4, #4
 800be20:	1af2      	subs	r2, r6, r3
 800be22:	d0b6      	beq.n	800bd92 <_malloc_r+0x22>
 800be24:	1b9b      	subs	r3, r3, r6
 800be26:	50a3      	str	r3, [r4, r2]
 800be28:	e7b3      	b.n	800bd92 <_malloc_r+0x22>
 800be2a:	6862      	ldr	r2, [r4, #4]
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	bf0c      	ite	eq
 800be30:	6032      	streq	r2, [r6, #0]
 800be32:	605a      	strne	r2, [r3, #4]
 800be34:	e7ec      	b.n	800be10 <_malloc_r+0xa0>
 800be36:	4623      	mov	r3, r4
 800be38:	6864      	ldr	r4, [r4, #4]
 800be3a:	e7b2      	b.n	800bda2 <_malloc_r+0x32>
 800be3c:	4634      	mov	r4, r6
 800be3e:	6876      	ldr	r6, [r6, #4]
 800be40:	e7b9      	b.n	800bdb6 <_malloc_r+0x46>
 800be42:	230c      	movs	r3, #12
 800be44:	603b      	str	r3, [r7, #0]
 800be46:	4638      	mov	r0, r7
 800be48:	f000 fc60 	bl	800c70c <__malloc_unlock>
 800be4c:	e7a1      	b.n	800bd92 <_malloc_r+0x22>
 800be4e:	6025      	str	r5, [r4, #0]
 800be50:	e7de      	b.n	800be10 <_malloc_r+0xa0>
 800be52:	bf00      	nop
 800be54:	20001fc4 	.word	0x20001fc4

0800be58 <__sfputc_r>:
 800be58:	6893      	ldr	r3, [r2, #8]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	b410      	push	{r4}
 800be60:	6093      	str	r3, [r2, #8]
 800be62:	da08      	bge.n	800be76 <__sfputc_r+0x1e>
 800be64:	6994      	ldr	r4, [r2, #24]
 800be66:	42a3      	cmp	r3, r4
 800be68:	db01      	blt.n	800be6e <__sfputc_r+0x16>
 800be6a:	290a      	cmp	r1, #10
 800be6c:	d103      	bne.n	800be76 <__sfputc_r+0x1e>
 800be6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be72:	f000 b9e7 	b.w	800c244 <__swbuf_r>
 800be76:	6813      	ldr	r3, [r2, #0]
 800be78:	1c58      	adds	r0, r3, #1
 800be7a:	6010      	str	r0, [r2, #0]
 800be7c:	7019      	strb	r1, [r3, #0]
 800be7e:	4608      	mov	r0, r1
 800be80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <__sfputs_r>:
 800be86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be88:	4606      	mov	r6, r0
 800be8a:	460f      	mov	r7, r1
 800be8c:	4614      	mov	r4, r2
 800be8e:	18d5      	adds	r5, r2, r3
 800be90:	42ac      	cmp	r4, r5
 800be92:	d101      	bne.n	800be98 <__sfputs_r+0x12>
 800be94:	2000      	movs	r0, #0
 800be96:	e007      	b.n	800bea8 <__sfputs_r+0x22>
 800be98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9c:	463a      	mov	r2, r7
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ffda 	bl	800be58 <__sfputc_r>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d1f3      	bne.n	800be90 <__sfputs_r+0xa>
 800bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800beac <_vfiprintf_r>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460d      	mov	r5, r1
 800beb2:	b09d      	sub	sp, #116	; 0x74
 800beb4:	4614      	mov	r4, r2
 800beb6:	4698      	mov	r8, r3
 800beb8:	4606      	mov	r6, r0
 800beba:	b118      	cbz	r0, 800bec4 <_vfiprintf_r+0x18>
 800bebc:	6983      	ldr	r3, [r0, #24]
 800bebe:	b90b      	cbnz	r3, 800bec4 <_vfiprintf_r+0x18>
 800bec0:	f7ff fa94 	bl	800b3ec <__sinit>
 800bec4:	4b89      	ldr	r3, [pc, #548]	; (800c0ec <_vfiprintf_r+0x240>)
 800bec6:	429d      	cmp	r5, r3
 800bec8:	d11b      	bne.n	800bf02 <_vfiprintf_r+0x56>
 800beca:	6875      	ldr	r5, [r6, #4]
 800becc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bece:	07d9      	lsls	r1, r3, #31
 800bed0:	d405      	bmi.n	800bede <_vfiprintf_r+0x32>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	059a      	lsls	r2, r3, #22
 800bed6:	d402      	bmi.n	800bede <_vfiprintf_r+0x32>
 800bed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beda:	f7ff fb2a 	bl	800b532 <__retarget_lock_acquire_recursive>
 800bede:	89ab      	ldrh	r3, [r5, #12]
 800bee0:	071b      	lsls	r3, r3, #28
 800bee2:	d501      	bpl.n	800bee8 <_vfiprintf_r+0x3c>
 800bee4:	692b      	ldr	r3, [r5, #16]
 800bee6:	b9eb      	cbnz	r3, 800bf24 <_vfiprintf_r+0x78>
 800bee8:	4629      	mov	r1, r5
 800beea:	4630      	mov	r0, r6
 800beec:	f000 fa0e 	bl	800c30c <__swsetup_r>
 800bef0:	b1c0      	cbz	r0, 800bf24 <_vfiprintf_r+0x78>
 800bef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef4:	07dc      	lsls	r4, r3, #31
 800bef6:	d50e      	bpl.n	800bf16 <_vfiprintf_r+0x6a>
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	b01d      	add	sp, #116	; 0x74
 800befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf02:	4b7b      	ldr	r3, [pc, #492]	; (800c0f0 <_vfiprintf_r+0x244>)
 800bf04:	429d      	cmp	r5, r3
 800bf06:	d101      	bne.n	800bf0c <_vfiprintf_r+0x60>
 800bf08:	68b5      	ldr	r5, [r6, #8]
 800bf0a:	e7df      	b.n	800becc <_vfiprintf_r+0x20>
 800bf0c:	4b79      	ldr	r3, [pc, #484]	; (800c0f4 <_vfiprintf_r+0x248>)
 800bf0e:	429d      	cmp	r5, r3
 800bf10:	bf08      	it	eq
 800bf12:	68f5      	ldreq	r5, [r6, #12]
 800bf14:	e7da      	b.n	800becc <_vfiprintf_r+0x20>
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	0598      	lsls	r0, r3, #22
 800bf1a:	d4ed      	bmi.n	800bef8 <_vfiprintf_r+0x4c>
 800bf1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf1e:	f7ff fb09 	bl	800b534 <__retarget_lock_release_recursive>
 800bf22:	e7e9      	b.n	800bef8 <_vfiprintf_r+0x4c>
 800bf24:	2300      	movs	r3, #0
 800bf26:	9309      	str	r3, [sp, #36]	; 0x24
 800bf28:	2320      	movs	r3, #32
 800bf2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf32:	2330      	movs	r3, #48	; 0x30
 800bf34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0f8 <_vfiprintf_r+0x24c>
 800bf38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf3c:	f04f 0901 	mov.w	r9, #1
 800bf40:	4623      	mov	r3, r4
 800bf42:	469a      	mov	sl, r3
 800bf44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf48:	b10a      	cbz	r2, 800bf4e <_vfiprintf_r+0xa2>
 800bf4a:	2a25      	cmp	r2, #37	; 0x25
 800bf4c:	d1f9      	bne.n	800bf42 <_vfiprintf_r+0x96>
 800bf4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf52:	d00b      	beq.n	800bf6c <_vfiprintf_r+0xc0>
 800bf54:	465b      	mov	r3, fp
 800bf56:	4622      	mov	r2, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7ff ff93 	bl	800be86 <__sfputs_r>
 800bf60:	3001      	adds	r0, #1
 800bf62:	f000 80aa 	beq.w	800c0ba <_vfiprintf_r+0x20e>
 800bf66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf68:	445a      	add	r2, fp
 800bf6a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 80a2 	beq.w	800c0ba <_vfiprintf_r+0x20e>
 800bf76:	2300      	movs	r3, #0
 800bf78:	f04f 32ff 	mov.w	r2, #4294967295
 800bf7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf80:	f10a 0a01 	add.w	sl, sl, #1
 800bf84:	9304      	str	r3, [sp, #16]
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf8c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf8e:	4654      	mov	r4, sl
 800bf90:	2205      	movs	r2, #5
 800bf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf96:	4858      	ldr	r0, [pc, #352]	; (800c0f8 <_vfiprintf_r+0x24c>)
 800bf98:	f7f4 f92a 	bl	80001f0 <memchr>
 800bf9c:	9a04      	ldr	r2, [sp, #16]
 800bf9e:	b9d8      	cbnz	r0, 800bfd8 <_vfiprintf_r+0x12c>
 800bfa0:	06d1      	lsls	r1, r2, #27
 800bfa2:	bf44      	itt	mi
 800bfa4:	2320      	movmi	r3, #32
 800bfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfaa:	0713      	lsls	r3, r2, #28
 800bfac:	bf44      	itt	mi
 800bfae:	232b      	movmi	r3, #43	; 0x2b
 800bfb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfba:	d015      	beq.n	800bfe8 <_vfiprintf_r+0x13c>
 800bfbc:	9a07      	ldr	r2, [sp, #28]
 800bfbe:	4654      	mov	r4, sl
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f04f 0c0a 	mov.w	ip, #10
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfcc:	3b30      	subs	r3, #48	; 0x30
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d94e      	bls.n	800c070 <_vfiprintf_r+0x1c4>
 800bfd2:	b1b0      	cbz	r0, 800c002 <_vfiprintf_r+0x156>
 800bfd4:	9207      	str	r2, [sp, #28]
 800bfd6:	e014      	b.n	800c002 <_vfiprintf_r+0x156>
 800bfd8:	eba0 0308 	sub.w	r3, r0, r8
 800bfdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	46a2      	mov	sl, r4
 800bfe6:	e7d2      	b.n	800bf8e <_vfiprintf_r+0xe2>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	1d19      	adds	r1, r3, #4
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	9103      	str	r1, [sp, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	bfbb      	ittet	lt
 800bff4:	425b      	neglt	r3, r3
 800bff6:	f042 0202 	orrlt.w	r2, r2, #2
 800bffa:	9307      	strge	r3, [sp, #28]
 800bffc:	9307      	strlt	r3, [sp, #28]
 800bffe:	bfb8      	it	lt
 800c000:	9204      	strlt	r2, [sp, #16]
 800c002:	7823      	ldrb	r3, [r4, #0]
 800c004:	2b2e      	cmp	r3, #46	; 0x2e
 800c006:	d10c      	bne.n	800c022 <_vfiprintf_r+0x176>
 800c008:	7863      	ldrb	r3, [r4, #1]
 800c00a:	2b2a      	cmp	r3, #42	; 0x2a
 800c00c:	d135      	bne.n	800c07a <_vfiprintf_r+0x1ce>
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	1d1a      	adds	r2, r3, #4
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	9203      	str	r2, [sp, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	bfb8      	it	lt
 800c01a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c01e:	3402      	adds	r4, #2
 800c020:	9305      	str	r3, [sp, #20]
 800c022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c108 <_vfiprintf_r+0x25c>
 800c026:	7821      	ldrb	r1, [r4, #0]
 800c028:	2203      	movs	r2, #3
 800c02a:	4650      	mov	r0, sl
 800c02c:	f7f4 f8e0 	bl	80001f0 <memchr>
 800c030:	b140      	cbz	r0, 800c044 <_vfiprintf_r+0x198>
 800c032:	2340      	movs	r3, #64	; 0x40
 800c034:	eba0 000a 	sub.w	r0, r0, sl
 800c038:	fa03 f000 	lsl.w	r0, r3, r0
 800c03c:	9b04      	ldr	r3, [sp, #16]
 800c03e:	4303      	orrs	r3, r0
 800c040:	3401      	adds	r4, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c048:	482c      	ldr	r0, [pc, #176]	; (800c0fc <_vfiprintf_r+0x250>)
 800c04a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c04e:	2206      	movs	r2, #6
 800c050:	f7f4 f8ce 	bl	80001f0 <memchr>
 800c054:	2800      	cmp	r0, #0
 800c056:	d03f      	beq.n	800c0d8 <_vfiprintf_r+0x22c>
 800c058:	4b29      	ldr	r3, [pc, #164]	; (800c100 <_vfiprintf_r+0x254>)
 800c05a:	bb1b      	cbnz	r3, 800c0a4 <_vfiprintf_r+0x1f8>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	3307      	adds	r3, #7
 800c060:	f023 0307 	bic.w	r3, r3, #7
 800c064:	3308      	adds	r3, #8
 800c066:	9303      	str	r3, [sp, #12]
 800c068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06a:	443b      	add	r3, r7
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
 800c06e:	e767      	b.n	800bf40 <_vfiprintf_r+0x94>
 800c070:	fb0c 3202 	mla	r2, ip, r2, r3
 800c074:	460c      	mov	r4, r1
 800c076:	2001      	movs	r0, #1
 800c078:	e7a5      	b.n	800bfc6 <_vfiprintf_r+0x11a>
 800c07a:	2300      	movs	r3, #0
 800c07c:	3401      	adds	r4, #1
 800c07e:	9305      	str	r3, [sp, #20]
 800c080:	4619      	mov	r1, r3
 800c082:	f04f 0c0a 	mov.w	ip, #10
 800c086:	4620      	mov	r0, r4
 800c088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c08c:	3a30      	subs	r2, #48	; 0x30
 800c08e:	2a09      	cmp	r2, #9
 800c090:	d903      	bls.n	800c09a <_vfiprintf_r+0x1ee>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0c5      	beq.n	800c022 <_vfiprintf_r+0x176>
 800c096:	9105      	str	r1, [sp, #20]
 800c098:	e7c3      	b.n	800c022 <_vfiprintf_r+0x176>
 800c09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c09e:	4604      	mov	r4, r0
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e7f0      	b.n	800c086 <_vfiprintf_r+0x1da>
 800c0a4:	ab03      	add	r3, sp, #12
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4b16      	ldr	r3, [pc, #88]	; (800c104 <_vfiprintf_r+0x258>)
 800c0ac:	a904      	add	r1, sp, #16
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f7fd fed0 	bl	8009e54 <_printf_float>
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	1c78      	adds	r0, r7, #1
 800c0b8:	d1d6      	bne.n	800c068 <_vfiprintf_r+0x1bc>
 800c0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0bc:	07d9      	lsls	r1, r3, #31
 800c0be:	d405      	bmi.n	800c0cc <_vfiprintf_r+0x220>
 800c0c0:	89ab      	ldrh	r3, [r5, #12]
 800c0c2:	059a      	lsls	r2, r3, #22
 800c0c4:	d402      	bmi.n	800c0cc <_vfiprintf_r+0x220>
 800c0c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0c8:	f7ff fa34 	bl	800b534 <__retarget_lock_release_recursive>
 800c0cc:	89ab      	ldrh	r3, [r5, #12]
 800c0ce:	065b      	lsls	r3, r3, #25
 800c0d0:	f53f af12 	bmi.w	800bef8 <_vfiprintf_r+0x4c>
 800c0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0d6:	e711      	b.n	800befc <_vfiprintf_r+0x50>
 800c0d8:	ab03      	add	r3, sp, #12
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	462a      	mov	r2, r5
 800c0de:	4b09      	ldr	r3, [pc, #36]	; (800c104 <_vfiprintf_r+0x258>)
 800c0e0:	a904      	add	r1, sp, #16
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f7fe f95a 	bl	800a39c <_printf_i>
 800c0e8:	e7e4      	b.n	800c0b4 <_vfiprintf_r+0x208>
 800c0ea:	bf00      	nop
 800c0ec:	0800c9e8 	.word	0x0800c9e8
 800c0f0:	0800ca08 	.word	0x0800ca08
 800c0f4:	0800c9c8 	.word	0x0800c9c8
 800c0f8:	0800cb84 	.word	0x0800cb84
 800c0fc:	0800cb8e 	.word	0x0800cb8e
 800c100:	08009e55 	.word	0x08009e55
 800c104:	0800be87 	.word	0x0800be87
 800c108:	0800cb8a 	.word	0x0800cb8a

0800c10c <_putc_r>:
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	460d      	mov	r5, r1
 800c110:	4614      	mov	r4, r2
 800c112:	4606      	mov	r6, r0
 800c114:	b118      	cbz	r0, 800c11e <_putc_r+0x12>
 800c116:	6983      	ldr	r3, [r0, #24]
 800c118:	b90b      	cbnz	r3, 800c11e <_putc_r+0x12>
 800c11a:	f7ff f967 	bl	800b3ec <__sinit>
 800c11e:	4b1c      	ldr	r3, [pc, #112]	; (800c190 <_putc_r+0x84>)
 800c120:	429c      	cmp	r4, r3
 800c122:	d124      	bne.n	800c16e <_putc_r+0x62>
 800c124:	6874      	ldr	r4, [r6, #4]
 800c126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c128:	07d8      	lsls	r0, r3, #31
 800c12a:	d405      	bmi.n	800c138 <_putc_r+0x2c>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	0599      	lsls	r1, r3, #22
 800c130:	d402      	bmi.n	800c138 <_putc_r+0x2c>
 800c132:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c134:	f7ff f9fd 	bl	800b532 <__retarget_lock_acquire_recursive>
 800c138:	68a3      	ldr	r3, [r4, #8]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	60a3      	str	r3, [r4, #8]
 800c140:	da05      	bge.n	800c14e <_putc_r+0x42>
 800c142:	69a2      	ldr	r2, [r4, #24]
 800c144:	4293      	cmp	r3, r2
 800c146:	db1c      	blt.n	800c182 <_putc_r+0x76>
 800c148:	b2eb      	uxtb	r3, r5
 800c14a:	2b0a      	cmp	r3, #10
 800c14c:	d019      	beq.n	800c182 <_putc_r+0x76>
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	6022      	str	r2, [r4, #0]
 800c154:	701d      	strb	r5, [r3, #0]
 800c156:	b2ed      	uxtb	r5, r5
 800c158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c15a:	07da      	lsls	r2, r3, #31
 800c15c:	d405      	bmi.n	800c16a <_putc_r+0x5e>
 800c15e:	89a3      	ldrh	r3, [r4, #12]
 800c160:	059b      	lsls	r3, r3, #22
 800c162:	d402      	bmi.n	800c16a <_putc_r+0x5e>
 800c164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c166:	f7ff f9e5 	bl	800b534 <__retarget_lock_release_recursive>
 800c16a:	4628      	mov	r0, r5
 800c16c:	bd70      	pop	{r4, r5, r6, pc}
 800c16e:	4b09      	ldr	r3, [pc, #36]	; (800c194 <_putc_r+0x88>)
 800c170:	429c      	cmp	r4, r3
 800c172:	d101      	bne.n	800c178 <_putc_r+0x6c>
 800c174:	68b4      	ldr	r4, [r6, #8]
 800c176:	e7d6      	b.n	800c126 <_putc_r+0x1a>
 800c178:	4b07      	ldr	r3, [pc, #28]	; (800c198 <_putc_r+0x8c>)
 800c17a:	429c      	cmp	r4, r3
 800c17c:	bf08      	it	eq
 800c17e:	68f4      	ldreq	r4, [r6, #12]
 800c180:	e7d1      	b.n	800c126 <_putc_r+0x1a>
 800c182:	4629      	mov	r1, r5
 800c184:	4622      	mov	r2, r4
 800c186:	4630      	mov	r0, r6
 800c188:	f000 f85c 	bl	800c244 <__swbuf_r>
 800c18c:	4605      	mov	r5, r0
 800c18e:	e7e3      	b.n	800c158 <_putc_r+0x4c>
 800c190:	0800c9e8 	.word	0x0800c9e8
 800c194:	0800ca08 	.word	0x0800ca08
 800c198:	0800c9c8 	.word	0x0800c9c8

0800c19c <_sbrk_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d06      	ldr	r5, [pc, #24]	; (800c1b8 <_sbrk_r+0x1c>)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	602b      	str	r3, [r5, #0]
 800c1a8:	f7f5 fd32 	bl	8001c10 <_sbrk>
 800c1ac:	1c43      	adds	r3, r0, #1
 800c1ae:	d102      	bne.n	800c1b6 <_sbrk_r+0x1a>
 800c1b0:	682b      	ldr	r3, [r5, #0]
 800c1b2:	b103      	cbz	r3, 800c1b6 <_sbrk_r+0x1a>
 800c1b4:	6023      	str	r3, [r4, #0]
 800c1b6:	bd38      	pop	{r3, r4, r5, pc}
 800c1b8:	20001fcc 	.word	0x20001fcc

0800c1bc <__sread>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	460c      	mov	r4, r1
 800c1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c4:	f000 faa8 	bl	800c718 <_read_r>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	bfab      	itete	ge
 800c1cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800c1d0:	181b      	addge	r3, r3, r0
 800c1d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1d6:	bfac      	ite	ge
 800c1d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1da:	81a3      	strhlt	r3, [r4, #12]
 800c1dc:	bd10      	pop	{r4, pc}

0800c1de <__swrite>:
 800c1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e2:	461f      	mov	r7, r3
 800c1e4:	898b      	ldrh	r3, [r1, #12]
 800c1e6:	05db      	lsls	r3, r3, #23
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	4616      	mov	r6, r2
 800c1ee:	d505      	bpl.n	800c1fc <__swrite+0x1e>
 800c1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f000 f9f8 	bl	800c5ec <_lseek_r>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c206:	81a3      	strh	r3, [r4, #12]
 800c208:	4632      	mov	r2, r6
 800c20a:	463b      	mov	r3, r7
 800c20c:	4628      	mov	r0, r5
 800c20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c212:	f000 b869 	b.w	800c2e8 <_write_r>

0800c216 <__sseek>:
 800c216:	b510      	push	{r4, lr}
 800c218:	460c      	mov	r4, r1
 800c21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21e:	f000 f9e5 	bl	800c5ec <_lseek_r>
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	89a3      	ldrh	r3, [r4, #12]
 800c226:	bf15      	itete	ne
 800c228:	6560      	strne	r0, [r4, #84]	; 0x54
 800c22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c232:	81a3      	strheq	r3, [r4, #12]
 800c234:	bf18      	it	ne
 800c236:	81a3      	strhne	r3, [r4, #12]
 800c238:	bd10      	pop	{r4, pc}

0800c23a <__sclose>:
 800c23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23e:	f000 b8f1 	b.w	800c424 <_close_r>
	...

0800c244 <__swbuf_r>:
 800c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c246:	460e      	mov	r6, r1
 800c248:	4614      	mov	r4, r2
 800c24a:	4605      	mov	r5, r0
 800c24c:	b118      	cbz	r0, 800c256 <__swbuf_r+0x12>
 800c24e:	6983      	ldr	r3, [r0, #24]
 800c250:	b90b      	cbnz	r3, 800c256 <__swbuf_r+0x12>
 800c252:	f7ff f8cb 	bl	800b3ec <__sinit>
 800c256:	4b21      	ldr	r3, [pc, #132]	; (800c2dc <__swbuf_r+0x98>)
 800c258:	429c      	cmp	r4, r3
 800c25a:	d12b      	bne.n	800c2b4 <__swbuf_r+0x70>
 800c25c:	686c      	ldr	r4, [r5, #4]
 800c25e:	69a3      	ldr	r3, [r4, #24]
 800c260:	60a3      	str	r3, [r4, #8]
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	071a      	lsls	r2, r3, #28
 800c266:	d52f      	bpl.n	800c2c8 <__swbuf_r+0x84>
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	b36b      	cbz	r3, 800c2c8 <__swbuf_r+0x84>
 800c26c:	6923      	ldr	r3, [r4, #16]
 800c26e:	6820      	ldr	r0, [r4, #0]
 800c270:	1ac0      	subs	r0, r0, r3
 800c272:	6963      	ldr	r3, [r4, #20]
 800c274:	b2f6      	uxtb	r6, r6
 800c276:	4283      	cmp	r3, r0
 800c278:	4637      	mov	r7, r6
 800c27a:	dc04      	bgt.n	800c286 <__swbuf_r+0x42>
 800c27c:	4621      	mov	r1, r4
 800c27e:	4628      	mov	r0, r5
 800c280:	f000 f966 	bl	800c550 <_fflush_r>
 800c284:	bb30      	cbnz	r0, 800c2d4 <__swbuf_r+0x90>
 800c286:	68a3      	ldr	r3, [r4, #8]
 800c288:	3b01      	subs	r3, #1
 800c28a:	60a3      	str	r3, [r4, #8]
 800c28c:	6823      	ldr	r3, [r4, #0]
 800c28e:	1c5a      	adds	r2, r3, #1
 800c290:	6022      	str	r2, [r4, #0]
 800c292:	701e      	strb	r6, [r3, #0]
 800c294:	6963      	ldr	r3, [r4, #20]
 800c296:	3001      	adds	r0, #1
 800c298:	4283      	cmp	r3, r0
 800c29a:	d004      	beq.n	800c2a6 <__swbuf_r+0x62>
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	07db      	lsls	r3, r3, #31
 800c2a0:	d506      	bpl.n	800c2b0 <__swbuf_r+0x6c>
 800c2a2:	2e0a      	cmp	r6, #10
 800c2a4:	d104      	bne.n	800c2b0 <__swbuf_r+0x6c>
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	f000 f951 	bl	800c550 <_fflush_r>
 800c2ae:	b988      	cbnz	r0, 800c2d4 <__swbuf_r+0x90>
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b4:	4b0a      	ldr	r3, [pc, #40]	; (800c2e0 <__swbuf_r+0x9c>)
 800c2b6:	429c      	cmp	r4, r3
 800c2b8:	d101      	bne.n	800c2be <__swbuf_r+0x7a>
 800c2ba:	68ac      	ldr	r4, [r5, #8]
 800c2bc:	e7cf      	b.n	800c25e <__swbuf_r+0x1a>
 800c2be:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <__swbuf_r+0xa0>)
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	bf08      	it	eq
 800c2c4:	68ec      	ldreq	r4, [r5, #12]
 800c2c6:	e7ca      	b.n	800c25e <__swbuf_r+0x1a>
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	f000 f81e 	bl	800c30c <__swsetup_r>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d0cb      	beq.n	800c26c <__swbuf_r+0x28>
 800c2d4:	f04f 37ff 	mov.w	r7, #4294967295
 800c2d8:	e7ea      	b.n	800c2b0 <__swbuf_r+0x6c>
 800c2da:	bf00      	nop
 800c2dc:	0800c9e8 	.word	0x0800c9e8
 800c2e0:	0800ca08 	.word	0x0800ca08
 800c2e4:	0800c9c8 	.word	0x0800c9c8

0800c2e8 <_write_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	; (800c308 <_write_r+0x20>)
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	602a      	str	r2, [r5, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f7f4 ffe8 	bl	80012cc <_write>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_write_r+0x1e>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b103      	cbz	r3, 800c306 <_write_r+0x1e>
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	20001fcc 	.word	0x20001fcc

0800c30c <__swsetup_r>:
 800c30c:	4b32      	ldr	r3, [pc, #200]	; (800c3d8 <__swsetup_r+0xcc>)
 800c30e:	b570      	push	{r4, r5, r6, lr}
 800c310:	681d      	ldr	r5, [r3, #0]
 800c312:	4606      	mov	r6, r0
 800c314:	460c      	mov	r4, r1
 800c316:	b125      	cbz	r5, 800c322 <__swsetup_r+0x16>
 800c318:	69ab      	ldr	r3, [r5, #24]
 800c31a:	b913      	cbnz	r3, 800c322 <__swsetup_r+0x16>
 800c31c:	4628      	mov	r0, r5
 800c31e:	f7ff f865 	bl	800b3ec <__sinit>
 800c322:	4b2e      	ldr	r3, [pc, #184]	; (800c3dc <__swsetup_r+0xd0>)
 800c324:	429c      	cmp	r4, r3
 800c326:	d10f      	bne.n	800c348 <__swsetup_r+0x3c>
 800c328:	686c      	ldr	r4, [r5, #4]
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c330:	0719      	lsls	r1, r3, #28
 800c332:	d42c      	bmi.n	800c38e <__swsetup_r+0x82>
 800c334:	06dd      	lsls	r5, r3, #27
 800c336:	d411      	bmi.n	800c35c <__swsetup_r+0x50>
 800c338:	2309      	movs	r3, #9
 800c33a:	6033      	str	r3, [r6, #0]
 800c33c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c340:	81a3      	strh	r3, [r4, #12]
 800c342:	f04f 30ff 	mov.w	r0, #4294967295
 800c346:	e03e      	b.n	800c3c6 <__swsetup_r+0xba>
 800c348:	4b25      	ldr	r3, [pc, #148]	; (800c3e0 <__swsetup_r+0xd4>)
 800c34a:	429c      	cmp	r4, r3
 800c34c:	d101      	bne.n	800c352 <__swsetup_r+0x46>
 800c34e:	68ac      	ldr	r4, [r5, #8]
 800c350:	e7eb      	b.n	800c32a <__swsetup_r+0x1e>
 800c352:	4b24      	ldr	r3, [pc, #144]	; (800c3e4 <__swsetup_r+0xd8>)
 800c354:	429c      	cmp	r4, r3
 800c356:	bf08      	it	eq
 800c358:	68ec      	ldreq	r4, [r5, #12]
 800c35a:	e7e6      	b.n	800c32a <__swsetup_r+0x1e>
 800c35c:	0758      	lsls	r0, r3, #29
 800c35e:	d512      	bpl.n	800c386 <__swsetup_r+0x7a>
 800c360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c362:	b141      	cbz	r1, 800c376 <__swsetup_r+0x6a>
 800c364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c368:	4299      	cmp	r1, r3
 800c36a:	d002      	beq.n	800c372 <__swsetup_r+0x66>
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff fc93 	bl	800bc98 <_free_r>
 800c372:	2300      	movs	r3, #0
 800c374:	6363      	str	r3, [r4, #52]	; 0x34
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c37c:	81a3      	strh	r3, [r4, #12]
 800c37e:	2300      	movs	r3, #0
 800c380:	6063      	str	r3, [r4, #4]
 800c382:	6923      	ldr	r3, [r4, #16]
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	f043 0308 	orr.w	r3, r3, #8
 800c38c:	81a3      	strh	r3, [r4, #12]
 800c38e:	6923      	ldr	r3, [r4, #16]
 800c390:	b94b      	cbnz	r3, 800c3a6 <__swsetup_r+0x9a>
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c39c:	d003      	beq.n	800c3a6 <__swsetup_r+0x9a>
 800c39e:	4621      	mov	r1, r4
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f95b 	bl	800c65c <__smakebuf_r>
 800c3a6:	89a0      	ldrh	r0, [r4, #12]
 800c3a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3ac:	f010 0301 	ands.w	r3, r0, #1
 800c3b0:	d00a      	beq.n	800c3c8 <__swsetup_r+0xbc>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60a3      	str	r3, [r4, #8]
 800c3b6:	6963      	ldr	r3, [r4, #20]
 800c3b8:	425b      	negs	r3, r3
 800c3ba:	61a3      	str	r3, [r4, #24]
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	b943      	cbnz	r3, 800c3d2 <__swsetup_r+0xc6>
 800c3c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3c4:	d1ba      	bne.n	800c33c <__swsetup_r+0x30>
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
 800c3c8:	0781      	lsls	r1, r0, #30
 800c3ca:	bf58      	it	pl
 800c3cc:	6963      	ldrpl	r3, [r4, #20]
 800c3ce:	60a3      	str	r3, [r4, #8]
 800c3d0:	e7f4      	b.n	800c3bc <__swsetup_r+0xb0>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	e7f7      	b.n	800c3c6 <__swsetup_r+0xba>
 800c3d6:	bf00      	nop
 800c3d8:	20000100 	.word	0x20000100
 800c3dc:	0800c9e8 	.word	0x0800c9e8
 800c3e0:	0800ca08 	.word	0x0800ca08
 800c3e4:	0800c9c8 	.word	0x0800c9c8

0800c3e8 <__assert_func>:
 800c3e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3ea:	4614      	mov	r4, r2
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	4b09      	ldr	r3, [pc, #36]	; (800c414 <__assert_func+0x2c>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	68d8      	ldr	r0, [r3, #12]
 800c3f6:	b14c      	cbz	r4, 800c40c <__assert_func+0x24>
 800c3f8:	4b07      	ldr	r3, [pc, #28]	; (800c418 <__assert_func+0x30>)
 800c3fa:	9100      	str	r1, [sp, #0]
 800c3fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c400:	4906      	ldr	r1, [pc, #24]	; (800c41c <__assert_func+0x34>)
 800c402:	462b      	mov	r3, r5
 800c404:	f000 f8e0 	bl	800c5c8 <fiprintf>
 800c408:	f000 f9a5 	bl	800c756 <abort>
 800c40c:	4b04      	ldr	r3, [pc, #16]	; (800c420 <__assert_func+0x38>)
 800c40e:	461c      	mov	r4, r3
 800c410:	e7f3      	b.n	800c3fa <__assert_func+0x12>
 800c412:	bf00      	nop
 800c414:	20000100 	.word	0x20000100
 800c418:	0800cb95 	.word	0x0800cb95
 800c41c:	0800cba2 	.word	0x0800cba2
 800c420:	0800cbd0 	.word	0x0800cbd0

0800c424 <_close_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d06      	ldr	r5, [pc, #24]	; (800c440 <_close_r+0x1c>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	f7f5 fbb9 	bl	8001ba6 <_close>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_close_r+0x1a>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_close_r+0x1a>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	20001fcc 	.word	0x20001fcc

0800c444 <__sflush_r>:
 800c444:	898a      	ldrh	r2, [r1, #12]
 800c446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c44a:	4605      	mov	r5, r0
 800c44c:	0710      	lsls	r0, r2, #28
 800c44e:	460c      	mov	r4, r1
 800c450:	d458      	bmi.n	800c504 <__sflush_r+0xc0>
 800c452:	684b      	ldr	r3, [r1, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	dc05      	bgt.n	800c464 <__sflush_r+0x20>
 800c458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dc02      	bgt.n	800c464 <__sflush_r+0x20>
 800c45e:	2000      	movs	r0, #0
 800c460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c466:	2e00      	cmp	r6, #0
 800c468:	d0f9      	beq.n	800c45e <__sflush_r+0x1a>
 800c46a:	2300      	movs	r3, #0
 800c46c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c470:	682f      	ldr	r7, [r5, #0]
 800c472:	602b      	str	r3, [r5, #0]
 800c474:	d032      	beq.n	800c4dc <__sflush_r+0x98>
 800c476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c478:	89a3      	ldrh	r3, [r4, #12]
 800c47a:	075a      	lsls	r2, r3, #29
 800c47c:	d505      	bpl.n	800c48a <__sflush_r+0x46>
 800c47e:	6863      	ldr	r3, [r4, #4]
 800c480:	1ac0      	subs	r0, r0, r3
 800c482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c484:	b10b      	cbz	r3, 800c48a <__sflush_r+0x46>
 800c486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c488:	1ac0      	subs	r0, r0, r3
 800c48a:	2300      	movs	r3, #0
 800c48c:	4602      	mov	r2, r0
 800c48e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c490:	6a21      	ldr	r1, [r4, #32]
 800c492:	4628      	mov	r0, r5
 800c494:	47b0      	blx	r6
 800c496:	1c43      	adds	r3, r0, #1
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	d106      	bne.n	800c4aa <__sflush_r+0x66>
 800c49c:	6829      	ldr	r1, [r5, #0]
 800c49e:	291d      	cmp	r1, #29
 800c4a0:	d82c      	bhi.n	800c4fc <__sflush_r+0xb8>
 800c4a2:	4a2a      	ldr	r2, [pc, #168]	; (800c54c <__sflush_r+0x108>)
 800c4a4:	40ca      	lsrs	r2, r1
 800c4a6:	07d6      	lsls	r6, r2, #31
 800c4a8:	d528      	bpl.n	800c4fc <__sflush_r+0xb8>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	6062      	str	r2, [r4, #4]
 800c4ae:	04d9      	lsls	r1, r3, #19
 800c4b0:	6922      	ldr	r2, [r4, #16]
 800c4b2:	6022      	str	r2, [r4, #0]
 800c4b4:	d504      	bpl.n	800c4c0 <__sflush_r+0x7c>
 800c4b6:	1c42      	adds	r2, r0, #1
 800c4b8:	d101      	bne.n	800c4be <__sflush_r+0x7a>
 800c4ba:	682b      	ldr	r3, [r5, #0]
 800c4bc:	b903      	cbnz	r3, 800c4c0 <__sflush_r+0x7c>
 800c4be:	6560      	str	r0, [r4, #84]	; 0x54
 800c4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4c2:	602f      	str	r7, [r5, #0]
 800c4c4:	2900      	cmp	r1, #0
 800c4c6:	d0ca      	beq.n	800c45e <__sflush_r+0x1a>
 800c4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4cc:	4299      	cmp	r1, r3
 800c4ce:	d002      	beq.n	800c4d6 <__sflush_r+0x92>
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	f7ff fbe1 	bl	800bc98 <_free_r>
 800c4d6:	2000      	movs	r0, #0
 800c4d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c4da:	e7c1      	b.n	800c460 <__sflush_r+0x1c>
 800c4dc:	6a21      	ldr	r1, [r4, #32]
 800c4de:	2301      	movs	r3, #1
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	47b0      	blx	r6
 800c4e4:	1c41      	adds	r1, r0, #1
 800c4e6:	d1c7      	bne.n	800c478 <__sflush_r+0x34>
 800c4e8:	682b      	ldr	r3, [r5, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d0c4      	beq.n	800c478 <__sflush_r+0x34>
 800c4ee:	2b1d      	cmp	r3, #29
 800c4f0:	d001      	beq.n	800c4f6 <__sflush_r+0xb2>
 800c4f2:	2b16      	cmp	r3, #22
 800c4f4:	d101      	bne.n	800c4fa <__sflush_r+0xb6>
 800c4f6:	602f      	str	r7, [r5, #0]
 800c4f8:	e7b1      	b.n	800c45e <__sflush_r+0x1a>
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c500:	81a3      	strh	r3, [r4, #12]
 800c502:	e7ad      	b.n	800c460 <__sflush_r+0x1c>
 800c504:	690f      	ldr	r7, [r1, #16]
 800c506:	2f00      	cmp	r7, #0
 800c508:	d0a9      	beq.n	800c45e <__sflush_r+0x1a>
 800c50a:	0793      	lsls	r3, r2, #30
 800c50c:	680e      	ldr	r6, [r1, #0]
 800c50e:	bf08      	it	eq
 800c510:	694b      	ldreq	r3, [r1, #20]
 800c512:	600f      	str	r7, [r1, #0]
 800c514:	bf18      	it	ne
 800c516:	2300      	movne	r3, #0
 800c518:	eba6 0807 	sub.w	r8, r6, r7
 800c51c:	608b      	str	r3, [r1, #8]
 800c51e:	f1b8 0f00 	cmp.w	r8, #0
 800c522:	dd9c      	ble.n	800c45e <__sflush_r+0x1a>
 800c524:	6a21      	ldr	r1, [r4, #32]
 800c526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c528:	4643      	mov	r3, r8
 800c52a:	463a      	mov	r2, r7
 800c52c:	4628      	mov	r0, r5
 800c52e:	47b0      	blx	r6
 800c530:	2800      	cmp	r0, #0
 800c532:	dc06      	bgt.n	800c542 <__sflush_r+0xfe>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295
 800c540:	e78e      	b.n	800c460 <__sflush_r+0x1c>
 800c542:	4407      	add	r7, r0
 800c544:	eba8 0800 	sub.w	r8, r8, r0
 800c548:	e7e9      	b.n	800c51e <__sflush_r+0xda>
 800c54a:	bf00      	nop
 800c54c:	20400001 	.word	0x20400001

0800c550 <_fflush_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	690b      	ldr	r3, [r1, #16]
 800c554:	4605      	mov	r5, r0
 800c556:	460c      	mov	r4, r1
 800c558:	b913      	cbnz	r3, 800c560 <_fflush_r+0x10>
 800c55a:	2500      	movs	r5, #0
 800c55c:	4628      	mov	r0, r5
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	b118      	cbz	r0, 800c56a <_fflush_r+0x1a>
 800c562:	6983      	ldr	r3, [r0, #24]
 800c564:	b90b      	cbnz	r3, 800c56a <_fflush_r+0x1a>
 800c566:	f7fe ff41 	bl	800b3ec <__sinit>
 800c56a:	4b14      	ldr	r3, [pc, #80]	; (800c5bc <_fflush_r+0x6c>)
 800c56c:	429c      	cmp	r4, r3
 800c56e:	d11b      	bne.n	800c5a8 <_fflush_r+0x58>
 800c570:	686c      	ldr	r4, [r5, #4]
 800c572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d0ef      	beq.n	800c55a <_fflush_r+0xa>
 800c57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c57c:	07d0      	lsls	r0, r2, #31
 800c57e:	d404      	bmi.n	800c58a <_fflush_r+0x3a>
 800c580:	0599      	lsls	r1, r3, #22
 800c582:	d402      	bmi.n	800c58a <_fflush_r+0x3a>
 800c584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c586:	f7fe ffd4 	bl	800b532 <__retarget_lock_acquire_recursive>
 800c58a:	4628      	mov	r0, r5
 800c58c:	4621      	mov	r1, r4
 800c58e:	f7ff ff59 	bl	800c444 <__sflush_r>
 800c592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c594:	07da      	lsls	r2, r3, #31
 800c596:	4605      	mov	r5, r0
 800c598:	d4e0      	bmi.n	800c55c <_fflush_r+0xc>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	059b      	lsls	r3, r3, #22
 800c59e:	d4dd      	bmi.n	800c55c <_fflush_r+0xc>
 800c5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5a2:	f7fe ffc7 	bl	800b534 <__retarget_lock_release_recursive>
 800c5a6:	e7d9      	b.n	800c55c <_fflush_r+0xc>
 800c5a8:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <_fflush_r+0x70>)
 800c5aa:	429c      	cmp	r4, r3
 800c5ac:	d101      	bne.n	800c5b2 <_fflush_r+0x62>
 800c5ae:	68ac      	ldr	r4, [r5, #8]
 800c5b0:	e7df      	b.n	800c572 <_fflush_r+0x22>
 800c5b2:	4b04      	ldr	r3, [pc, #16]	; (800c5c4 <_fflush_r+0x74>)
 800c5b4:	429c      	cmp	r4, r3
 800c5b6:	bf08      	it	eq
 800c5b8:	68ec      	ldreq	r4, [r5, #12]
 800c5ba:	e7da      	b.n	800c572 <_fflush_r+0x22>
 800c5bc:	0800c9e8 	.word	0x0800c9e8
 800c5c0:	0800ca08 	.word	0x0800ca08
 800c5c4:	0800c9c8 	.word	0x0800c9c8

0800c5c8 <fiprintf>:
 800c5c8:	b40e      	push	{r1, r2, r3}
 800c5ca:	b503      	push	{r0, r1, lr}
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	ab03      	add	r3, sp, #12
 800c5d0:	4805      	ldr	r0, [pc, #20]	; (800c5e8 <fiprintf+0x20>)
 800c5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d6:	6800      	ldr	r0, [r0, #0]
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	f7ff fc67 	bl	800beac <_vfiprintf_r>
 800c5de:	b002      	add	sp, #8
 800c5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5e4:	b003      	add	sp, #12
 800c5e6:	4770      	bx	lr
 800c5e8:	20000100 	.word	0x20000100

0800c5ec <_lseek_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d07      	ldr	r5, [pc, #28]	; (800c60c <_lseek_r+0x20>)
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	4608      	mov	r0, r1
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	602a      	str	r2, [r5, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f7f5 fafa 	bl	8001bf4 <_lseek>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_lseek_r+0x1e>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_lseek_r+0x1e>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	20001fcc 	.word	0x20001fcc

0800c610 <__swhatbuf_r>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	460e      	mov	r6, r1
 800c614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c618:	2900      	cmp	r1, #0
 800c61a:	b096      	sub	sp, #88	; 0x58
 800c61c:	4614      	mov	r4, r2
 800c61e:	461d      	mov	r5, r3
 800c620:	da08      	bge.n	800c634 <__swhatbuf_r+0x24>
 800c622:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	602a      	str	r2, [r5, #0]
 800c62a:	061a      	lsls	r2, r3, #24
 800c62c:	d410      	bmi.n	800c650 <__swhatbuf_r+0x40>
 800c62e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c632:	e00e      	b.n	800c652 <__swhatbuf_r+0x42>
 800c634:	466a      	mov	r2, sp
 800c636:	f000 f895 	bl	800c764 <_fstat_r>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	dbf1      	blt.n	800c622 <__swhatbuf_r+0x12>
 800c63e:	9a01      	ldr	r2, [sp, #4]
 800c640:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c644:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c648:	425a      	negs	r2, r3
 800c64a:	415a      	adcs	r2, r3
 800c64c:	602a      	str	r2, [r5, #0]
 800c64e:	e7ee      	b.n	800c62e <__swhatbuf_r+0x1e>
 800c650:	2340      	movs	r3, #64	; 0x40
 800c652:	2000      	movs	r0, #0
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	b016      	add	sp, #88	; 0x58
 800c658:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c65c <__smakebuf_r>:
 800c65c:	898b      	ldrh	r3, [r1, #12]
 800c65e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c660:	079d      	lsls	r5, r3, #30
 800c662:	4606      	mov	r6, r0
 800c664:	460c      	mov	r4, r1
 800c666:	d507      	bpl.n	800c678 <__smakebuf_r+0x1c>
 800c668:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	6123      	str	r3, [r4, #16]
 800c670:	2301      	movs	r3, #1
 800c672:	6163      	str	r3, [r4, #20]
 800c674:	b002      	add	sp, #8
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	ab01      	add	r3, sp, #4
 800c67a:	466a      	mov	r2, sp
 800c67c:	f7ff ffc8 	bl	800c610 <__swhatbuf_r>
 800c680:	9900      	ldr	r1, [sp, #0]
 800c682:	4605      	mov	r5, r0
 800c684:	4630      	mov	r0, r6
 800c686:	f7ff fb73 	bl	800bd70 <_malloc_r>
 800c68a:	b948      	cbnz	r0, 800c6a0 <__smakebuf_r+0x44>
 800c68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c690:	059a      	lsls	r2, r3, #22
 800c692:	d4ef      	bmi.n	800c674 <__smakebuf_r+0x18>
 800c694:	f023 0303 	bic.w	r3, r3, #3
 800c698:	f043 0302 	orr.w	r3, r3, #2
 800c69c:	81a3      	strh	r3, [r4, #12]
 800c69e:	e7e3      	b.n	800c668 <__smakebuf_r+0xc>
 800c6a0:	4b0d      	ldr	r3, [pc, #52]	; (800c6d8 <__smakebuf_r+0x7c>)
 800c6a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6a4:	89a3      	ldrh	r3, [r4, #12]
 800c6a6:	6020      	str	r0, [r4, #0]
 800c6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ac:	81a3      	strh	r3, [r4, #12]
 800c6ae:	9b00      	ldr	r3, [sp, #0]
 800c6b0:	6163      	str	r3, [r4, #20]
 800c6b2:	9b01      	ldr	r3, [sp, #4]
 800c6b4:	6120      	str	r0, [r4, #16]
 800c6b6:	b15b      	cbz	r3, 800c6d0 <__smakebuf_r+0x74>
 800c6b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6bc:	4630      	mov	r0, r6
 800c6be:	f000 f863 	bl	800c788 <_isatty_r>
 800c6c2:	b128      	cbz	r0, 800c6d0 <__smakebuf_r+0x74>
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f023 0303 	bic.w	r3, r3, #3
 800c6ca:	f043 0301 	orr.w	r3, r3, #1
 800c6ce:	81a3      	strh	r3, [r4, #12]
 800c6d0:	89a0      	ldrh	r0, [r4, #12]
 800c6d2:	4305      	orrs	r5, r0
 800c6d4:	81a5      	strh	r5, [r4, #12]
 800c6d6:	e7cd      	b.n	800c674 <__smakebuf_r+0x18>
 800c6d8:	0800b385 	.word	0x0800b385

0800c6dc <__ascii_mbtowc>:
 800c6dc:	b082      	sub	sp, #8
 800c6de:	b901      	cbnz	r1, 800c6e2 <__ascii_mbtowc+0x6>
 800c6e0:	a901      	add	r1, sp, #4
 800c6e2:	b142      	cbz	r2, 800c6f6 <__ascii_mbtowc+0x1a>
 800c6e4:	b14b      	cbz	r3, 800c6fa <__ascii_mbtowc+0x1e>
 800c6e6:	7813      	ldrb	r3, [r2, #0]
 800c6e8:	600b      	str	r3, [r1, #0]
 800c6ea:	7812      	ldrb	r2, [r2, #0]
 800c6ec:	1e10      	subs	r0, r2, #0
 800c6ee:	bf18      	it	ne
 800c6f0:	2001      	movne	r0, #1
 800c6f2:	b002      	add	sp, #8
 800c6f4:	4770      	bx	lr
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	e7fb      	b.n	800c6f2 <__ascii_mbtowc+0x16>
 800c6fa:	f06f 0001 	mvn.w	r0, #1
 800c6fe:	e7f8      	b.n	800c6f2 <__ascii_mbtowc+0x16>

0800c700 <__malloc_lock>:
 800c700:	4801      	ldr	r0, [pc, #4]	; (800c708 <__malloc_lock+0x8>)
 800c702:	f7fe bf16 	b.w	800b532 <__retarget_lock_acquire_recursive>
 800c706:	bf00      	nop
 800c708:	20001fc0 	.word	0x20001fc0

0800c70c <__malloc_unlock>:
 800c70c:	4801      	ldr	r0, [pc, #4]	; (800c714 <__malloc_unlock+0x8>)
 800c70e:	f7fe bf11 	b.w	800b534 <__retarget_lock_release_recursive>
 800c712:	bf00      	nop
 800c714:	20001fc0 	.word	0x20001fc0

0800c718 <_read_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d07      	ldr	r5, [pc, #28]	; (800c738 <_read_r+0x20>)
 800c71c:	4604      	mov	r4, r0
 800c71e:	4608      	mov	r0, r1
 800c720:	4611      	mov	r1, r2
 800c722:	2200      	movs	r2, #0
 800c724:	602a      	str	r2, [r5, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	f7f5 fa20 	bl	8001b6c <_read>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	d102      	bne.n	800c736 <_read_r+0x1e>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	b103      	cbz	r3, 800c736 <_read_r+0x1e>
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	bd38      	pop	{r3, r4, r5, pc}
 800c738:	20001fcc 	.word	0x20001fcc

0800c73c <__ascii_wctomb>:
 800c73c:	b149      	cbz	r1, 800c752 <__ascii_wctomb+0x16>
 800c73e:	2aff      	cmp	r2, #255	; 0xff
 800c740:	bf85      	ittet	hi
 800c742:	238a      	movhi	r3, #138	; 0x8a
 800c744:	6003      	strhi	r3, [r0, #0]
 800c746:	700a      	strbls	r2, [r1, #0]
 800c748:	f04f 30ff 	movhi.w	r0, #4294967295
 800c74c:	bf98      	it	ls
 800c74e:	2001      	movls	r0, #1
 800c750:	4770      	bx	lr
 800c752:	4608      	mov	r0, r1
 800c754:	4770      	bx	lr

0800c756 <abort>:
 800c756:	b508      	push	{r3, lr}
 800c758:	2006      	movs	r0, #6
 800c75a:	f000 f84d 	bl	800c7f8 <raise>
 800c75e:	2001      	movs	r0, #1
 800c760:	f7f5 f9fa 	bl	8001b58 <_exit>

0800c764 <_fstat_r>:
 800c764:	b538      	push	{r3, r4, r5, lr}
 800c766:	4d07      	ldr	r5, [pc, #28]	; (800c784 <_fstat_r+0x20>)
 800c768:	2300      	movs	r3, #0
 800c76a:	4604      	mov	r4, r0
 800c76c:	4608      	mov	r0, r1
 800c76e:	4611      	mov	r1, r2
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	f7f5 fa24 	bl	8001bbe <_fstat>
 800c776:	1c43      	adds	r3, r0, #1
 800c778:	d102      	bne.n	800c780 <_fstat_r+0x1c>
 800c77a:	682b      	ldr	r3, [r5, #0]
 800c77c:	b103      	cbz	r3, 800c780 <_fstat_r+0x1c>
 800c77e:	6023      	str	r3, [r4, #0]
 800c780:	bd38      	pop	{r3, r4, r5, pc}
 800c782:	bf00      	nop
 800c784:	20001fcc 	.word	0x20001fcc

0800c788 <_isatty_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d06      	ldr	r5, [pc, #24]	; (800c7a4 <_isatty_r+0x1c>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	f7f5 fa23 	bl	8001bde <_isatty>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_isatty_r+0x1a>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_isatty_r+0x1a>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	20001fcc 	.word	0x20001fcc

0800c7a8 <_raise_r>:
 800c7a8:	291f      	cmp	r1, #31
 800c7aa:	b538      	push	{r3, r4, r5, lr}
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	d904      	bls.n	800c7bc <_raise_r+0x14>
 800c7b2:	2316      	movs	r3, #22
 800c7b4:	6003      	str	r3, [r0, #0]
 800c7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c7be:	b112      	cbz	r2, 800c7c6 <_raise_r+0x1e>
 800c7c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7c4:	b94b      	cbnz	r3, 800c7da <_raise_r+0x32>
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f000 f830 	bl	800c82c <_getpid_r>
 800c7cc:	462a      	mov	r2, r5
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7d6:	f000 b817 	b.w	800c808 <_kill_r>
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d00a      	beq.n	800c7f4 <_raise_r+0x4c>
 800c7de:	1c59      	adds	r1, r3, #1
 800c7e0:	d103      	bne.n	800c7ea <_raise_r+0x42>
 800c7e2:	2316      	movs	r3, #22
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	e7e7      	b.n	800c7ba <_raise_r+0x12>
 800c7ea:	2400      	movs	r4, #0
 800c7ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	4798      	blx	r3
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e7e0      	b.n	800c7ba <_raise_r+0x12>

0800c7f8 <raise>:
 800c7f8:	4b02      	ldr	r3, [pc, #8]	; (800c804 <raise+0xc>)
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	6818      	ldr	r0, [r3, #0]
 800c7fe:	f7ff bfd3 	b.w	800c7a8 <_raise_r>
 800c802:	bf00      	nop
 800c804:	20000100 	.word	0x20000100

0800c808 <_kill_r>:
 800c808:	b538      	push	{r3, r4, r5, lr}
 800c80a:	4d07      	ldr	r5, [pc, #28]	; (800c828 <_kill_r+0x20>)
 800c80c:	2300      	movs	r3, #0
 800c80e:	4604      	mov	r4, r0
 800c810:	4608      	mov	r0, r1
 800c812:	4611      	mov	r1, r2
 800c814:	602b      	str	r3, [r5, #0]
 800c816:	f7f5 f98f 	bl	8001b38 <_kill>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d102      	bne.n	800c824 <_kill_r+0x1c>
 800c81e:	682b      	ldr	r3, [r5, #0]
 800c820:	b103      	cbz	r3, 800c824 <_kill_r+0x1c>
 800c822:	6023      	str	r3, [r4, #0]
 800c824:	bd38      	pop	{r3, r4, r5, pc}
 800c826:	bf00      	nop
 800c828:	20001fcc 	.word	0x20001fcc

0800c82c <_getpid_r>:
 800c82c:	f7f5 b97c 	b.w	8001b28 <_getpid>

0800c830 <_init>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	bf00      	nop
 800c834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c836:	bc08      	pop	{r3}
 800c838:	469e      	mov	lr, r3
 800c83a:	4770      	bx	lr

0800c83c <_fini>:
 800c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83e:	bf00      	nop
 800c840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c842:	bc08      	pop	{r3}
 800c844:	469e      	mov	lr, r3
 800c846:	4770      	bx	lr
